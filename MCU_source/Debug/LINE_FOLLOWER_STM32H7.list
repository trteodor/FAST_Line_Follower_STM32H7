
LINE_FOLLOWER_STM32H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  08019118  08019118  00029118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019968  08019968  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08019968  08019968  00029968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019970  08019970  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019970  08019970  00029970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019974  08019974  00029974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  24000000  08019978  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00023aac  240001f4  08019b6c  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24023ca0  08019b6c  00033ca0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046b51  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a29  00000000  00000000  00076d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  0007d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cd0  00000000  00000000  0007f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f33c  00000000  00000000  00081388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d3ec  00000000  00000000  000c06c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017eab1  00000000  00000000  000edab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0026c561  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009834  00000000  00000000  0026c5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080190fc 	.word	0x080190fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	080190fc 	.word	0x080190fc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <HAL_TIM_PeriodElapsedCallback>:
 *  HAL_TIM_Base_Start_IT(&htim4);
 *  If you want other remeber to change some variables in function below
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM5)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d111      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x36>
{

	if(t5>=50) //inkrement co 10ms 14i29min
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b31      	cmp	r3, #49	; 0x31
 8000a88:	d904      	bls.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		t5=0;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
		PC_BLE_TRANSMIT();	//Komunikacja pod komendy at aktywna gdy zdefiniuje SEND_DATA_TO_PC tak naprawde
 8000a90:	f000 f988 	bl	8000da4 <PC_BLE_TRANSMIT>
	}

  	DOPAMIECI();
 8000a94:	f000 f906 	bl	8000ca4 <DOPAMIECI>
	DOPAMIECI2();
 8000a98:	f000 f8a8 	bl	8000bec <DOPAMIECI2>

	t5++;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000aa4:	6013      	str	r3, [r2, #0]

}

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40000c00 	.word	0x40000c00
 8000ab4:	24000230 	.word	0x24000230

08000ab8 <BLE_INIT>:

void BLE_INIT()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	 HAL_TIM_Base_Start_IT(&htim5);
 8000abc:	4807      	ldr	r0, [pc, #28]	; (8000adc <BLE_INIT+0x24>)
 8000abe:	f00e ffdb 	bl	800fa78 <HAL_TIM_Base_Start_IT>

	  HAL_UART_Receive_IT(&huart2,&Received,1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4906      	ldr	r1, [pc, #24]	; (8000ae0 <BLE_INIT+0x28>)
 8000ac6:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <BLE_INIT+0x2c>)
 8000ac8:	f010 fbac 	bl	8011224 <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart5,&Received,1);
 8000acc:	2201      	movs	r2, #1
 8000ace:	4904      	ldr	r1, [pc, #16]	; (8000ae0 <BLE_INIT+0x28>)
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <BLE_INIT+0x30>)
 8000ad2:	f010 fba7 	bl	8011224 <HAL_UART_Receive_IT>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	24023ad4 	.word	0x24023ad4
 8000ae0:	2400030c 	.word	0x2400030c
 8000ae4:	24023bfc 	.word	0x24023bfc
 8000ae8:	24023b6c 	.word	0x24023b6c

08000aec <__io_putchar>:


int __io_putchar(int ch)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1);
 8000af4:	1d39      	adds	r1, r7, #4
 8000af6:	2301      	movs	r3, #1
 8000af8:	2201      	movs	r2, #1
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <__io_putchar+0x20>)
 8000afc:	f010 fa78 	bl	8010ff0 <HAL_UART_Transmit>
	//ITM_SendChar(ch);
			return ch;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	24023bfc 	.word	0x24023bfc

08000b10 <HAL_UART_RxCpltCallback>:


/*
 * Initialize the UART1 - 115200 and UART3 115200
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	if(huart->Instance== USART2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <HAL_UART_RxCpltCallback+0x40>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d106      	bne.n	8000b30 <HAL_UART_RxCpltCallback+0x20>
	{

		HAL_UART_Receive_IT(&huart2, &Received, 1); // Ponowne wlaczenie nasluchiwania
 8000b22:	2201      	movs	r2, #1
 8000b24:	490b      	ldr	r1, [pc, #44]	; (8000b54 <HAL_UART_RxCpltCallback+0x44>)
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <HAL_UART_RxCpltCallback+0x48>)
 8000b28:	f010 fb7c 	bl	8011224 <HAL_UART_Receive_IT>
		BUFOR2();
 8000b2c:	f000 f83c 	bl	8000ba8 <BUFOR2>

	}


		if(huart->Instance== UART5)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <HAL_UART_RxCpltCallback+0x4c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d106      	bne.n	8000b48 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(&huart5, &Received, 1); // Ponowne wlaczenie nasluchiwania
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4905      	ldr	r1, [pc, #20]	; (8000b54 <HAL_UART_RxCpltCallback+0x44>)
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <HAL_UART_RxCpltCallback+0x50>)
 8000b40:	f010 fb70 	bl	8011224 <HAL_UART_Receive_IT>
	BUFOR();
 8000b44:	f000 f80e 	bl	8000b64 <BUFOR>
	}
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40004400 	.word	0x40004400
 8000b54:	2400030c 	.word	0x2400030c
 8000b58:	24023bfc 	.word	0x24023bfc
 8000b5c:	40005000 	.word	0x40005000
 8000b60:	24023b6c 	.word	0x24023b6c

08000b64 <BUFOR>:

void BUFOR()

{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	REC_DANE_PC[znacznik]=Received;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <BUFOR+0x30>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <BUFOR+0x34>)
 8000b6e:	7811      	ldrb	r1, [r2, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <BUFOR+0x38>)
 8000b72:	54d1      	strb	r1, [r2, r3]
	znacznik++;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <BUFOR+0x30>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <BUFOR+0x30>)
 8000b7c:	6013      	str	r3, [r2, #0]

	ZapamientanyCzas=HAL_GetTick();
 8000b7e:	f005 f9af 	bl	8005ee0 <HAL_GetTick>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <BUFOR+0x3c>)
 8000b86:	6013      	str	r3, [r2, #0]
	znacznik2=1;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <BUFOR+0x40>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	24000210 	.word	0x24000210
 8000b98:	2400030c 	.word	0x2400030c
 8000b9c:	2400043c 	.word	0x2400043c
 8000ba0:	24000220 	.word	0x24000220
 8000ba4:	24000214 	.word	0x24000214

08000ba8 <BUFOR2>:
void BUFOR2()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	REC_D_BLE[znacznik3]=Received;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <BUFOR2+0x30>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <BUFOR2+0x34>)
 8000bb2:	7811      	ldrb	r1, [r2, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <BUFOR2+0x38>)
 8000bb6:	54d1      	strb	r1, [r2, r3]
	znacznik3++;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <BUFOR2+0x30>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <BUFOR2+0x30>)
 8000bc0:	6013      	str	r3, [r2, #0]
	ZapamientanyCzas3=HAL_GetTick();
 8000bc2:	f005 f98d 	bl	8005ee0 <HAL_GetTick>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <BUFOR2+0x3c>)
 8000bca:	6013      	str	r3, [r2, #0]
	znacznik4=1;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <BUFOR2+0x40>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	24000224 	.word	0x24000224
 8000bdc:	2400030c 	.word	0x2400030c
 8000be0:	24000310 	.word	0x24000310
 8000be4:	2400022c 	.word	0x2400022c
 8000be8:	24000228 	.word	0x24000228

08000bec <DOPAMIECI2>:


void DOPAMIECI2()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	if(znacznik4==1)
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <DOPAMIECI2+0x98>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d140      	bne.n	8000c7c <DOPAMIECI2+0x90>
	{

		//Copying data to second buffer
Aktualnyczas=HAL_GetTick();
 8000bfa:	f005 f971 	bl	8005ee0 <HAL_GetTick>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <DOPAMIECI2+0x9c>)
 8000c02:	6013      	str	r3, [r2, #0]

if((Aktualnyczas-ZapamientanyCzas3)>30)
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <DOPAMIECI2+0x9c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <DOPAMIECI2+0xa0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b1e      	cmp	r3, #30
 8000c10:	d934      	bls.n	8000c7c <DOPAMIECI2+0x90>
{
	znacznik4=0;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <DOPAMIECI2+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
	int i=0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
	while(i<80)
 8000c1c:	e007      	b.n	8000c2e <DOPAMIECI2+0x42>
	{
		DANE_BLE[i]=0;
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <DOPAMIECI2+0xa4>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4413      	add	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
		i++;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
	while(i<80)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b4f      	cmp	r3, #79	; 0x4f
 8000c32:	ddf4      	ble.n	8000c1e <DOPAMIECI2+0x32>
	}
	i=0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]

	while(i<znacznik3)
 8000c38:	e00b      	b.n	8000c52 <DOPAMIECI2+0x66>
	{
	DANE_BLE[i]=REC_D_BLE[i];
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <DOPAMIECI2+0xa8>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	7819      	ldrb	r1, [r3, #0]
 8000c42:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <DOPAMIECI2+0xa4>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	460a      	mov	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
		i++;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	607b      	str	r3, [r7, #4]
	while(i<znacznik3)
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <DOPAMIECI2+0xac>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbee      	blt.n	8000c3a <DOPAMIECI2+0x4e>
	}
	size_BLE=i;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <DOPAMIECI2+0xb0>)
 8000c62:	701a      	strb	r2, [r3, #0]
	znacznik3=0;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <DOPAMIECI2+0xac>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
	Received=0;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <DOPAMIECI2+0xb4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]

	//@@@@@@@@@@@@@@@@@@@@@@@
	KOMENDY_BLE();
 8000c70:	f000 ffa2 	bl	8001bb8 <KOMENDY_BLE>
	//@@@@@@@@@@@@@@@@@@@@@@@

	ZapamientanyCzas3=Aktualnyczas;
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <DOPAMIECI2+0x9c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <DOPAMIECI2+0xa0>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
	}
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	24000228 	.word	0x24000228
 8000c88:	2400021c 	.word	0x2400021c
 8000c8c:	2400022c 	.word	0x2400022c
 8000c90:	240003a0 	.word	0x240003a0
 8000c94:	24000310 	.word	0x24000310
 8000c98:	24000224 	.word	0x24000224
 8000c9c:	24000218 	.word	0x24000218
 8000ca0:	2400030c 	.word	0x2400030c

08000ca4 <DOPAMIECI>:

void DOPAMIECI()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	if(znacznik2==1)
 8000caa:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <DOPAMIECI+0x94>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d13e      	bne.n	8000d30 <DOPAMIECI+0x8c>
	{



//Copying data to second buffer
Aktualnyczas=HAL_GetTick();
 8000cb2:	f005 f915 	bl	8005ee0 <HAL_GetTick>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a20      	ldr	r2, [pc, #128]	; (8000d3c <DOPAMIECI+0x98>)
 8000cba:	6013      	str	r3, [r2, #0]
if((Aktualnyczas-ZapamientanyCzas)>30)
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <DOPAMIECI+0x98>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <DOPAMIECI+0x9c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b1e      	cmp	r3, #30
 8000cc8:	d932      	bls.n	8000d30 <DOPAMIECI+0x8c>
{
	znacznik2=0;
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <DOPAMIECI+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
	int i=0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
	while(i<80)
 8000cd4:	e007      	b.n	8000ce6 <DOPAMIECI+0x42>
	{
		DANE_PCE[i]=0;
 8000cd6:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <DOPAMIECI+0xa0>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
		i++;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	607b      	str	r3, [r7, #4]
	while(i<80)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b4f      	cmp	r3, #79	; 0x4f
 8000cea:	ddf4      	ble.n	8000cd6 <DOPAMIECI+0x32>
	}
	i=0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]

	while(i<znacznik)
 8000cf0:	e00b      	b.n	8000d0a <DOPAMIECI+0x66>
	{
	DANE_PCE[i]=REC_DANE_PC[i];
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <DOPAMIECI+0xa4>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	7819      	ldrb	r1, [r3, #0]
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <DOPAMIECI+0xa0>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4413      	add	r3, r2
 8000d00:	460a      	mov	r2, r1
 8000d02:	701a      	strb	r2, [r3, #0]
		i++;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3301      	adds	r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
	while(i<znacznik)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <DOPAMIECI+0xa8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbee      	blt.n	8000cf2 <DOPAMIECI+0x4e>
	}
	//DANE_PCE[i]='\r';
	//DANE_PCE[i+1]='\n';
	size_PC=i;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <DOPAMIECI+0xac>)
 8000d1a:	701a      	strb	r2, [r3, #0]
	znacznik=0;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <DOPAMIECI+0xa8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
	Received=0;
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <DOPAMIECI+0xb0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]

	ZapamientanyCzas=Aktualnyczas;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <DOPAMIECI+0x98>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <DOPAMIECI+0x9c>)
 8000d2e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	24000214 	.word	0x24000214
 8000d3c:	2400021c 	.word	0x2400021c
 8000d40:	24000220 	.word	0x24000220
 8000d44:	240003c0 	.word	0x240003c0
 8000d48:	2400043c 	.word	0x2400043c
 8000d4c:	24000210 	.word	0x24000210
 8000d50:	24000219 	.word	0x24000219
 8000d54:	2400030c 	.word	0x2400030c

08000d58 <DO_BLE>:


void DO_BLE(char *String)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	for(int i=0; i<40; i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	e007      	b.n	8000d76 <DO_BLE+0x1e>
	{
		ToSendAPP[i]=0;
 8000d66:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <DO_BLE+0x44>)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<40; i++)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3301      	adds	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b27      	cmp	r3, #39	; 0x27
 8000d7a:	ddf4      	ble.n	8000d66 <DO_BLE+0xe>
	}

	int size=sprintf(  (char*)ToSendAPP,(char*)String);
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <DO_BLE+0x44>)
 8000d80:	f013 fe26 	bl	80149d0 <siprintf>
 8000d84:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit_IT(&huart2, ToSendAPP, size);
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4903      	ldr	r1, [pc, #12]	; (8000d9c <DO_BLE+0x44>)
 8000d8e:	4804      	ldr	r0, [pc, #16]	; (8000da0 <DO_BLE+0x48>)
 8000d90:	f010 f9c4 	bl	801111c <HAL_UART_Transmit_IT>
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	24000380 	.word	0x24000380
 8000da0:	24023bfc 	.word	0x24023bfc

08000da4 <PC_BLE_TRANSMIT>:
}

#else

void PC_BLE_TRANSMIT()
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <OBLICZ_BLAD>:
int fl_Time_PD_Reset=0;

uint32_t CzasZ_CZ=0;

float OBLICZ_BLAD()
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0

	flaga_ENK=0;
 8000dba:	4b8d      	ldr	r3, [pc, #564]	; (8000ff0 <OBLICZ_BLAD+0x23c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
	int SKRZ=0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]

	for(int i=2; i<6; i++)
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	e01c      	b.n	8000e04 <OBLICZ_BLAD+0x50>
	{

		if (DANE_Z_CZUJNIKOW[i]>2500)
 8000dca:	4a8a      	ldr	r2, [pc, #552]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d902      	bls.n	8000de0 <OBLICZ_BLAD+0x2c>
		{
			SKRZ++;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
		}
		if(SKRZ==4)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d10b      	bne.n	8000dfe <OBLICZ_BLAD+0x4a>
		{
			ERR_CZ=0;
 8000de6:	4b84      	ldr	r3, [pc, #528]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000de8:	f04f 0200 	mov.w	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
			SKRZ=0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
			flaga_ENK=1;
 8000df2:	4b7f      	ldr	r3, [pc, #508]	; (8000ff0 <OBLICZ_BLAD+0x23c>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
			return ERR_CZ;
 8000df8:	4b7f      	ldr	r3, [pc, #508]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	e175      	b.n	80010ea <OBLICZ_BLAD+0x336>
	for(int i=2; i<6; i++)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	dddf      	ble.n	8000dca <OBLICZ_BLAD+0x16>
		}
	}

	if(DANE_Z_CZUJNIKOW[3]>czcz4 && DANE_Z_CZUJNIKOW[4]>czcz5)	{		ERR_CZ=0;  	return ERR_CZ; 	}
 8000e0a:	4b7a      	ldr	r3, [pc, #488]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e0c:	88db      	ldrh	r3, [r3, #6]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b7a      	ldr	r3, [pc, #488]	; (8000ffc <OBLICZ_BLAD+0x248>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dd0d      	ble.n	8000e34 <OBLICZ_BLAD+0x80>
 8000e18:	4b76      	ldr	r3, [pc, #472]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e1a:	891b      	ldrh	r3, [r3, #8]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b78      	ldr	r3, [pc, #480]	; (8001000 <OBLICZ_BLAD+0x24c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	dd06      	ble.n	8000e34 <OBLICZ_BLAD+0x80>
 8000e26:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	4b72      	ldr	r3, [pc, #456]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	e15a      	b.n	80010ea <OBLICZ_BLAD+0x336>

	if(DANE_Z_CZUJNIKOW[0]>czcz1 && DANE_Z_CZUJNIKOW[1]>czcz2)	{		ERR_CZ=er6;  OST_KIER_BL=1;	return ERR_CZ; 	}
 8000e34:	4b6f      	ldr	r3, [pc, #444]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b72      	ldr	r3, [pc, #456]	; (8001004 <OBLICZ_BLAD+0x250>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	dd10      	ble.n	8000e64 <OBLICZ_BLAD+0xb0>
 8000e42:	4b6c      	ldr	r3, [pc, #432]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e44:	885b      	ldrh	r3, [r3, #2]
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b6f      	ldr	r3, [pc, #444]	; (8001008 <OBLICZ_BLAD+0x254>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dd09      	ble.n	8000e64 <OBLICZ_BLAD+0xb0>
 8000e50:	4b6e      	ldr	r3, [pc, #440]	; (800100c <OBLICZ_BLAD+0x258>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a68      	ldr	r2, [pc, #416]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b6d      	ldr	r3, [pc, #436]	; (8001010 <OBLICZ_BLAD+0x25c>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	4b66      	ldr	r3, [pc, #408]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	e142      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[1]>czcz2 && DANE_Z_CZUJNIKOW[2]>czcz3)	{		ERR_CZ=er4;  	return ERR_CZ; 	}
 8000e64:	4b63      	ldr	r3, [pc, #396]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e66:	885b      	ldrh	r3, [r3, #2]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b67      	ldr	r3, [pc, #412]	; (8001008 <OBLICZ_BLAD+0x254>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	dd0d      	ble.n	8000e8e <OBLICZ_BLAD+0xda>
 8000e72:	4b60      	ldr	r3, [pc, #384]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b66      	ldr	r3, [pc, #408]	; (8001014 <OBLICZ_BLAD+0x260>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dd06      	ble.n	8000e8e <OBLICZ_BLAD+0xda>
 8000e80:	4b65      	ldr	r3, [pc, #404]	; (8001018 <OBLICZ_BLAD+0x264>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a5c      	ldr	r2, [pc, #368]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b5b      	ldr	r3, [pc, #364]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	e12d      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[2]>czcz3 && DANE_Z_CZUJNIKOW[3]>czcz4)	{		ERR_CZ=er2;  	return ERR_CZ; 	}
 8000e8e:	4b59      	ldr	r3, [pc, #356]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e90:	889b      	ldrh	r3, [r3, #4]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b5f      	ldr	r3, [pc, #380]	; (8001014 <OBLICZ_BLAD+0x260>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dd0d      	ble.n	8000eb8 <OBLICZ_BLAD+0x104>
 8000e9c:	4b55      	ldr	r3, [pc, #340]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e9e:	88db      	ldrh	r3, [r3, #6]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b56      	ldr	r3, [pc, #344]	; (8000ffc <OBLICZ_BLAD+0x248>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	dd06      	ble.n	8000eb8 <OBLICZ_BLAD+0x104>
 8000eaa:	4b5c      	ldr	r3, [pc, #368]	; (800101c <OBLICZ_BLAD+0x268>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a52      	ldr	r2, [pc, #328]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b51      	ldr	r3, [pc, #324]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	e118      	b.n	80010ea <OBLICZ_BLAD+0x336>


	if(DANE_Z_CZUJNIKOW[7]>czcz8 && DANE_Z_CZUJNIKOW[6]>czcz7)	{		ERR_CZ=-er6; OST_KIER_BL=-1; 	return ERR_CZ; 	}
 8000eb8:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000eba:	89db      	ldrh	r3, [r3, #14]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b58      	ldr	r3, [pc, #352]	; (8001020 <OBLICZ_BLAD+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	dd15      	ble.n	8000ef2 <OBLICZ_BLAD+0x13e>
 8000ec6:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000ec8:	899b      	ldrh	r3, [r3, #12]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b55      	ldr	r3, [pc, #340]	; (8001024 <OBLICZ_BLAD+0x270>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dd0e      	ble.n	8000ef2 <OBLICZ_BLAD+0x13e>
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <OBLICZ_BLAD+0x258>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	eef1 7a67 	vneg.f32	s15, s15
 8000ede:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000ee0:	edc3 7a00 	vstr	s15, [r3]
 8000ee4:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <OBLICZ_BLAD+0x25c>)
 8000ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	e0fb      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[6]>czcz7 && DANE_Z_CZUJNIKOW[5]>czcz6)	{		ERR_CZ=-er4; 	return ERR_CZ; 	}
 8000ef2:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000ef4:	899b      	ldrh	r3, [r3, #12]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <OBLICZ_BLAD+0x270>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dd11      	ble.n	8000f24 <OBLICZ_BLAD+0x170>
 8000f00:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f02:	895b      	ldrh	r3, [r3, #10]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b48      	ldr	r3, [pc, #288]	; (8001028 <OBLICZ_BLAD+0x274>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	dd0a      	ble.n	8000f24 <OBLICZ_BLAD+0x170>
 8000f0e:	4b42      	ldr	r3, [pc, #264]	; (8001018 <OBLICZ_BLAD+0x264>)
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	eef1 7a67 	vneg.f32	s15, s15
 8000f18:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f1a:	edc3 7a00 	vstr	s15, [r3]
 8000f1e:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	e0e2      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[5]>czcz6 && DANE_Z_CZUJNIKOW[4]>czcz5)	{		ERR_CZ=-er2;  	return ERR_CZ; 	}
 8000f24:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f26:	895b      	ldrh	r3, [r3, #10]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <OBLICZ_BLAD+0x274>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	dd11      	ble.n	8000f56 <OBLICZ_BLAD+0x1a2>
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f34:	891b      	ldrh	r3, [r3, #8]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b31      	ldr	r3, [pc, #196]	; (8001000 <OBLICZ_BLAD+0x24c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dd0a      	ble.n	8000f56 <OBLICZ_BLAD+0x1a2>
 8000f40:	4b36      	ldr	r3, [pc, #216]	; (800101c <OBLICZ_BLAD+0x268>)
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	eef1 7a67 	vneg.f32	s15, s15
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f4c:	edc3 7a00 	vstr	s15, [r3]
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	e0c9      	b.n	80010ea <OBLICZ_BLAD+0x336>


	if(DANE_Z_CZUJNIKOW[0]>czcz1)	{		ERR_CZ=er7;   OST_KIER_BL=1; 	 return ERR_CZ; 	}
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <OBLICZ_BLAD+0x250>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dd09      	ble.n	8000f78 <OBLICZ_BLAD+0x1c4>
 8000f64:	4b31      	ldr	r3, [pc, #196]	; (800102c <OBLICZ_BLAD+0x278>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <OBLICZ_BLAD+0x25c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	e0b8      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[1]>czcz2)	{		ERR_CZ=er5;     return ERR_CZ;		}
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f7a:	885b      	ldrh	r3, [r3, #2]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <OBLICZ_BLAD+0x254>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	dd06      	ble.n	8000f94 <OBLICZ_BLAD+0x1e0>
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <OBLICZ_BLAD+0x27c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	e0aa      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[2]>czcz3)	{		ERR_CZ=er3;  	return ERR_CZ; 	}
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f96:	889b      	ldrh	r3, [r3, #4]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <OBLICZ_BLAD+0x260>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dd06      	ble.n	8000fb0 <OBLICZ_BLAD+0x1fc>
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <OBLICZ_BLAD+0x280>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	e09c      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[3]>czcz4)	{		ERR_CZ=er1;  	return ERR_CZ; 	}
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000fb2:	88db      	ldrh	r3, [r3, #6]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <OBLICZ_BLAD+0x248>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	dd06      	ble.n	8000fcc <OBLICZ_BLAD+0x218>
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <OBLICZ_BLAD+0x284>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	e08e      	b.n	80010ea <OBLICZ_BLAD+0x336>

	if(DANE_Z_CZUJNIKOW[4]>czcz5)	{		ERR_CZ=-er1;  	return ERR_CZ; 	}
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000fce:	891b      	ldrh	r3, [r3, #8]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <OBLICZ_BLAD+0x24c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dd30      	ble.n	800103c <OBLICZ_BLAD+0x288>
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <OBLICZ_BLAD+0x284>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eef1 7a67 	vneg.f32	s15, s15
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fe6:	edc3 7a00 	vstr	s15, [r3]
 8000fea:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	e07c      	b.n	80010ea <OBLICZ_BLAD+0x336>
 8000ff0:	24000250 	.word	0x24000250
 8000ff4:	24000480 	.word	0x24000480
 8000ff8:	24000234 	.word	0x24000234
 8000ffc:	24000460 	.word	0x24000460
 8001000:	240004a4 	.word	0x240004a4
 8001004:	24000490 	.word	0x24000490
 8001008:	240004a0 	.word	0x240004a0
 800100c:	24000498 	.word	0x24000498
 8001010:	24000238 	.word	0x24000238
 8001014:	24000474 	.word	0x24000474
 8001018:	2400045c 	.word	0x2400045c
 800101c:	24000470 	.word	0x24000470
 8001020:	24000464 	.word	0x24000464
 8001024:	2400046c 	.word	0x2400046c
 8001028:	24000494 	.word	0x24000494
 800102c:	240004a8 	.word	0x240004a8
 8001030:	2400049c 	.word	0x2400049c
 8001034:	2400047c 	.word	0x2400047c
 8001038:	24000478 	.word	0x24000478
	if(DANE_Z_CZUJNIKOW[5]>czcz6)	{		ERR_CZ=-er3;  	return ERR_CZ; 	}
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <OBLICZ_BLAD+0x348>)
 800103e:	895b      	ldrh	r3, [r3, #10]
 8001040:	461a      	mov	r2, r3
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <OBLICZ_BLAD+0x34c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	dd0a      	ble.n	8001060 <OBLICZ_BLAD+0x2ac>
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <OBLICZ_BLAD+0x350>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	eef1 7a67 	vneg.f32	s15, s15
 8001054:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <OBLICZ_BLAD+0x354>)
 8001056:	edc3 7a00 	vstr	s15, [r3]
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <OBLICZ_BLAD+0x354>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	e044      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[6]>czcz7)	{		ERR_CZ=-er5;    return ERR_CZ;	 	}
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <OBLICZ_BLAD+0x348>)
 8001062:	899b      	ldrh	r3, [r3, #12]
 8001064:	461a      	mov	r2, r3
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <OBLICZ_BLAD+0x358>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	dd0a      	ble.n	8001084 <OBLICZ_BLAD+0x2d0>
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <OBLICZ_BLAD+0x35c>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	eef1 7a67 	vneg.f32	s15, s15
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <OBLICZ_BLAD+0x354>)
 800107a:	edc3 7a00 	vstr	s15, [r3]
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <OBLICZ_BLAD+0x354>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	e032      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[7]>czcz8)	{		ERR_CZ=-er7;  OST_KIER_BL=-1;	return ERR_CZ;	}
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <OBLICZ_BLAD+0x348>)
 8001086:	89db      	ldrh	r3, [r3, #14]
 8001088:	461a      	mov	r2, r3
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <OBLICZ_BLAD+0x360>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	dd0e      	ble.n	80010b0 <OBLICZ_BLAD+0x2fc>
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <OBLICZ_BLAD+0x364>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eef1 7a67 	vneg.f32	s15, s15
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <OBLICZ_BLAD+0x354>)
 800109e:	edc3 7a00 	vstr	s15, [r3]
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <OBLICZ_BLAD+0x368>)
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <OBLICZ_BLAD+0x354>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	e01c      	b.n	80010ea <OBLICZ_BLAD+0x336>



	if (OST_KIER_BL==-1 )  {  ERR_CZ=-err_max; 	return ERR_CZ; }
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <OBLICZ_BLAD+0x368>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d10a      	bne.n	80010d0 <OBLICZ_BLAD+0x31c>
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <OBLICZ_BLAD+0x36c>)
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	eef1 7a67 	vneg.f32	s15, s15
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <OBLICZ_BLAD+0x354>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <OBLICZ_BLAD+0x354>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	e00c      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if (OST_KIER_BL==1  )  {  ERR_CZ=err_max;  	return ERR_CZ; }
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <OBLICZ_BLAD+0x368>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d106      	bne.n	80010e6 <OBLICZ_BLAD+0x332>
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <OBLICZ_BLAD+0x36c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <OBLICZ_BLAD+0x354>)
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <OBLICZ_BLAD+0x354>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	e001      	b.n	80010ea <OBLICZ_BLAD+0x336>

	//ERR_CZ=99;
	return 0;
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	ee07 3a90 	vmov	s15, r3
}
 80010ee:	eeb0 0a67 	vmov.f32	s0, s15
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	24000480 	.word	0x24000480
 8001100:	24000494 	.word	0x24000494
 8001104:	2400047c 	.word	0x2400047c
 8001108:	24000234 	.word	0x24000234
 800110c:	2400046c 	.word	0x2400046c
 8001110:	2400049c 	.word	0x2400049c
 8001114:	24000464 	.word	0x24000464
 8001118:	240004a8 	.word	0x240004a8
 800111c:	24000238 	.word	0x24000238
 8001120:	24000468 	.word	0x24000468

08001124 <CZUJNIKI_INIT>:


void CZUJNIKI_INIT()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)DANE_Z_CZUJNIKOW,8); //Turn on Sensor Read
 8001128:	2208      	movs	r2, #8
 800112a:	4904      	ldr	r1, [pc, #16]	; (800113c <CZUJNIKI_INIT+0x18>)
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <CZUJNIKI_INIT+0x1c>)
 800112e:	f005 fa9b 	bl	8006668 <HAL_ADC_Start_DMA>
	ReadValue_CZ_EEPROM();
 8001132:	f000 f807 	bl	8001144 <ReadValue_CZ_EEPROM>
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000480 	.word	0x24000480
 8001140:	24023848 	.word	0x24023848

08001144 <ReadValue_CZ_EEPROM>:


void ReadValue_CZ_EEPROM()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

EEPROM_READ_FLOAT(70, &er1);
 8001148:	4921      	ldr	r1, [pc, #132]	; (80011d0 <ReadValue_CZ_EEPROM+0x8c>)
 800114a:	2046      	movs	r0, #70	; 0x46
 800114c:	f000 f8bd 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(75, &er2);
 8001150:	4920      	ldr	r1, [pc, #128]	; (80011d4 <ReadValue_CZ_EEPROM+0x90>)
 8001152:	204b      	movs	r0, #75	; 0x4b
 8001154:	f000 f8b9 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(80, &er3);
 8001158:	491f      	ldr	r1, [pc, #124]	; (80011d8 <ReadValue_CZ_EEPROM+0x94>)
 800115a:	2050      	movs	r0, #80	; 0x50
 800115c:	f000 f8b5 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(85, &er4);
 8001160:	491e      	ldr	r1, [pc, #120]	; (80011dc <ReadValue_CZ_EEPROM+0x98>)
 8001162:	2055      	movs	r0, #85	; 0x55
 8001164:	f000 f8b1 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(90, &er5);
 8001168:	491d      	ldr	r1, [pc, #116]	; (80011e0 <ReadValue_CZ_EEPROM+0x9c>)
 800116a:	205a      	movs	r0, #90	; 0x5a
 800116c:	f000 f8ad 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(100, &er6);
 8001170:	491c      	ldr	r1, [pc, #112]	; (80011e4 <ReadValue_CZ_EEPROM+0xa0>)
 8001172:	2064      	movs	r0, #100	; 0x64
 8001174:	f000 f8a9 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(105, &er7);
 8001178:	491b      	ldr	r1, [pc, #108]	; (80011e8 <ReadValue_CZ_EEPROM+0xa4>)
 800117a:	2069      	movs	r0, #105	; 0x69
 800117c:	f000 f8a5 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(115, &err_max);
 8001180:	491a      	ldr	r1, [pc, #104]	; (80011ec <ReadValue_CZ_EEPROM+0xa8>)
 8001182:	2073      	movs	r0, #115	; 0x73
 8001184:	f000 f8a1 	bl	80012ca <EEPROM_READ_FLOAT>

EEPROM_READ_INT(265, &czcz1);
 8001188:	4919      	ldr	r1, [pc, #100]	; (80011f0 <ReadValue_CZ_EEPROM+0xac>)
 800118a:	f240 1009 	movw	r0, #265	; 0x109
 800118e:	f000 f8d0 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(245, &czcz2);
 8001192:	4918      	ldr	r1, [pc, #96]	; (80011f4 <ReadValue_CZ_EEPROM+0xb0>)
 8001194:	20f5      	movs	r0, #245	; 0xf5
 8001196:	f000 f8cc 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(210, &czcz3);
 800119a:	4917      	ldr	r1, [pc, #92]	; (80011f8 <ReadValue_CZ_EEPROM+0xb4>)
 800119c:	20d2      	movs	r0, #210	; 0xd2
 800119e:	f000 f8c8 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(215, &czcz4);
 80011a2:	4916      	ldr	r1, [pc, #88]	; (80011fc <ReadValue_CZ_EEPROM+0xb8>)
 80011a4:	20d7      	movs	r0, #215	; 0xd7
 80011a6:	f000 f8c4 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(220, &czcz5);
 80011aa:	4915      	ldr	r1, [pc, #84]	; (8001200 <ReadValue_CZ_EEPROM+0xbc>)
 80011ac:	20dc      	movs	r0, #220	; 0xdc
 80011ae:	f000 f8c0 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(225, &czcz6);
 80011b2:	4914      	ldr	r1, [pc, #80]	; (8001204 <ReadValue_CZ_EEPROM+0xc0>)
 80011b4:	20e1      	movs	r0, #225	; 0xe1
 80011b6:	f000 f8bc 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(230, &czcz7);
 80011ba:	4913      	ldr	r1, [pc, #76]	; (8001208 <ReadValue_CZ_EEPROM+0xc4>)
 80011bc:	20e6      	movs	r0, #230	; 0xe6
 80011be:	f000 f8b8 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(235, &czcz8);
 80011c2:	4912      	ldr	r1, [pc, #72]	; (800120c <ReadValue_CZ_EEPROM+0xc8>)
 80011c4:	20eb      	movs	r0, #235	; 0xeb
 80011c6:	f000 f8b4 	bl	8001332 <EEPROM_READ_INT>

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	24000478 	.word	0x24000478
 80011d4:	24000470 	.word	0x24000470
 80011d8:	2400047c 	.word	0x2400047c
 80011dc:	2400045c 	.word	0x2400045c
 80011e0:	2400049c 	.word	0x2400049c
 80011e4:	24000498 	.word	0x24000498
 80011e8:	240004a8 	.word	0x240004a8
 80011ec:	24000468 	.word	0x24000468
 80011f0:	24000490 	.word	0x24000490
 80011f4:	240004a0 	.word	0x240004a0
 80011f8:	24000474 	.word	0x24000474
 80011fc:	24000460 	.word	0x24000460
 8001200:	240004a4 	.word	0x240004a4
 8001204:	24000494 	.word	0x24000494
 8001208:	2400046c 	.word	0x2400046c
 800120c:	24000464 	.word	0x24000464

08001210 <EEPROM_WRITE>:
    char in8bit [4];
    float  wartosc;
} u;
*/
int8_t EEPROM_WRITE(uint16_t MemAdr, uint8_t *regData , uint16_t len)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	80fb      	strh	r3, [r7, #6]
 800121c:	4613      	mov	r3, r2
 800121e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Init(&hi2c1);
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <EEPROM_WRITE+0x40>)
 8001222:	f009 fbeb 	bl	800a9fc <HAL_I2C_Init>
	// HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
	HAL_I2C_Mem_Write(&hi2c1, Sektor1, MemAdr, 1, regData, len, 1);
 8001226:	88fa      	ldrh	r2, [r7, #6]
 8001228:	2301      	movs	r3, #1
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	21a0      	movs	r1, #160	; 0xa0
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <EEPROM_WRITE+0x40>)
 800123a:	f009 fc9f 	bl	800ab7c <HAL_I2C_Mem_Write>
	HAL_I2C_DeInit(&hi2c1);
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <EEPROM_WRITE+0x40>)
 8001240:	f009 fc6c 	bl	800ab1c <HAL_I2C_DeInit>
	return 0;
 8001244:	2300      	movs	r3, #0

}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	24023970 	.word	0x24023970

08001254 <EEPROM_READ>:

int8_t EEPROM_READ(uint16_t MemAdr, uint8_t *regData , uint16_t len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af04      	add	r7, sp, #16
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	80fb      	strh	r3, [r7, #6]
 8001260:	4613      	mov	r3, r2
 8001262:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Init(&hi2c1);
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <EEPROM_READ+0x40>)
 8001266:	f009 fbc9 	bl	800a9fc <HAL_I2C_Init>
	HAL_I2C_Mem_Read(&hi2c1, Sektor1, MemAdr, 1, regData, len, 1);
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	2301      	movs	r3, #1
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	88bb      	ldrh	r3, [r7, #4]
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	21a0      	movs	r1, #160	; 0xa0
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <EEPROM_READ+0x40>)
 800127e:	f009 fd91 	bl	800ada4 <HAL_I2C_Mem_Read>
	HAL_I2C_DeInit(&hi2c1);
 8001282:	4804      	ldr	r0, [pc, #16]	; (8001294 <EEPROM_READ+0x40>)
 8001284:	f009 fc4a 	bl	800ab1c <HAL_I2C_DeInit>
	return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	24023970 	.word	0x24023970

08001298 <EEPROM_WRITE_FLOAT>:

float EEPROM_WRITE_FLOAT(uint16_t MemAdr, float *regData)  //Float value is 32bit so need 4bytes in eeprom memory
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	80fb      	strh	r3, [r7, #6]
	      uint8_t in8bit [4];
	      uint32_t  wartosc;
	      float wartoscfloat;
	  } u;

	  	  u.wartoscfloat=*regData;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]

		  EEPROM_WRITE(MemAdr, (uint8_t*)&u, 4);
 80012aa:	f107 010c 	add.w	r1, r7, #12
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2204      	movs	r2, #4
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ffac 	bl	8001210 <EEPROM_WRITE>

	return 0;
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	ee07 3a90 	vmov	s15, r3
}
 80012c0:	eeb0 0a67 	vmov.f32	s0, s15
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <EEPROM_READ_FLOAT>:

float EEPROM_READ_FLOAT(uint16_t MemAdr,float *regData)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	6039      	str	r1, [r7, #0]
 80012d4:	80fb      	strh	r3, [r7, #6]
	//Is Need some delay
	HAL_Delay(2);  //@@@@@@@@@@@@@@@@@@@@ HERE IS DELAY!!!!
 80012d6:	2002      	movs	r0, #2
 80012d8:	f004 fe0e 	bl	8005ef8 <HAL_Delay>
	  union TO_EEPROM {
	      uint8_t in8bit [4];
	      float warf;
	  } u;

u.warf=0;
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]

		  EEPROM_READ(MemAdr, (uint8_t*)&u, 4);
 80012e2:	f107 010c 	add.w	r1, r7, #12
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	2204      	movs	r2, #4
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ffb2 	bl	8001254 <EEPROM_READ>

	  *regData=u.warf;
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	601a      	str	r2, [r3, #0]

	return 0;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	ee07 3a90 	vmov	s15, r3
}
 80012fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <EEPROM_WRITE_INT>:

int EEPROM_WRITE_INT(uint16_t MemAdr, int *regData)  //Float value is 16bit so need 2bytes in eeprom memory
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	80fb      	strh	r3, [r7, #6]
	      uint8_t in8bit [4];
	      uint32_t  wartosc;
	      int warint;
	  } u;

	  	  u.warint=*regData;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]

		  EEPROM_WRITE(MemAdr, (uint8_t*)&u, 4);
 800131a:	f107 010c 	add.w	r1, r7, #12
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	2204      	movs	r2, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff74 	bl	8001210 <EEPROM_WRITE>

	return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <EEPROM_READ_INT>:

int EEPROM_READ_INT(uint16_t MemAdr,int *regData)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	6039      	str	r1, [r7, #0]
 800133c:	80fb      	strh	r3, [r7, #6]
	//Is Need some delay
	HAL_Delay(2);
 800133e:	2002      	movs	r0, #2
 8001340:	f004 fdda 	bl	8005ef8 <HAL_Delay>
	  union TO_EEPROM {
	      uint8_t in8bit [4];
	      int warint;
	  } u;

u.warint=0;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]

		  EEPROM_READ(MemAdr, (uint8_t*)&u, 4);
 8001348:	f107 010c 	add.w	r1, r7, #12
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	2204      	movs	r2, #4
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff7f 	bl	8001254 <EEPROM_READ>

	  *regData=u.warint;
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]

	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_EXTI_Callback>:
void WYSLIJMAPE_DO_BLE();
void wyznacz_xiy();
void mierzprzebdr();

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]

if(GPIO_Pin==ENK1_Pin)
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	2b08      	cmp	r3, #8
 8001376:	d109      	bne.n	800138c <HAL_GPIO_EXTI_Callback+0x24>
{		ENK_PRAWY++;	}
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x80>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x80>)
 8001388:	edc3 7a00 	vstr	s15, [r3]
if(GPIO_Pin==ENK2_Pin)
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d109      	bne.n	80013a6 <HAL_GPIO_EXTI_Callback+0x3e>
{		ENK_PRAWY++;	}
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x80>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800139c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x80>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]
if(GPIO_Pin==ENK4_Pin)
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	2b40      	cmp	r3, #64	; 0x40
 80013aa:	d109      	bne.n	80013c0 <HAL_GPIO_EXTI_Callback+0x58>
{			ENK_LEWY++;	}
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_GPIO_EXTI_Callback+0x84>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_GPIO_EXTI_Callback+0x84>)
 80013bc:	edc3 7a00 	vstr	s15, [r3]
if(GPIO_Pin==ENK3_Pin)
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	2b80      	cmp	r3, #128	; 0x80
 80013c4:	d109      	bne.n	80013da <HAL_GPIO_EXTI_Callback+0x72>
{			ENK_LEWY++;	}
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_GPIO_EXTI_Callback+0x84>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_GPIO_EXTI_Callback+0x84>)
 80013d6:	edc3 7a00 	vstr	s15, [r3]

}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	24000244 	.word	0x24000244
 80013ec:	2400023c 	.word	0x2400023c

080013f0 <oblicz_predkosc>:
int mapa_dplik=0;
int zzzap_nrprobki=0;
float Sr_Predkosc=0;

void oblicz_predkosc()
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0

	if(t2>zT_ENK+200)
 80013f6:	4b56      	ldr	r3, [pc, #344]	; (8001550 <oblicz_predkosc+0x160>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001402:	4b54      	ldr	r3, [pc, #336]	; (8001554 <oblicz_predkosc+0x164>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001558 <oblicz_predkosc+0x168>
 800140c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	dc00      	bgt.n	800141c <oblicz_predkosc+0x2c>
		if(nr_probki==4001)
		{
			nr_probki=4000;
		}
	}
}
 800141a:	e08d      	b.n	8001538 <oblicz_predkosc+0x148>
		zT_ENK=t2;
 800141c:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <oblicz_predkosc+0x160>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001428:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <oblicz_predkosc+0x164>)
 800142a:	edc3 7a00 	vstr	s15, [r3]
		float Droga_impulsu=0.000788; //czyli tyle mam metra na jeden impuls...
 800142e:	4b4b      	ldr	r3, [pc, #300]	; (800155c <oblicz_predkosc+0x16c>)
 8001430:	607b      	str	r3, [r7, #4]
		DROGA_L= ((ENK_LEWY-zENK_LEWY)*Droga_impulsu);
 8001432:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <oblicz_predkosc+0x170>)
 8001434:	ed93 7a00 	vldr	s14, [r3]
 8001438:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <oblicz_predkosc+0x174>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001442:	edd7 7a01 	vldr	s15, [r7, #4]
 8001446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <oblicz_predkosc+0x178>)
 800144c:	edc3 7a00 	vstr	s15, [r3]
		DROGA_L_W_PROBCE[nr_probki]=DROGA_L;
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <oblicz_predkosc+0x17c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a44      	ldr	r2, [pc, #272]	; (8001568 <oblicz_predkosc+0x178>)
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	4945      	ldr	r1, [pc, #276]	; (8001570 <oblicz_predkosc+0x180>)
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	601a      	str	r2, [r3, #0]
		DROGA_P= ((ENK_PRAWY-zENK_PRAWY)*Droga_impulsu);
 8001460:	4b44      	ldr	r3, [pc, #272]	; (8001574 <oblicz_predkosc+0x184>)
 8001462:	ed93 7a00 	vldr	s14, [r3]
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <oblicz_predkosc+0x188>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001470:	edd7 7a01 	vldr	s15, [r7, #4]
 8001474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001478:	4b40      	ldr	r3, [pc, #256]	; (800157c <oblicz_predkosc+0x18c>)
 800147a:	edc3 7a00 	vstr	s15, [r3]
		DROGA_P_W_PROBCE[nr_probki]=DROGA_P;
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <oblicz_predkosc+0x17c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a3e      	ldr	r2, [pc, #248]	; (800157c <oblicz_predkosc+0x18c>)
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	493e      	ldr	r1, [pc, #248]	; (8001580 <oblicz_predkosc+0x190>)
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	601a      	str	r2, [r3, #0]
		Predkosc_L=((ENK_LEWY-zENK_LEWY)*Droga_impulsu)/0.02;
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <oblicz_predkosc+0x170>)
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	4b33      	ldr	r3, [pc, #204]	; (8001564 <oblicz_predkosc+0x174>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800149e:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014aa:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8001548 <oblicz_predkosc+0x158>
 80014ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <oblicz_predkosc+0x194>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
		PREDKOSC_L_W_PROBCE[nr_probki]=Predkosc_L;
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <oblicz_predkosc+0x17c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a30      	ldr	r2, [pc, #192]	; (8001584 <oblicz_predkosc+0x194>)
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	4930      	ldr	r1, [pc, #192]	; (8001588 <oblicz_predkosc+0x198>)
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	601a      	str	r2, [r3, #0]
		zENK_LEWY=ENK_LEWY;
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <oblicz_predkosc+0x170>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a24      	ldr	r2, [pc, #144]	; (8001564 <oblicz_predkosc+0x174>)
 80014d2:	6013      	str	r3, [r2, #0]
		Predkosc_P=((ENK_PRAWY-zENK_PRAWY)*Droga_impulsu)/0.02;
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <oblicz_predkosc+0x184>)
 80014d6:	ed93 7a00 	vldr	s14, [r3]
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <oblicz_predkosc+0x188>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014f0:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8001548 <oblicz_predkosc+0x158>
 80014f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <oblicz_predkosc+0x19c>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
		PREDKOSC_P_W_PROBCE[nr_probki]=Predkosc_P;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <oblicz_predkosc+0x17c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a21      	ldr	r2, [pc, #132]	; (800158c <oblicz_predkosc+0x19c>)
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	4921      	ldr	r1, [pc, #132]	; (8001590 <oblicz_predkosc+0x1a0>)
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	601a      	str	r2, [r3, #0]
		zENK_PRAWY=ENK_PRAWY;
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <oblicz_predkosc+0x184>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a18      	ldr	r2, [pc, #96]	; (8001578 <oblicz_predkosc+0x188>)
 8001518:	6013      	str	r3, [r2, #0]
		nr_probki++;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <oblicz_predkosc+0x17c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <oblicz_predkosc+0x17c>)
 8001522:	6013      	str	r3, [r2, #0]
		if(nr_probki==4001)
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <oblicz_predkosc+0x17c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f640 72a1 	movw	r2, #4001	; 0xfa1
 800152c:	4293      	cmp	r3, r2
 800152e:	d103      	bne.n	8001538 <oblicz_predkosc+0x148>
			nr_probki=4000;
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <oblicz_predkosc+0x17c>)
 8001532:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	f3af 8000 	nop.w
 8001548:	47ae147b 	.word	0x47ae147b
 800154c:	3f947ae1 	.word	0x3f947ae1
 8001550:	240002fc 	.word	0x240002fc
 8001554:	2400024c 	.word	0x2400024c
 8001558:	43480000 	.word	0x43480000
 800155c:	3a4e91c9 	.word	0x3a4e91c9
 8001560:	2400023c 	.word	0x2400023c
 8001564:	24000240 	.word	0x24000240
 8001568:	240004b4 	.word	0x240004b4
 800156c:	24000254 	.word	0x24000254
 8001570:	2400feb8 	.word	0x2400feb8
 8001574:	24000244 	.word	0x24000244
 8001578:	24000248 	.word	0x24000248
 800157c:	24013d38 	.word	0x24013d38
 8001580:	24017bbc 	.word	0x24017bbc
 8001584:	240004ac 	.word	0x240004ac
 8001588:	2401ba3c 	.word	0x2401ba3c
 800158c:	240004b0 	.word	0x240004b0
 8001590:	24004338 	.word	0x24004338

08001594 <mierzprzebdr>:

void mierzprzebdr()
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
	if(zzzap_nrprobki!=nr_probki-1)
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <mierzprzebdr+0xbc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <mierzprzebdr+0xc0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d04f      	beq.n	8001646 <mierzprzebdr+0xb2>
	{
		zzzap_nrprobki=nr_probki-1;
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <mierzprzebdr+0xbc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	4a29      	ldr	r2, [pc, #164]	; (8001654 <mierzprzebdr+0xc0>)
 80015ae:	6013      	str	r3, [r2, #0]

	DR_SRODKA[nr_probki-1]=DROGA_L_W_PROBCE[nr_probki-1]+DROGA_P_W_PROBCE[nr_probki-1];
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <mierzprzebdr+0xbc>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	4a28      	ldr	r2, [pc, #160]	; (8001658 <mierzprzebdr+0xc4>)
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <mierzprzebdr+0xbc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4a25      	ldr	r2, [pc, #148]	; (800165c <mierzprzebdr+0xc8>)
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <mierzprzebdr+0xbc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	4a21      	ldr	r2, [pc, #132]	; (8001660 <mierzprzebdr+0xcc>)
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	edc3 7a00 	vstr	s15, [r3]
	if(DR_SRODKA[nr_probki-1]!=0)
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <mierzprzebdr+0xbc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <mierzprzebdr+0xcc>)
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	d013      	beq.n	8001626 <mierzprzebdr+0x92>
	{
		DR_SRODKA[nr_probki-1]=DR_SRODKA[nr_probki-1]/2;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <mierzprzebdr+0xbc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3b01      	subs	r3, #1
 8001604:	4a16      	ldr	r2, [pc, #88]	; (8001660 <mierzprzebdr+0xcc>)
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <mierzprzebdr+0xbc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3b01      	subs	r3, #1
 8001614:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161c:	4a10      	ldr	r2, [pc, #64]	; (8001660 <mierzprzebdr+0xcc>)
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	edc3 7a00 	vstr	s15, [r3]
	}
	P_DRSR=P_DRSR+DR_SRODKA[nr_probki-1];
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <mierzprzebdr+0xbc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3b01      	subs	r3, #1
 800162c:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <mierzprzebdr+0xcc>)
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <mierzprzebdr+0xd0>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <mierzprzebdr+0xd0>)
 8001642:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	24000254 	.word	0x24000254
 8001654:	2400027c 	.word	0x2400027c
 8001658:	2400feb8 	.word	0x2400feb8
 800165c:	24017bbc 	.word	0x24017bbc
 8001660:	2400c038 	.word	0x2400c038
 8001664:	24000258 	.word	0x24000258

08001668 <wykryj_znacznik>:

void wykryj_znacznik()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	wykr_znacznik=0;
 800166c:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <wykryj_znacznik+0x130>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

	if(flaga_ENK==1 && (ENK_LEWY-ZN_ENKL)!=0 )
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <wykryj_znacznik+0x134>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d115      	bne.n	80016a6 <wykryj_znacznik+0x3e>
 800167a:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <wykryj_znacznik+0x138>)
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <wykryj_znacznik+0x13c>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d008      	beq.n	80016a6 <wykryj_znacznik+0x3e>
	{
		ZN_ENKL=ENK_LEWY;
 8001694:	4b42      	ldr	r3, [pc, #264]	; (80017a0 <wykryj_znacznik+0x138>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a42      	ldr	r2, [pc, #264]	; (80017a4 <wykryj_znacznik+0x13c>)
 800169a:	6013      	str	r3, [r2, #0]
		D_ZENKL++;
 800169c:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <wykryj_znacznik+0x140>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	4a41      	ldr	r2, [pc, #260]	; (80017a8 <wykryj_znacznik+0x140>)
 80016a4:	6013      	str	r3, [r2, #0]
	}
	if(flaga_ENK==1 && (ENK_PRAWY-ZN_ENKP)!=0 )
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <wykryj_znacznik+0x134>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d115      	bne.n	80016da <wykryj_znacznik+0x72>
 80016ae:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <wykryj_znacznik+0x144>)
 80016b0:	ed93 7a00 	vldr	s14, [r3]
 80016b4:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <wykryj_znacznik+0x148>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d008      	beq.n	80016da <wykryj_znacznik+0x72>
	{
		ZN_ENKP=ENK_PRAWY;
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <wykryj_znacznik+0x144>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a38      	ldr	r2, [pc, #224]	; (80017b0 <wykryj_znacznik+0x148>)
 80016ce:	6013      	str	r3, [r2, #0]
		D_ZENKP++;
 80016d0:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <wykryj_znacznik+0x14c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a37      	ldr	r2, [pc, #220]	; (80017b4 <wykryj_znacznik+0x14c>)
 80016d8:	6013      	str	r3, [r2, #0]
	}
	if(D_ZENKL>=25 && D_ZENKP>=25)
 80016da:	4b33      	ldr	r3, [pc, #204]	; (80017a8 <wykryj_znacznik+0x140>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b18      	cmp	r3, #24
 80016e0:	dd4f      	ble.n	8001782 <wykryj_znacznik+0x11a>
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <wykryj_znacznik+0x14c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b18      	cmp	r3, #24
 80016e8:	dd4b      	ble.n	8001782 <wykryj_znacznik+0x11a>
	{
		//wykytro znacznik

		D_ZENKP=0;
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <wykryj_znacznik+0x14c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
		D_ZENKL=0;
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <wykryj_znacznik+0x140>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]



		wykryto_znacznik();
 80016f6:	f000 f86d 	bl	80017d4 <wykryto_znacznik>

		if(mapa_dplik==1)
 80016fa:	4b2f      	ldr	r3, [pc, #188]	; (80017b8 <wykryj_znacznik+0x150>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d12b      	bne.n	800175a <wykryj_znacznik+0xf2>
		{
			mapa_dplik=0;
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <wykryj_znacznik+0x150>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
			URUCHAMIANIE_ROBOTA=0; //zatrzymanie robota
 8001708:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <wykryj_znacznik+0x154>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]

		   __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,1000);
 800170e:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <wykryj_znacznik+0x158>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001716:	635a      	str	r2, [r3, #52]	; 0x34
		    __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,1000);
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <wykryj_znacznik+0x158>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001720:	639a      	str	r2, [r3, #56]	; 0x38

		    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000);
 8001722:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <wykryj_znacznik+0x15c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
		    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000);
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <wykryj_znacznik+0x15c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001734:	641a      	str	r2, [r3, #64]	; 0x40

			  HAL_GPIO_WritePin(LDD1_GPIO_Port, LDD1_Pin,GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173c:	4822      	ldr	r0, [pc, #136]	; (80017c8 <wykryj_znacznik+0x160>)
 800173e:	f009 f90f 	bl	800a960 <HAL_GPIO_WritePin>
			wyznacz_xiy();
 8001742:	f000 f8dd 	bl	8001900 <wyznacz_xiy>
			WYSLIJMAPE_DO_BLE();
 8001746:	f000 f99b 	bl	8001a80 <WYSLIJMAPE_DO_BLE>

			P_DRSR=0;
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <wykryj_znacznik+0x164>)
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
			nr_probki=0;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <wykryj_znacznik+0x168>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
			return;
 8001758:	e01d      	b.n	8001796 <wykryj_znacznik+0x12e>
		}

		if(mapa_dplik==0)
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <wykryj_znacznik+0x150>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <wykryj_znacznik+0x11a>
		{
			HAL_GPIO_WritePin(LDD1_GPIO_Port, LDD1_Pin,GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001768:	4817      	ldr	r0, [pc, #92]	; (80017c8 <wykryj_znacznik+0x160>)
 800176a:	f009 f8f9 	bl	800a960 <HAL_GPIO_WritePin>
			mapa_dplik=1;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <wykryj_znacznik+0x150>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]
			P_DRSR=0;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <wykryj_znacznik+0x164>)
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
			nr_probki=0;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <wykryj_znacznik+0x168>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]



	}

	if(flaga_ENK==0) //referebce ti file "CZUJNIKI.c"
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <wykryj_znacznik+0x134>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <wykryj_znacznik+0x12e>
	{
		 D_ZENKL=0;
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <wykryj_znacznik+0x140>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
		 D_ZENKP=0;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <wykryj_znacznik+0x14c>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
	}
}
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2400026c 	.word	0x2400026c
 800179c:	24000250 	.word	0x24000250
 80017a0:	2400023c 	.word	0x2400023c
 80017a4:	2400025c 	.word	0x2400025c
 80017a8:	24000264 	.word	0x24000264
 80017ac:	24000244 	.word	0x24000244
 80017b0:	24000260 	.word	0x24000260
 80017b4:	24000268 	.word	0x24000268
 80017b8:	24000278 	.word	0x24000278
 80017bc:	240002e0 	.word	0x240002e0
 80017c0:	24023a88 	.word	0x24023a88
 80017c4:	24023a3c 	.word	0x24023a3c
 80017c8:	58020000 	.word	0x58020000
 80017cc:	24000258 	.word	0x24000258
 80017d0:	24000254 	.word	0x24000254

080017d4 <wykryto_znacznik>:




void wykryto_znacznik()
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0

	CZ_OKR=t2-zT_ZNACZNIK;
 80017da:	4b40      	ldr	r3, [pc, #256]	; (80018dc <wykryto_znacznik+0x108>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <wykryto_znacznik+0x10c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ec:	4b3d      	ldr	r3, [pc, #244]	; (80018e4 <wykryto_znacznik+0x110>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
	CZ_OKR=CZ_OKR/10000;
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <wykryto_znacznik+0x110>)
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80018e8 <wykryto_znacznik+0x114>
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <wykryto_znacznik+0x110>)
 8001802:	edc3 7a00 	vstr	s15, [r3]
	zT_ZNACZNIK=t2;
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <wykryto_znacznik+0x108>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a35      	ldr	r2, [pc, #212]	; (80018e0 <wykryto_znacznik+0x10c>)
 800180c:	6013      	str	r3, [r2, #0]

	for(int i=0; i<nr_probki; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	e031      	b.n	8001878 <wykryto_znacznik+0xa4>
	{
		PR_Srodka[i]=PREDKOSC_L_W_PROBCE[i]+PREDKOSC_P_W_PROBCE[i];
 8001814:	4a35      	ldr	r2, [pc, #212]	; (80018ec <wykryto_znacznik+0x118>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	ed93 7a00 	vldr	s14, [r3]
 8001820:	4a33      	ldr	r2, [pc, #204]	; (80018f0 <wykryto_znacznik+0x11c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	4a30      	ldr	r2, [pc, #192]	; (80018f4 <wykryto_znacznik+0x120>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	edc3 7a00 	vstr	s15, [r3]
		if(PR_Srodka[i]!=0)
 800183c:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <wykryto_znacznik+0x120>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	eef5 7a40 	vcmp.f32	s15, #0.0
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	d00f      	beq.n	8001872 <wykryto_znacznik+0x9e>
		{
		PR_Srodka[i]=PR_Srodka[i]/2;
 8001852:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <wykryto_znacznik+0x120>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001866:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <wykryto_znacznik+0x120>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<nr_probki; i++)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3301      	adds	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <wykryto_znacznik+0x124>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	dbc8      	blt.n	8001814 <wykryto_znacznik+0x40>
		}
	}


	for (int i=0; i<nr_probki; i++)
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	e010      	b.n	80018aa <wykryto_znacznik+0xd6>
	{
		Sr_Predkosc=Sr_Predkosc+PR_Srodka[i];
 8001888:	4a1a      	ldr	r2, [pc, #104]	; (80018f4 <wykryto_znacznik+0x120>)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	ed93 7a00 	vldr	s14, [r3]
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <wykryto_znacznik+0x128>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <wykryto_znacznik+0x128>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<nr_probki; i++)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <wykryto_znacznik+0x124>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbe9      	blt.n	8001888 <wykryto_znacznik+0xb4>
	}
	Sr_Predkosc=Sr_Predkosc/nr_probki;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <wykryto_znacznik+0x128>)
 80018b6:	edd3 6a00 	vldr	s13, [r3]
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <wykryto_znacznik+0x124>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <wykryto_znacznik+0x128>)
 80018cc:	edc3 7a00 	vstr	s15, [r3]

}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	240002fc 	.word	0x240002fc
 80018e0:	24000270 	.word	0x24000270
 80018e4:	24000274 	.word	0x24000274
 80018e8:	461c4000 	.word	0x461c4000
 80018ec:	2401ba3c 	.word	0x2401ba3c
 80018f0:	24004338 	.word	0x24004338
 80018f4:	24013d3c 	.word	0x24013d3c
 80018f8:	24000254 	.word	0x24000254
 80018fc:	24000280 	.word	0x24000280

08001900 <wyznacz_xiy>:

float X[4000];
float Y[4000];
float T[4000];
void wyznacz_xiy()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	ed2d 8b02 	vpush	{d8}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
	for(int i=0;  i<nr_probki; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	e099      	b.n	8001a44 <wyznacz_xiy+0x144>
	{
	T[i]=T[i-1]+(1/0.147)*(DROGA_L_W_PROBCE[i]-DROGA_P_W_PROBCE[i]);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	4a54      	ldr	r2, [pc, #336]	; (8001a68 <wyznacz_xiy+0x168>)
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001922:	4a52      	ldr	r2, [pc, #328]	; (8001a6c <wyznacz_xiy+0x16c>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	4a50      	ldr	r2, [pc, #320]	; (8001a70 <wyznacz_xiy+0x170>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001942:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001a60 <wyznacz_xiy+0x160>
 8001946:	ee27 7b05 	vmul.f64	d7, d7, d5
 800194a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800194e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001952:	4a45      	ldr	r2, [pc, #276]	; (8001a68 <wyznacz_xiy+0x168>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	edc3 7a00 	vstr	s15, [r3]


	X[i]=X[i-1]+(  0.5*cos(T[i-1]) * ( DROGA_L_W_PROBCE[i]+DROGA_P_W_PROBCE[i]) );
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3b01      	subs	r3, #1
 8001962:	4a44      	ldr	r2, [pc, #272]	; (8001a74 <wyznacz_xiy+0x174>)
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	4a3c      	ldr	r2, [pc, #240]	; (8001a68 <wyznacz_xiy+0x168>)
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001982:	eeb0 0b47 	vmov.f64	d0, d7
 8001986:	f016 fd93 	bl	80184b0 <cos>
 800198a:	eeb0 7b40 	vmov.f64	d7, d0
 800198e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001992:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001996:	4a35      	ldr	r2, [pc, #212]	; (8001a6c <wyznacz_xiy+0x16c>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	ed93 7a00 	vldr	s14, [r3]
 80019a2:	4a33      	ldr	r2, [pc, #204]	; (8001a70 <wyznacz_xiy+0x170>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019b6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019ba:	ee38 7b07 	vadd.f64	d7, d8, d7
 80019be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019c2:	4a2c      	ldr	r2, [pc, #176]	; (8001a74 <wyznacz_xiy+0x174>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	edc3 7a00 	vstr	s15, [r3]

	Y[i]=Y[i-1]+(  0.5*sin(T[i-1]) * ( DROGA_L_W_PROBCE[i]+DROGA_P_W_PROBCE[i]) );
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <wyznacz_xiy+0x178>)
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <wyznacz_xiy+0x168>)
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f2:	eeb0 0b47 	vmov.f64	d0, d7
 80019f6:	f016 fda3 	bl	8018540 <sin>
 80019fa:	eeb0 7b40 	vmov.f64	d7, d0
 80019fe:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001a02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a06:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <wyznacz_xiy+0x16c>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <wyznacz_xiy+0x170>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a2a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a32:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <wyznacz_xiy+0x178>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;  i<nr_probki; i++)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3301      	adds	r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <wyznacz_xiy+0x17c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	f6ff af60 	blt.w	8001910 <wyznacz_xiy+0x10>
	}

}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	ecbd 8b02 	vpop	{d8}
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	845a8ece 	.word	0x845a8ece
 8001a64:	401b35fc 	.word	0x401b35fc
 8001a68:	240081b8 	.word	0x240081b8
 8001a6c:	2400feb8 	.word	0x2400feb8
 8001a70:	24017bbc 	.word	0x24017bbc
 8001a74:	2401f8bc 	.word	0x2401f8bc
 8001a78:	240004b8 	.word	0x240004b8
 8001a7c:	24000254 	.word	0x24000254

08001a80 <WYSLIJMAPE_DO_BLE>:


void WYSLIJMAPE_DO_BLE()
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b093      	sub	sp, #76	; 0x4c
 8001a84:	af06      	add	r7, sp, #24
	char SEND_DATA_IN_FILE[40];

	if(DANE_DO_TEXT)
 8001a86:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <WYSLIJMAPE_DO_BLE+0x104>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d059      	beq.n	8001b42 <WYSLIJMAPE_DO_BLE+0xc2>
	{
		Z_Czas_Do_Pliku=HAL_GetTick();
 8001a8e:	f004 fa27 	bl	8005ee0 <HAL_GetTick>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a3c      	ldr	r2, [pc, #240]	; (8001b88 <WYSLIJMAPE_DO_BLE+0x108>)
 8001a96:	6013      	str	r3, [r2, #0]


		sprintf(SEND_DATA_IN_FILE,"X,Y,DR_L,DR_P,PR,P\n\r");
 8001a98:	463b      	mov	r3, r7
 8001a9a:	493c      	ldr	r1, [pc, #240]	; (8001b8c <WYSLIJMAPE_DO_BLE+0x10c>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f012 ff97 	bl	80149d0 <siprintf>
		DO_BLE(SEND_DATA_IN_FILE);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f957 	bl	8000d58 <DO_BLE>

		int znr_probki=nr_probki;
 8001aaa:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <WYSLIJMAPE_DO_BLE+0x110>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
		for(int i=0; i<znr_probki; i=i)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	e040      	b.n	8001b38 <WYSLIJMAPE_DO_BLE+0xb8>
		{

		if(Z_Czas_Do_Pliku+30 <  HAL_GetTick() )
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <WYSLIJMAPE_DO_BLE+0x108>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f103 041e 	add.w	r4, r3, #30
 8001abe:	f004 fa0f 	bl	8005ee0 <HAL_GetTick>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	429c      	cmp	r4, r3
 8001ac6:	d237      	bcs.n	8001b38 <WYSLIJMAPE_DO_BLE+0xb8>
			{
			Z_Czas_Do_Pliku=HAL_GetTick();
 8001ac8:	f004 fa0a 	bl	8005ee0 <HAL_GetTick>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4a2e      	ldr	r2, [pc, #184]	; (8001b88 <WYSLIJMAPE_DO_BLE+0x108>)
 8001ad0:	6013      	str	r3, [r2, #0]
					i++;
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c


				sprintf(SEND_DATA_IN_FILE,"%f,%f,%f,%f\n\r",X[i],Y[i],DROGA_L_W_PROBCE[i],DROGA_P_W_PROBCE[i] );
 8001ad8:	4a2e      	ldr	r2, [pc, #184]	; (8001b94 <WYSLIJMAPE_DO_BLE+0x114>)
 8001ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8001ae8:	4a2b      	ldr	r2, [pc, #172]	; (8001b98 <WYSLIJMAPE_DO_BLE+0x118>)
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001af8:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <WYSLIJMAPE_DO_BLE+0x11c>)
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	edd3 6a00 	vldr	s13, [r3]
 8001b04:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001b08:	4a25      	ldr	r2, [pc, #148]	; (8001ba0 <WYSLIJMAPE_DO_BLE+0x120>)
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	edd3 5a00 	vldr	s11, [r3]
 8001b14:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001b18:	4638      	mov	r0, r7
 8001b1a:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001b1e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001b22:	ed8d 7b00 	vstr	d7, [sp]
 8001b26:	ec53 2b14 	vmov	r2, r3, d4
 8001b2a:	491e      	ldr	r1, [pc, #120]	; (8001ba4 <WYSLIJMAPE_DO_BLE+0x124>)
 8001b2c:	f012 ff50 	bl	80149d0 <siprintf>
				DO_BLE(SEND_DATA_IN_FILE);
 8001b30:	463b      	mov	r3, r7
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f910 	bl	8000d58 <DO_BLE>
		for(int i=0; i<znr_probki; i=i)
 8001b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbba      	blt.n	8001ab6 <WYSLIJMAPE_DO_BLE+0x36>
	else
	{
		sprintf(SEND_DATA_IN_FILE,"T:%f\n\rVs:%f\n\r,D:%f\n\r",CZ_OKR,Sr_Predkosc, P_DRSR);
					DO_BLE(SEND_DATA_IN_FILE);
	}
}
 8001b40:	e01c      	b.n	8001b7c <WYSLIJMAPE_DO_BLE+0xfc>
		sprintf(SEND_DATA_IN_FILE,"T:%f\n\rVs:%f\n\r,D:%f\n\r",CZ_OKR,Sr_Predkosc, P_DRSR);
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <WYSLIJMAPE_DO_BLE+0x128>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <WYSLIJMAPE_DO_BLE+0x12c>)
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <WYSLIJMAPE_DO_BLE+0x130>)
 8001b58:	edd3 6a00 	vldr	s13, [r3]
 8001b5c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001b60:	4638      	mov	r0, r7
 8001b62:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001b66:	ed8d 7b00 	vstr	d7, [sp]
 8001b6a:	ec53 2b15 	vmov	r2, r3, d5
 8001b6e:	4911      	ldr	r1, [pc, #68]	; (8001bb4 <WYSLIJMAPE_DO_BLE+0x134>)
 8001b70:	f012 ff2e 	bl	80149d0 <siprintf>
					DO_BLE(SEND_DATA_IN_FILE);
 8001b74:	463b      	mov	r3, r7
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f8ee 	bl	8000d58 <DO_BLE>
}
 8001b7c:	bf00      	nop
 8001b7e:	3734      	adds	r7, #52	; 0x34
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	24000290 	.word	0x24000290
 8001b88:	24000288 	.word	0x24000288
 8001b8c:	08019118 	.word	0x08019118
 8001b90:	24000254 	.word	0x24000254
 8001b94:	2401f8bc 	.word	0x2401f8bc
 8001b98:	240004b8 	.word	0x240004b8
 8001b9c:	2400feb8 	.word	0x2400feb8
 8001ba0:	24017bbc 	.word	0x24017bbc
 8001ba4:	08019130 	.word	0x08019130
 8001ba8:	24000274 	.word	0x24000274
 8001bac:	24000280 	.word	0x24000280
 8001bb0:	24000258 	.word	0x24000258
 8001bb4:	08019140 	.word	0x08019140

08001bb8 <KOMENDY_BLE>:
void PID_DO_BLE();
void DRUKUJCZUJNIKI();


void KOMENDY_BLE()
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
size_BLE--;
 8001bbc:	4ba1      	ldr	r3, [pc, #644]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b9f      	ldr	r3, [pc, #636]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bc6:	701a      	strb	r2, [r3, #0]
size_BLE--;
 8001bc8:	4b9e      	ldr	r3, [pc, #632]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b9c      	ldr	r3, [pc, #624]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bd2:	701a      	strb	r2, [r3, #0]
c=DANE_BLE[size_BLE];
 8001bd4:	4b9b      	ldr	r3, [pc, #620]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b9b      	ldr	r3, [pc, #620]	; (8001e48 <KOMENDY_BLE+0x290>)
 8001bdc:	5c9a      	ldrb	r2, [r3, r2]
 8001bde:	4b9b      	ldr	r3, [pc, #620]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001be0:	701a      	strb	r2, [r3, #0]
if(c==226)
 8001be2:	4b9a      	ldr	r3, [pc, #616]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2be2      	cmp	r3, #226	; 0xe2
 8001be8:	d105      	bne.n	8001bf6 <KOMENDY_BLE+0x3e>
{
	size_BLE--;
 8001bea:	4b96      	ldr	r3, [pc, #600]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b94      	ldr	r3, [pc, #592]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bf4:	701a      	strb	r2, [r3, #0]
}
c=DANE_BLE[size_BLE];
 8001bf6:	4b93      	ldr	r3, [pc, #588]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <KOMENDY_BLE+0x290>)
 8001bfe:	5c9a      	ldrb	r2, [r3, r2]
 8001c00:	4b92      	ldr	r3, [pc, #584]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c02:	701a      	strb	r2, [r3, #0]

//Ehh jak sie nie umie dekodowac UCF-8 to sie kombinuje
if(c==147 || c==134)
 8001c04:	4b91      	ldr	r3, [pc, #580]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b93      	cmp	r3, #147	; 0x93
 8001c0a:	d003      	beq.n	8001c14 <KOMENDY_BLE+0x5c>
 8001c0c:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b86      	cmp	r3, #134	; 0x86
 8001c12:	d10b      	bne.n	8001c2c <KOMENDY_BLE+0x74>
{
	drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=1;//SAVE_DATA
 8001c14:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	4b8e      	ldr	r3, [pc, #568]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	4b8d      	ldr	r3, [pc, #564]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	4b8d      	ldr	r3, [pc, #564]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
}
if(c==146)
 8001c2c:	4b87      	ldr	r3, [pc, #540]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b92      	cmp	r3, #146	; 0x92
 8001c32:	d10b      	bne.n	8001c4c <KOMENDY_BLE+0x94>
{
	drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;//STOP_DATA
 8001c34:	4b86      	ldr	r3, [pc, #536]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	4b86      	ldr	r3, [pc, #536]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	4b85      	ldr	r3, [pc, #532]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]


				//Dobrze byłoby to zrobic na switchu no ale bd tak


	if(c=='I'){wynik=222; URUCHAMIANIE_ROBOTA=1; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //jedz ( uruchamianie robota)
 8001c4c:	4b7f      	ldr	r3, [pc, #508]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b49      	cmp	r3, #73	; 0x49
 8001c52:	d112      	bne.n	8001c7a <KOMENDY_BLE+0xc2>
 8001c54:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001c56:	22de      	movs	r2, #222	; 0xde
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	4b82      	ldr	r3, [pc, #520]	; (8001e64 <KOMENDY_BLE+0x2ac>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	4b7a      	ldr	r3, [pc, #488]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	4b7a      	ldr	r3, [pc, #488]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e208      	b.n	800208c <KOMENDY_BLE+0x4d4>

	else if(c=='U'){wynik=223; URUCHAMIANIE_ROBOTA=0;} //stop ( wyłączanie robota )
 8001c7a:	4b74      	ldr	r3, [pc, #464]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b55      	cmp	r3, #85	; 0x55
 8001c80:	d106      	bne.n	8001c90 <KOMENDY_BLE+0xd8>
 8001c82:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001c84:	22df      	movs	r2, #223	; 0xdf
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	4b76      	ldr	r3, [pc, #472]	; (8001e64 <KOMENDY_BLE+0x2ac>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e1fd      	b.n	800208c <KOMENDY_BLE+0x4d4>

	//ERKAN "PODST"
	else if(c=='P'){wynik =220; drukowanie=3; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //scanowanie pid
 8001c90:	4b6e      	ldr	r3, [pc, #440]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b50      	cmp	r3, #80	; 0x50
 8001c96:	d10f      	bne.n	8001cb8 <KOMENDY_BLE+0x100>
 8001c98:	4b71      	ldr	r3, [pc, #452]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001c9a:	22dc      	movs	r2, #220	; 0xdc
 8001c9c:	701a      	strb	r2, [r3, #0]
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	e1e9      	b.n	800208c <KOMENDY_BLE+0x4d4>
	else if(c=='O'){wynik =221; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //wylaczanie scanowania pid
 8001cb8:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b4f      	cmp	r3, #79	; 0x4f
 8001cbe:	d10f      	bne.n	8001ce0 <KOMENDY_BLE+0x128>
 8001cc0:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001cc2:	22dd      	movs	r2, #221	; 0xdd
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	4b62      	ldr	r3, [pc, #392]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	4b60      	ldr	r3, [pc, #384]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e1d5      	b.n	800208c <KOMENDY_BLE+0x4d4>
	else if(c=='>'){wynik =205; drukowanie=1; k_wys_pom=1; DANE_DO_TEXT=0;}//aktualne dane PID
 8001ce0:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b3e      	cmp	r3, #62	; 0x3e
 8001ce6:	d10c      	bne.n	8001d02 <KOMENDY_BLE+0x14a>
 8001ce8:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001cea:	22cd      	movs	r2, #205	; 0xcd
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e1c4      	b.n	800208c <KOMENDY_BLE+0x4d4>


	else if(c=='+'){wynik =1;}  //Kp
 8001d02:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b2b      	cmp	r3, #43	; 0x2b
 8001d08:	d103      	bne.n	8001d12 <KOMENDY_BLE+0x15a>
 8001d0a:	4b55      	ldr	r3, [pc, #340]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e1bc      	b.n	800208c <KOMENDY_BLE+0x4d4>

    else if(c=='-'){wynik =2;}  //KD
 8001d12:	4b4e      	ldr	r3, [pc, #312]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b2d      	cmp	r3, #45	; 0x2d
 8001d18:	d103      	bne.n	8001d22 <KOMENDY_BLE+0x16a>
 8001d1a:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e1b4      	b.n	800208c <KOMENDY_BLE+0x4d4>
    else if(c==')'){wynik =103;}  //Predkosc silnikow to intiger
 8001d22:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b29      	cmp	r3, #41	; 0x29
 8001d28:	d103      	bne.n	8001d32 <KOMENDY_BLE+0x17a>
 8001d2a:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d2c:	2267      	movs	r2, #103	; 0x67
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e1ac      	b.n	800208c <KOMENDY_BLE+0x4d4>
    else if(c=='('){wynik =4;} //Ki
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b28      	cmp	r3, #40	; 0x28
 8001d38:	d103      	bne.n	8001d42 <KOMENDY_BLE+0x18a>
 8001d3a:	4b49      	ldr	r3, [pc, #292]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	701a      	strb	r2, [r3, #0]
 8001d40:	e1a4      	b.n	800208c <KOMENDY_BLE+0x4d4>

	    //@@@
	    //EKRAN "CZUJNIKI"
	      else if(c=='B')  {wynik =206;  czujnikiactiv=1; k_wys_pom=1; drukowanie=0; DANE_DO_TEXT=0;} //Wysylaj aktualne dane z czujnikow
 8001d42:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b42      	cmp	r3, #66	; 0x42
 8001d48:	d10f      	bne.n	8001d6a <KOMENDY_BLE+0x1b2>
 8001d4a:	4b45      	ldr	r3, [pc, #276]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d4c:	22ce      	movs	r2, #206	; 0xce
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	e190      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='V'){wynik =207;   czujnikiactiv=0; k_wys_pom=1; drukowanie=0; DANE_DO_TEXT=0;} //wyłączam wysylanie danych z czujników
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b56      	cmp	r3, #86	; 0x56
 8001d70:	d10f      	bne.n	8001d92 <KOMENDY_BLE+0x1da>
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d74:	22cf      	movs	r2, #207	; 0xcf
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	e17c      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='~'){wynik =208;   drukowanie=2; czujnikiactiv=0;  k_wys_pom=1; DANE_DO_TEXT=0;}
 8001d92:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b7e      	cmp	r3, #126	; 0x7e
 8001d98:	d10f      	bne.n	8001dba <KOMENDY_BLE+0x202>
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d9c:	22d0      	movs	r2, #208	; 0xd0
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001da2:	2202      	movs	r2, #2
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e168      	b.n	800208c <KOMENDY_BLE+0x4d4>
	       											//wyłączam wysylanie danych z czujników i wysylam aktualne wartosci ER
	      else if(c=='*'){wynik=10; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //ER1
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8001dc0:	d112      	bne.n	8001de8 <KOMENDY_BLE+0x230>
 8001dc2:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001dc4:	220a      	movs	r2, #10
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e151      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='&'){wynik=11; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //ER2
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b26      	cmp	r3, #38	; 0x26
 8001dee:	d112      	bne.n	8001e16 <KOMENDY_BLE+0x25e>
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001df2:	220b      	movs	r2, #11
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e13a      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='^'){wynik=12; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b5e      	cmp	r3, #94	; 0x5e
 8001e1c:	d124      	bne.n	8001e68 <KOMENDY_BLE+0x2b0>
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001e20:	220c      	movs	r2, #12
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e123      	b.n	800208c <KOMENDY_BLE+0x4d4>
 8001e44:	24000218 	.word	0x24000218
 8001e48:	240003a0 	.word	0x240003a0
 8001e4c:	2400028e 	.word	0x2400028e
 8001e50:	2400028d 	.word	0x2400028d
 8001e54:	2400028f 	.word	0x2400028f
 8001e58:	24000000 	.word	0x24000000
 8001e5c:	24000290 	.word	0x24000290
 8001e60:	2400028c 	.word	0x2400028c
 8001e64:	240002e0 	.word	0x240002e0
	      else if(c=='%'){wynik=13; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}
 8001e68:	4ba0      	ldr	r3, [pc, #640]	; (80020ec <KOMENDY_BLE+0x534>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b25      	cmp	r3, #37	; 0x25
 8001e6e:	d112      	bne.n	8001e96 <KOMENDY_BLE+0x2de>
 8001e70:	4b9f      	ldr	r3, [pc, #636]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001e72:	220d      	movs	r2, #13
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	4b9f      	ldr	r3, [pc, #636]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
 8001e7c:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	4b9c      	ldr	r3, [pc, #624]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	4b9c      	ldr	r3, [pc, #624]	; (80020fc <KOMENDY_BLE+0x544>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	4b9c      	ldr	r3, [pc, #624]	; (8002100 <KOMENDY_BLE+0x548>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	e0fa      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='$'){wynik=14; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}
 8001e96:	4b95      	ldr	r3, [pc, #596]	; (80020ec <KOMENDY_BLE+0x534>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b24      	cmp	r3, #36	; 0x24
 8001e9c:	d112      	bne.n	8001ec4 <KOMENDY_BLE+0x30c>
 8001e9e:	4b94      	ldr	r3, [pc, #592]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001ea0:	220e      	movs	r2, #14
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	4b93      	ldr	r3, [pc, #588]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	4b93      	ldr	r3, [pc, #588]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
 8001eb0:	4b90      	ldr	r3, [pc, #576]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	4b91      	ldr	r3, [pc, #580]	; (80020fc <KOMENDY_BLE+0x544>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	4b90      	ldr	r3, [pc, #576]	; (8002100 <KOMENDY_BLE+0x548>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e0e3      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='#'){wynik=15; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}
 8001ec4:	4b89      	ldr	r3, [pc, #548]	; (80020ec <KOMENDY_BLE+0x534>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b23      	cmp	r3, #35	; 0x23
 8001eca:	d112      	bne.n	8001ef2 <KOMENDY_BLE+0x33a>
 8001ecc:	4b88      	ldr	r3, [pc, #544]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001ece:	220f      	movs	r2, #15
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	4b88      	ldr	r3, [pc, #544]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	4b87      	ldr	r3, [pc, #540]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	4b85      	ldr	r3, [pc, #532]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	4b85      	ldr	r3, [pc, #532]	; (80020fc <KOMENDY_BLE+0x544>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	4b85      	ldr	r3, [pc, #532]	; (8002100 <KOMENDY_BLE+0x548>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e0cc      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='@'){wynik=16; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //ER7
 8001ef2:	4b7e      	ldr	r3, [pc, #504]	; (80020ec <KOMENDY_BLE+0x534>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b40      	cmp	r3, #64	; 0x40
 8001ef8:	d112      	bne.n	8001f20 <KOMENDY_BLE+0x368>
 8001efa:	4b7d      	ldr	r3, [pc, #500]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001efc:	2210      	movs	r2, #16
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	4b7c      	ldr	r3, [pc, #496]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	4b7c      	ldr	r3, [pc, #496]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	4b79      	ldr	r3, [pc, #484]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	4b7a      	ldr	r3, [pc, #488]	; (80020fc <KOMENDY_BLE+0x544>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	4b79      	ldr	r3, [pc, #484]	; (8002100 <KOMENDY_BLE+0x548>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e0b5      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='!'){wynik=17; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //ERMAX
 8001f20:	4b72      	ldr	r3, [pc, #456]	; (80020ec <KOMENDY_BLE+0x534>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b21      	cmp	r3, #33	; 0x21
 8001f26:	d112      	bne.n	8001f4e <KOMENDY_BLE+0x396>
 8001f28:	4b71      	ldr	r3, [pc, #452]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001f2a:	2211      	movs	r2, #17
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	4b71      	ldr	r3, [pc, #452]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	4b70      	ldr	r3, [pc, #448]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	4b6e      	ldr	r3, [pc, #440]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	4b6e      	ldr	r3, [pc, #440]	; (80020fc <KOMENDY_BLE+0x544>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	4b6e      	ldr	r3, [pc, #440]	; (8002100 <KOMENDY_BLE+0x548>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e09e      	b.n	800208c <KOMENDY_BLE+0x4d4>

	      else if(c=='H'){wynik=41; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ2
 8001f4e:	4b67      	ldr	r3, [pc, #412]	; (80020ec <KOMENDY_BLE+0x534>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b48      	cmp	r3, #72	; 0x48
 8001f54:	d10f      	bne.n	8001f76 <KOMENDY_BLE+0x3be>
 8001f56:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001f58:	2229      	movs	r2, #41	; 0x29
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	4b64      	ldr	r3, [pc, #400]	; (80020fc <KOMENDY_BLE+0x544>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	4b64      	ldr	r3, [pc, #400]	; (8002100 <KOMENDY_BLE+0x548>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	e08a      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='Q'){wynik=42; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ3
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <KOMENDY_BLE+0x534>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b51      	cmp	r3, #81	; 0x51
 8001f7c:	d10f      	bne.n	8001f9e <KOMENDY_BLE+0x3e6>
 8001f7e:	4b5c      	ldr	r3, [pc, #368]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001f80:	222a      	movs	r2, #42	; 0x2a
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <KOMENDY_BLE+0x544>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <KOMENDY_BLE+0x548>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e076      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c==167){wynik=40; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //CZCZ1 //alt+21 nadaje apka  - § <<ten znaczek //bylo "G" nie wiem skad problem
 8001f9e:	4b53      	ldr	r3, [pc, #332]	; (80020ec <KOMENDY_BLE+0x534>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2ba7      	cmp	r3, #167	; 0xa7
 8001fa4:	d10f      	bne.n	8001fc6 <KOMENDY_BLE+0x40e>
 8001fa6:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001fa8:	2228      	movs	r2, #40	; 0x28
 8001faa:	701a      	strb	r2, [r3, #0]
 8001fac:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	4b50      	ldr	r3, [pc, #320]	; (80020fc <KOMENDY_BLE+0x544>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	4b50      	ldr	r3, [pc, #320]	; (8002100 <KOMENDY_BLE+0x548>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e062      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='W'){wynik=43; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ4
 8001fc6:	4b49      	ldr	r3, [pc, #292]	; (80020ec <KOMENDY_BLE+0x534>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b57      	cmp	r3, #87	; 0x57
 8001fcc:	d10f      	bne.n	8001fee <KOMENDY_BLE+0x436>
 8001fce:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001fd0:	222b      	movs	r2, #43	; 0x2b
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	4b48      	ldr	r3, [pc, #288]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <KOMENDY_BLE+0x544>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <KOMENDY_BLE+0x548>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	e04e      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='?'){wynik=44; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ5
 8001fee:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <KOMENDY_BLE+0x534>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ff4:	d10f      	bne.n	8002016 <KOMENDY_BLE+0x45e>
 8001ff6:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001ff8:	222c      	movs	r2, #44	; 0x2c
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <KOMENDY_BLE+0x544>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <KOMENDY_BLE+0x548>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e03a      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='L'){wynik=45; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ6
 8002016:	4b35      	ldr	r3, [pc, #212]	; (80020ec <KOMENDY_BLE+0x534>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b4c      	cmp	r3, #76	; 0x4c
 800201c:	d10f      	bne.n	800203e <KOMENDY_BLE+0x486>
 800201e:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <KOMENDY_BLE+0x538>)
 8002020:	222d      	movs	r2, #45	; 0x2d
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <KOMENDY_BLE+0x540>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <KOMENDY_BLE+0x53c>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	4b32      	ldr	r3, [pc, #200]	; (80020fc <KOMENDY_BLE+0x544>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	4b32      	ldr	r3, [pc, #200]	; (8002100 <KOMENDY_BLE+0x548>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e026      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='T'){wynik=46; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ7
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <KOMENDY_BLE+0x534>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b54      	cmp	r3, #84	; 0x54
 8002044:	d10f      	bne.n	8002066 <KOMENDY_BLE+0x4ae>
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <KOMENDY_BLE+0x538>)
 8002048:	222e      	movs	r2, #46	; 0x2e
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <KOMENDY_BLE+0x540>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <KOMENDY_BLE+0x544>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <KOMENDY_BLE+0x548>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e012      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='Y'){wynik=47; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ8
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <KOMENDY_BLE+0x534>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b59      	cmp	r3, #89	; 0x59
 800206c:	d10e      	bne.n	800208c <KOMENDY_BLE+0x4d4>
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <KOMENDY_BLE+0x538>)
 8002070:	222f      	movs	r2, #47	; 0x2f
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <KOMENDY_BLE+0x540>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <KOMENDY_BLE+0x53c>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <KOMENDY_BLE+0x544>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <KOMENDY_BLE+0x548>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]

	    	//@@@

    //EKRAN "ZAAW"
	    if(c=='X'){drukowanie=4; } //drukuj aktualnie zapisane dane :)
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <KOMENDY_BLE+0x534>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b58      	cmp	r3, #88	; 0x58
 8002092:	d103      	bne.n	800209c <KOMENDY_BLE+0x4e4>
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <KOMENDY_BLE+0x540>)
 8002096:	2204      	movs	r2, #4
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	e0d2      	b.n	8002242 <KOMENDY_BLE+0x68a>

    else if(c=='g'){wynik=30; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //MAX_PID_WARTOSC
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <KOMENDY_BLE+0x534>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b67      	cmp	r3, #103	; 0x67
 80020a2:	d10f      	bne.n	80020c4 <KOMENDY_BLE+0x50c>
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <KOMENDY_BLE+0x538>)
 80020a6:	221e      	movs	r2, #30
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <KOMENDY_BLE+0x540>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <KOMENDY_BLE+0x53c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <KOMENDY_BLE+0x544>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <KOMENDY_BLE+0x548>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e0be      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='h'){wynik=131; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //pr_tyl
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <KOMENDY_BLE+0x534>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b68      	cmp	r3, #104	; 0x68
 80020ca:	d11b      	bne.n	8002104 <KOMENDY_BLE+0x54c>
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <KOMENDY_BLE+0x538>)
 80020ce:	2283      	movs	r2, #131	; 0x83
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <KOMENDY_BLE+0x540>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <KOMENDY_BLE+0x53c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <KOMENDY_BLE+0x544>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <KOMENDY_BLE+0x548>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e0aa      	b.n	8002242 <KOMENDY_BLE+0x68a>
 80020ec:	2400028e 	.word	0x2400028e
 80020f0:	2400028c 	.word	0x2400028c
 80020f4:	2400028f 	.word	0x2400028f
 80020f8:	2400028d 	.word	0x2400028d
 80020fc:	24000000 	.word	0x24000000
 8002100:	24000290 	.word	0x24000290
    else if(c=='q'){wynik=32; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //SUMAMAX
 8002104:	4b54      	ldr	r3, [pc, #336]	; (8002258 <KOMENDY_BLE+0x6a0>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b71      	cmp	r3, #113	; 0x71
 800210a:	d10f      	bne.n	800212c <KOMENDY_BLE+0x574>
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <KOMENDY_BLE+0x6a4>)
 800210e:	2220      	movs	r2, #32
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	4b53      	ldr	r3, [pc, #332]	; (8002260 <KOMENDY_BLE+0x6a8>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	4b52      	ldr	r3, [pc, #328]	; (8002264 <KOMENDY_BLE+0x6ac>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	4b52      	ldr	r3, [pc, #328]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <KOMENDY_BLE+0x6b4>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e08a      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='w'){wynik=33; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //Rezerww1
 800212c:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <KOMENDY_BLE+0x6a0>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b77      	cmp	r3, #119	; 0x77
 8002132:	d10f      	bne.n	8002154 <KOMENDY_BLE+0x59c>
 8002134:	4b49      	ldr	r3, [pc, #292]	; (800225c <KOMENDY_BLE+0x6a4>)
 8002136:	2221      	movs	r2, #33	; 0x21
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	4b49      	ldr	r3, [pc, #292]	; (8002260 <KOMENDY_BLE+0x6a8>)
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	4b48      	ldr	r3, [pc, #288]	; (8002264 <KOMENDY_BLE+0x6ac>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	4b48      	ldr	r3, [pc, #288]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	4b47      	ldr	r3, [pc, #284]	; (800226c <KOMENDY_BLE+0x6b4>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e076      	b.n	8002242 <KOMENDY_BLE+0x68a>


    else if(c=='e'){wynik=134; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0; } //test silnika   //zmienna 1
 8002154:	4b40      	ldr	r3, [pc, #256]	; (8002258 <KOMENDY_BLE+0x6a0>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b65      	cmp	r3, #101	; 0x65
 800215a:	d10f      	bne.n	800217c <KOMENDY_BLE+0x5c4>
 800215c:	4b3f      	ldr	r3, [pc, #252]	; (800225c <KOMENDY_BLE+0x6a4>)
 800215e:	2286      	movs	r2, #134	; 0x86
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <KOMENDY_BLE+0x6a8>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	4b3e      	ldr	r3, [pc, #248]	; (8002264 <KOMENDY_BLE+0x6ac>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	4b3d      	ldr	r3, [pc, #244]	; (800226c <KOMENDY_BLE+0x6b4>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e062      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='`'){wynik=135; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //test silnika stop //zmienna 2
 800217c:	4b36      	ldr	r3, [pc, #216]	; (8002258 <KOMENDY_BLE+0x6a0>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b60      	cmp	r3, #96	; 0x60
 8002182:	d10f      	bne.n	80021a4 <KOMENDY_BLE+0x5ec>
 8002184:	4b35      	ldr	r3, [pc, #212]	; (800225c <KOMENDY_BLE+0x6a4>)
 8002186:	2287      	movs	r2, #135	; 0x87
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	4b35      	ldr	r3, [pc, #212]	; (8002260 <KOMENDY_BLE+0x6a8>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <KOMENDY_BLE+0x6ac>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	4b34      	ldr	r3, [pc, #208]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	4b33      	ldr	r3, [pc, #204]	; (800226c <KOMENDY_BLE+0x6b4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e04e      	b.n	8002242 <KOMENDY_BLE+0x68a>

    else if(c=='t'){wynik=36; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //zmienna 3
 80021a4:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <KOMENDY_BLE+0x6a0>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b74      	cmp	r3, #116	; 0x74
 80021aa:	d10f      	bne.n	80021cc <KOMENDY_BLE+0x614>
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <KOMENDY_BLE+0x6a4>)
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <KOMENDY_BLE+0x6a8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <KOMENDY_BLE+0x6ac>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <KOMENDY_BLE+0x6b0>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <KOMENDY_BLE+0x6b4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e03a      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='y'){wynik=37; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //zmienna 4
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <KOMENDY_BLE+0x6a0>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b79      	cmp	r3, #121	; 0x79
 80021d2:	d10f      	bne.n	80021f4 <KOMENDY_BLE+0x63c>
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <KOMENDY_BLE+0x6a4>)
 80021d6:	2225      	movs	r2, #37	; 0x25
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <KOMENDY_BLE+0x6a8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <KOMENDY_BLE+0x6ac>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <KOMENDY_BLE+0x6b0>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <KOMENDY_BLE+0x6b4>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	e026      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='j'){wynik=38; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //zmienna 5
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <KOMENDY_BLE+0x6a0>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b6a      	cmp	r3, #106	; 0x6a
 80021fa:	d10f      	bne.n	800221c <KOMENDY_BLE+0x664>
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <KOMENDY_BLE+0x6a4>)
 80021fe:	2226      	movs	r2, #38	; 0x26
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <KOMENDY_BLE+0x6a8>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <KOMENDY_BLE+0x6ac>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <KOMENDY_BLE+0x6b4>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e012      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='J'){wynik=39; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //zmienna 6
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <KOMENDY_BLE+0x6a0>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b4a      	cmp	r3, #74	; 0x4a
 8002222:	d10e      	bne.n	8002242 <KOMENDY_BLE+0x68a>
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <KOMENDY_BLE+0x6a4>)
 8002226:	2227      	movs	r2, #39	; 0x27
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <KOMENDY_BLE+0x6a8>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <KOMENDY_BLE+0x6ac>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <KOMENDY_BLE+0x6b4>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]




    if(wynik!=0)
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <KOMENDY_BLE+0x6a4>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <KOMENDY_BLE+0x696>
    {
    	PRZYPISYWANIEWARTOSCI ();
 800224a:	f000 ffb5 	bl	80031b8 <PRZYPISYWANIEWARTOSCI>
    }
      wynik=0;
 800224e:	4b03      	ldr	r3, [pc, #12]	; (800225c <KOMENDY_BLE+0x6a4>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
 }
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	2400028e 	.word	0x2400028e
 800225c:	2400028c 	.word	0x2400028c
 8002260:	2400028d 	.word	0x2400028d
 8002264:	2400028f 	.word	0x2400028f
 8002268:	24000000 	.word	0x24000000
 800226c:	24000290 	.word	0x24000290

08002270 <DANE_DO_APLIKACJI_MOBILNEJ>:

void DANE_DO_APLIKACJI_MOBILNEJ()
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	  DRUKUJCZUJNIKI();
 8002274:	f000 fa3c 	bl	80026f0 <DRUKUJCZUJNIKI>
	  WyslijWartoscERR();
 8002278:	f000 fc28 	bl	8002acc <WyslijWartoscERR>
	  DRUKUJ_PID();
 800227c:	f000 f806 	bl	800228c <DRUKUJ_PID>
	  PID_DO_BLE();
 8002280:	f000 f940 	bl	8002504 <PID_DO_BLE>
	  ZMIENNE_ZAAW_DO_BLE();
 8002284:	f001 f9c0 	bl	8003608 <ZMIENNE_ZAAW_DO_BLE>

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <DRUKUJ_PID>:

void DRUKUJ_PID()
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0
	if(drukowanie==3)
 8002292:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <DRUKUJ_PID+0x244>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b03      	cmp	r3, #3
 8002298:	f040 8115 	bne.w	80024c6 <DRUKUJ_PID+0x23a>
	 {

		 char after_con_val[32]={0};
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	f107 0308 	add.w	r3, r7, #8
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
 80022b0:	615a      	str	r2, [r3, #20]
 80022b2:	619a      	str	r2, [r3, #24]

	 // Serial.println("jestem tutaj");

	    drukowanie=3;
 80022b4:	4b86      	ldr	r3, [pc, #536]	; (80024d0 <DRUKUJ_PID+0x244>)
 80022b6:	2203      	movs	r2, #3
 80022b8:	701a      	strb	r2, [r3, #0]
	  if ( k_wys_pom==1 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 80022ba:	4b86      	ldr	r3, [pc, #536]	; (80024d4 <DRUKUJ_PID+0x248>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12e      	bne.n	8002320 <DRUKUJ_PID+0x94>
 80022c2:	f003 fe0d 	bl	8005ee0 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b83      	ldr	r3, [pc, #524]	; (80024d8 <DRUKUJ_PID+0x24c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b0e      	cmp	r3, #14
 80022d0:	d926      	bls.n	8002320 <DRUKUJ_PID+0x94>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 80022d2:	f003 fe05 	bl	8005ee0 <HAL_GetTick>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4a7f      	ldr	r2, [pc, #508]	; (80024d8 <DRUKUJ_PID+0x24c>)
 80022da:	6013      	str	r3, [r2, #0]

	   ftoa(PID_value,after_con_val ,2);
 80022dc:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <DRUKUJ_PID+0x250>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	eeb0 0b47 	vmov.f64	d0, d7
 80022f0:	f002 f8ce 	bl	8004490 <ftoa>
	   strcat(after_con_val, "a");
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fd fff2 	bl	80002e0 <strlen>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	4413      	add	r3, r2
 8002304:	4976      	ldr	r1, [pc, #472]	; (80024e0 <DRUKUJ_PID+0x254>)
 8002306:	461a      	mov	r2, r3
 8002308:	460b      	mov	r3, r1
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fd21 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002316:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <DRUKUJ_PID+0x248>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	4a6d      	ldr	r2, [pc, #436]	; (80024d4 <DRUKUJ_PID+0x248>)
 800231e:	6013      	str	r3, [r2, #0]
	  }
	  if ( k_wys_pom==2 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002320:	4b6c      	ldr	r3, [pc, #432]	; (80024d4 <DRUKUJ_PID+0x248>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d129      	bne.n	800237c <DRUKUJ_PID+0xf0>
 8002328:	f003 fdda 	bl	8005ee0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <DRUKUJ_PID+0x24c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b0e      	cmp	r3, #14
 8002336:	d921      	bls.n	800237c <DRUKUJ_PID+0xf0>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002338:	f003 fdd2 	bl	8005ee0 <HAL_GetTick>
 800233c:	4603      	mov	r3, r0
 800233e:	4a66      	ldr	r2, [pc, #408]	; (80024d8 <DRUKUJ_PID+0x24c>)
 8002340:	6013      	str	r3, [r2, #0]

	   itoa(Pr_Silnika_Lewego,after_con_val ,10);
 8002342:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <DRUKUJ_PID+0x258>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1d39      	adds	r1, r7, #4
 8002348:	220a      	movs	r2, #10
 800234a:	4618      	mov	r0, r3
 800234c:	f011 fce8 	bl	8013d20 <itoa>
	   strcat(after_con_val, "s");
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	4618      	mov	r0, r3
 8002354:	f7fd ffc4 	bl	80002e0 <strlen>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4413      	add	r3, r2
 8002360:	4961      	ldr	r1, [pc, #388]	; (80024e8 <DRUKUJ_PID+0x25c>)
 8002362:	461a      	mov	r2, r3
 8002364:	460b      	mov	r3, r1
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fcf3 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002372:	4b58      	ldr	r3, [pc, #352]	; (80024d4 <DRUKUJ_PID+0x248>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3301      	adds	r3, #1
 8002378:	4a56      	ldr	r2, [pc, #344]	; (80024d4 <DRUKUJ_PID+0x248>)
 800237a:	6013      	str	r3, [r2, #0]
	  }
	    if ( k_wys_pom==3 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 800237c:	4b55      	ldr	r3, [pc, #340]	; (80024d4 <DRUKUJ_PID+0x248>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d129      	bne.n	80023d8 <DRUKUJ_PID+0x14c>
 8002384:	f003 fdac 	bl	8005ee0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <DRUKUJ_PID+0x24c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b0e      	cmp	r3, #14
 8002392:	d921      	bls.n	80023d8 <DRUKUJ_PID+0x14c>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002394:	f003 fda4 	bl	8005ee0 <HAL_GetTick>
 8002398:	4603      	mov	r3, r0
 800239a:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <DRUKUJ_PID+0x24c>)
 800239c:	6013      	str	r3, [r2, #0]

	   itoa(Pr_Silnika_Prawego,after_con_val ,10);
 800239e:	4b53      	ldr	r3, [pc, #332]	; (80024ec <DRUKUJ_PID+0x260>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1d39      	adds	r1, r7, #4
 80023a4:	220a      	movs	r2, #10
 80023a6:	4618      	mov	r0, r3
 80023a8:	f011 fcba 	bl	8013d20 <itoa>
	   strcat(after_con_val, "d");
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fd ff96 	bl	80002e0 <strlen>
 80023b4:	4603      	mov	r3, r0
 80023b6:	461a      	mov	r2, r3
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	4413      	add	r3, r2
 80023bc:	494c      	ldr	r1, [pc, #304]	; (80024f0 <DRUKUJ_PID+0x264>)
 80023be:	461a      	mov	r2, r3
 80023c0:	460b      	mov	r3, r1
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fcc5 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <DRUKUJ_PID+0x248>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	4a3f      	ldr	r2, [pc, #252]	; (80024d4 <DRUKUJ_PID+0x248>)
 80023d6:	6013      	str	r3, [r2, #0]
	   }
	       if ( k_wys_pom==4 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 80023d8:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <DRUKUJ_PID+0x248>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d141      	bne.n	8002464 <DRUKUJ_PID+0x1d8>
 80023e0:	f003 fd7e 	bl	8005ee0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <DRUKUJ_PID+0x24c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b0e      	cmp	r3, #14
 80023ee:	d939      	bls.n	8002464 <DRUKUJ_PID+0x1d8>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 80023f0:	f003 fd76 	bl	8005ee0 <HAL_GetTick>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4a38      	ldr	r2, [pc, #224]	; (80024d8 <DRUKUJ_PID+0x24c>)
 80023f8:	6013      	str	r3, [r2, #0]

	   char helper[20]={0};
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
 80023fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
	   ftoa(ERR_CZ,helper ,2);
 800240c:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <DRUKUJ_PID+0x268>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241a:	2102      	movs	r1, #2
 800241c:	4618      	mov	r0, r3
 800241e:	eeb0 0b47 	vmov.f64	d0, d7
 8002422:	f002 f835 	bl	8004490 <ftoa>

	   strcat(after_con_val, "ERROR:");
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd ff59 	bl	80002e0 <strlen>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	4413      	add	r3, r2
 8002436:	4a30      	ldr	r2, [pc, #192]	; (80024f8 <DRUKUJ_PID+0x26c>)
 8002438:	6810      	ldr	r0, [r2, #0]
 800243a:	6018      	str	r0, [r3, #0]
 800243c:	8891      	ldrh	r1, [r2, #4]
 800243e:	7992      	ldrb	r2, [r2, #6]
 8002440:	8099      	strh	r1, [r3, #4]
 8002442:	719a      	strb	r2, [r3, #6]

	   strcat(after_con_val, helper);
 8002444:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f012 fadf 	bl	8014a10 <strcat>
	   DO_BLE(after_con_val);
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fc7f 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <DRUKUJ_PID+0x248>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <DRUKUJ_PID+0x248>)
 8002462:	6013      	str	r3, [r2, #0]
	   }
	       if ( k_wys_pom==5 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <DRUKUJ_PID+0x248>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d12c      	bne.n	80024c6 <DRUKUJ_PID+0x23a>
 800246c:	f003 fd38 	bl	8005ee0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <DRUKUJ_PID+0x24c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b0e      	cmp	r3, #14
 800247a:	d924      	bls.n	80024c6 <DRUKUJ_PID+0x23a>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 800247c:	f003 fd30 	bl	8005ee0 <HAL_GetTick>
 8002480:	4603      	mov	r3, r0
 8002482:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <DRUKUJ_PID+0x24c>)
 8002484:	6013      	str	r3, [r2, #0]

	   itoa(KI_SUMA,after_con_val ,10);
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <DRUKUJ_PID+0x270>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	220a      	movs	r2, #10
 8002494:	4619      	mov	r1, r3
 8002496:	ee17 0a90 	vmov	r0, s15
 800249a:	f011 fc41 	bl	8013d20 <itoa>
	   strcat(after_con_val, "f");
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fd ff1d 	bl	80002e0 <strlen>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	4413      	add	r3, r2
 80024ae:	4914      	ldr	r1, [pc, #80]	; (8002500 <DRUKUJ_PID+0x274>)
 80024b0:	461a      	mov	r2, r3
 80024b2:	460b      	mov	r3, r1
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fc4c 	bl	8000d58 <DO_BLE>
	   k_wys_pom=1;
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <DRUKUJ_PID+0x248>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
	    }

	  }


}
 80024c6:	bf00      	nop
 80024c8:	3738      	adds	r7, #56	; 0x38
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2400028d 	.word	0x2400028d
 80024d4:	24000000 	.word	0x24000000
 80024d8:	24000284 	.word	0x24000284
 80024dc:	2400029c 	.word	0x2400029c
 80024e0:	08019158 	.word	0x08019158
 80024e4:	240002d0 	.word	0x240002d0
 80024e8:	0801915c 	.word	0x0801915c
 80024ec:	240002cc 	.word	0x240002cc
 80024f0:	08019160 	.word	0x08019160
 80024f4:	24000234 	.word	0x24000234
 80024f8:	08019164 	.word	0x08019164
 80024fc:	240002a0 	.word	0x240002a0
 8002500:	0801916c 	.word	0x0801916c

08002504 <PID_DO_BLE>:

void PID_DO_BLE()
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
	  if(drukowanie==1)
 800250a:	4b6e      	ldr	r3, [pc, #440]	; (80026c4 <PID_DO_BLE+0x1c0>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 80d3 	bne.w	80026ba <PID_DO_BLE+0x1b6>
	 {
		  char after_con_val[32]={0};
 8002514:	2300      	movs	r3, #0
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	611a      	str	r2, [r3, #16]
 8002526:	615a      	str	r2, [r3, #20]
 8002528:	619a      	str	r2, [r3, #24]

	  if (k_wys_pom==1 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <PID_DO_BLE+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d12e      	bne.n	8002590 <PID_DO_BLE+0x8c>
 8002532:	f003 fcd5 	bl	8005ee0 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	4b64      	ldr	r3, [pc, #400]	; (80026cc <PID_DO_BLE+0x1c8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b0e      	cmp	r3, #14
 8002540:	d926      	bls.n	8002590 <PID_DO_BLE+0x8c>
		  ZapamientanyCzasK_BLE = HAL_GetTick();
 8002542:	f003 fccd 	bl	8005ee0 <HAL_GetTick>
 8002546:	4603      	mov	r3, r0
 8002548:	4a60      	ldr	r2, [pc, #384]	; (80026cc <PID_DO_BLE+0x1c8>)
 800254a:	6013      	str	r3, [r2, #0]

	    ftoa(Kp,after_con_val ,2);
 800254c:	4b60      	ldr	r3, [pc, #384]	; (80026d0 <PID_DO_BLE+0x1cc>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002556:	463b      	mov	r3, r7
 8002558:	2102      	movs	r1, #2
 800255a:	4618      	mov	r0, r3
 800255c:	eeb0 0b47 	vmov.f64	d0, d7
 8002560:	f001 ff96 	bl	8004490 <ftoa>
		   strcat(after_con_val, "l");
 8002564:	463b      	mov	r3, r7
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd feba 	bl	80002e0 <strlen>
 800256c:	4603      	mov	r3, r0
 800256e:	461a      	mov	r2, r3
 8002570:	463b      	mov	r3, r7
 8002572:	4413      	add	r3, r2
 8002574:	4957      	ldr	r1, [pc, #348]	; (80026d4 <PID_DO_BLE+0x1d0>)
 8002576:	461a      	mov	r2, r3
 8002578:	460b      	mov	r3, r1
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	8013      	strh	r3, [r2, #0]
		  DO_BLE(after_con_val);
 800257e:	463b      	mov	r3, r7
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fbe9 	bl	8000d58 <DO_BLE>
		k_wys_pom++;
 8002586:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <PID_DO_BLE+0x1c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <PID_DO_BLE+0x1c4>)
 800258e:	6013      	str	r3, [r2, #0]
	  }
	  if (k_wys_pom==2 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002590:	4b4d      	ldr	r3, [pc, #308]	; (80026c8 <PID_DO_BLE+0x1c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d12e      	bne.n	80025f6 <PID_DO_BLE+0xf2>
 8002598:	f003 fca2 	bl	8005ee0 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <PID_DO_BLE+0x1c8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b0e      	cmp	r3, #14
 80025a6:	d926      	bls.n	80025f6 <PID_DO_BLE+0xf2>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 80025a8:	f003 fc9a 	bl	8005ee0 <HAL_GetTick>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4a47      	ldr	r2, [pc, #284]	; (80026cc <PID_DO_BLE+0x1c8>)
 80025b0:	6013      	str	r3, [r2, #0]

	    ftoa(Kd,after_con_val ,2);
 80025b2:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <PID_DO_BLE+0x1d4>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025bc:	463b      	mov	r3, r7
 80025be:	2102      	movs	r1, #2
 80025c0:	4618      	mov	r0, r3
 80025c2:	eeb0 0b47 	vmov.f64	d0, d7
 80025c6:	f001 ff63 	bl	8004490 <ftoa>
		   strcat(after_con_val, "k");
 80025ca:	463b      	mov	r3, r7
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd fe87 	bl	80002e0 <strlen>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	463b      	mov	r3, r7
 80025d8:	4413      	add	r3, r2
 80025da:	4940      	ldr	r1, [pc, #256]	; (80026dc <PID_DO_BLE+0x1d8>)
 80025dc:	461a      	mov	r2, r3
 80025de:	460b      	mov	r3, r1
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	8013      	strh	r3, [r2, #0]
		  DO_BLE(after_con_val);
 80025e4:	463b      	mov	r3, r7
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fbb6 	bl	8000d58 <DO_BLE>
		k_wys_pom++;
 80025ec:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <PID_DO_BLE+0x1c4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	4a35      	ldr	r2, [pc, #212]	; (80026c8 <PID_DO_BLE+0x1c4>)
 80025f4:	6013      	str	r3, [r2, #0]
	  }
	    if (k_wys_pom==3 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <PID_DO_BLE+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d12e      	bne.n	800265c <PID_DO_BLE+0x158>
 80025fe:	f003 fc6f 	bl	8005ee0 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	4b31      	ldr	r3, [pc, #196]	; (80026cc <PID_DO_BLE+0x1c8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b0e      	cmp	r3, #14
 800260c:	d926      	bls.n	800265c <PID_DO_BLE+0x158>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 800260e:	f003 fc67 	bl	8005ee0 <HAL_GetTick>
 8002612:	4603      	mov	r3, r0
 8002614:	4a2d      	ldr	r2, [pc, #180]	; (80026cc <PID_DO_BLE+0x1c8>)
 8002616:	6013      	str	r3, [r2, #0]

	    ftoa(pr_pocz_silnikow,after_con_val ,2);
 8002618:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <PID_DO_BLE+0x1dc>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002622:	463b      	mov	r3, r7
 8002624:	2102      	movs	r1, #2
 8002626:	4618      	mov	r0, r3
 8002628:	eeb0 0b47 	vmov.f64	d0, d7
 800262c:	f001 ff30 	bl	8004490 <ftoa>
			   strcat(after_con_val, "m");
 8002630:	463b      	mov	r3, r7
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd fe54 	bl	80002e0 <strlen>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	463b      	mov	r3, r7
 800263e:	4413      	add	r3, r2
 8002640:	4928      	ldr	r1, [pc, #160]	; (80026e4 <PID_DO_BLE+0x1e0>)
 8002642:	461a      	mov	r2, r3
 8002644:	460b      	mov	r3, r1
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	8013      	strh	r3, [r2, #0]
			  DO_BLE(after_con_val);
 800264a:	463b      	mov	r3, r7
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fb83 	bl	8000d58 <DO_BLE>
			k_wys_pom++;
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <PID_DO_BLE+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <PID_DO_BLE+0x1c4>)
 800265a:	6013      	str	r3, [r2, #0]
	   }
	       if (k_wys_pom==4 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <PID_DO_BLE+0x1c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d12a      	bne.n	80026ba <PID_DO_BLE+0x1b6>
 8002664:	f003 fc3c 	bl	8005ee0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <PID_DO_BLE+0x1c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b0e      	cmp	r3, #14
 8002672:	d922      	bls.n	80026ba <PID_DO_BLE+0x1b6>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002674:	f003 fc34 	bl	8005ee0 <HAL_GetTick>
 8002678:	4603      	mov	r3, r0
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <PID_DO_BLE+0x1c8>)
 800267c:	6013      	str	r3, [r2, #0]
	 //Serial.println("jestem tutaj");
	    itoa(CzasProbkowania_CZ_Rozniczkujacego,after_con_val ,10);
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <PID_DO_BLE+0x1e4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4639      	mov	r1, r7
 8002684:	220a      	movs	r2, #10
 8002686:	4618      	mov	r0, r3
 8002688:	f011 fb4a 	bl	8013d20 <itoa>
			   strcat(after_con_val, "w");
 800268c:	463b      	mov	r3, r7
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd fe26 	bl	80002e0 <strlen>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	463b      	mov	r3, r7
 800269a:	4413      	add	r3, r2
 800269c:	4913      	ldr	r1, [pc, #76]	; (80026ec <PID_DO_BLE+0x1e8>)
 800269e:	461a      	mov	r2, r3
 80026a0:	460b      	mov	r3, r1
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	8013      	strh	r3, [r2, #0]
			  DO_BLE(after_con_val);
 80026a6:	463b      	mov	r3, r7
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fb55 	bl	8000d58 <DO_BLE>
			k_wys_pom=1;
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <PID_DO_BLE+0x1c4>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
	   drukowanie=0; //tylko jeden raz
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <PID_DO_BLE+0x1c0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
	    }
	  }
}
 80026ba:	bf00      	nop
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2400028d 	.word	0x2400028d
 80026c8:	24000000 	.word	0x24000000
 80026cc:	24000284 	.word	0x24000284
 80026d0:	24000004 	.word	0x24000004
 80026d4:	08019170 	.word	0x08019170
 80026d8:	24000294 	.word	0x24000294
 80026dc:	08019174 	.word	0x08019174
 80026e0:	24000008 	.word	0x24000008
 80026e4:	08019178 	.word	0x08019178
 80026e8:	240002d4 	.word	0x240002d4
 80026ec:	0801917c 	.word	0x0801917c

080026f0 <DRUKUJCZUJNIKI>:
//literka n jest wolna!!

void DRUKUJCZUJNIKI()
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08e      	sub	sp, #56	; 0x38
 80026f4:	af00      	add	r7, sp, #0
  if(czujnikiactiv==1)
 80026f6:	4bb3      	ldr	r3, [pc, #716]	; (80029c4 <DRUKUJCZUJNIKI+0x2d4>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 81d8 	bne.w	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
{
	  char Pom_String[20]={0};
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
	  char after_con_int[32]={0};
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	615a      	str	r2, [r3, #20]
 8002728:	619a      	str	r2, [r3, #24]
  drukowanie=0;
 800272a:	4ba7      	ldr	r3, [pc, #668]	; (80029c8 <DRUKUJCZUJNIKI+0x2d8>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
    if ( HAL_GetTick() - ZapamientanyCzasK_BLE >= 15) {
 8002730:	f003 fbd6 	bl	8005ee0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	4ba5      	ldr	r3, [pc, #660]	; (80029cc <DRUKUJCZUJNIKI+0x2dc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b0e      	cmp	r3, #14
 800273e:	f240 81b7 	bls.w	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
    	ZapamientanyCzasK_BLE = HAL_GetTick();
 8002742:	f003 fbcd 	bl	8005ee0 <HAL_GetTick>
 8002746:	4603      	mov	r3, r0
 8002748:	4aa0      	ldr	r2, [pc, #640]	; (80029cc <DRUKUJCZUJNIKI+0x2dc>)
 800274a:	6013      	str	r3, [r2, #0]

          if(k_wys_pom==1)  { itoa(DANE_Z_CZUJNIKOW[0],after_con_int,10); strcat(Pom_String, "CZ1:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;	}
 800274c:	4ba0      	ldr	r3, [pc, #640]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d128      	bne.n	80027a6 <DRUKUJCZUJNIKI+0xb6>
 8002754:	4b9f      	ldr	r3, [pc, #636]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	220a      	movs	r2, #10
 800275e:	4619      	mov	r1, r3
 8002760:	f011 fade 	bl	8013d20 <itoa>
 8002764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fdb9 	bl	80002e0 <strlen>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002776:	4413      	add	r3, r2
 8002778:	4a97      	ldr	r2, [pc, #604]	; (80029d8 <DRUKUJCZUJNIKI+0x2e8>)
 800277a:	6810      	ldr	r0, [r2, #0]
 800277c:	6018      	str	r0, [r3, #0]
 800277e:	7912      	ldrb	r2, [r2, #4]
 8002780:	711a      	strb	r2, [r3, #4]
 8002782:	1d3a      	adds	r2, r7, #4
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f012 f940 	bl	8014a10 <strcat>
 8002790:	4b8f      	ldr	r3, [pc, #572]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	4a8e      	ldr	r2, [pc, #568]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fada 	bl	8000d58 <DO_BLE>
 80027a4:	e184      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==2)  { itoa(DANE_Z_CZUJNIKOW[1],after_con_int,10); strcat(Pom_String, "CZ2:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 80027a6:	4b8a      	ldr	r3, [pc, #552]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d128      	bne.n	8002800 <DRUKUJCZUJNIKI+0x110>
 80027ae:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 80027b0:	885b      	ldrh	r3, [r3, #2]
 80027b2:	4618      	mov	r0, r3
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	220a      	movs	r2, #10
 80027b8:	4619      	mov	r1, r3
 80027ba:	f011 fab1 	bl	8013d20 <itoa>
 80027be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fd8c 	bl	80002e0 <strlen>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d0:	4413      	add	r3, r2
 80027d2:	4a82      	ldr	r2, [pc, #520]	; (80029dc <DRUKUJCZUJNIKI+0x2ec>)
 80027d4:	6810      	ldr	r0, [r2, #0]
 80027d6:	6018      	str	r0, [r3, #0]
 80027d8:	7912      	ldrb	r2, [r2, #4]
 80027da:	711a      	strb	r2, [r3, #4]
 80027dc:	1d3a      	adds	r2, r7, #4
 80027de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f012 f913 	bl	8014a10 <strcat>
 80027ea:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3301      	adds	r3, #1
 80027f0:	4a77      	ldr	r2, [pc, #476]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe faad 	bl	8000d58 <DO_BLE>
 80027fe:	e157      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==3)  { itoa(DANE_Z_CZUJNIKOW[2],after_con_int,10); strcat(Pom_String, "CZ3:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 8002800:	4b73      	ldr	r3, [pc, #460]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d128      	bne.n	800285a <DRUKUJCZUJNIKI+0x16a>
 8002808:	4b72      	ldr	r3, [pc, #456]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 800280a:	889b      	ldrh	r3, [r3, #4]
 800280c:	4618      	mov	r0, r3
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	220a      	movs	r2, #10
 8002812:	4619      	mov	r1, r3
 8002814:	f011 fa84 	bl	8013d20 <itoa>
 8002818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd fd5f 	bl	80002e0 <strlen>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282a:	4413      	add	r3, r2
 800282c:	4a6c      	ldr	r2, [pc, #432]	; (80029e0 <DRUKUJCZUJNIKI+0x2f0>)
 800282e:	6810      	ldr	r0, [r2, #0]
 8002830:	6018      	str	r0, [r3, #0]
 8002832:	7912      	ldrb	r2, [r2, #4]
 8002834:	711a      	strb	r2, [r3, #4]
 8002836:	1d3a      	adds	r2, r7, #4
 8002838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f012 f8e6 	bl	8014a10 <strcat>
 8002844:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3301      	adds	r3, #1
 800284a:	4a61      	ldr	r2, [pc, #388]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fa80 	bl	8000d58 <DO_BLE>
 8002858:	e12a      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==4)  { itoa(DANE_Z_CZUJNIKOW[3],after_con_int,10); strcat(Pom_String, "CZ4:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d128      	bne.n	80028b4 <DRUKUJCZUJNIKI+0x1c4>
 8002862:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 8002864:	88db      	ldrh	r3, [r3, #6]
 8002866:	4618      	mov	r0, r3
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	220a      	movs	r2, #10
 800286c:	4619      	mov	r1, r3
 800286e:	f011 fa57 	bl	8013d20 <itoa>
 8002872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fd32 	bl	80002e0 <strlen>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002884:	4413      	add	r3, r2
 8002886:	4a57      	ldr	r2, [pc, #348]	; (80029e4 <DRUKUJCZUJNIKI+0x2f4>)
 8002888:	6810      	ldr	r0, [r2, #0]
 800288a:	6018      	str	r0, [r3, #0]
 800288c:	7912      	ldrb	r2, [r2, #4]
 800288e:	711a      	strb	r2, [r3, #4]
 8002890:	1d3a      	adds	r2, r7, #4
 8002892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f012 f8b9 	bl	8014a10 <strcat>
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	4a4a      	ldr	r2, [pc, #296]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe fa53 	bl	8000d58 <DO_BLE>
 80028b2:	e0fd      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==5)  { itoa(DANE_Z_CZUJNIKOW[4],after_con_int,10); strcat(Pom_String, "CZ5:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 80028b4:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d128      	bne.n	800290e <DRUKUJCZUJNIKI+0x21e>
 80028bc:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 80028be:	891b      	ldrh	r3, [r3, #8]
 80028c0:	4618      	mov	r0, r3
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	220a      	movs	r2, #10
 80028c6:	4619      	mov	r1, r3
 80028c8:	f011 fa2a 	bl	8013d20 <itoa>
 80028cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fd05 	bl	80002e0 <strlen>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028de:	4413      	add	r3, r2
 80028e0:	4a41      	ldr	r2, [pc, #260]	; (80029e8 <DRUKUJCZUJNIKI+0x2f8>)
 80028e2:	6810      	ldr	r0, [r2, #0]
 80028e4:	6018      	str	r0, [r3, #0]
 80028e6:	7912      	ldrb	r2, [r2, #4]
 80028e8:	711a      	strb	r2, [r3, #4]
 80028ea:	1d3a      	adds	r2, r7, #4
 80028ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f012 f88c 	bl	8014a10 <strcat>
 80028f8:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	4a34      	ldr	r2, [pc, #208]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fa26 	bl	8000d58 <DO_BLE>
 800290c:	e0d0      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==6)  { itoa(DANE_Z_CZUJNIKOW[5],after_con_int,10); strcat(Pom_String, "CZ6:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 800290e:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d128      	bne.n	8002968 <DRUKUJCZUJNIKI+0x278>
 8002916:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 8002918:	895b      	ldrh	r3, [r3, #10]
 800291a:	4618      	mov	r0, r3
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	220a      	movs	r2, #10
 8002920:	4619      	mov	r1, r3
 8002922:	f011 f9fd 	bl	8013d20 <itoa>
 8002926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fcd8 	bl	80002e0 <strlen>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	4413      	add	r3, r2
 800293a:	4a2c      	ldr	r2, [pc, #176]	; (80029ec <DRUKUJCZUJNIKI+0x2fc>)
 800293c:	6810      	ldr	r0, [r2, #0]
 800293e:	6018      	str	r0, [r3, #0]
 8002940:	7912      	ldrb	r2, [r2, #4]
 8002942:	711a      	strb	r2, [r3, #4]
 8002944:	1d3a      	adds	r2, r7, #4
 8002946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f012 f85f 	bl	8014a10 <strcat>
 8002952:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	4a1d      	ldr	r2, [pc, #116]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe f9f9 	bl	8000d58 <DO_BLE>
 8002966:	e0a3      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==7)  { itoa(DANE_Z_CZUJNIKOW[6],after_con_int,10); strcat(Pom_String, "CZ7:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b07      	cmp	r3, #7
 800296e:	d141      	bne.n	80029f4 <DRUKUJCZUJNIKI+0x304>
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 8002972:	899b      	ldrh	r3, [r3, #12]
 8002974:	4618      	mov	r0, r3
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	220a      	movs	r2, #10
 800297a:	4619      	mov	r1, r3
 800297c:	f011 f9d0 	bl	8013d20 <itoa>
 8002980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fcab 	bl	80002e0 <strlen>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002992:	4413      	add	r3, r2
 8002994:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <DRUKUJCZUJNIKI+0x300>)
 8002996:	6810      	ldr	r0, [r2, #0]
 8002998:	6018      	str	r0, [r3, #0]
 800299a:	7912      	ldrb	r2, [r2, #4]
 800299c:	711a      	strb	r2, [r3, #4]
 800299e:	1d3a      	adds	r2, r7, #4
 80029a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f012 f832 	bl	8014a10 <strcat>
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe f9cc 	bl	8000d58 <DO_BLE>
 80029c0:	e076      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
 80029c2:	bf00      	nop
 80029c4:	2400028f 	.word	0x2400028f
 80029c8:	2400028d 	.word	0x2400028d
 80029cc:	24000284 	.word	0x24000284
 80029d0:	24000000 	.word	0x24000000
 80029d4:	24000480 	.word	0x24000480
 80029d8:	08019180 	.word	0x08019180
 80029dc:	08019188 	.word	0x08019188
 80029e0:	08019190 	.word	0x08019190
 80029e4:	08019198 	.word	0x08019198
 80029e8:	080191a0 	.word	0x080191a0
 80029ec:	080191a8 	.word	0x080191a8
 80029f0:	080191b0 	.word	0x080191b0
          if(k_wys_pom==8)  { itoa(DANE_Z_CZUJNIKOW[7],after_con_int,10); strcat(Pom_String, "CZ8:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 80029f4:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <DRUKUJCZUJNIKI+0x3c8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d128      	bne.n	8002a4e <DRUKUJCZUJNIKI+0x35e>
 80029fc:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <DRUKUJCZUJNIKI+0x3cc>)
 80029fe:	89db      	ldrh	r3, [r3, #14]
 8002a00:	4618      	mov	r0, r3
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	220a      	movs	r2, #10
 8002a06:	4619      	mov	r1, r3
 8002a08:	f011 f98a 	bl	8013d20 <itoa>
 8002a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fc65 	bl	80002e0 <strlen>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <DRUKUJCZUJNIKI+0x3d0>)
 8002a22:	6810      	ldr	r0, [r2, #0]
 8002a24:	6018      	str	r0, [r3, #0]
 8002a26:	7912      	ldrb	r2, [r2, #4]
 8002a28:	711a      	strb	r2, [r3, #4]
 8002a2a:	1d3a      	adds	r2, r7, #4
 8002a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f011 ffec 	bl	8014a10 <strcat>
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <DRUKUJCZUJNIKI+0x3c8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <DRUKUJCZUJNIKI+0x3c8>)
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe f986 	bl	8000d58 <DO_BLE>
 8002a4c:	e030      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==9)  { ftoa(ERR_CZ,after_con_int ,2);  strcat(Pom_String, "ERROR:"); strcat(Pom_String,after_con_int );  k_wys_pom=1; DO_BLE(Pom_String); return;  }
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <DRUKUJCZUJNIKI+0x3c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b09      	cmp	r3, #9
 8002a54:	d12c      	bne.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <DRUKUJCZUJNIKI+0x3d4>)
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2102      	movs	r1, #2
 8002a64:	4618      	mov	r0, r3
 8002a66:	eeb0 0b47 	vmov.f64	d0, d7
 8002a6a:	f001 fd11 	bl	8004490 <ftoa>
 8002a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fc34 	bl	80002e0 <strlen>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a80:	4413      	add	r3, r2
 8002a82:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <DRUKUJCZUJNIKI+0x3d8>)
 8002a84:	6810      	ldr	r0, [r2, #0]
 8002a86:	6018      	str	r0, [r3, #0]
 8002a88:	8891      	ldrh	r1, [r2, #4]
 8002a8a:	7992      	ldrb	r2, [r2, #6]
 8002a8c:	8099      	strh	r1, [r3, #4]
 8002a8e:	719a      	strb	r2, [r3, #6]
 8002a90:	1d3a      	adds	r2, r7, #4
 8002a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f011 ffb9 	bl	8014a10 <strcat>
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <DRUKUJCZUJNIKI+0x3c8>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe f955 	bl	8000d58 <DO_BLE>
 8002aae:	bf00      	nop
          }
    }
}
 8002ab0:	3738      	adds	r7, #56	; 0x38
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	24000000 	.word	0x24000000
 8002abc:	24000480 	.word	0x24000480
 8002ac0:	080191b8 	.word	0x080191b8
 8002ac4:	24000234 	.word	0x24000234
 8002ac8:	08019164 	.word	0x08019164

08002acc <WyslijWartoscERR>:

void WyslijWartoscERR()
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
	   if(drukowanie==2) //to cale jest do napisania
 8002ad2:	4bc3      	ldr	r3, [pc, #780]	; (8002de0 <WyslijWartoscERR+0x314>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	f040 8361 	bne.w	800319e <WyslijWartoscERR+0x6d2>
	 {
		  	  char after_con_val[32]={0};
 8002adc:	2300      	movs	r3, #0
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	611a      	str	r2, [r3, #16]
 8002aee:	615a      	str	r2, [r3, #20]
 8002af0:	619a      	str	r2, [r3, #24]


	 //   drukowanie=2;


	  if (k_wys_pom==1 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002af2:	4bbc      	ldr	r3, [pc, #752]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d12e      	bne.n	8002b58 <WyslijWartoscERR+0x8c>
 8002afa:	f003 f9f1 	bl	8005ee0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4bb9      	ldr	r3, [pc, #740]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b0e      	cmp	r3, #14
 8002b08:	d926      	bls.n	8002b58 <WyslijWartoscERR+0x8c>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002b0a:	f003 f9e9 	bl	8005ee0 <HAL_GetTick>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4ab5      	ldr	r2, [pc, #724]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002b12:	6013      	str	r3, [r2, #0]

	   ftoa(er1,after_con_val ,2);
 8002b14:	4bb5      	ldr	r3, [pc, #724]	; (8002dec <WyslijWartoscERR+0x320>)
 8002b16:	edd3 7a00 	vldr	s15, [r3]
 8002b1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b1e:	463b      	mov	r3, r7
 8002b20:	2102      	movs	r1, #2
 8002b22:	4618      	mov	r0, r3
 8002b24:	eeb0 0b47 	vmov.f64	d0, d7
 8002b28:	f001 fcb2 	bl	8004490 <ftoa>
	   strcat(after_con_val, "*");
 8002b2c:	463b      	mov	r3, r7
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fbd6 	bl	80002e0 <strlen>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	463b      	mov	r3, r7
 8002b3a:	4413      	add	r3, r2
 8002b3c:	49ac      	ldr	r1, [pc, #688]	; (8002df0 <WyslijWartoscERR+0x324>)
 8002b3e:	461a      	mov	r2, r3
 8002b40:	460b      	mov	r3, r1
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	8013      	strh	r3, [r2, #0]
	  DO_BLE(after_con_val);
 8002b46:	463b      	mov	r3, r7
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe f905 	bl	8000d58 <DO_BLE>
	k_wys_pom++;
 8002b4e:	4ba5      	ldr	r3, [pc, #660]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4aa3      	ldr	r2, [pc, #652]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002b56:	6013      	str	r3, [r2, #0]
	  }
	  if (k_wys_pom==2 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002b58:	4ba2      	ldr	r3, [pc, #648]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d12e      	bne.n	8002bbe <WyslijWartoscERR+0xf2>
 8002b60:	f003 f9be 	bl	8005ee0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4ba0      	ldr	r3, [pc, #640]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b0e      	cmp	r3, #14
 8002b6e:	d926      	bls.n	8002bbe <WyslijWartoscERR+0xf2>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002b70:	f003 f9b6 	bl	8005ee0 <HAL_GetTick>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4a9c      	ldr	r2, [pc, #624]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002b78:	6013      	str	r3, [r2, #0]
	   ftoa(er2,after_con_val ,2);
 8002b7a:	4b9e      	ldr	r3, [pc, #632]	; (8002df4 <WyslijWartoscERR+0x328>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b84:	463b      	mov	r3, r7
 8002b86:	2102      	movs	r1, #2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	eeb0 0b47 	vmov.f64	d0, d7
 8002b8e:	f001 fc7f 	bl	8004490 <ftoa>
	   strcat(after_con_val, "&");
 8002b92:	463b      	mov	r3, r7
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fba3 	bl	80002e0 <strlen>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4995      	ldr	r1, [pc, #596]	; (8002df8 <WyslijWartoscERR+0x32c>)
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002bac:	463b      	mov	r3, r7
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe f8d2 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002bb4:	4b8b      	ldr	r3, [pc, #556]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	4a8a      	ldr	r2, [pc, #552]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002bbc:	6013      	str	r3, [r2, #0]
	  }
	    if (k_wys_pom==3 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002bbe:	4b89      	ldr	r3, [pc, #548]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d12e      	bne.n	8002c24 <WyslijWartoscERR+0x158>
 8002bc6:	f003 f98b 	bl	8005ee0 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	4b86      	ldr	r3, [pc, #536]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b0e      	cmp	r3, #14
 8002bd4:	d926      	bls.n	8002c24 <WyslijWartoscERR+0x158>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002bd6:	f003 f983 	bl	8005ee0 <HAL_GetTick>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4a82      	ldr	r2, [pc, #520]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002bde:	6013      	str	r3, [r2, #0]
	   ftoa(er3,after_con_val ,2);
 8002be0:	4b86      	ldr	r3, [pc, #536]	; (8002dfc <WyslijWartoscERR+0x330>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bea:	463b      	mov	r3, r7
 8002bec:	2102      	movs	r1, #2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	eeb0 0b47 	vmov.f64	d0, d7
 8002bf4:	f001 fc4c 	bl	8004490 <ftoa>
	   strcat(after_con_val, "^");
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fb70 	bl	80002e0 <strlen>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461a      	mov	r2, r3
 8002c04:	463b      	mov	r3, r7
 8002c06:	4413      	add	r3, r2
 8002c08:	497d      	ldr	r1, [pc, #500]	; (8002e00 <WyslijWartoscERR+0x334>)
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002c12:	463b      	mov	r3, r7
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe f89f 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002c1a:	4b72      	ldr	r3, [pc, #456]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4a70      	ldr	r2, [pc, #448]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c22:	6013      	str	r3, [r2, #0]
	   }
	       if (k_wys_pom==4 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002c24:	4b6f      	ldr	r3, [pc, #444]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d12e      	bne.n	8002c8a <WyslijWartoscERR+0x1be>
 8002c2c:	f003 f958 	bl	8005ee0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b6d      	ldr	r3, [pc, #436]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b0e      	cmp	r3, #14
 8002c3a:	d926      	bls.n	8002c8a <WyslijWartoscERR+0x1be>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002c3c:	f003 f950 	bl	8005ee0 <HAL_GetTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4a69      	ldr	r2, [pc, #420]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002c44:	6013      	str	r3, [r2, #0]

	   ftoa(er4,after_con_val ,2);
 8002c46:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <WyslijWartoscERR+0x338>)
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c50:	463b      	mov	r3, r7
 8002c52:	2102      	movs	r1, #2
 8002c54:	4618      	mov	r0, r3
 8002c56:	eeb0 0b47 	vmov.f64	d0, d7
 8002c5a:	f001 fc19 	bl	8004490 <ftoa>
	   strcat(after_con_val, "_");
 8002c5e:	463b      	mov	r3, r7
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fb3d 	bl	80002e0 <strlen>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	463b      	mov	r3, r7
 8002c6c:	4413      	add	r3, r2
 8002c6e:	4966      	ldr	r1, [pc, #408]	; (8002e08 <WyslijWartoscERR+0x33c>)
 8002c70:	461a      	mov	r2, r3
 8002c72:	460b      	mov	r3, r1
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002c78:	463b      	mov	r3, r7
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f86c 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002c80:	4b58      	ldr	r3, [pc, #352]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	4a57      	ldr	r2, [pc, #348]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c88:	6013      	str	r3, [r2, #0]
	    }
	          if (k_wys_pom==5 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002c8a:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d12e      	bne.n	8002cf0 <WyslijWartoscERR+0x224>
 8002c92:	f003 f925 	bl	8005ee0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b0e      	cmp	r3, #14
 8002ca0:	d926      	bls.n	8002cf0 <WyslijWartoscERR+0x224>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002ca2:	f003 f91d 	bl	8005ee0 <HAL_GetTick>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4a4f      	ldr	r2, [pc, #316]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002caa:	6013      	str	r3, [r2, #0]

	   ftoa(er5,after_con_val ,2);
 8002cac:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <WyslijWartoscERR+0x340>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	2102      	movs	r1, #2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	eeb0 0b47 	vmov.f64	d0, d7
 8002cc0:	f001 fbe6 	bl	8004490 <ftoa>
	   strcat(after_con_val, "$");
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fb0a 	bl	80002e0 <strlen>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	463b      	mov	r3, r7
 8002cd2:	4413      	add	r3, r2
 8002cd4:	494e      	ldr	r1, [pc, #312]	; (8002e10 <WyslijWartoscERR+0x344>)
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	460b      	mov	r3, r1
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002cde:	463b      	mov	r3, r7
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe f839 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3301      	adds	r3, #1
 8002cec:	4a3d      	ldr	r2, [pc, #244]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002cee:	6013      	str	r3, [r2, #0]
	    }
	          if (k_wys_pom==6 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002cf0:	4b3c      	ldr	r3, [pc, #240]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d12e      	bne.n	8002d56 <WyslijWartoscERR+0x28a>
 8002cf8:	f003 f8f2 	bl	8005ee0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b0e      	cmp	r3, #14
 8002d06:	d926      	bls.n	8002d56 <WyslijWartoscERR+0x28a>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002d08:	f003 f8ea 	bl	8005ee0 <HAL_GetTick>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4a36      	ldr	r2, [pc, #216]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002d10:	6013      	str	r3, [r2, #0]

	   ftoa(er6,after_con_val ,2);
 8002d12:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <WyslijWartoscERR+0x348>)
 8002d14:	edd3 7a00 	vldr	s15, [r3]
 8002d18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	2102      	movs	r1, #2
 8002d20:	4618      	mov	r0, r3
 8002d22:	eeb0 0b47 	vmov.f64	d0, d7
 8002d26:	f001 fbb3 	bl	8004490 <ftoa>
	   strcat(after_con_val, "#");
 8002d2a:	463b      	mov	r3, r7
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fad7 	bl	80002e0 <strlen>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	463b      	mov	r3, r7
 8002d38:	4413      	add	r3, r2
 8002d3a:	4937      	ldr	r1, [pc, #220]	; (8002e18 <WyslijWartoscERR+0x34c>)
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	460b      	mov	r3, r1
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002d44:	463b      	mov	r3, r7
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f806 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002d4c:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002d54:	6013      	str	r3, [r2, #0]
	    }
	          if (k_wys_pom==7 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b07      	cmp	r3, #7
 8002d5c:	d12e      	bne.n	8002dbc <WyslijWartoscERR+0x2f0>
 8002d5e:	f003 f8bf 	bl	8005ee0 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b0e      	cmp	r3, #14
 8002d6c:	d926      	bls.n	8002dbc <WyslijWartoscERR+0x2f0>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002d6e:	f003 f8b7 	bl	8005ee0 <HAL_GetTick>
 8002d72:	4603      	mov	r3, r0
 8002d74:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002d76:	6013      	str	r3, [r2, #0]

	   ftoa(er7,after_con_val ,2);
 8002d78:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <WyslijWartoscERR+0x350>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d82:	463b      	mov	r3, r7
 8002d84:	2102      	movs	r1, #2
 8002d86:	4618      	mov	r0, r3
 8002d88:	eeb0 0b47 	vmov.f64	d0, d7
 8002d8c:	f001 fb80 	bl	8004490 <ftoa>
	   strcat(after_con_val, "@");
 8002d90:	463b      	mov	r3, r7
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd faa4 	bl	80002e0 <strlen>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	4413      	add	r3, r2
 8002da0:	491f      	ldr	r1, [pc, #124]	; (8002e20 <WyslijWartoscERR+0x354>)
 8002da2:	461a      	mov	r2, r3
 8002da4:	460b      	mov	r3, r1
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002daa:	463b      	mov	r3, r7
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd ffd3 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002dba:	6013      	str	r3, [r2, #0]
	    }
	          if (k_wys_pom==8 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d151      	bne.n	8002e68 <WyslijWartoscERR+0x39c>
 8002dc4:	f003 f88c 	bl	8005ee0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b0e      	cmp	r3, #14
 8002dd2:	d949      	bls.n	8002e68 <WyslijWartoscERR+0x39c>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002dd4:	f003 f884 	bl	8005ee0 <HAL_GetTick>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e021      	b.n	8002e24 <WyslijWartoscERR+0x358>
 8002de0:	2400028d 	.word	0x2400028d
 8002de4:	24000000 	.word	0x24000000
 8002de8:	24000284 	.word	0x24000284
 8002dec:	24000478 	.word	0x24000478
 8002df0:	080191c0 	.word	0x080191c0
 8002df4:	24000470 	.word	0x24000470
 8002df8:	080191c4 	.word	0x080191c4
 8002dfc:	2400047c 	.word	0x2400047c
 8002e00:	080191c8 	.word	0x080191c8
 8002e04:	2400045c 	.word	0x2400045c
 8002e08:	080191cc 	.word	0x080191cc
 8002e0c:	2400049c 	.word	0x2400049c
 8002e10:	080191d0 	.word	0x080191d0
 8002e14:	24000498 	.word	0x24000498
 8002e18:	080191d4 	.word	0x080191d4
 8002e1c:	240004a8 	.word	0x240004a8
 8002e20:	080191d8 	.word	0x080191d8

	   ftoa(err_max,after_con_val ,2);
 8002e24:	4bc1      	ldr	r3, [pc, #772]	; (800312c <WyslijWartoscERR+0x660>)
 8002e26:	edd3 7a00 	vldr	s15, [r3]
 8002e2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e2e:	463b      	mov	r3, r7
 8002e30:	2102      	movs	r1, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	eeb0 0b47 	vmov.f64	d0, d7
 8002e38:	f001 fb2a 	bl	8004490 <ftoa>
	   strcat(after_con_val, "!");
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd fa4e 	bl	80002e0 <strlen>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461a      	mov	r2, r3
 8002e48:	463b      	mov	r3, r7
 8002e4a:	4413      	add	r3, r2
 8002e4c:	49b8      	ldr	r1, [pc, #736]	; (8003130 <WyslijWartoscERR+0x664>)
 8002e4e:	461a      	mov	r2, r3
 8002e50:	460b      	mov	r3, r1
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002e56:	463b      	mov	r3, r7
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd ff7d 	bl	8000d58 <DO_BLE>
	  // drukowanie=0;
	   //wynik=0;
	   k_wys_pom++;
 8002e5e:	4bb5      	ldr	r3, [pc, #724]	; (8003134 <WyslijWartoscERR+0x668>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	4ab3      	ldr	r2, [pc, #716]	; (8003134 <WyslijWartoscERR+0x668>)
 8002e66:	6013      	str	r3, [r2, #0]

	    }
              if (k_wys_pom==9 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002e68:	4bb2      	ldr	r3, [pc, #712]	; (8003134 <WyslijWartoscERR+0x668>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d129      	bne.n	8002ec4 <WyslijWartoscERR+0x3f8>
 8002e70:	f003 f836 	bl	8005ee0 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4bb0      	ldr	r3, [pc, #704]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b0e      	cmp	r3, #14
 8002e7e:	d921      	bls.n	8002ec4 <WyslijWartoscERR+0x3f8>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002e80:	f003 f82e 	bl	8005ee0 <HAL_GetTick>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4aac      	ldr	r2, [pc, #688]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002e88:	6013      	str	r3, [r2, #0]

	   itoa(czcz1,after_con_val ,10);
 8002e8a:	4bac      	ldr	r3, [pc, #688]	; (800313c <WyslijWartoscERR+0x670>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4639      	mov	r1, r7
 8002e90:	220a      	movs	r2, #10
 8002e92:	4618      	mov	r0, r3
 8002e94:	f010 ff44 	bl	8013d20 <itoa>
	   strcat(after_con_val, "§"); //alt+21
 8002e98:	463b      	mov	r3, r7
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fa20 	bl	80002e0 <strlen>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	4413      	add	r3, r2
 8002ea8:	4aa5      	ldr	r2, [pc, #660]	; (8003140 <WyslijWartoscERR+0x674>)
 8002eaa:	8811      	ldrh	r1, [r2, #0]
 8002eac:	7892      	ldrb	r2, [r2, #2]
 8002eae:	8019      	strh	r1, [r3, #0]
 8002eb0:	709a      	strb	r2, [r3, #2]
	   DO_BLE(after_con_val);
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd ff4f 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002eba:	4b9e      	ldr	r3, [pc, #632]	; (8003134 <WyslijWartoscERR+0x668>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	4a9c      	ldr	r2, [pc, #624]	; (8003134 <WyslijWartoscERR+0x668>)
 8002ec2:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==10 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002ec4:	4b9b      	ldr	r3, [pc, #620]	; (8003134 <WyslijWartoscERR+0x668>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b0a      	cmp	r3, #10
 8002eca:	d129      	bne.n	8002f20 <WyslijWartoscERR+0x454>
 8002ecc:	f003 f808 	bl	8005ee0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b99      	ldr	r3, [pc, #612]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b0e      	cmp	r3, #14
 8002eda:	d921      	bls.n	8002f20 <WyslijWartoscERR+0x454>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002edc:	f003 f800 	bl	8005ee0 <HAL_GetTick>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4a95      	ldr	r2, [pc, #596]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002ee4:	6013      	str	r3, [r2, #0]

	   itoa(czcz2,after_con_val ,10);
 8002ee6:	4b97      	ldr	r3, [pc, #604]	; (8003144 <WyslijWartoscERR+0x678>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4639      	mov	r1, r7
 8002eec:	220a      	movs	r2, #10
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f010 ff16 	bl	8013d20 <itoa>
	   strcat(after_con_val, "H");
 8002ef4:	463b      	mov	r3, r7
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd f9f2 	bl	80002e0 <strlen>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	463b      	mov	r3, r7
 8002f02:	4413      	add	r3, r2
 8002f04:	4990      	ldr	r1, [pc, #576]	; (8003148 <WyslijWartoscERR+0x67c>)
 8002f06:	461a      	mov	r2, r3
 8002f08:	460b      	mov	r3, r1
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002f0e:	463b      	mov	r3, r7
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd ff21 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002f16:	4b87      	ldr	r3, [pc, #540]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a85      	ldr	r2, [pc, #532]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f1e:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==11 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002f20:	4b84      	ldr	r3, [pc, #528]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b0b      	cmp	r3, #11
 8002f26:	d129      	bne.n	8002f7c <WyslijWartoscERR+0x4b0>
 8002f28:	f002 ffda 	bl	8005ee0 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b82      	ldr	r3, [pc, #520]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b0e      	cmp	r3, #14
 8002f36:	d921      	bls.n	8002f7c <WyslijWartoscERR+0x4b0>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002f38:	f002 ffd2 	bl	8005ee0 <HAL_GetTick>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4a7e      	ldr	r2, [pc, #504]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002f40:	6013      	str	r3, [r2, #0]

	   itoa(czcz3,after_con_val ,10);
 8002f42:	4b82      	ldr	r3, [pc, #520]	; (800314c <WyslijWartoscERR+0x680>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4639      	mov	r1, r7
 8002f48:	220a      	movs	r2, #10
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f010 fee8 	bl	8013d20 <itoa>
	   strcat(after_con_val, "Q");
 8002f50:	463b      	mov	r3, r7
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd f9c4 	bl	80002e0 <strlen>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	463b      	mov	r3, r7
 8002f5e:	4413      	add	r3, r2
 8002f60:	497b      	ldr	r1, [pc, #492]	; (8003150 <WyslijWartoscERR+0x684>)
 8002f62:	461a      	mov	r2, r3
 8002f64:	460b      	mov	r3, r1
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002f6a:	463b      	mov	r3, r7
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fef3 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002f72:	4b70      	ldr	r3, [pc, #448]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a6e      	ldr	r2, [pc, #440]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f7a:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==12 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002f7c:	4b6d      	ldr	r3, [pc, #436]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d129      	bne.n	8002fd8 <WyslijWartoscERR+0x50c>
 8002f84:	f002 ffac 	bl	8005ee0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b6b      	ldr	r3, [pc, #428]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b0e      	cmp	r3, #14
 8002f92:	d921      	bls.n	8002fd8 <WyslijWartoscERR+0x50c>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002f94:	f002 ffa4 	bl	8005ee0 <HAL_GetTick>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4a67      	ldr	r2, [pc, #412]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002f9c:	6013      	str	r3, [r2, #0]

	   itoa(czcz4,after_con_val ,10);
 8002f9e:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <WyslijWartoscERR+0x688>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4639      	mov	r1, r7
 8002fa4:	220a      	movs	r2, #10
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f010 feba 	bl	8013d20 <itoa>
	   strcat(after_con_val, "W");
 8002fac:	463b      	mov	r3, r7
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd f996 	bl	80002e0 <strlen>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	463b      	mov	r3, r7
 8002fba:	4413      	add	r3, r2
 8002fbc:	4966      	ldr	r1, [pc, #408]	; (8003158 <WyslijWartoscERR+0x68c>)
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002fc6:	463b      	mov	r3, r7
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd fec5 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002fce:	4b59      	ldr	r3, [pc, #356]	; (8003134 <WyslijWartoscERR+0x668>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4a57      	ldr	r2, [pc, #348]	; (8003134 <WyslijWartoscERR+0x668>)
 8002fd6:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==13 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002fd8:	4b56      	ldr	r3, [pc, #344]	; (8003134 <WyslijWartoscERR+0x668>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b0d      	cmp	r3, #13
 8002fde:	d129      	bne.n	8003034 <WyslijWartoscERR+0x568>
 8002fe0:	f002 ff7e 	bl	8005ee0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b54      	ldr	r3, [pc, #336]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b0e      	cmp	r3, #14
 8002fee:	d921      	bls.n	8003034 <WyslijWartoscERR+0x568>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002ff0:	f002 ff76 	bl	8005ee0 <HAL_GetTick>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4a50      	ldr	r2, [pc, #320]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002ff8:	6013      	str	r3, [r2, #0]


	   itoa(czcz5,after_con_val ,10);
 8002ffa:	4b58      	ldr	r3, [pc, #352]	; (800315c <WyslijWartoscERR+0x690>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4639      	mov	r1, r7
 8003000:	220a      	movs	r2, #10
 8003002:	4618      	mov	r0, r3
 8003004:	f010 fe8c 	bl	8013d20 <itoa>
	   strcat(after_con_val, "?");
 8003008:	463b      	mov	r3, r7
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd f968 	bl	80002e0 <strlen>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	463b      	mov	r3, r7
 8003016:	4413      	add	r3, r2
 8003018:	4951      	ldr	r1, [pc, #324]	; (8003160 <WyslijWartoscERR+0x694>)
 800301a:	461a      	mov	r2, r3
 800301c:	460b      	mov	r3, r1
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8003022:	463b      	mov	r3, r7
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fe97 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 800302a:	4b42      	ldr	r3, [pc, #264]	; (8003134 <WyslijWartoscERR+0x668>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	4a40      	ldr	r2, [pc, #256]	; (8003134 <WyslijWartoscERR+0x668>)
 8003032:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==14 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8003034:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <WyslijWartoscERR+0x668>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b0e      	cmp	r3, #14
 800303a:	d129      	bne.n	8003090 <WyslijWartoscERR+0x5c4>
 800303c:	f002 ff50 	bl	8005ee0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <WyslijWartoscERR+0x66c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b0e      	cmp	r3, #14
 800304a:	d921      	bls.n	8003090 <WyslijWartoscERR+0x5c4>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 800304c:	f002 ff48 	bl	8005ee0 <HAL_GetTick>
 8003050:	4603      	mov	r3, r0
 8003052:	4a39      	ldr	r2, [pc, #228]	; (8003138 <WyslijWartoscERR+0x66c>)
 8003054:	6013      	str	r3, [r2, #0]

	   itoa(czcz6,after_con_val ,10);
 8003056:	4b43      	ldr	r3, [pc, #268]	; (8003164 <WyslijWartoscERR+0x698>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4639      	mov	r1, r7
 800305c:	220a      	movs	r2, #10
 800305e:	4618      	mov	r0, r3
 8003060:	f010 fe5e 	bl	8013d20 <itoa>
	   strcat(after_con_val, "L");
 8003064:	463b      	mov	r3, r7
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd f93a 	bl	80002e0 <strlen>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	463b      	mov	r3, r7
 8003072:	4413      	add	r3, r2
 8003074:	493c      	ldr	r1, [pc, #240]	; (8003168 <WyslijWartoscERR+0x69c>)
 8003076:	461a      	mov	r2, r3
 8003078:	460b      	mov	r3, r1
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 800307e:	463b      	mov	r3, r7
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fe69 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8003086:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <WyslijWartoscERR+0x668>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	4a29      	ldr	r2, [pc, #164]	; (8003134 <WyslijWartoscERR+0x668>)
 800308e:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==15 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8003090:	4b28      	ldr	r3, [pc, #160]	; (8003134 <WyslijWartoscERR+0x668>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b0f      	cmp	r3, #15
 8003096:	d129      	bne.n	80030ec <WyslijWartoscERR+0x620>
 8003098:	f002 ff22 	bl	8005ee0 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <WyslijWartoscERR+0x66c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b0e      	cmp	r3, #14
 80030a6:	d921      	bls.n	80030ec <WyslijWartoscERR+0x620>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 80030a8:	f002 ff1a 	bl	8005ee0 <HAL_GetTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4a22      	ldr	r2, [pc, #136]	; (8003138 <WyslijWartoscERR+0x66c>)
 80030b0:	6013      	str	r3, [r2, #0]

	   itoa(czcz7,after_con_val ,10);
 80030b2:	4b2e      	ldr	r3, [pc, #184]	; (800316c <WyslijWartoscERR+0x6a0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4639      	mov	r1, r7
 80030b8:	220a      	movs	r2, #10
 80030ba:	4618      	mov	r0, r3
 80030bc:	f010 fe30 	bl	8013d20 <itoa>
	   strcat(after_con_val, "T");
 80030c0:	463b      	mov	r3, r7
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd f90c 	bl	80002e0 <strlen>
 80030c8:	4603      	mov	r3, r0
 80030ca:	461a      	mov	r2, r3
 80030cc:	463b      	mov	r3, r7
 80030ce:	4413      	add	r3, r2
 80030d0:	4927      	ldr	r1, [pc, #156]	; (8003170 <WyslijWartoscERR+0x6a4>)
 80030d2:	461a      	mov	r2, r3
 80030d4:	460b      	mov	r3, r1
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 80030da:	463b      	mov	r3, r7
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd fe3b 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <WyslijWartoscERR+0x668>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	4a12      	ldr	r2, [pc, #72]	; (8003134 <WyslijWartoscERR+0x668>)
 80030ea:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==16 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <WyslijWartoscERR+0x668>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d154      	bne.n	800319e <WyslijWartoscERR+0x6d2>
 80030f4:	f002 fef4 	bl	8005ee0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <WyslijWartoscERR+0x66c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b0e      	cmp	r3, #14
 8003102:	d94c      	bls.n	800319e <WyslijWartoscERR+0x6d2>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8003104:	f002 feec 	bl	8005ee0 <HAL_GetTick>
 8003108:	4603      	mov	r3, r0
 800310a:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <WyslijWartoscERR+0x66c>)
 800310c:	6013      	str	r3, [r2, #0]

	   itoa(czcz8,after_con_val ,10);
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <WyslijWartoscERR+0x6a8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4639      	mov	r1, r7
 8003114:	220a      	movs	r2, #10
 8003116:	4618      	mov	r0, r3
 8003118:	f010 fe02 	bl	8013d20 <itoa>
	   strcat(after_con_val, "Y");
 800311c:	463b      	mov	r3, r7
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f8de 	bl	80002e0 <strlen>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	463b      	mov	r3, r7
 800312a:	e025      	b.n	8003178 <WyslijWartoscERR+0x6ac>
 800312c:	24000468 	.word	0x24000468
 8003130:	080191dc 	.word	0x080191dc
 8003134:	24000000 	.word	0x24000000
 8003138:	24000284 	.word	0x24000284
 800313c:	24000490 	.word	0x24000490
 8003140:	080191e0 	.word	0x080191e0
 8003144:	240004a0 	.word	0x240004a0
 8003148:	080191e4 	.word	0x080191e4
 800314c:	24000474 	.word	0x24000474
 8003150:	080191e8 	.word	0x080191e8
 8003154:	24000460 	.word	0x24000460
 8003158:	080191ec 	.word	0x080191ec
 800315c:	240004a4 	.word	0x240004a4
 8003160:	080191f0 	.word	0x080191f0
 8003164:	24000494 	.word	0x24000494
 8003168:	080191f4 	.word	0x080191f4
 800316c:	2400046c 	.word	0x2400046c
 8003170:	080191f8 	.word	0x080191f8
 8003174:	24000464 	.word	0x24000464
 8003178:	4413      	add	r3, r2
 800317a:	490b      	ldr	r1, [pc, #44]	; (80031a8 <WyslijWartoscERR+0x6dc>)
 800317c:	461a      	mov	r2, r3
 800317e:	460b      	mov	r3, r1
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8003184:	463b      	mov	r3, r7
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fde6 	bl	8000d58 <DO_BLE>
	   k_wys_pom=1;
 800318c:	4b07      	ldr	r3, [pc, #28]	; (80031ac <WyslijWartoscERR+0x6e0>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]
	    drukowanie=0;
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <WyslijWartoscERR+0x6e4>)
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
	 	  wynik=0;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <WyslijWartoscERR+0x6e8>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]

	    }

	  }
}
 800319e:	bf00      	nop
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	080191fc 	.word	0x080191fc
 80031ac:	24000000 	.word	0x24000000
 80031b0:	2400028d 	.word	0x2400028d
 80031b4:	2400028c 	.word	0x2400028c

080031b8 <PRZYPISYWANIEWARTOSCI>:

void PRZYPISYWANIEWARTOSCI()
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0

	//Z Ekranu "PODST"
  if(wynik==1){
 80031bc:	4bb6      	ldr	r3, [pc, #728]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10d      	bne.n	80031e0 <PRZYPISYWANIEWARTOSCI+0x28>
	  Kp=atof(DANE_BLE);
 80031c4:	48b5      	ldr	r0, [pc, #724]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80031c6:	f010 fd61 	bl	8013c8c <atof>
 80031ca:	eeb0 7b40 	vmov.f64	d7, d0
 80031ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031d2:	4bb3      	ldr	r3, [pc, #716]	; (80034a0 <PRZYPISYWANIEWARTOSCI+0x2e8>)
 80031d4:	edc3 7a00 	vstr	s15, [r3]
	  EEPROM_WRITE_FLOAT(50,&Kp);
 80031d8:	49b1      	ldr	r1, [pc, #708]	; (80034a0 <PRZYPISYWANIEWARTOSCI+0x2e8>)
 80031da:	2032      	movs	r0, #50	; 0x32
 80031dc:	f7fe f85c 	bl	8001298 <EEPROM_WRITE_FLOAT>

    }
  if(wynik==2){
 80031e0:	4bad      	ldr	r3, [pc, #692]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d10d      	bne.n	8003204 <PRZYPISYWANIEWARTOSCI+0x4c>
    Kd=atof(DANE_BLE);
 80031e8:	48ac      	ldr	r0, [pc, #688]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80031ea:	f010 fd4f 	bl	8013c8c <atof>
 80031ee:	eeb0 7b40 	vmov.f64	d7, d0
 80031f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031f6:	4bab      	ldr	r3, [pc, #684]	; (80034a4 <PRZYPISYWANIEWARTOSCI+0x2ec>)
 80031f8:	edc3 7a00 	vstr	s15, [r3]
    EEPROM_WRITE_FLOAT(55,&Kd);
 80031fc:	49a9      	ldr	r1, [pc, #676]	; (80034a4 <PRZYPISYWANIEWARTOSCI+0x2ec>)
 80031fe:	2037      	movs	r0, #55	; 0x37
 8003200:	f7fe f84a 	bl	8001298 <EEPROM_WRITE_FLOAT>
  }
  if(wynik==103){
 8003204:	4ba4      	ldr	r3, [pc, #656]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b67      	cmp	r3, #103	; 0x67
 800320a:	d10d      	bne.n	8003228 <PRZYPISYWANIEWARTOSCI+0x70>
    pr_pocz_silnikow=atof(DANE_BLE);
 800320c:	48a3      	ldr	r0, [pc, #652]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800320e:	f010 fd3d 	bl	8013c8c <atof>
 8003212:	eeb0 7b40 	vmov.f64	d7, d0
 8003216:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800321a:	4ba3      	ldr	r3, [pc, #652]	; (80034a8 <PRZYPISYWANIEWARTOSCI+0x2f0>)
 800321c:	edc3 7a00 	vstr	s15, [r3]
    EEPROM_WRITE_FLOAT(60,&pr_pocz_silnikow);
 8003220:	49a1      	ldr	r1, [pc, #644]	; (80034a8 <PRZYPISYWANIEWARTOSCI+0x2f0>)
 8003222:	203c      	movs	r0, #60	; 0x3c
 8003224:	f7fe f838 	bl	8001298 <EEPROM_WRITE_FLOAT>
}
  if(wynik==4) {
 8003228:	4b9b      	ldr	r3, [pc, #620]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d10d      	bne.n	800324c <PRZYPISYWANIEWARTOSCI+0x94>
    Ki=atof(DANE_BLE);
 8003230:	489a      	ldr	r0, [pc, #616]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003232:	f010 fd2b 	bl	8013c8c <atof>
 8003236:	eeb0 7b40 	vmov.f64	d7, d0
 800323a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800323e:	4b9b      	ldr	r3, [pc, #620]	; (80034ac <PRZYPISYWANIEWARTOSCI+0x2f4>)
 8003240:	edc3 7a00 	vstr	s15, [r3]
    EEPROM_WRITE_FLOAT(65,&Ki);
 8003244:	4999      	ldr	r1, [pc, #612]	; (80034ac <PRZYPISYWANIEWARTOSCI+0x2f4>)
 8003246:	2041      	movs	r0, #65	; 0x41
 8003248:	f7fe f826 	bl	8001298 <EEPROM_WRITE_FLOAT>



  //Z Ekranu "CZUJNIKI"

  if(wynik==10) {
 800324c:	4b92      	ldr	r3, [pc, #584]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b0a      	cmp	r3, #10
 8003252:	d10d      	bne.n	8003270 <PRZYPISYWANIEWARTOSCI+0xb8>
    er1=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(70,&er1);
 8003254:	4891      	ldr	r0, [pc, #580]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003256:	f010 fd19 	bl	8013c8c <atof>
 800325a:	eeb0 7b40 	vmov.f64	d7, d0
 800325e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003262:	4b93      	ldr	r3, [pc, #588]	; (80034b0 <PRZYPISYWANIEWARTOSCI+0x2f8>)
 8003264:	edc3 7a00 	vstr	s15, [r3]
 8003268:	4991      	ldr	r1, [pc, #580]	; (80034b0 <PRZYPISYWANIEWARTOSCI+0x2f8>)
 800326a:	2046      	movs	r0, #70	; 0x46
 800326c:	f7fe f814 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==11) {
 8003270:	4b89      	ldr	r3, [pc, #548]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b0b      	cmp	r3, #11
 8003276:	d10d      	bne.n	8003294 <PRZYPISYWANIEWARTOSCI+0xdc>
    er2=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(75,&er2);
 8003278:	4888      	ldr	r0, [pc, #544]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800327a:	f010 fd07 	bl	8013c8c <atof>
 800327e:	eeb0 7b40 	vmov.f64	d7, d0
 8003282:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003286:	4b8b      	ldr	r3, [pc, #556]	; (80034b4 <PRZYPISYWANIEWARTOSCI+0x2fc>)
 8003288:	edc3 7a00 	vstr	s15, [r3]
 800328c:	4989      	ldr	r1, [pc, #548]	; (80034b4 <PRZYPISYWANIEWARTOSCI+0x2fc>)
 800328e:	204b      	movs	r0, #75	; 0x4b
 8003290:	f7fe f802 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==12) {
 8003294:	4b80      	ldr	r3, [pc, #512]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d10d      	bne.n	80032b8 <PRZYPISYWANIEWARTOSCI+0x100>
    er3=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(80,&er3);
 800329c:	487f      	ldr	r0, [pc, #508]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800329e:	f010 fcf5 	bl	8013c8c <atof>
 80032a2:	eeb0 7b40 	vmov.f64	d7, d0
 80032a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032aa:	4b83      	ldr	r3, [pc, #524]	; (80034b8 <PRZYPISYWANIEWARTOSCI+0x300>)
 80032ac:	edc3 7a00 	vstr	s15, [r3]
 80032b0:	4981      	ldr	r1, [pc, #516]	; (80034b8 <PRZYPISYWANIEWARTOSCI+0x300>)
 80032b2:	2050      	movs	r0, #80	; 0x50
 80032b4:	f7fd fff0 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==13) {
 80032b8:	4b77      	ldr	r3, [pc, #476]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b0d      	cmp	r3, #13
 80032be:	d10d      	bne.n	80032dc <PRZYPISYWANIEWARTOSCI+0x124>
    er4=atof(DANE_BLE);
 80032c0:	4876      	ldr	r0, [pc, #472]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80032c2:	f010 fce3 	bl	8013c8c <atof>
 80032c6:	eeb0 7b40 	vmov.f64	d7, d0
 80032ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032ce:	4b7b      	ldr	r3, [pc, #492]	; (80034bc <PRZYPISYWANIEWARTOSCI+0x304>)
 80032d0:	edc3 7a00 	vstr	s15, [r3]
    EEPROM_WRITE_FLOAT(85,&er4);
 80032d4:	4979      	ldr	r1, [pc, #484]	; (80034bc <PRZYPISYWANIEWARTOSCI+0x304>)
 80032d6:	2055      	movs	r0, #85	; 0x55
 80032d8:	f7fd ffde 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==14) {
 80032dc:	4b6e      	ldr	r3, [pc, #440]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b0e      	cmp	r3, #14
 80032e2:	d10d      	bne.n	8003300 <PRZYPISYWANIEWARTOSCI+0x148>
    er5=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(90,&er5);
 80032e4:	486d      	ldr	r0, [pc, #436]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80032e6:	f010 fcd1 	bl	8013c8c <atof>
 80032ea:	eeb0 7b40 	vmov.f64	d7, d0
 80032ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032f2:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <PRZYPISYWANIEWARTOSCI+0x308>)
 80032f4:	edc3 7a00 	vstr	s15, [r3]
 80032f8:	4971      	ldr	r1, [pc, #452]	; (80034c0 <PRZYPISYWANIEWARTOSCI+0x308>)
 80032fa:	205a      	movs	r0, #90	; 0x5a
 80032fc:	f7fd ffcc 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==15) {
 8003300:	4b65      	ldr	r3, [pc, #404]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b0f      	cmp	r3, #15
 8003306:	d10d      	bne.n	8003324 <PRZYPISYWANIEWARTOSCI+0x16c>
    er6=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(100,&er6); //adres 95 uszkodzony? :/
 8003308:	4864      	ldr	r0, [pc, #400]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800330a:	f010 fcbf 	bl	8013c8c <atof>
 800330e:	eeb0 7b40 	vmov.f64	d7, d0
 8003312:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003316:	4b6b      	ldr	r3, [pc, #428]	; (80034c4 <PRZYPISYWANIEWARTOSCI+0x30c>)
 8003318:	edc3 7a00 	vstr	s15, [r3]
 800331c:	4969      	ldr	r1, [pc, #420]	; (80034c4 <PRZYPISYWANIEWARTOSCI+0x30c>)
 800331e:	2064      	movs	r0, #100	; 0x64
 8003320:	f7fd ffba 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==16) {
 8003324:	4b5c      	ldr	r3, [pc, #368]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b10      	cmp	r3, #16
 800332a:	d10d      	bne.n	8003348 <PRZYPISYWANIEWARTOSCI+0x190>
    er7=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(105,&er7);
 800332c:	485b      	ldr	r0, [pc, #364]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800332e:	f010 fcad 	bl	8013c8c <atof>
 8003332:	eeb0 7b40 	vmov.f64	d7, d0
 8003336:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800333a:	4b63      	ldr	r3, [pc, #396]	; (80034c8 <PRZYPISYWANIEWARTOSCI+0x310>)
 800333c:	edc3 7a00 	vstr	s15, [r3]
 8003340:	4961      	ldr	r1, [pc, #388]	; (80034c8 <PRZYPISYWANIEWARTOSCI+0x310>)
 8003342:	2069      	movs	r0, #105	; 0x69
 8003344:	f7fd ffa8 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==17) {
 8003348:	4b53      	ldr	r3, [pc, #332]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b11      	cmp	r3, #17
 800334e:	d10d      	bne.n	800336c <PRZYPISYWANIEWARTOSCI+0x1b4>
    	err_max=atof(DANE_BLE); EEPROM_WRITE_FLOAT(115,&err_max); //adres 110 uszkodzony? :/
 8003350:	4852      	ldr	r0, [pc, #328]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003352:	f010 fc9b 	bl	8013c8c <atof>
 8003356:	eeb0 7b40 	vmov.f64	d7, d0
 800335a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800335e:	4b5b      	ldr	r3, [pc, #364]	; (80034cc <PRZYPISYWANIEWARTOSCI+0x314>)
 8003360:	edc3 7a00 	vstr	s15, [r3]
 8003364:	4959      	ldr	r1, [pc, #356]	; (80034cc <PRZYPISYWANIEWARTOSCI+0x314>)
 8003366:	2073      	movs	r0, #115	; 0x73
 8003368:	f7fd ff96 	bl	8001298 <EEPROM_WRITE_FLOAT>
  }




    if(wynik==40) {
 800336c:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b28      	cmp	r3, #40	; 0x28
 8003372:	d10a      	bne.n	800338a <PRZYPISYWANIEWARTOSCI+0x1d2>
    	czcz1=atoi(DANE_BLE);  EEPROM_WRITE_INT(265,&czcz1); //adres 200 uszkodzony? tak
 8003374:	4849      	ldr	r0, [pc, #292]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003376:	f010 fc8c 	bl	8013c92 <atoi>
 800337a:	4603      	mov	r3, r0
 800337c:	4a54      	ldr	r2, [pc, #336]	; (80034d0 <PRZYPISYWANIEWARTOSCI+0x318>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4953      	ldr	r1, [pc, #332]	; (80034d0 <PRZYPISYWANIEWARTOSCI+0x318>)
 8003382:	f240 1009 	movw	r0, #265	; 0x109
 8003386:	f7fd ffbf 	bl	8001308 <EEPROM_WRITE_INT>
    	}
      if(wynik==41) {
 800338a:	4b43      	ldr	r3, [pc, #268]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b29      	cmp	r3, #41	; 0x29
 8003390:	d109      	bne.n	80033a6 <PRZYPISYWANIEWARTOSCI+0x1ee>
    	  czcz2=atoi(DANE_BLE);  EEPROM_WRITE_INT(245,&czcz2); //adres 205 uszkodzony? tak nwm o co kmn anyway
 8003392:	4842      	ldr	r0, [pc, #264]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003394:	f010 fc7d 	bl	8013c92 <atoi>
 8003398:	4603      	mov	r3, r0
 800339a:	4a4e      	ldr	r2, [pc, #312]	; (80034d4 <PRZYPISYWANIEWARTOSCI+0x31c>)
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	494d      	ldr	r1, [pc, #308]	; (80034d4 <PRZYPISYWANIEWARTOSCI+0x31c>)
 80033a0:	20f5      	movs	r0, #245	; 0xf5
 80033a2:	f7fd ffb1 	bl	8001308 <EEPROM_WRITE_INT>
      	  }
      if(wynik==42) {
 80033a6:	4b3c      	ldr	r3, [pc, #240]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b2a      	cmp	r3, #42	; 0x2a
 80033ac:	d109      	bne.n	80033c2 <PRZYPISYWANIEWARTOSCI+0x20a>
    	  czcz3=atoi(DANE_BLE);  EEPROM_WRITE_INT(210,&czcz3);
 80033ae:	483b      	ldr	r0, [pc, #236]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80033b0:	f010 fc6f 	bl	8013c92 <atoi>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4a48      	ldr	r2, [pc, #288]	; (80034d8 <PRZYPISYWANIEWARTOSCI+0x320>)
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4947      	ldr	r1, [pc, #284]	; (80034d8 <PRZYPISYWANIEWARTOSCI+0x320>)
 80033bc:	20d2      	movs	r0, #210	; 0xd2
 80033be:	f7fd ffa3 	bl	8001308 <EEPROM_WRITE_INT>
      	  }
      if(wynik==43) {
 80033c2:	4b35      	ldr	r3, [pc, #212]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b2b      	cmp	r3, #43	; 0x2b
 80033c8:	d109      	bne.n	80033de <PRZYPISYWANIEWARTOSCI+0x226>
    	  czcz4=atoi(DANE_BLE);  EEPROM_WRITE_INT(215,&czcz4);
 80033ca:	4834      	ldr	r0, [pc, #208]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80033cc:	f010 fc61 	bl	8013c92 <atoi>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4a42      	ldr	r2, [pc, #264]	; (80034dc <PRZYPISYWANIEWARTOSCI+0x324>)
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4941      	ldr	r1, [pc, #260]	; (80034dc <PRZYPISYWANIEWARTOSCI+0x324>)
 80033d8:	20d7      	movs	r0, #215	; 0xd7
 80033da:	f7fd ff95 	bl	8001308 <EEPROM_WRITE_INT>
      	  }
      if(wynik==44) {
 80033de:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b2c      	cmp	r3, #44	; 0x2c
 80033e4:	d109      	bne.n	80033fa <PRZYPISYWANIEWARTOSCI+0x242>
    	  czcz5=atoi(DANE_BLE);  EEPROM_WRITE_INT(220,&czcz5);
 80033e6:	482d      	ldr	r0, [pc, #180]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80033e8:	f010 fc53 	bl	8013c92 <atoi>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4a3c      	ldr	r2, [pc, #240]	; (80034e0 <PRZYPISYWANIEWARTOSCI+0x328>)
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	493b      	ldr	r1, [pc, #236]	; (80034e0 <PRZYPISYWANIEWARTOSCI+0x328>)
 80033f4:	20dc      	movs	r0, #220	; 0xdc
 80033f6:	f7fd ff87 	bl	8001308 <EEPROM_WRITE_INT>
      	  }
      	  if(wynik==45) {
 80033fa:	4b27      	ldr	r3, [pc, #156]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b2d      	cmp	r3, #45	; 0x2d
 8003400:	d109      	bne.n	8003416 <PRZYPISYWANIEWARTOSCI+0x25e>
    	  	  czcz6=atoi(DANE_BLE);  EEPROM_WRITE_INT(225,&czcz6);
 8003402:	4826      	ldr	r0, [pc, #152]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003404:	f010 fc45 	bl	8013c92 <atoi>
 8003408:	4603      	mov	r3, r0
 800340a:	4a36      	ldr	r2, [pc, #216]	; (80034e4 <PRZYPISYWANIEWARTOSCI+0x32c>)
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4935      	ldr	r1, [pc, #212]	; (80034e4 <PRZYPISYWANIEWARTOSCI+0x32c>)
 8003410:	20e1      	movs	r0, #225	; 0xe1
 8003412:	f7fd ff79 	bl	8001308 <EEPROM_WRITE_INT>
      	  }
      if(wynik==46) {
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b2e      	cmp	r3, #46	; 0x2e
 800341c:	d109      	bne.n	8003432 <PRZYPISYWANIEWARTOSCI+0x27a>
    	  czcz7=atoi(DANE_BLE);  EEPROM_WRITE_INT(230,&czcz7);
 800341e:	481f      	ldr	r0, [pc, #124]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003420:	f010 fc37 	bl	8013c92 <atoi>
 8003424:	4603      	mov	r3, r0
 8003426:	4a30      	ldr	r2, [pc, #192]	; (80034e8 <PRZYPISYWANIEWARTOSCI+0x330>)
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	492f      	ldr	r1, [pc, #188]	; (80034e8 <PRZYPISYWANIEWARTOSCI+0x330>)
 800342c:	20e6      	movs	r0, #230	; 0xe6
 800342e:	f7fd ff6b 	bl	8001308 <EEPROM_WRITE_INT>
      }
        if(wynik==47) {
 8003432:	4b19      	ldr	r3, [pc, #100]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b2f      	cmp	r3, #47	; 0x2f
 8003438:	d109      	bne.n	800344e <PRZYPISYWANIEWARTOSCI+0x296>
        	czcz8=atoi(DANE_BLE);  EEPROM_WRITE_INT(235,&czcz8);
 800343a:	4818      	ldr	r0, [pc, #96]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800343c:	f010 fc29 	bl	8013c92 <atoi>
 8003440:	4603      	mov	r3, r0
 8003442:	4a2a      	ldr	r2, [pc, #168]	; (80034ec <PRZYPISYWANIEWARTOSCI+0x334>)
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4929      	ldr	r1, [pc, #164]	; (80034ec <PRZYPISYWANIEWARTOSCI+0x334>)
 8003448:	20eb      	movs	r0, #235	; 0xeb
 800344a:	f7fd ff5d 	bl	8001308 <EEPROM_WRITE_INT>


        //@@@@@@@@@@@@@@@
//Z Ekranu "ZAAW"

    if(wynik==30) {
 800344e:	4b12      	ldr	r3, [pc, #72]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b1e      	cmp	r3, #30
 8003454:	d10e      	bne.n	8003474 <PRZYPISYWANIEWARTOSCI+0x2bc>
    	MAX_PID=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(400,&MAX_PID);
 8003456:	4811      	ldr	r0, [pc, #68]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003458:	f010 fc18 	bl	8013c8c <atof>
 800345c:	eeb0 7b40 	vmov.f64	d7, d0
 8003460:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003464:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <PRZYPISYWANIEWARTOSCI+0x338>)
 8003466:	edc3 7a00 	vstr	s15, [r3]
 800346a:	4921      	ldr	r1, [pc, #132]	; (80034f0 <PRZYPISYWANIEWARTOSCI+0x338>)
 800346c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003470:	f7fd ff12 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
      if(wynik==131) {
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b83      	cmp	r3, #131	; 0x83
 800347a:	d10a      	bne.n	8003492 <PRZYPISYWANIEWARTOSCI+0x2da>
    pr_tyl=atoi(DANE_BLE);  EEPROM_WRITE_INT(405,&pr_tyl);
 800347c:	4807      	ldr	r0, [pc, #28]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800347e:	f010 fc08 	bl	8013c92 <atoi>
 8003482:	4603      	mov	r3, r0
 8003484:	4a1b      	ldr	r2, [pc, #108]	; (80034f4 <PRZYPISYWANIEWARTOSCI+0x33c>)
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	491a      	ldr	r1, [pc, #104]	; (80034f4 <PRZYPISYWANIEWARTOSCI+0x33c>)
 800348a:	f240 1095 	movw	r0, #405	; 0x195
 800348e:	f7fd ff3b 	bl	8001308 <EEPROM_WRITE_INT>

  }
      if(wynik==32) {
 8003492:	4b01      	ldr	r3, [pc, #4]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	e02f      	b.n	80034f8 <PRZYPISYWANIEWARTOSCI+0x340>
 8003498:	2400028c 	.word	0x2400028c
 800349c:	240003a0 	.word	0x240003a0
 80034a0:	24000004 	.word	0x24000004
 80034a4:	24000294 	.word	0x24000294
 80034a8:	24000008 	.word	0x24000008
 80034ac:	24000298 	.word	0x24000298
 80034b0:	24000478 	.word	0x24000478
 80034b4:	24000470 	.word	0x24000470
 80034b8:	2400047c 	.word	0x2400047c
 80034bc:	2400045c 	.word	0x2400045c
 80034c0:	2400049c 	.word	0x2400049c
 80034c4:	24000498 	.word	0x24000498
 80034c8:	240004a8 	.word	0x240004a8
 80034cc:	24000468 	.word	0x24000468
 80034d0:	24000490 	.word	0x24000490
 80034d4:	240004a0 	.word	0x240004a0
 80034d8:	24000474 	.word	0x24000474
 80034dc:	24000460 	.word	0x24000460
 80034e0:	240004a4 	.word	0x240004a4
 80034e4:	24000494 	.word	0x24000494
 80034e8:	2400046c 	.word	0x2400046c
 80034ec:	24000464 	.word	0x24000464
 80034f0:	240002b0 	.word	0x240002b0
 80034f4:	240002c0 	.word	0x240002c0
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d10e      	bne.n	800351a <PRZYPISYWANIEWARTOSCI+0x362>
    	  SUMA_MAX=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(410,&SUMA_MAX);
 80034fc:	4839      	ldr	r0, [pc, #228]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 80034fe:	f010 fbc5 	bl	8013c8c <atof>
 8003502:	eeb0 7b40 	vmov.f64	d7, d0
 8003506:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800350a:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <PRZYPISYWANIEWARTOSCI+0x430>)
 800350c:	edc3 7a00 	vstr	s15, [r3]
 8003510:	4935      	ldr	r1, [pc, #212]	; (80035e8 <PRZYPISYWANIEWARTOSCI+0x430>)
 8003512:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003516:	f7fd febf 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
      if(wynik==33) {
 800351a:	4b34      	ldr	r3, [pc, #208]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b21      	cmp	r3, #33	; 0x21
 8003520:	d10a      	bne.n	8003538 <PRZYPISYWANIEWARTOSCI+0x380>
    CzasProbkowania_CZ_Rozniczkujacego=atoi(DANE_BLE);
 8003522:	4830      	ldr	r0, [pc, #192]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 8003524:	f010 fbb5 	bl	8013c92 <atoi>
 8003528:	4603      	mov	r3, r0
 800352a:	4a31      	ldr	r2, [pc, #196]	; (80035f0 <PRZYPISYWANIEWARTOSCI+0x438>)
 800352c:	6013      	str	r3, [r2, #0]

   EEPROM_WRITE_INT(420,&CzasProbkowania_CZ_Rozniczkujacego);
 800352e:	4930      	ldr	r1, [pc, #192]	; (80035f0 <PRZYPISYWANIEWARTOSCI+0x438>)
 8003530:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003534:	f7fd fee8 	bl	8001308 <EEPROM_WRITE_INT>

  }

      if(wynik==134) { //test silnika wl
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b86      	cmp	r3, #134	; 0x86
 800353e:	d102      	bne.n	8003546 <PRZYPISYWANIEWARTOSCI+0x38e>
    	  T_SIL=1;
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <PRZYPISYWANIEWARTOSCI+0x43c>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]
  }
      if(wynik==135) { //tesy silnika wyl
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b87      	cmp	r3, #135	; 0x87
 800354c:	d102      	bne.n	8003554 <PRZYPISYWANIEWARTOSCI+0x39c>
    	  T_SIL=0;
 800354e:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <PRZYPISYWANIEWARTOSCI+0x43c>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
  }

      if(wynik==36) {
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b24      	cmp	r3, #36	; 0x24
 800355a:	d10e      	bne.n	800357a <PRZYPISYWANIEWARTOSCI+0x3c2>
     	  ZMIENNA3=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(440,&ZMIENNA3);
 800355c:	4821      	ldr	r0, [pc, #132]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 800355e:	f010 fb95 	bl	8013c8c <atof>
 8003562:	eeb0 7b40 	vmov.f64	d7, d0
 8003566:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800356a:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <PRZYPISYWANIEWARTOSCI+0x440>)
 800356c:	edc3 7a00 	vstr	s15, [r3]
 8003570:	4921      	ldr	r1, [pc, #132]	; (80035f8 <PRZYPISYWANIEWARTOSCI+0x440>)
 8003572:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8003576:	f7fd fe8f 	bl	8001298 <EEPROM_WRITE_FLOAT>

   }

      if(wynik==37) {
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b25      	cmp	r3, #37	; 0x25
 8003580:	d110      	bne.n	80035a4 <PRZYPISYWANIEWARTOSCI+0x3ec>
    	  ZMIENNA4=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(445,&ZMIENNA4);
 8003582:	4818      	ldr	r0, [pc, #96]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 8003584:	f010 fb82 	bl	8013c8c <atof>
 8003588:	eeb0 7b40 	vmov.f64	d7, d0
 800358c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <PRZYPISYWANIEWARTOSCI+0x444>)
 8003592:	edc3 7a00 	vstr	s15, [r3]
 8003596:	4919      	ldr	r1, [pc, #100]	; (80035fc <PRZYPISYWANIEWARTOSCI+0x444>)
 8003598:	f240 10bd 	movw	r0, #445	; 0x1bd
 800359c:	f7fd fe7c 	bl	8001298 <EEPROM_WRITE_FLOAT>
    	  HAL_NVIC_SystemReset();
 80035a0:	f004 f8d9 	bl	8007756 <HAL_NVIC_SystemReset>
  }

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IR STATE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
      if(wynik==38) {
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b26      	cmp	r3, #38	; 0x26
 80035aa:	d10a      	bne.n	80035c2 <PRZYPISYWANIEWARTOSCI+0x40a>
    	  IR_READY=atoi(DANE_BLE);  EEPROM_WRITE_INT(450,&IR_READY);
 80035ac:	480d      	ldr	r0, [pc, #52]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 80035ae:	f010 fb70 	bl	8013c92 <atoi>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <PRZYPISYWANIEWARTOSCI+0x448>)
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4911      	ldr	r1, [pc, #68]	; (8003600 <PRZYPISYWANIEWARTOSCI+0x448>)
 80035ba:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80035be:	f7fd fea3 	bl	8001308 <EEPROM_WRITE_INT>

  }
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IR STATE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        if(wynik==39) {
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b27      	cmp	r3, #39	; 0x27
 80035c8:	d10a      	bne.n	80035e0 <PRZYPISYWANIEWARTOSCI+0x428>
        	LED_BLINK=atoi(DANE_BLE);;  EEPROM_WRITE_INT(455,&LED_BLINK);
 80035ca:	4806      	ldr	r0, [pc, #24]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 80035cc:	f010 fb61 	bl	8013c92 <atoi>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <PRZYPISYWANIEWARTOSCI+0x44c>)
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	490b      	ldr	r1, [pc, #44]	; (8003604 <PRZYPISYWANIEWARTOSCI+0x44c>)
 80035d8:	f240 10c7 	movw	r0, #455	; 0x1c7
 80035dc:	f7fd fe94 	bl	8001308 <EEPROM_WRITE_INT>
      }

  //@@@@@@@@@@@@@@@@


}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	240003a0 	.word	0x240003a0
 80035e8:	240002b4 	.word	0x240002b4
 80035ec:	2400028c 	.word	0x2400028c
 80035f0:	240002d4 	.word	0x240002d4
 80035f4:	240002dc 	.word	0x240002dc
 80035f8:	240002b8 	.word	0x240002b8
 80035fc:	240002bc 	.word	0x240002bc
 8003600:	240237c0 	.word	0x240237c0
 8003604:	2400000c 	.word	0x2400000c

08003608 <ZMIENNE_ZAAW_DO_BLE>:


void ZMIENNE_ZAAW_DO_BLE()
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0

      if(drukowanie==4)
 800360e:	4bc1      	ldr	r3, [pc, #772]	; (8003914 <ZMIENNE_ZAAW_DO_BLE+0x30c>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b04      	cmp	r3, #4
 8003614:	f040 81b8 	bne.w	8003988 <ZMIENNE_ZAAW_DO_BLE+0x380>
 {
    	  char after_con_val[32]={0};
 8003618:	2300      	movs	r3, #0
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]
 800362a:	615a      	str	r2, [r3, #20]
 800362c:	619a      	str	r2, [r3, #24]
    drukowanie=4;
 800362e:	4bb9      	ldr	r3, [pc, #740]	; (8003914 <ZMIENNE_ZAAW_DO_BLE+0x30c>)
 8003630:	2204      	movs	r2, #4
 8003632:	701a      	strb	r2, [r3, #0]

  if (k_wys_pom==1 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8003634:	4bb8      	ldr	r3, [pc, #736]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d12e      	bne.n	800369a <ZMIENNE_ZAAW_DO_BLE+0x92>
 800363c:	f002 fc50 	bl	8005ee0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	4bb6      	ldr	r3, [pc, #728]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b0e      	cmp	r3, #14
 800364a:	d926      	bls.n	800369a <ZMIENNE_ZAAW_DO_BLE+0x92>
	  ZapamientanyCzasK_BLE = HAL_GetTick();
 800364c:	f002 fc48 	bl	8005ee0 <HAL_GetTick>
 8003650:	4603      	mov	r3, r0
 8003652:	4ab2      	ldr	r2, [pc, #712]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 8003654:	6013      	str	r3, [r2, #0]

   ftoa(MAX_PID,after_con_val ,2);
 8003656:	4bb2      	ldr	r3, [pc, #712]	; (8003920 <ZMIENNE_ZAAW_DO_BLE+0x318>)
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003660:	463b      	mov	r3, r7
 8003662:	2102      	movs	r1, #2
 8003664:	4618      	mov	r0, r3
 8003666:	eeb0 0b47 	vmov.f64	d0, d7
 800366a:	f000 ff11 	bl	8004490 <ftoa>
   strcat(after_con_val, "g");
 800366e:	463b      	mov	r3, r7
 8003670:	4618      	mov	r0, r3
 8003672:	f7fc fe35 	bl	80002e0 <strlen>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	463b      	mov	r3, r7
 800367c:	4413      	add	r3, r2
 800367e:	49a9      	ldr	r1, [pc, #676]	; (8003924 <ZMIENNE_ZAAW_DO_BLE+0x31c>)
 8003680:	461a      	mov	r2, r3
 8003682:	460b      	mov	r3, r1
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	8013      	strh	r3, [r2, #0]
  DO_BLE(after_con_val);
 8003688:	463b      	mov	r3, r7
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fb64 	bl	8000d58 <DO_BLE>
k_wys_pom++;
 8003690:	4ba1      	ldr	r3, [pc, #644]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	4aa0      	ldr	r2, [pc, #640]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003698:	6013      	str	r3, [r2, #0]
  }
  if (k_wys_pom==2 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 800369a:	4b9f      	ldr	r3, [pc, #636]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d129      	bne.n	80036f6 <ZMIENNE_ZAAW_DO_BLE+0xee>
 80036a2:	f002 fc1d 	bl	8005ee0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	4b9c      	ldr	r3, [pc, #624]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b0e      	cmp	r3, #14
 80036b0:	d921      	bls.n	80036f6 <ZMIENNE_ZAAW_DO_BLE+0xee>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 80036b2:	f002 fc15 	bl	8005ee0 <HAL_GetTick>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4a98      	ldr	r2, [pc, #608]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80036ba:	6013      	str	r3, [r2, #0]

   itoa(pr_tyl,after_con_val ,10);
 80036bc:	4b9a      	ldr	r3, [pc, #616]	; (8003928 <ZMIENNE_ZAAW_DO_BLE+0x320>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4639      	mov	r1, r7
 80036c2:	220a      	movs	r2, #10
 80036c4:	4618      	mov	r0, r3
 80036c6:	f010 fb2b 	bl	8013d20 <itoa>
   strcat(after_con_val, "h");
 80036ca:	463b      	mov	r3, r7
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc fe07 	bl	80002e0 <strlen>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	463b      	mov	r3, r7
 80036d8:	4413      	add	r3, r2
 80036da:	4994      	ldr	r1, [pc, #592]	; (800392c <ZMIENNE_ZAAW_DO_BLE+0x324>)
 80036dc:	461a      	mov	r2, r3
 80036de:	460b      	mov	r3, r1
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	8013      	strh	r3, [r2, #0]
  DO_BLE(after_con_val);
 80036e4:	463b      	mov	r3, r7
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fb36 	bl	8000d58 <DO_BLE>
k_wys_pom++;
 80036ec:	4b8a      	ldr	r3, [pc, #552]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3301      	adds	r3, #1
 80036f2:	4a89      	ldr	r2, [pc, #548]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80036f4:	6013      	str	r3, [r2, #0]
  }
    if (k_wys_pom==3 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 80036f6:	4b88      	ldr	r3, [pc, #544]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d12e      	bne.n	800375c <ZMIENNE_ZAAW_DO_BLE+0x154>
 80036fe:	f002 fbef 	bl	8005ee0 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	4b85      	ldr	r3, [pc, #532]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b0e      	cmp	r3, #14
 800370c:	d926      	bls.n	800375c <ZMIENNE_ZAAW_DO_BLE+0x154>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 800370e:	f002 fbe7 	bl	8005ee0 <HAL_GetTick>
 8003712:	4603      	mov	r3, r0
 8003714:	4a81      	ldr	r2, [pc, #516]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 8003716:	6013      	str	r3, [r2, #0]

   ftoa(SUMA_MAX,after_con_val ,2);
 8003718:	4b85      	ldr	r3, [pc, #532]	; (8003930 <ZMIENNE_ZAAW_DO_BLE+0x328>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003722:	463b      	mov	r3, r7
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	eeb0 0b47 	vmov.f64	d0, d7
 800372c:	f000 feb0 	bl	8004490 <ftoa>
   strcat(after_con_val, "q");
 8003730:	463b      	mov	r3, r7
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc fdd4 	bl	80002e0 <strlen>
 8003738:	4603      	mov	r3, r0
 800373a:	461a      	mov	r2, r3
 800373c:	463b      	mov	r3, r7
 800373e:	4413      	add	r3, r2
 8003740:	497c      	ldr	r1, [pc, #496]	; (8003934 <ZMIENNE_ZAAW_DO_BLE+0x32c>)
 8003742:	461a      	mov	r2, r3
 8003744:	460b      	mov	r3, r1
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	8013      	strh	r3, [r2, #0]
  DO_BLE(after_con_val);
 800374a:	463b      	mov	r3, r7
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd fb03 	bl	8000d58 <DO_BLE>
k_wys_pom++;
 8003752:	4b71      	ldr	r3, [pc, #452]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	4a6f      	ldr	r2, [pc, #444]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 800375a:	6013      	str	r3, [r2, #0]
   }
       if (k_wys_pom==4 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 800375c:	4b6e      	ldr	r3, [pc, #440]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b04      	cmp	r3, #4
 8003762:	d129      	bne.n	80037b8 <ZMIENNE_ZAAW_DO_BLE+0x1b0>
 8003764:	f002 fbbc 	bl	8005ee0 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	4b6c      	ldr	r3, [pc, #432]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b0e      	cmp	r3, #14
 8003772:	d921      	bls.n	80037b8 <ZMIENNE_ZAAW_DO_BLE+0x1b0>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 8003774:	f002 fbb4 	bl	8005ee0 <HAL_GetTick>
 8003778:	4603      	mov	r3, r0
 800377a:	4a68      	ldr	r2, [pc, #416]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800377c:	6013      	str	r3, [r2, #0]

   itoa(CzasProbkowania_CZ_Rozniczkujacego,after_con_val ,10);
 800377e:	4b6e      	ldr	r3, [pc, #440]	; (8003938 <ZMIENNE_ZAAW_DO_BLE+0x330>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4639      	mov	r1, r7
 8003784:	220a      	movs	r2, #10
 8003786:	4618      	mov	r0, r3
 8003788:	f010 faca 	bl	8013d20 <itoa>
   strcat(after_con_val, "w");
 800378c:	463b      	mov	r3, r7
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc fda6 	bl	80002e0 <strlen>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	463b      	mov	r3, r7
 800379a:	4413      	add	r3, r2
 800379c:	4967      	ldr	r1, [pc, #412]	; (800393c <ZMIENNE_ZAAW_DO_BLE+0x334>)
 800379e:	461a      	mov	r2, r3
 80037a0:	460b      	mov	r3, r1
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	8013      	strh	r3, [r2, #0]
  DO_BLE(after_con_val);
 80037a6:	463b      	mov	r3, r7
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd fad5 	bl	8000d58 <DO_BLE>
k_wys_pom++;
 80037ae:	4b5a      	ldr	r3, [pc, #360]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a58      	ldr	r2, [pc, #352]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80037b6:	6013      	str	r3, [r2, #0]
    }

          if (k_wys_pom==5 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 80037b8:	4b57      	ldr	r3, [pc, #348]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b05      	cmp	r3, #5
 80037be:	d12e      	bne.n	800381e <ZMIENNE_ZAAW_DO_BLE+0x216>
 80037c0:	f002 fb8e 	bl	8005ee0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b55      	ldr	r3, [pc, #340]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b0e      	cmp	r3, #14
 80037ce:	d926      	bls.n	800381e <ZMIENNE_ZAAW_DO_BLE+0x216>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 80037d0:	f002 fb86 	bl	8005ee0 <HAL_GetTick>
 80037d4:	4603      	mov	r3, r0
 80037d6:	4a51      	ldr	r2, [pc, #324]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80037d8:	6013      	str	r3, [r2, #0]

   ftoa(ZMIENNA3,after_con_val ,2);
 80037da:	4b59      	ldr	r3, [pc, #356]	; (8003940 <ZMIENNE_ZAAW_DO_BLE+0x338>)
 80037dc:	edd3 7a00 	vldr	s15, [r3]
 80037e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e4:	463b      	mov	r3, r7
 80037e6:	2102      	movs	r1, #2
 80037e8:	4618      	mov	r0, r3
 80037ea:	eeb0 0b47 	vmov.f64	d0, d7
 80037ee:	f000 fe4f 	bl	8004490 <ftoa>
   strcat(after_con_val, "t");
 80037f2:	463b      	mov	r3, r7
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fc fd73 	bl	80002e0 <strlen>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	463b      	mov	r3, r7
 8003800:	4413      	add	r3, r2
 8003802:	4950      	ldr	r1, [pc, #320]	; (8003944 <ZMIENNE_ZAAW_DO_BLE+0x33c>)
 8003804:	461a      	mov	r2, r3
 8003806:	460b      	mov	r3, r1
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	8013      	strh	r3, [r2, #0]
  DO_BLE(after_con_val);
 800380c:	463b      	mov	r3, r7
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd faa2 	bl	8000d58 <DO_BLE>
k_wys_pom++;
 8003814:	4b40      	ldr	r3, [pc, #256]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 800381c:	6013      	str	r3, [r2, #0]
    }
              if (k_wys_pom==6 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 800381e:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d129      	bne.n	800387a <ZMIENNE_ZAAW_DO_BLE+0x272>
 8003826:	f002 fb5b 	bl	8005ee0 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	4b3b      	ldr	r3, [pc, #236]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b0e      	cmp	r3, #14
 8003834:	d921      	bls.n	800387a <ZMIENNE_ZAAW_DO_BLE+0x272>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 8003836:	f002 fb53 	bl	8005ee0 <HAL_GetTick>
 800383a:	4603      	mov	r3, r0
 800383c:	4a37      	ldr	r2, [pc, #220]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800383e:	6013      	str	r3, [r2, #0]

   itoa(IR_READY,after_con_val ,10);
 8003840:	4b41      	ldr	r3, [pc, #260]	; (8003948 <ZMIENNE_ZAAW_DO_BLE+0x340>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4639      	mov	r1, r7
 8003846:	220a      	movs	r2, #10
 8003848:	4618      	mov	r0, r3
 800384a:	f010 fa69 	bl	8013d20 <itoa>
     strcat(after_con_val, "j");
 800384e:	463b      	mov	r3, r7
 8003850:	4618      	mov	r0, r3
 8003852:	f7fc fd45 	bl	80002e0 <strlen>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	463b      	mov	r3, r7
 800385c:	4413      	add	r3, r2
 800385e:	493b      	ldr	r1, [pc, #236]	; (800394c <ZMIENNE_ZAAW_DO_BLE+0x344>)
 8003860:	461a      	mov	r2, r3
 8003862:	460b      	mov	r3, r1
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	8013      	strh	r3, [r2, #0]
    DO_BLE(after_con_val);
 8003868:	463b      	mov	r3, r7
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd fa74 	bl	8000d58 <DO_BLE>
  k_wys_pom++;
 8003870:	4b29      	ldr	r3, [pc, #164]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	4a28      	ldr	r2, [pc, #160]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003878:	6013      	str	r3, [r2, #0]
    }
              if (k_wys_pom==7 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 800387a:	4b27      	ldr	r3, [pc, #156]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b07      	cmp	r3, #7
 8003880:	d129      	bne.n	80038d6 <ZMIENNE_ZAAW_DO_BLE+0x2ce>
 8003882:	f002 fb2d 	bl	8005ee0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	4b24      	ldr	r3, [pc, #144]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b0e      	cmp	r3, #14
 8003890:	d921      	bls.n	80038d6 <ZMIENNE_ZAAW_DO_BLE+0x2ce>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 8003892:	f002 fb25 	bl	8005ee0 <HAL_GetTick>
 8003896:	4603      	mov	r3, r0
 8003898:	4a20      	ldr	r2, [pc, #128]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800389a:	6013      	str	r3, [r2, #0]

   itoa(LED_BLINK,after_con_val ,10);
 800389c:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <ZMIENNE_ZAAW_DO_BLE+0x348>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4639      	mov	r1, r7
 80038a2:	220a      	movs	r2, #10
 80038a4:	4618      	mov	r0, r3
 80038a6:	f010 fa3b 	bl	8013d20 <itoa>
     strcat(after_con_val, "J");
 80038aa:	463b      	mov	r3, r7
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fd17 	bl	80002e0 <strlen>
 80038b2:	4603      	mov	r3, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	463b      	mov	r3, r7
 80038b8:	4413      	add	r3, r2
 80038ba:	4926      	ldr	r1, [pc, #152]	; (8003954 <ZMIENNE_ZAAW_DO_BLE+0x34c>)
 80038bc:	461a      	mov	r2, r3
 80038be:	460b      	mov	r3, r1
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	8013      	strh	r3, [r2, #0]
    DO_BLE(after_con_val);
 80038c4:	463b      	mov	r3, r7
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd fa46 	bl	8000d58 <DO_BLE>
  k_wys_pom++;
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3301      	adds	r3, #1
 80038d2:	4a11      	ldr	r2, [pc, #68]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80038d4:	6013      	str	r3, [r2, #0]
    }
          if (k_wys_pom==8 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d154      	bne.n	8003988 <ZMIENNE_ZAAW_DO_BLE+0x380>
 80038de:	f002 faff 	bl	8005ee0 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b0e      	cmp	r3, #14
 80038ec:	d94c      	bls.n	8003988 <ZMIENNE_ZAAW_DO_BLE+0x380>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 80038ee:	f002 faf7 	bl	8005ee0 <HAL_GetTick>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4a09      	ldr	r2, [pc, #36]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80038f6:	6013      	str	r3, [r2, #0]

   ftoa(ZMIENNA4,after_con_val ,2);
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <ZMIENNE_ZAAW_DO_BLE+0x350>)
 80038fa:	edd3 7a00 	vldr	s15, [r3]
 80038fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003902:	463b      	mov	r3, r7
 8003904:	2102      	movs	r1, #2
 8003906:	4618      	mov	r0, r3
 8003908:	eeb0 0b47 	vmov.f64	d0, d7
 800390c:	f000 fdc0 	bl	8004490 <ftoa>
     strcat(after_con_val, "y");
 8003910:	463b      	mov	r3, r7
 8003912:	e023      	b.n	800395c <ZMIENNE_ZAAW_DO_BLE+0x354>
 8003914:	2400028d 	.word	0x2400028d
 8003918:	24000000 	.word	0x24000000
 800391c:	24000284 	.word	0x24000284
 8003920:	240002b0 	.word	0x240002b0
 8003924:	08019200 	.word	0x08019200
 8003928:	240002c0 	.word	0x240002c0
 800392c:	08019204 	.word	0x08019204
 8003930:	240002b4 	.word	0x240002b4
 8003934:	08019208 	.word	0x08019208
 8003938:	240002d4 	.word	0x240002d4
 800393c:	0801917c 	.word	0x0801917c
 8003940:	240002b8 	.word	0x240002b8
 8003944:	0801920c 	.word	0x0801920c
 8003948:	240237c0 	.word	0x240237c0
 800394c:	08019210 	.word	0x08019210
 8003950:	2400000c 	.word	0x2400000c
 8003954:	08019214 	.word	0x08019214
 8003958:	240002bc 	.word	0x240002bc
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fcbf 	bl	80002e0 <strlen>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	463b      	mov	r3, r7
 8003968:	4413      	add	r3, r2
 800396a:	4909      	ldr	r1, [pc, #36]	; (8003990 <ZMIENNE_ZAAW_DO_BLE+0x388>)
 800396c:	461a      	mov	r2, r3
 800396e:	460b      	mov	r3, r1
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	8013      	strh	r3, [r2, #0]
    DO_BLE(after_con_val);
 8003974:	463b      	mov	r3, r7
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd f9ee 	bl	8000d58 <DO_BLE>
  k_wys_pom=1;
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <ZMIENNE_ZAAW_DO_BLE+0x38c>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]
   drukowanie=0; //tylko jeden raz
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <ZMIENNE_ZAAW_DO_BLE+0x390>)
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8003988:	bf00      	nop
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	08019218 	.word	0x08019218
 8003994:	24000000 	.word	0x24000000
 8003998:	2400028d 	.word	0x2400028d

0800399c <calculatePID>:

int CzasProbkowania_CZ_Rozniczkujacego=0;
uint32_t zCzas_PID=0;

float calculatePID()
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0

P=ERR_CZ;
 80039a2:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <calculatePID+0x9c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a25      	ldr	r2, [pc, #148]	; (8003a3c <calculatePID+0xa0>)
 80039a8:	6013      	str	r3, [r2, #0]

uint32_t Cz_Pr_Cz_Rozn=CzasProbkowania_CZ_Rozniczkujacego;
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <calculatePID+0xa4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	607b      	str	r3, [r7, #4]
if(Cz_Pr_Cz_Rozn>190)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2bbe      	cmp	r3, #190	; 0xbe
 80039b4:	d901      	bls.n	80039ba <calculatePID+0x1e>
{
	Cz_Pr_Cz_Rozn=190;
 80039b6:	23be      	movs	r3, #190	; 0xbe
 80039b8:	607b      	str	r3, [r7, #4]
}

if(zCzas_PID + Cz_Pr_Cz_Rozn < HAL_GetTick())
 80039ba:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <calculatePID+0xa8>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	18d4      	adds	r4, r2, r3
 80039c2:	f002 fa8d 	bl	8005ee0 <HAL_GetTick>
 80039c6:	4603      	mov	r3, r0
 80039c8:	429c      	cmp	r4, r3
 80039ca:	d213      	bcs.n	80039f4 <calculatePID+0x58>
{
D= ERR_CZ - P_ERR_CZ;
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <calculatePID+0x9c>)
 80039ce:	ed93 7a00 	vldr	s14, [r3]
 80039d2:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <calculatePID+0xac>)
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <calculatePID+0xb0>)
 80039de:	edc3 7a00 	vstr	s15, [r3]
P_ERR_CZ=ERR_CZ;
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <calculatePID+0x9c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <calculatePID+0xac>)
 80039e8:	6013      	str	r3, [r2, #0]
zCzas_PID=HAL_GetTick();
 80039ea:	f002 fa79 	bl	8005ee0 <HAL_GetTick>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4a14      	ldr	r2, [pc, #80]	; (8003a44 <calculatePID+0xa8>)
 80039f2:	6013      	str	r3, [r2, #0]

}

PID_value = (Kp * P)+(Kd*D);
 80039f4:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <calculatePID+0xb4>)
 80039f6:	ed93 7a00 	vldr	s14, [r3]
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <calculatePID+0xa0>)
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <calculatePID+0xb8>)
 8003a06:	edd3 6a00 	vldr	s13, [r3]
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <calculatePID+0xb0>)
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <calculatePID+0xbc>)
 8003a1a:	edc3 7a00 	vstr	s15, [r3]


#define feedback

#ifdef feedback
rz_predkoscfb();
 8003a1e:	f000 f81d 	bl	8003a5c <rz_predkoscfb>
#else
	Pr_Silnika_Lewego = pr_pocz_silnikow + PID_value;
	Pr_Silnika_Prawego = pr_pocz_silnikow - PID_value;
#endif

max_speed();
 8003a22:	f000 f8f5 	bl	8003c10 <max_speed>
return 0;
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	ee07 3a90 	vmov	s15, r3

}
 8003a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd90      	pop	{r4, r7, pc}
 8003a38:	24000234 	.word	0x24000234
 8003a3c:	240002a4 	.word	0x240002a4
 8003a40:	240002d4 	.word	0x240002d4
 8003a44:	240002d8 	.word	0x240002d8
 8003a48:	240002ac 	.word	0x240002ac
 8003a4c:	240002a8 	.word	0x240002a8
 8003a50:	24000004 	.word	0x24000004
 8003a54:	24000294 	.word	0x24000294
 8003a58:	2400029c 	.word	0x2400029c

08003a5c <rz_predkoscfb>:



float rz_predkoscfb()
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
	 float pr_zadana=pr_pocz_silnikow;
 8003a62:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <rz_predkoscfb+0x194>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]

	 float PR_zP;
	 float PR_zL;

	 	 PR_zL=pr_zadana+PID_value;
 8003a68:	4b62      	ldr	r3, [pc, #392]	; (8003bf4 <rz_predkoscfb+0x198>)
 8003a6a:	edd3 7a00 	vldr	s15, [r3]
 8003a6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a76:	edc7 7a06 	vstr	s15, [r7, #24]
	 	 PR_zP=pr_zadana-PID_value;
 8003a7a:	4b5e      	ldr	r3, [pc, #376]	; (8003bf4 <rz_predkoscfb+0x198>)
 8003a7c:	edd3 7a00 	vldr	s15, [r3]
 8003a80:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a88:	edc7 7a07 	vstr	s15, [r7, #28]



		 if(PR_zP>Predkosc_P)
 8003a8c:	4b5a      	ldr	r3, [pc, #360]	; (8003bf8 <rz_predkoscfb+0x19c>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9e:	dd10      	ble.n	8003ac2 <rz_predkoscfb+0x66>
		 {
			 float delta_pr=PR_zP-Predkosc_P;
 8003aa0:	4b55      	ldr	r3, [pc, #340]	; (8003bf8 <rz_predkoscfb+0x19c>)
 8003aa2:	edd3 7a00 	vldr	s15, [r3]
 8003aa6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aae:	edc7 7a04 	vstr	s15, [r7, #16]
			 PR_zP=PR_zP+(delta_pr);
 8003ab2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003abe:	edc7 7a07 	vstr	s15, [r7, #28]
		 }

		 if(PR_zP<Predkosc_P)
 8003ac2:	4b4d      	ldr	r3, [pc, #308]	; (8003bf8 <rz_predkoscfb+0x19c>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	d510      	bpl.n	8003af8 <rz_predkoscfb+0x9c>
		 {
			 float delta_pr=PR_zP-Predkosc_P;
 8003ad6:	4b48      	ldr	r3, [pc, #288]	; (8003bf8 <rz_predkoscfb+0x19c>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae4:	edc7 7a03 	vstr	s15, [r7, #12]
			 PR_zP=PR_zP+(delta_pr);
 8003ae8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af4:	edc7 7a07 	vstr	s15, [r7, #28]
		 }




		 if(PR_zL>Predkosc_L)
 8003af8:	4b40      	ldr	r3, [pc, #256]	; (8003bfc <rz_predkoscfb+0x1a0>)
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0a:	dd10      	ble.n	8003b2e <rz_predkoscfb+0xd2>
		 {
			 float delta_pr=PR_zL-Predkosc_L;
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <rz_predkoscfb+0x1a0>)
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b1a:	edc7 7a02 	vstr	s15, [r7, #8]
			 PR_zL=PR_zL+(delta_pr);
 8003b1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2a:	edc7 7a06 	vstr	s15, [r7, #24]
		 }

		 if(PR_zL<Predkosc_L)
 8003b2e:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <rz_predkoscfb+0x1a0>)
 8003b30:	edd3 7a00 	vldr	s15, [r3]
 8003b34:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b40:	d510      	bpl.n	8003b64 <rz_predkoscfb+0x108>
		 {
			 float delta_pr=PR_zL-Predkosc_L;
 8003b42:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <rz_predkoscfb+0x1a0>)
 8003b44:	edd3 7a00 	vldr	s15, [r3]
 8003b48:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b50:	edc7 7a01 	vstr	s15, [r7, #4]
			 PR_zL=PR_zL+(delta_pr);
 8003b54:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b60:	edc7 7a06 	vstr	s15, [r7, #24]
		 }

			 PR_zP= (220*PR_zP)+50 - (220*PID_value);
 8003b64:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b68:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003c00 <rz_predkoscfb+0x1a4>
 8003b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b70:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003c04 <rz_predkoscfb+0x1a8>
 8003b74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b78:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <rz_predkoscfb+0x198>)
 8003b7a:	edd3 7a00 	vldr	s15, [r3]
 8003b7e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003c00 <rz_predkoscfb+0x1a4>
 8003b82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8a:	edc7 7a07 	vstr	s15, [r7, #28]
			 PR_zL= (220*PR_zL)+50 + (220*PID_value);
 8003b8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b92:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003c00 <rz_predkoscfb+0x1a4>
 8003b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b9a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003c04 <rz_predkoscfb+0x1a8>
 8003b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <rz_predkoscfb+0x198>)
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003c00 <rz_predkoscfb+0x1a4>
 8003bac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb4:	edc7 7a06 	vstr	s15, [r7, #24]

 Pr_Silnika_Lewego  = PR_zL;
 8003bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bc0:	ee17 2a90 	vmov	r2, s15
 8003bc4:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <rz_predkoscfb+0x1ac>)
 8003bc6:	601a      	str	r2, [r3, #0]
 Pr_Silnika_Prawego = PR_zP;
 8003bc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bd0:	ee17 2a90 	vmov	r2, s15
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <rz_predkoscfb+0x1b0>)
 8003bd6:	601a      	str	r2, [r3, #0]


return 0;
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	ee07 3a90 	vmov	s15, r3
}
 8003be0:	eeb0 0a67 	vmov.f32	s0, s15
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	24000008 	.word	0x24000008
 8003bf4:	2400029c 	.word	0x2400029c
 8003bf8:	240004b0 	.word	0x240004b0
 8003bfc:	240004ac 	.word	0x240004ac
 8003c00:	435c0000 	.word	0x435c0000
 8003c04:	42480000 	.word	0x42480000
 8003c08:	240002d0 	.word	0x240002d0
 8003c0c:	240002cc 	.word	0x240002cc

08003c10 <max_speed>:

void max_speed()
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
	if(Pr_Silnika_Lewego>1000)
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <max_speed+0x54>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c1c:	dd03      	ble.n	8003c26 <max_speed+0x16>
	{
		Pr_Silnika_Lewego=1000;
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <max_speed+0x54>)
 8003c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c24:	601a      	str	r2, [r3, #0]
	}


	//Mniejsza od -1000!!!!!!!!!@@@@@@@@
	if(Pr_Silnika_Lewego<-1000)
 8003c26:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <max_speed+0x54>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003c2e:	da02      	bge.n	8003c36 <max_speed+0x26>
	{
		Pr_Silnika_Lewego=-1000;
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <max_speed+0x54>)
 8003c32:	4a0d      	ldr	r2, [pc, #52]	; (8003c68 <max_speed+0x58>)
 8003c34:	601a      	str	r2, [r3, #0]
	}

	if(Pr_Silnika_Prawego>1000)
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <max_speed+0x5c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c3e:	dd03      	ble.n	8003c48 <max_speed+0x38>
	{
		Pr_Silnika_Prawego=1000;
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <max_speed+0x5c>)
 8003c42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c46:	601a      	str	r2, [r3, #0]
	}
	//Mniejsza od -1000!!!!!!!!!@@@@@@@@
	if(Pr_Silnika_Prawego<-1000)
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <max_speed+0x5c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003c50:	da02      	bge.n	8003c58 <max_speed+0x48>
	{
		Pr_Silnika_Prawego=-1000;
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <max_speed+0x5c>)
 8003c54:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <max_speed+0x58>)
 8003c56:	601a      	str	r2, [r3, #0]
	}
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	240002d0 	.word	0x240002d0
 8003c68:	fffffc18 	.word	0xfffffc18
 8003c6c:	240002cc 	.word	0x240002cc

08003c70 <JAZDA_DO_PRZODU>:



void JAZDA_DO_PRZODU(int Pr_Sil_Lew, int Pr_Sil_Pr)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]

  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,1000);//-->> Naprzod
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <JAZDA_DO_PRZODU+0x44>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,1000-Pr_Sil_Pr);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <JAZDA_DO_PRZODU+0x44>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	635a      	str	r2, [r3, #52]	; 0x34

  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000);
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <JAZDA_DO_PRZODU+0x48>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c98:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000-Pr_Sil_Lew); //-->> Naprzod
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <JAZDA_DO_PRZODU+0x48>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40

}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	24023a88 	.word	0x24023a88
 8003cb8:	24023a3c 	.word	0x24023a3c

08003cbc <PRAWY_DO_TYLU>:
void PRAWY_DO_TYLU(int Pr_Sil_Lew, int Pr_Sil_Pr)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,1000-Pr_Sil_Pr);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <PRAWY_DO_TYLU+0x44>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,1000);  //-->> Do tylu
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <PRAWY_DO_TYLU+0x44>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34


	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000);
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <PRAWY_DO_TYLU+0x48>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ce4:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000-Pr_Sil_Lew); //-->> Naprzod
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <PRAWY_DO_TYLU+0x48>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40



}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	24023a88 	.word	0x24023a88
 8003d04:	24023a3c 	.word	0x24023a3c

08003d08 <LEWY_DO_TYLU>:
void LEWY_DO_TYLU(int Pr_Sil_Lew, int Pr_Sil_Pr)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,1000); //-->> Do tylu
 8003d12:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <LEWY_DO_TYLU+0x44>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,1000-Pr_Sil_Pr);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <LEWY_DO_TYLU+0x44>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	635a      	str	r2, [r3, #52]	; 0x34


	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000-Pr_Sil_Lew); //-->> Naprzod
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <LEWY_DO_TYLU+0x48>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000);
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <LEWY_DO_TYLU+0x48>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40



}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	24023a88 	.word	0x24023a88
 8003d50:	24023a3c 	.word	0x24023a3c

08003d54 <EEPROM_ZAAW_READ>:
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000-Pr_Sil_Lew);
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000); //-->> Do tylu

}
void EEPROM_ZAAW_READ()
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
	EEPROM_READ_FLOAT(400, &MAX_PID);
 8003d58:	490f      	ldr	r1, [pc, #60]	; (8003d98 <EEPROM_ZAAW_READ+0x44>)
 8003d5a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003d5e:	f7fd fab4 	bl	80012ca <EEPROM_READ_FLOAT>
	EEPROM_READ_FLOAT(410, &SUMA_MAX);
 8003d62:	490e      	ldr	r1, [pc, #56]	; (8003d9c <EEPROM_ZAAW_READ+0x48>)
 8003d64:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003d68:	f7fd faaf 	bl	80012ca <EEPROM_READ_FLOAT>

	EEPROM_READ_FLOAT(440, &ZMIENNA3); //@@@@@@@@@@@@@@@@@@@@
 8003d6c:	490c      	ldr	r1, [pc, #48]	; (8003da0 <EEPROM_ZAAW_READ+0x4c>)
 8003d6e:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8003d72:	f7fd faaa 	bl	80012ca <EEPROM_READ_FLOAT>

	EEPROM_READ_FLOAT(445, &ZMIENNA4);
 8003d76:	490b      	ldr	r1, [pc, #44]	; (8003da4 <EEPROM_ZAAW_READ+0x50>)
 8003d78:	f240 10bd 	movw	r0, #445	; 0x1bd
 8003d7c:	f7fd faa5 	bl	80012ca <EEPROM_READ_FLOAT>

	EEPROM_READ_INT(405, &pr_tyl);
 8003d80:	4909      	ldr	r1, [pc, #36]	; (8003da8 <EEPROM_ZAAW_READ+0x54>)
 8003d82:	f240 1095 	movw	r0, #405	; 0x195
 8003d86:	f7fd fad4 	bl	8001332 <EEPROM_READ_INT>
	EEPROM_READ_INT(420, &CzasProbkowania_CZ_Rozniczkujacego);
 8003d8a:	4908      	ldr	r1, [pc, #32]	; (8003dac <EEPROM_ZAAW_READ+0x58>)
 8003d8c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003d90:	f7fd facf 	bl	8001332 <EEPROM_READ_INT>
}
 8003d94:	bf00      	nop
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	240002b0 	.word	0x240002b0
 8003d9c:	240002b4 	.word	0x240002b4
 8003da0:	240002b8 	.word	0x240002b8
 8003da4:	240002bc 	.word	0x240002bc
 8003da8:	240002c0 	.word	0x240002c0
 8003dac:	240002d4 	.word	0x240002d4

08003db0 <EEPROM_PID_READ>:
void EEPROM_PID_READ()
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
	EEPROM_READ_FLOAT(50, &Kp);
 8003db4:	4908      	ldr	r1, [pc, #32]	; (8003dd8 <EEPROM_PID_READ+0x28>)
 8003db6:	2032      	movs	r0, #50	; 0x32
 8003db8:	f7fd fa87 	bl	80012ca <EEPROM_READ_FLOAT>
	EEPROM_READ_FLOAT(55, &Kd);
 8003dbc:	4907      	ldr	r1, [pc, #28]	; (8003ddc <EEPROM_PID_READ+0x2c>)
 8003dbe:	2037      	movs	r0, #55	; 0x37
 8003dc0:	f7fd fa83 	bl	80012ca <EEPROM_READ_FLOAT>
	EEPROM_READ_FLOAT(60, &pr_pocz_silnikow);
 8003dc4:	4906      	ldr	r1, [pc, #24]	; (8003de0 <EEPROM_PID_READ+0x30>)
 8003dc6:	203c      	movs	r0, #60	; 0x3c
 8003dc8:	f7fd fa7f 	bl	80012ca <EEPROM_READ_FLOAT>
	EEPROM_READ_FLOAT(65, &Ki);
 8003dcc:	4905      	ldr	r1, [pc, #20]	; (8003de4 <EEPROM_PID_READ+0x34>)
 8003dce:	2041      	movs	r0, #65	; 0x41
 8003dd0:	f7fd fa7b 	bl	80012ca <EEPROM_READ_FLOAT>
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	24000004 	.word	0x24000004
 8003ddc:	24000294 	.word	0x24000294
 8003de0:	24000008 	.word	0x24000008
 8003de4:	24000298 	.word	0x24000298

08003de8 <Motor_PWM_Init>:
void Motor_PWM_Init()
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
	EEPROM_PID_READ();
 8003dec:	f7ff ffe0 	bl	8003db0 <EEPROM_PID_READ>
	EEPROM_ZAAW_READ();
 8003df0:	f7ff ffb0 	bl	8003d54 <EEPROM_ZAAW_READ>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8003df4:	2100      	movs	r1, #0
 8003df6:	4810      	ldr	r0, [pc, #64]	; (8003e38 <Motor_PWM_Init+0x50>)
 8003df8:	f00b ff06 	bl	800fc08 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8003dfc:	2104      	movs	r1, #4
 8003dfe:	480e      	ldr	r0, [pc, #56]	; (8003e38 <Motor_PWM_Init+0x50>)
 8003e00:	f00b ff02 	bl	800fc08 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003e04:	2108      	movs	r1, #8
 8003e06:	480d      	ldr	r0, [pc, #52]	; (8003e3c <Motor_PWM_Init+0x54>)
 8003e08:	f00b fefe 	bl	800fc08 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003e0c:	210c      	movs	r1, #12
 8003e0e:	480b      	ldr	r0, [pc, #44]	; (8003e3c <Motor_PWM_Init+0x54>)
 8003e10:	f00b fefa 	bl	800fc08 <HAL_TIM_PWM_Start>



    __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,0);
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <Motor_PWM_Init+0x50>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,0);
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <Motor_PWM_Init+0x50>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2200      	movs	r2, #0
 8003e22:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <Motor_PWM_Init+0x54>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8003e2c:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <Motor_PWM_Init+0x54>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2200      	movs	r2, #0
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	24023a88 	.word	0x24023a88
 8003e3c:	24023a3c 	.word	0x24023a3c

08003e40 <Robot_Control>:


void Decode_PID();

void Robot_Control()
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
	if(URUCHAMIANIE_ROBOTA)
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <Robot_Control+0x50>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <Robot_Control+0x12>
	{
		//Robot start
		//Poki co to tak tylko dla testow...

		Decode_PID();
 8003e4c:	f000 f82a 	bl	8003ea4 <Decode_PID>

	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000);
	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000);
	}

}
 8003e50:	e01b      	b.n	8003e8a <Robot_Control+0x4a>
		rz_IP=0;
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <Robot_Control+0x54>)
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
		rz_IL=0;
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <Robot_Control+0x58>)
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
	    __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,1000);
 8003e62:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <Robot_Control+0x5c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,1000);
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <Robot_Control+0x5c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000);
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <Robot_Control+0x60>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000);
 8003e80:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <Robot_Control+0x60>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	240002e0 	.word	0x240002e0
 8003e94:	240002c4 	.word	0x240002c4
 8003e98:	240002c8 	.word	0x240002c8
 8003e9c:	24023a88 	.word	0x24023a88
 8003ea0:	24023a3c 	.word	0x24023a3c

08003ea4 <Decode_PID>:


void Decode_PID()
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0




if(Pr_Silnika_Lewego<0)
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <Decode_PID+0x60>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	da0d      	bge.n	8003ecc <Decode_PID+0x28>
{
	Pr_Silnika_Lewego=Pr_Silnika_Lewego*(-1);
 8003eb0:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <Decode_PID+0x60>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	425b      	negs	r3, r3
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <Decode_PID+0x60>)
 8003eb8:	6013      	str	r3, [r2, #0]

	LEWY_DO_TYLU(Pr_Silnika_Lewego, Pr_Silnika_Prawego);
 8003eba:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <Decode_PID+0x60>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <Decode_PID+0x64>)
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff1f 	bl	8003d08 <LEWY_DO_TYLU>
	return;
 8003eca:	e019      	b.n	8003f00 <Decode_PID+0x5c>
}
else if(Pr_Silnika_Prawego<0)
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <Decode_PID+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da0d      	bge.n	8003ef0 <Decode_PID+0x4c>
{
	Pr_Silnika_Prawego=Pr_Silnika_Prawego*(-1);
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <Decode_PID+0x64>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	425b      	negs	r3, r3
 8003eda:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <Decode_PID+0x64>)
 8003edc:	6013      	str	r3, [r2, #0]

	PRAWY_DO_TYLU(Pr_Silnika_Lewego, Pr_Silnika_Prawego);
 8003ede:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <Decode_PID+0x60>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <Decode_PID+0x64>)
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fee7 	bl	8003cbc <PRAWY_DO_TYLU>
	return;
 8003eee:	e007      	b.n	8003f00 <Decode_PID+0x5c>
}
else
	JAZDA_DO_PRZODU(Pr_Silnika_Lewego, Pr_Silnika_Prawego);
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <Decode_PID+0x60>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <Decode_PID+0x64>)
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff feb8 	bl	8003c70 <JAZDA_DO_PRZODU>
}
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	240002d0 	.word	0x240002d0
 8003f08:	240002cc 	.word	0x240002cc

08003f0c <IR_INIT>:
void EEPROM_IR_STATE_READ();
void OBSLUGAPILOTA();


void IR_INIT()
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
	 HAL_TIM_Base_Start_IT(&htim2); //Turn on Timer
 8003f10:	4803      	ldr	r0, [pc, #12]	; (8003f20 <IR_INIT+0x14>)
 8003f12:	f00b fdb1 	bl	800fa78 <HAL_TIM_Base_Start_IT>
	 EEPROM_IR_STATE_READ();            //--<< Set it in Bluetooth APP
 8003f16:	f000 f8ed 	bl	80040f4 <EEPROM_IR_STATE_READ>
	// IR_READY=1;
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	24023b20 	.word	0x24023b20

08003f24 <IR_IT_Dec>:
   	   {
   	   }
}

void IR_IT_Dec()
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0

	if( ( (pr_IR+160 )  >  t2  &&  (pr_IR+100 ) <   t2 )  ) //Receive Sync Header
 8003f28:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <IR_IT_Dec+0x78>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <IR_IT_Dec+0x7c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d90a      	bls.n	8003f4e <IR_IT_Dec+0x2a>
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <IR_IT_Dec+0x78>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003f40:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <IR_IT_Dec+0x7c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d202      	bcs.n	8003f4e <IR_IT_Dec+0x2a>
	{
		idx=0;
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
	//	goto DONE;
	}

	   irdata[idx]= t2-pr_IR;
 8003f4e:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <IR_IT_Dec+0x7c>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <IR_IT_Dec+0x78>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4913      	ldr	r1, [pc, #76]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f58:	7809      	ldrb	r1, [r1, #0]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <IR_IT_Dec+0x84>)
 8003f5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   	   idx++;
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	3301      	adds	r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f6c:	701a      	strb	r2, [r3, #0]

   	   if(idx==33)
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b21      	cmp	r3, #33	; 0x21
 8003f74:	d105      	bne.n	8003f82 <IR_IT_Dec+0x5e>
   	   {
   		 receiveComplete = true;
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <IR_IT_Dec+0x88>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
   		idx=0;
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
   	   }
//DONE:
	pr_IR=t2;
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <IR_IT_Dec+0x7c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a05      	ldr	r2, [pc, #20]	; (8003f9c <IR_IT_Dec+0x78>)
 8003f88:	6013      	str	r3, [r2, #0]
	flaga_RT=1;
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <IR_IT_Dec+0x8c>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	240002e4 	.word	0x240002e4
 8003fa0:	240002fc 	.word	0x240002fc
 8003fa4:	240237c5 	.word	0x240237c5
 8003fa8:	2402373c 	.word	0x2402373c
 8003fac:	240237c4 	.word	0x240237c4
 8003fb0:	240002e8 	.word	0x240002e8

08003fb4 <teo_dec>:

uint32_t remote_code[32];
uint32_t receiver_codet=0;

void teo_dec()
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
	for(int i=0; i<33; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	e031      	b.n	8004024 <teo_dec+0x70>
	{
		if(irdata[i] >=8 && irdata[i] < 15)   //Represents 0
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <teo_dec+0x84>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc8:	2b07      	cmp	r3, #7
 8003fca:	d912      	bls.n	8003ff2 <teo_dec+0x3e>
 8003fcc:	4a1a      	ldr	r2, [pc, #104]	; (8004038 <teo_dec+0x84>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd4:	2b0e      	cmp	r3, #14
 8003fd6:	d80c      	bhi.n	8003ff2 <teo_dec+0x3e>
		{
			receiver_codet &= ~(1UL << (32-i));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f1c3 0320 	rsb	r3, r3, #32
 8003fde:	2201      	movs	r2, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43da      	mvns	r2, r3
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <teo_dec+0x88>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4013      	ands	r3, r2
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <teo_dec+0x88>)
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e015      	b.n	800401e <teo_dec+0x6a>
		}
		else if(irdata[i] >=16 && irdata[i]<25) //Represents 1
 8003ff2:	4a11      	ldr	r2, [pc, #68]	; (8004038 <teo_dec+0x84>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	d90f      	bls.n	800401e <teo_dec+0x6a>
 8003ffe:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <teo_dec+0x84>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004006:	2b18      	cmp	r3, #24
 8004008:	d809      	bhi.n	800401e <teo_dec+0x6a>
		{
			receiver_codet |= (1UL << (32-i));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f1c3 0320 	rsb	r3, r3, #32
 8004010:	2201      	movs	r2, #1
 8004012:	409a      	lsls	r2, r3
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <teo_dec+0x88>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4313      	orrs	r3, r2
 800401a:	4a08      	ldr	r2, [pc, #32]	; (800403c <teo_dec+0x88>)
 800401c:	6013      	str	r3, [r2, #0]
	for(int i=0; i<33; i++)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3301      	adds	r3, #1
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b20      	cmp	r3, #32
 8004028:	ddca      	ble.n	8003fc0 <teo_dec+0xc>
		}
	}
}
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	2402373c 	.word	0x2402373c
 800403c:	240002ec 	.word	0x240002ec

08004040 <IR_READER>:

void IR_READER()
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
	if(IR_READY)
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <IR_READER+0x48>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01a      	beq.n	8004082 <IR_READER+0x42>
	{
	if(pr_IR && flaga_RT==1 )
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <IR_READER+0x4c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <IR_READER+0x2c>
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <IR_READER+0x50>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d107      	bne.n	800406c <IR_READER+0x2c>
	{
		  HAL_GPIO_TogglePin(IR_LED_GPIO_Port, IR_LED_Pin);
 800405c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004060:	480c      	ldr	r0, [pc, #48]	; (8004094 <IR_READER+0x54>)
 8004062:	f006 fc96 	bl	800a992 <HAL_GPIO_TogglePin>

		  flaga_RT=0;
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <IR_READER+0x50>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
	}

	if(receiveComplete)
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <IR_READER+0x58>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <IR_READER+0x42>
	{
		receiveComplete=false;
 8004074:	4b08      	ldr	r3, [pc, #32]	; (8004098 <IR_READER+0x58>)
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
		teo_dec();
 800407a:	f7ff ff9b 	bl	8003fb4 <teo_dec>
		OBSLUGAPILOTA();
 800407e:	f000 f80d 	bl	800409c <OBSLUGAPILOTA>
	}

	}

}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	240237c0 	.word	0x240237c0
 800408c:	240002e4 	.word	0x240002e4
 8004090:	240002e8 	.word	0x240002e8
 8004094:	58020800 	.word	0x58020800
 8004098:	240237c4 	.word	0x240237c4

0800409c <OBSLUGAPILOTA>:

int znakwylaczdiode=0;


void OBSLUGAPILOTA()
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0

if(receiver_codet==2774180190) //DVD - ROBOT START
 80040a0:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <OBSLUGAPILOTA+0x40>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <OBSLUGAPILOTA+0x44>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d102      	bne.n	80040b0 <OBSLUGAPILOTA+0x14>
{
	URUCHAMIANIE_ROBOTA=1;
 80040aa:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <OBSLUGAPILOTA+0x48>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
}

if(receiver_codet==2774151375) //TV - ROBOT STOP
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <OBSLUGAPILOTA+0x40>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <OBSLUGAPILOTA+0x4c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d102      	bne.n	80040c0 <OBSLUGAPILOTA+0x24>
{
	URUCHAMIANIE_ROBOTA=0;
 80040ba:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <OBSLUGAPILOTA+0x48>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
if(receiver_codet==2774159790) //FM
{


}
if(receiver_codet==2774192430) //am  //IR OFF!!! @@@@@@@@@@@@@
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <OBSLUGAPILOTA+0x40>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a09      	ldr	r2, [pc, #36]	; (80040ec <OBSLUGAPILOTA+0x50>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d102      	bne.n	80040d0 <OBSLUGAPILOTA+0x34>
{
	IR_READY=0;
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <OBSLUGAPILOTA+0x54>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
{

}


}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	240002ec 	.word	0x240002ec
 80040e0:	a55aa15e 	.word	0xa55aa15e
 80040e4:	240002e0 	.word	0x240002e0
 80040e8:	a55a30cf 	.word	0xa55a30cf
 80040ec:	a55ad12e 	.word	0xa55ad12e
 80040f0:	240237c0 	.word	0x240237c0

080040f4 <EEPROM_IR_STATE_READ>:



void EEPROM_IR_STATE_READ()
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
	EEPROM_READ_INT(450, &IR_READY);
 80040f8:	4903      	ldr	r1, [pc, #12]	; (8004108 <EEPROM_IR_STATE_READ+0x14>)
 80040fa:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80040fe:	f7fd f918 	bl	8001332 <EEPROM_READ_INT>
}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	240237c0 	.word	0x240237c0

0800410c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004112:	f107 031c 	add.w	r3, r7, #28
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800411e:	463b      	mov	r3, r7
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
 800412c:	615a      	str	r2, [r3, #20]
 800412e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8004130:	4b62      	ldr	r3, [pc, #392]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004132:	4a63      	ldr	r2, [pc, #396]	; (80042c0 <MX_ADC1_Init+0x1b4>)
 8004134:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8004136:	4b61      	ldr	r3, [pc, #388]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004138:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800413c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800413e:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004140:	2208      	movs	r2, #8
 8004142:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004144:	4b5d      	ldr	r3, [pc, #372]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004146:	2201      	movs	r2, #1
 8004148:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800414a:	4b5c      	ldr	r3, [pc, #368]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800414c:	2204      	movs	r2, #4
 800414e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004150:	4b5a      	ldr	r3, [pc, #360]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004152:	2200      	movs	r2, #0
 8004154:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004156:	4b59      	ldr	r3, [pc, #356]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004158:	2201      	movs	r2, #1
 800415a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 800415c:	4b57      	ldr	r3, [pc, #348]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800415e:	2208      	movs	r2, #8
 8004160:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004162:	4b56      	ldr	r3, [pc, #344]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004168:	4b54      	ldr	r3, [pc, #336]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800416a:	2200      	movs	r2, #0
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800416e:	4b53      	ldr	r3, [pc, #332]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004170:	2200      	movs	r2, #0
 8004172:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8004174:	4b51      	ldr	r3, [pc, #324]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004176:	2203      	movs	r2, #3
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800417a:	4b50      	ldr	r3, [pc, #320]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800417c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004182:	4b4e      	ldr	r3, [pc, #312]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004184:	2200      	movs	r2, #0
 8004186:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004188:	4b4c      	ldr	r3, [pc, #304]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004190:	484a      	ldr	r0, [pc, #296]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004192:	f002 f8c9 	bl	8006328 <HAL_ADC_Init>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800419c:	f000 ff8c 	bl	80050b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80041a4:	f107 031c 	add.w	r3, r7, #28
 80041a8:	4619      	mov	r1, r3
 80041aa:	4844      	ldr	r0, [pc, #272]	; (80042bc <MX_ADC1_Init+0x1b0>)
 80041ac:	f003 f8dc 	bl	8007368 <HAL_ADCEx_MultiModeConfigChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80041b6:	f000 ff7f 	bl	80050b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80041ba:	4b42      	ldr	r3, [pc, #264]	; (80042c4 <MX_ADC1_Init+0x1b8>)
 80041bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80041be:	2306      	movs	r3, #6
 80041c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80041c2:	2303      	movs	r3, #3
 80041c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80041c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80041ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80041cc:	2304      	movs	r3, #4
 80041ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041d4:	463b      	mov	r3, r7
 80041d6:	4619      	mov	r1, r3
 80041d8:	4838      	ldr	r0, [pc, #224]	; (80042bc <MX_ADC1_Init+0x1b0>)
 80041da:	f002 fb27 	bl	800682c <HAL_ADC_ConfigChannel>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80041e4:	f000 ff68 	bl	80050b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80041e8:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <MX_ADC1_Init+0x1bc>)
 80041ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80041ec:	230c      	movs	r3, #12
 80041ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041f0:	463b      	mov	r3, r7
 80041f2:	4619      	mov	r1, r3
 80041f4:	4831      	ldr	r0, [pc, #196]	; (80042bc <MX_ADC1_Init+0x1b0>)
 80041f6:	f002 fb19 	bl	800682c <HAL_ADC_ConfigChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8004200:	f000 ff5a 	bl	80050b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8004204:	4b31      	ldr	r3, [pc, #196]	; (80042cc <MX_ADC1_Init+0x1c0>)
 8004206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004208:	2312      	movs	r3, #18
 800420a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800420c:	463b      	mov	r3, r7
 800420e:	4619      	mov	r1, r3
 8004210:	482a      	ldr	r0, [pc, #168]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004212:	f002 fb0b 	bl	800682c <HAL_ADC_ConfigChannel>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800421c:	f000 ff4c 	bl	80050b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8004220:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <MX_ADC1_Init+0x1c4>)
 8004222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004224:	2318      	movs	r3, #24
 8004226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004228:	463b      	mov	r3, r7
 800422a:	4619      	mov	r1, r3
 800422c:	4823      	ldr	r0, [pc, #140]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800422e:	f002 fafd 	bl	800682c <HAL_ADC_ConfigChannel>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8004238:	f000 ff3e 	bl	80050b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800423c:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <MX_ADC1_Init+0x1c8>)
 800423e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8004240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004244:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004246:	463b      	mov	r3, r7
 8004248:	4619      	mov	r1, r3
 800424a:	481c      	ldr	r0, [pc, #112]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800424c:	f002 faee 	bl	800682c <HAL_ADC_ConfigChannel>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8004256:	f000 ff2f 	bl	80050b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800425a:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <MX_ADC1_Init+0x1cc>)
 800425c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800425e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004262:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004264:	463b      	mov	r3, r7
 8004266:	4619      	mov	r1, r3
 8004268:	4814      	ldr	r0, [pc, #80]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800426a:	f002 fadf 	bl	800682c <HAL_ADC_ConfigChannel>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <MX_ADC1_Init+0x16c>
  {
    Error_Handler();
 8004274:	f000 ff20 	bl	80050b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004278:	4b18      	ldr	r3, [pc, #96]	; (80042dc <MX_ADC1_Init+0x1d0>)
 800427a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800427c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8004280:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004282:	463b      	mov	r3, r7
 8004284:	4619      	mov	r1, r3
 8004286:	480d      	ldr	r0, [pc, #52]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004288:	f002 fad0 	bl	800682c <HAL_ADC_ConfigChannel>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8004292:	f000 ff11 	bl	80050b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <MX_ADC1_Init+0x1d4>)
 8004298:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800429a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800429e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042a0:	463b      	mov	r3, r7
 80042a2:	4619      	mov	r1, r3
 80042a4:	4805      	ldr	r0, [pc, #20]	; (80042bc <MX_ADC1_Init+0x1b0>)
 80042a6:	f002 fac1 	bl	800682c <HAL_ADC_ConfigChannel>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80042b0:	f000 ff02 	bl	80050b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80042b4:	bf00      	nop
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	24023848 	.word	0x24023848
 80042c0:	40022000 	.word	0x40022000
 80042c4:	3ac04000 	.word	0x3ac04000
 80042c8:	3ef08000 	.word	0x3ef08000
 80042cc:	4b840000 	.word	0x4b840000
 80042d0:	4fb80000 	.word	0x4fb80000
 80042d4:	0c900008 	.word	0x0c900008
 80042d8:	1d500080 	.word	0x1d500080
 80042dc:	10c00010 	.word	0x10c00010
 80042e0:	21800100 	.word	0x21800100

080042e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b0ba      	sub	sp, #232	; 0xe8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042fc:	f107 0318 	add.w	r3, r7, #24
 8004300:	22bc      	movs	r2, #188	; 0xbc
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f00f fd0d 	bl	8013d24 <memset>
  if(adcHandle->Instance==ADC1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a4a      	ldr	r2, [pc, #296]	; (8004438 <HAL_ADC_MspInit+0x154>)
 8004310:	4293      	cmp	r3, r2
 8004312:	f040 808c 	bne.w	800442e <HAL_ADC_MspInit+0x14a>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004316:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800431a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800431c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004324:	f107 0318 	add.w	r3, r7, #24
 8004328:	4618      	mov	r0, r3
 800432a:	f008 f8df 	bl	800c4ec <HAL_RCCEx_PeriphCLKConfig>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8004334:	f000 fec0 	bl	80050b8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004338:	4b40      	ldr	r3, [pc, #256]	; (800443c <HAL_ADC_MspInit+0x158>)
 800433a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800433e:	4a3f      	ldr	r2, [pc, #252]	; (800443c <HAL_ADC_MspInit+0x158>)
 8004340:	f043 0320 	orr.w	r3, r3, #32
 8004344:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004348:	4b3c      	ldr	r3, [pc, #240]	; (800443c <HAL_ADC_MspInit+0x158>)
 800434a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004356:	4b39      	ldr	r3, [pc, #228]	; (800443c <HAL_ADC_MspInit+0x158>)
 8004358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800435c:	4a37      	ldr	r2, [pc, #220]	; (800443c <HAL_ADC_MspInit+0x158>)
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004366:	4b35      	ldr	r3, [pc, #212]	; (800443c <HAL_ADC_MspInit+0x158>)
 8004368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004374:	4b31      	ldr	r3, [pc, #196]	; (800443c <HAL_ADC_MspInit+0x158>)
 8004376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800437a:	4a30      	ldr	r2, [pc, #192]	; (800443c <HAL_ADC_MspInit+0x158>)
 800437c:	f043 0304 	orr.w	r3, r3, #4
 8004380:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004384:	4b2d      	ldr	r3, [pc, #180]	; (800443c <HAL_ADC_MspInit+0x158>)
 8004386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8004392:	23fc      	movs	r3, #252	; 0xfc
 8004394:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004398:	2303      	movs	r3, #3
 800439a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4825      	ldr	r0, [pc, #148]	; (8004440 <HAL_ADC_MspInit+0x15c>)
 80043ac:	f006 f81e 	bl	800a3ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80043b0:	2330      	movs	r3, #48	; 0x30
 80043b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043b6:	2303      	movs	r3, #3
 80043b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80043c6:	4619      	mov	r1, r3
 80043c8:	481e      	ldr	r0, [pc, #120]	; (8004444 <HAL_ADC_MspInit+0x160>)
 80043ca:	f006 f80f 	bl	800a3ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80043ce:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <HAL_ADC_MspInit+0x164>)
 80043d0:	4a1e      	ldr	r2, [pc, #120]	; (800444c <HAL_ADC_MspInit+0x168>)
 80043d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80043d4:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <HAL_ADC_MspInit+0x164>)
 80043d6:	2209      	movs	r2, #9
 80043d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043da:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <HAL_ADC_MspInit+0x164>)
 80043dc:	2200      	movs	r2, #0
 80043de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_ADC_MspInit+0x164>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80043e6:	4b18      	ldr	r3, [pc, #96]	; (8004448 <HAL_ADC_MspInit+0x164>)
 80043e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043ee:	4b16      	ldr	r3, [pc, #88]	; (8004448 <HAL_ADC_MspInit+0x164>)
 80043f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <HAL_ADC_MspInit+0x164>)
 80043f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_ADC_MspInit+0x164>)
 8004400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004404:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <HAL_ADC_MspInit+0x164>)
 8004408:	2200      	movs	r2, #0
 800440a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <HAL_ADC_MspInit+0x164>)
 800440e:	2200      	movs	r2, #0
 8004410:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004412:	480d      	ldr	r0, [pc, #52]	; (8004448 <HAL_ADC_MspInit+0x164>)
 8004414:	f003 f9b0 	bl	8007778 <HAL_DMA_Init>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_ADC_MspInit+0x13e>
    {
      Error_Handler();
 800441e:	f000 fe4b 	bl	80050b8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a08      	ldr	r2, [pc, #32]	; (8004448 <HAL_ADC_MspInit+0x164>)
 8004426:	64da      	str	r2, [r3, #76]	; 0x4c
 8004428:	4a07      	ldr	r2, [pc, #28]	; (8004448 <HAL_ADC_MspInit+0x164>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800442e:	bf00      	nop
 8004430:	37e8      	adds	r7, #232	; 0xe8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40022000 	.word	0x40022000
 800443c:	58024400 	.word	0x58024400
 8004440:	58020000 	.word	0x58020000
 8004444:	58020800 	.word	0x58020800
 8004448:	240238ac 	.word	0x240238ac
 800444c:	40020010 	.word	0x40020010

08004450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004456:	4b0d      	ldr	r3, [pc, #52]	; (800448c <MX_DMA_Init+0x3c>)
 8004458:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800445c:	4a0b      	ldr	r2, [pc, #44]	; (800448c <MX_DMA_Init+0x3c>)
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004466:	4b09      	ldr	r3, [pc, #36]	; (800448c <MX_DMA_Init+0x3c>)
 8004468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004474:	2200      	movs	r2, #0
 8004476:	2100      	movs	r1, #0
 8004478:	200b      	movs	r0, #11
 800447a:	f003 f944 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800447e:	200b      	movs	r0, #11
 8004480:	f003 f95b 	bl	800773a <HAL_NVIC_EnableIRQ>

}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	58024400 	.word	0x58024400

08004490 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8004490:	b480      	push	{r7}
 8004492:	b08d      	sub	sp, #52	; 0x34
 8004494:	af00      	add	r7, sp, #0
 8004496:	ed87 0b04 	vstr	d0, [r7, #16]
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
	char * ptr = buf;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	char * p = ptr;
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b0a      	cmp	r3, #10
 80044aa:	dd01      	ble.n	80044b0 <ftoa+0x20>
		precision = MAX_PRECISION;
 80044ac:	230a      	movs	r3, #10
 80044ae:	60bb      	str	r3, [r7, #8]

	// sign stuff
	if (f < 0)
 80044b0:	ed97 7b04 	vldr	d7, [r7, #16]
 80044b4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80044b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044bc:	d50a      	bpl.n	80044d4 <ftoa+0x44>
	{
		f = -f;
 80044be:	ed97 7b04 	vldr	d7, [r7, #16]
 80044c2:	eeb1 7b47 	vneg.f64	d7, d7
 80044c6:	ed87 7b04 	vstr	d7, [r7, #16]
		*ptr++ = '-';
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d0:	222d      	movs	r2, #45	; 0x2d
 80044d2:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	da49      	bge.n	800456e <ftoa+0xde>
	{
		if (f < 1.0) precision = 6;
 80044da:	ed97 7b04 	vldr	d7, [r7, #16]
 80044de:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80044e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80044e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ea:	d502      	bpl.n	80044f2 <ftoa+0x62>
 80044ec:	2306      	movs	r3, #6
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	e03d      	b.n	800456e <ftoa+0xde>
		else if (f < 10.0) precision = 5;
 80044f2:	ed97 7b04 	vldr	d7, [r7, #16]
 80044f6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80044fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80044fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004502:	d502      	bpl.n	800450a <ftoa+0x7a>
 8004504:	2305      	movs	r3, #5
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	e031      	b.n	800456e <ftoa+0xde>
		else if (f < 100.0) precision = 4;
 800450a:	ed97 7b04 	vldr	d7, [r7, #16]
 800450e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80046a8 <ftoa+0x218>
 8004512:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451a:	d502      	bpl.n	8004522 <ftoa+0x92>
 800451c:	2304      	movs	r3, #4
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	e025      	b.n	800456e <ftoa+0xde>
		else if (f < 1000.0) precision = 3;
 8004522:	ed97 7b04 	vldr	d7, [r7, #16]
 8004526:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80046b0 <ftoa+0x220>
 800452a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004532:	d502      	bpl.n	800453a <ftoa+0xaa>
 8004534:	2303      	movs	r3, #3
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	e019      	b.n	800456e <ftoa+0xde>
		else if (f < 10000.0) precision = 2;
 800453a:	ed97 7b04 	vldr	d7, [r7, #16]
 800453e:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 80046b8 <ftoa+0x228>
 8004542:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454a:	d502      	bpl.n	8004552 <ftoa+0xc2>
 800454c:	2302      	movs	r3, #2
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	e00d      	b.n	800456e <ftoa+0xde>
		else if (f < 100000.0) precision = 1;
 8004552:	ed97 7b04 	vldr	d7, [r7, #16]
 8004556:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80046c0 <ftoa+0x230>
 800455a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800455e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004562:	d502      	bpl.n	800456a <ftoa+0xda>
 8004564:	2301      	movs	r3, #1
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	e001      	b.n	800456e <ftoa+0xde>
		else precision = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]
	}

	// round value according the precision
	if (precision)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00b      	beq.n	800458c <ftoa+0xfc>
		f += rounders[precision];
 8004574:	4a54      	ldr	r2, [pc, #336]	; (80046c8 <ftoa+0x238>)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	ed93 7b00 	vldr	d7, [r3]
 8004580:	ed97 6b04 	vldr	d6, [r7, #16]
 8004584:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004588:	ed87 7b04 	vstr	d7, [r7, #16]

	// integer part...
	intPart = f;
 800458c:	ed97 7b04 	vldr	d7, [r7, #16]
 8004590:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004594:	ee17 3a90 	vmov	r3, s15
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
	f -= intPart;
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80045a4:	ed97 6b04 	vldr	d6, [r7, #16]
 80045a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80045ac:	ed87 7b04 	vstr	d7, [r7, #16]

	if (!intPart)
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d105      	bne.n	80045c2 <ftoa+0x132>
		*ptr++ = '0';
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045bc:	2230      	movs	r2, #48	; 0x30
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	e038      	b.n	8004634 <ftoa+0x1a4>
	else
	{
		// save start pointer
		p = ptr;
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28

		// convert (reverse order)
		while (intPart)
 80045c6:	e01a      	b.n	80045fe <ftoa+0x16e>
		{
			*p++ = '0' + intPart % 10;
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	4b40      	ldr	r3, [pc, #256]	; (80046cc <ftoa+0x23c>)
 80045cc:	fb83 1302 	smull	r1, r3, r3, r2
 80045d0:	1099      	asrs	r1, r3, #2
 80045d2:	17d3      	asrs	r3, r2, #31
 80045d4:	1ac9      	subs	r1, r1, r3
 80045d6:	460b      	mov	r3, r1
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	1ad1      	subs	r1, r2, r3
 80045e0:	b2ca      	uxtb	r2, r1
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	1c59      	adds	r1, r3, #1
 80045e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80045e8:	3230      	adds	r2, #48	; 0x30
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	4a36      	ldr	r2, [pc, #216]	; (80046cc <ftoa+0x23c>)
 80045f2:	fb82 1203 	smull	r1, r2, r2, r3
 80045f6:	1092      	asrs	r2, r2, #2
 80045f8:	17db      	asrs	r3, r3, #31
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
		while (intPart)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e1      	bne.n	80045c8 <ftoa+0x138>
		}

		// save end pos
		p1 = p;
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	623b      	str	r3, [r7, #32]

		// reverse result
		while (p > ptr)
 8004608:	e00e      	b.n	8004628 <ftoa+0x198>
		{
			c = *--p;
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	77fb      	strb	r3, [r7, #31]
			*p = *ptr;
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004624:	7ffa      	ldrb	r2, [r7, #31]
 8004626:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8004628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	429a      	cmp	r2, r3
 800462e:	d8ec      	bhi.n	800460a <ftoa+0x17a>
		}

		// restore end pos
		ptr = p1;
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	// decimal part
	if (precision)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d02c      	beq.n	8004694 <ftoa+0x204>
	{
		// place decimal point
		*ptr++ = '.';
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004640:	222e      	movs	r2, #46	; 0x2e
 8004642:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8004644:	e021      	b.n	800468a <ftoa+0x1fa>
		{
			f *= 10.0;
 8004646:	ed97 7b04 	vldr	d7, [r7, #16]
 800464a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800464e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004652:	ed87 7b04 	vstr	d7, [r7, #16]
			c = f;
 8004656:	ed97 7b04 	vldr	d7, [r7, #16]
 800465a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800465e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004662:	793b      	ldrb	r3, [r7, #4]
 8004664:	77fb      	strb	r3, [r7, #31]
			*ptr++ = '0' + c;
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800466c:	7ffa      	ldrb	r2, [r7, #31]
 800466e:	3230      	adds	r2, #48	; 0x30
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	701a      	strb	r2, [r3, #0]
			f -= c;
 8004674:	7ffb      	ldrb	r3, [r7, #31]
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800467e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004682:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004686:	ed87 7b04 	vstr	d7, [r7, #16]
		while (precision--)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	60ba      	str	r2, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1d8      	bne.n	8004646 <ftoa+0x1b6>
		}
	}

	// terminating zero
	*ptr = 0;
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]

	return buf;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3734      	adds	r7, #52	; 0x34
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	00000000 	.word	0x00000000
 80046ac:	40590000 	.word	0x40590000
 80046b0:	00000000 	.word	0x00000000
 80046b4:	408f4000 	.word	0x408f4000
 80046b8:	00000000 	.word	0x00000000
 80046bc:	40c38800 	.word	0x40c38800
 80046c0:	00000000 	.word	0x00000000
 80046c4:	40f86a00 	.word	0x40f86a00
 80046c8:	08019220 	.word	0x08019220
 80046cc:	66666667 	.word	0x66666667

080046d0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08c      	sub	sp, #48	; 0x30
 80046d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d6:	f107 031c 	add.w	r3, r7, #28
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	60da      	str	r2, [r3, #12]
 80046e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046e6:	4b80      	ldr	r3, [pc, #512]	; (80048e8 <MX_GPIO_Init+0x218>)
 80046e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ec:	4a7e      	ldr	r2, [pc, #504]	; (80048e8 <MX_GPIO_Init+0x218>)
 80046ee:	f043 0310 	orr.w	r3, r3, #16
 80046f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046f6:	4b7c      	ldr	r3, [pc, #496]	; (80048e8 <MX_GPIO_Init+0x218>)
 80046f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004704:	4b78      	ldr	r3, [pc, #480]	; (80048e8 <MX_GPIO_Init+0x218>)
 8004706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800470a:	4a77      	ldr	r2, [pc, #476]	; (80048e8 <MX_GPIO_Init+0x218>)
 800470c:	f043 0304 	orr.w	r3, r3, #4
 8004710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004714:	4b74      	ldr	r3, [pc, #464]	; (80048e8 <MX_GPIO_Init+0x218>)
 8004716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004722:	4b71      	ldr	r3, [pc, #452]	; (80048e8 <MX_GPIO_Init+0x218>)
 8004724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004728:	4a6f      	ldr	r2, [pc, #444]	; (80048e8 <MX_GPIO_Init+0x218>)
 800472a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004732:	4b6d      	ldr	r3, [pc, #436]	; (80048e8 <MX_GPIO_Init+0x218>)
 8004734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004740:	4b69      	ldr	r3, [pc, #420]	; (80048e8 <MX_GPIO_Init+0x218>)
 8004742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004746:	4a68      	ldr	r2, [pc, #416]	; (80048e8 <MX_GPIO_Init+0x218>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004750:	4b65      	ldr	r3, [pc, #404]	; (80048e8 <MX_GPIO_Init+0x218>)
 8004752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800475e:	4b62      	ldr	r3, [pc, #392]	; (80048e8 <MX_GPIO_Init+0x218>)
 8004760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004764:	4a60      	ldr	r2, [pc, #384]	; (80048e8 <MX_GPIO_Init+0x218>)
 8004766:	f043 0302 	orr.w	r3, r3, #2
 800476a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800476e:	4b5e      	ldr	r3, [pc, #376]	; (80048e8 <MX_GPIO_Init+0x218>)
 8004770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800477c:	4b5a      	ldr	r3, [pc, #360]	; (80048e8 <MX_GPIO_Init+0x218>)
 800477e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004782:	4a59      	ldr	r2, [pc, #356]	; (80048e8 <MX_GPIO_Init+0x218>)
 8004784:	f043 0308 	orr.w	r3, r3, #8
 8004788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800478c:	4b56      	ldr	r3, [pc, #344]	; (80048e8 <MX_GPIO_Init+0x218>)
 800478e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	607b      	str	r3, [r7, #4]
 8004798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_SET);
 800479a:	2201      	movs	r2, #1
 800479c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047a0:	4852      	ldr	r0, [pc, #328]	; (80048ec <MX_GPIO_Init+0x21c>)
 80047a2:	f006 f8dd 	bl	800a960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|EEPROM_WC_Pin, GPIO_PIN_SET);
 80047a6:	2201      	movs	r2, #1
 80047a8:	2184      	movs	r1, #132	; 0x84
 80047aa:	4851      	ldr	r0, [pc, #324]	; (80048f0 <MX_GPIO_Init+0x220>)
 80047ac:	f006 f8d8 	bl	800a960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80047b0:	2201      	movs	r2, #1
 80047b2:	2180      	movs	r1, #128	; 0x80
 80047b4:	484f      	ldr	r0, [pc, #316]	; (80048f4 <MX_GPIO_Init+0x224>)
 80047b6:	f006 f8d3 	bl	800a960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDD1_GPIO_Port, LDD1_Pin, GPIO_PIN_SET);
 80047ba:	2201      	movs	r2, #1
 80047bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047c0:	484d      	ldr	r0, [pc, #308]	; (80048f8 <MX_GPIO_Init+0x228>)
 80047c2:	f006 f8cd 	bl	800a960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_PIN_Pin;
 80047c6:	2304      	movs	r3, #4
 80047c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80047ca:	4b4c      	ldr	r3, [pc, #304]	; (80048fc <MX_GPIO_Init+0x22c>)
 80047cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IR_PIN_GPIO_Port, &GPIO_InitStruct);
 80047d2:	f107 031c 	add.w	r3, r7, #28
 80047d6:	4619      	mov	r1, r3
 80047d8:	4846      	ldr	r0, [pc, #280]	; (80048f4 <MX_GPIO_Init+0x224>)
 80047da:	f005 fe07 	bl	800a3ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ENK1_Pin|ENK2_Pin;
 80047de:	2318      	movs	r3, #24
 80047e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80047e2:	4b47      	ldr	r3, [pc, #284]	; (8004900 <MX_GPIO_Init+0x230>)
 80047e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047ea:	f107 031c 	add.w	r3, r7, #28
 80047ee:	4619      	mov	r1, r3
 80047f0:	4840      	ldr	r0, [pc, #256]	; (80048f4 <MX_GPIO_Init+0x224>)
 80047f2:	f005 fdfb 	bl	800a3ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_LED_Pin;
 80047f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80047fc:	2311      	movs	r3, #17
 80047fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004800:	2300      	movs	r3, #0
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004804:	2300      	movs	r3, #0
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IR_LED_GPIO_Port, &GPIO_InitStruct);
 8004808:	f107 031c 	add.w	r3, r7, #28
 800480c:	4619      	mov	r1, r3
 800480e:	4837      	ldr	r0, [pc, #220]	; (80048ec <MX_GPIO_Init+0x21c>)
 8004810:	f005 fdec 	bl	800a3ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8004814:	2304      	movs	r3, #4
 8004816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004818:	2311      	movs	r3, #17
 800481a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004820:	2300      	movs	r3, #0
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004824:	f107 031c 	add.w	r3, r7, #28
 8004828:	4619      	mov	r1, r3
 800482a:	4831      	ldr	r0, [pc, #196]	; (80048f0 <MX_GPIO_Init+0x220>)
 800482c:	f005 fdde 	bl	800a3ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8004830:	2380      	movs	r3, #128	; 0x80
 8004832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004834:	2311      	movs	r3, #17
 8004836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004838:	2300      	movs	r3, #0
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483c:	2300      	movs	r3, #0
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8004840:	f107 031c 	add.w	r3, r7, #28
 8004844:	4619      	mov	r1, r3
 8004846:	482b      	ldr	r0, [pc, #172]	; (80048f4 <MX_GPIO_Init+0x224>)
 8004848:	f005 fdd0 	bl	800a3ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENK4_Pin|ENK3_Pin;
 800484c:	23c0      	movs	r3, #192	; 0xc0
 800484e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004850:	4b2b      	ldr	r3, [pc, #172]	; (8004900 <MX_GPIO_Init+0x230>)
 8004852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004858:	f107 031c 	add.w	r3, r7, #28
 800485c:	4619      	mov	r1, r3
 800485e:	4823      	ldr	r0, [pc, #140]	; (80048ec <MX_GPIO_Init+0x21c>)
 8004860:	f005 fdc4 	bl	800a3ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LDD1_Pin;
 8004864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800486a:	2311      	movs	r3, #17
 800486c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004872:	2300      	movs	r3, #0
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LDD1_GPIO_Port, &GPIO_InitStruct);
 8004876:	f107 031c 	add.w	r3, r7, #28
 800487a:	4619      	mov	r1, r3
 800487c:	481e      	ldr	r0, [pc, #120]	; (80048f8 <MX_GPIO_Init+0x228>)
 800487e:	f005 fdb5 	bl	800a3ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EEPROM_WC_Pin;
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004886:	2301      	movs	r3, #1
 8004888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488a:	2300      	movs	r3, #0
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800488e:	2300      	movs	r3, #0
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EEPROM_WC_GPIO_Port, &GPIO_InitStruct);
 8004892:	f107 031c 	add.w	r3, r7, #28
 8004896:	4619      	mov	r1, r3
 8004898:	4815      	ldr	r0, [pc, #84]	; (80048f0 <MX_GPIO_Init+0x220>)
 800489a:	f005 fda7 	bl	800a3ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 13, 0);
 800489e:	2200      	movs	r2, #0
 80048a0:	210d      	movs	r1, #13
 80048a2:	2008      	movs	r0, #8
 80048a4:	f002 ff2f 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80048a8:	2008      	movs	r0, #8
 80048aa:	f002 ff46 	bl	800773a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 14, 0);
 80048ae:	2200      	movs	r2, #0
 80048b0:	210e      	movs	r1, #14
 80048b2:	2009      	movs	r0, #9
 80048b4:	f002 ff27 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80048b8:	2009      	movs	r0, #9
 80048ba:	f002 ff3e 	bl	800773a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 14, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	210e      	movs	r1, #14
 80048c2:	200a      	movs	r0, #10
 80048c4:	f002 ff1f 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80048c8:	200a      	movs	r0, #10
 80048ca:	f002 ff36 	bl	800773a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	210e      	movs	r1, #14
 80048d2:	2017      	movs	r0, #23
 80048d4:	f002 ff17 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80048d8:	2017      	movs	r0, #23
 80048da:	f002 ff2e 	bl	800773a <HAL_NVIC_EnableIRQ>

}
 80048de:	bf00      	nop
 80048e0:	3730      	adds	r7, #48	; 0x30
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	58024400 	.word	0x58024400
 80048ec:	58020800 	.word	0x58020800
 80048f0:	58020400 	.word	0x58020400
 80048f4:	58021000 	.word	0x58021000
 80048f8:	58020000 	.word	0x58020000
 80048fc:	11210000 	.word	0x11210000
 8004900:	11310000 	.word	0x11310000

08004904 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <MX_I2C1_Init+0x74>)
 800490a:	4a1c      	ldr	r2, [pc, #112]	; (800497c <MX_I2C1_Init+0x78>)
 800490c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <MX_I2C1_Init+0x74>)
 8004910:	4a1b      	ldr	r2, [pc, #108]	; (8004980 <MX_I2C1_Init+0x7c>)
 8004912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004914:	4b18      	ldr	r3, [pc, #96]	; (8004978 <MX_I2C1_Init+0x74>)
 8004916:	2200      	movs	r2, #0
 8004918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800491a:	4b17      	ldr	r3, [pc, #92]	; (8004978 <MX_I2C1_Init+0x74>)
 800491c:	2201      	movs	r2, #1
 800491e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004920:	4b15      	ldr	r3, [pc, #84]	; (8004978 <MX_I2C1_Init+0x74>)
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004926:	4b14      	ldr	r3, [pc, #80]	; (8004978 <MX_I2C1_Init+0x74>)
 8004928:	2200      	movs	r2, #0
 800492a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800492c:	4b12      	ldr	r3, [pc, #72]	; (8004978 <MX_I2C1_Init+0x74>)
 800492e:	2200      	movs	r2, #0
 8004930:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <MX_I2C1_Init+0x74>)
 8004934:	2200      	movs	r2, #0
 8004936:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <MX_I2C1_Init+0x74>)
 800493a:	2200      	movs	r2, #0
 800493c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800493e:	480e      	ldr	r0, [pc, #56]	; (8004978 <MX_I2C1_Init+0x74>)
 8004940:	f006 f85c 	bl	800a9fc <HAL_I2C_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800494a:	f000 fbb5 	bl	80050b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800494e:	2100      	movs	r1, #0
 8004950:	4809      	ldr	r0, [pc, #36]	; (8004978 <MX_I2C1_Init+0x74>)
 8004952:	f006 fd5d 	bl	800b410 <HAL_I2CEx_ConfigAnalogFilter>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800495c:	f000 fbac 	bl	80050b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004960:	2100      	movs	r1, #0
 8004962:	4805      	ldr	r0, [pc, #20]	; (8004978 <MX_I2C1_Init+0x74>)
 8004964:	f006 fd9f 	bl	800b4a6 <HAL_I2CEx_ConfigDigitalFilter>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800496e:	f000 fba3 	bl	80050b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	24023970 	.word	0x24023970
 800497c:	40005400 	.word	0x40005400
 8004980:	00b03fdb 	.word	0x00b03fdb

08004984 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8004988:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <MX_I2C4_Init+0x74>)
 800498a:	4a1c      	ldr	r2, [pc, #112]	; (80049fc <MX_I2C4_Init+0x78>)
 800498c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 800498e:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <MX_I2C4_Init+0x74>)
 8004990:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <MX_I2C4_Init+0x7c>)
 8004992:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8004994:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <MX_I2C4_Init+0x74>)
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800499a:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <MX_I2C4_Init+0x74>)
 800499c:	2201      	movs	r2, #1
 800499e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049a0:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <MX_I2C4_Init+0x74>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80049a6:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <MX_I2C4_Init+0x74>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80049ac:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <MX_I2C4_Init+0x74>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049b2:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <MX_I2C4_Init+0x74>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <MX_I2C4_Init+0x74>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80049be:	480e      	ldr	r0, [pc, #56]	; (80049f8 <MX_I2C4_Init+0x74>)
 80049c0:	f006 f81c 	bl	800a9fc <HAL_I2C_Init>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80049ca:	f000 fb75 	bl	80050b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80049ce:	2100      	movs	r1, #0
 80049d0:	4809      	ldr	r0, [pc, #36]	; (80049f8 <MX_I2C4_Init+0x74>)
 80049d2:	f006 fd1d 	bl	800b410 <HAL_I2CEx_ConfigAnalogFilter>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80049dc:	f000 fb6c 	bl	80050b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80049e0:	2100      	movs	r1, #0
 80049e2:	4805      	ldr	r0, [pc, #20]	; (80049f8 <MX_I2C4_Init+0x74>)
 80049e4:	f006 fd5f 	bl	800b4a6 <HAL_I2CEx_ConfigDigitalFilter>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80049ee:	f000 fb63 	bl	80050b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	24023924 	.word	0x24023924
 80049fc:	58001c00 	.word	0x58001c00
 8004a00:	307075b1 	.word	0x307075b1

08004a04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b0ba      	sub	sp, #232	; 0xe8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a1c:	f107 0318 	add.w	r3, r7, #24
 8004a20:	22bc      	movs	r2, #188	; 0xbc
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f00f f97d 	bl	8013d24 <memset>
  if(i2cHandle->Instance==I2C1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a49      	ldr	r2, [pc, #292]	; (8004b54 <HAL_I2C_MspInit+0x150>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d143      	bne.n	8004abc <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004a34:	2308      	movs	r3, #8
 8004a36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a3e:	f107 0318 	add.w	r3, r7, #24
 8004a42:	4618      	mov	r0, r3
 8004a44:	f007 fd52 	bl	800c4ec <HAL_RCCEx_PeriphCLKConfig>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004a4e:	f000 fb33 	bl	80050b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a52:	4b41      	ldr	r3, [pc, #260]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a58:	4a3f      	ldr	r2, [pc, #252]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004a5a:	f043 0302 	orr.w	r3, r3, #2
 8004a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a62:	4b3d      	ldr	r3, [pc, #244]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a78:	2312      	movs	r3, #18
 8004a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4831      	ldr	r0, [pc, #196]	; (8004b5c <HAL_I2C_MspInit+0x158>)
 8004a98:	f005 fca8 	bl	800a3ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a9c:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004aa2:	4a2d      	ldr	r2, [pc, #180]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004aa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004aac:	4b2a      	ldr	r3, [pc, #168]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8004aba:	e047      	b.n	8004b4c <HAL_I2C_MspInit+0x148>
  else if(i2cHandle->Instance==I2C4)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a27      	ldr	r2, [pc, #156]	; (8004b60 <HAL_I2C_MspInit+0x15c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d142      	bne.n	8004b4c <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004ac6:	2310      	movs	r3, #16
 8004ac8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ad0:	f107 0318 	add.w	r3, r7, #24
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f007 fd09 	bl	800c4ec <HAL_RCCEx_PeriphCLKConfig>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 8004ae0:	f000 faea 	bl	80050b8 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ae4:	4b1c      	ldr	r3, [pc, #112]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aea:	4a1b      	ldr	r2, [pc, #108]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004aec:	f043 0308 	orr.w	r3, r3, #8
 8004af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004af4:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004b02:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b0a:	2312      	movs	r3, #18
 8004b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004b26:	4619      	mov	r1, r3
 8004b28:	480e      	ldr	r0, [pc, #56]	; (8004b64 <HAL_I2C_MspInit+0x160>)
 8004b2a:	f005 fc5f 	bl	800a3ec <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b34:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_I2C_MspInit+0x154>)
 8004b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
}
 8004b4c:	bf00      	nop
 8004b4e:	37e8      	adds	r7, #232	; 0xe8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40005400 	.word	0x40005400
 8004b58:	58024400 	.word	0x58024400
 8004b5c:	58020400 	.word	0x58020400
 8004b60:	58001c00 	.word	0x58001c00
 8004b64:	58020c00 	.word	0x58020c00

08004b68 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <HAL_I2C_MspDeInit+0x70>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d112      	bne.n	8004ba0 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004b7a:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <HAL_I2C_MspDeInit+0x74>)
 8004b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b80:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <HAL_I2C_MspDeInit+0x74>)
 8004b82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b8e:	4814      	ldr	r0, [pc, #80]	; (8004be0 <HAL_I2C_MspDeInit+0x78>)
 8004b90:	f005 fddc 	bl	800a74c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004b94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b98:	4811      	ldr	r0, [pc, #68]	; (8004be0 <HAL_I2C_MspDeInit+0x78>)
 8004b9a:	f005 fdd7 	bl	800a74c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
}
 8004b9e:	e016      	b.n	8004bce <HAL_I2C_MspDeInit+0x66>
  else if(i2cHandle->Instance==I2C4)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a0f      	ldr	r2, [pc, #60]	; (8004be4 <HAL_I2C_MspDeInit+0x7c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d111      	bne.n	8004bce <HAL_I2C_MspDeInit+0x66>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004baa:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <HAL_I2C_MspDeInit+0x74>)
 8004bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <HAL_I2C_MspDeInit+0x74>)
 8004bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8004bba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bbe:	480a      	ldr	r0, [pc, #40]	; (8004be8 <HAL_I2C_MspDeInit+0x80>)
 8004bc0:	f005 fdc4 	bl	800a74c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8004bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bc8:	4807      	ldr	r0, [pc, #28]	; (8004be8 <HAL_I2C_MspDeInit+0x80>)
 8004bca:	f005 fdbf 	bl	800a74c <HAL_GPIO_DeInit>
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40005400 	.word	0x40005400
 8004bdc:	58024400 	.word	0x58024400
 8004be0:	58020400 	.word	0x58020400
 8004be4:	58001c00 	.word	0x58001c00
 8004be8:	58020c00 	.word	0x58020c00

08004bec <EEPROM_LED_BLINK_READ>:

int LED_BLINK=1,LED_Helper=0;
int Sys_Reset=0;

void EEPROM_LED_BLINK_READ()
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
	EEPROM_READ_INT(455, &LED_BLINK);
 8004bf0:	4903      	ldr	r1, [pc, #12]	; (8004c00 <EEPROM_LED_BLINK_READ+0x14>)
 8004bf2:	f240 10c7 	movw	r0, #455	; 0x1c7
 8004bf6:	f7fc fb9c 	bl	8001332 <EEPROM_READ_INT>
}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	2400000c 	.word	0x2400000c

08004c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c08:	f001 f8e4 	bl	8005dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c0c:	f000 f840 	bl	8004c90 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004c10:	f000 f8bc 	bl	8004d8c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c14:	f7ff fd5c 	bl	80046d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c18:	f7ff fc1a 	bl	8004450 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8004c1c:	f000 fa54 	bl	80050c8 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8004c20:	f7ff fa74 	bl	800410c <MX_ADC1_Init>
  MX_TIM15_Init();
 8004c24:	f000 fdc2 	bl	80057ac <MX_TIM15_Init>
  MX_TIM4_Init();
 8004c28:	f000 fd0c 	bl	8005644 <MX_TIM4_Init>
  MX_I2C4_Init();
 8004c2c:	f7ff feaa 	bl	8004984 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8004c30:	f000 ff9a 	bl	8005b68 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8004c34:	f000 ff4c 	bl	8005ad0 <MX_UART5_Init>
  MX_TIM2_Init();
 8004c38:	f000 fcb8 	bl	80055ac <MX_TIM2_Init>
  MX_I2C1_Init();
 8004c3c:	f7ff fe62 	bl	8004904 <MX_I2C1_Init>
  MX_TIM5_Init();
 8004c40:	f000 fd66 	bl	8005710 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  EEPROM_LED_BLINK_READ(); //defined in this file above
 8004c44:	f7ff ffd2 	bl	8004bec <EEPROM_LED_BLINK_READ>
  CZUJNIKI_INIT(); //Init the sensors,reference to file "CZUJNIKI.c"
 8004c48:	f7fc fa6c 	bl	8001124 <CZUJNIKI_INIT>
  Motor_PWM_Init(); //Init the PWM on Motor Drivers,reference to file "R_PID.c"
 8004c4c:	f7ff f8cc 	bl	8003de8 <Motor_PWM_Init>
  IR_INIT(); //Init the IR detector, reference to file "IR_TSOP2236_byTeor.c"
 8004c50:	f7ff f95c 	bl	8003f0c <IR_INIT>
  BLE_INIT(); //Init the BLE Module, reference to file "BLE_PC_CON.c"
 8004c54:	f7fb ff30 	bl	8000ab8 <BLE_INIT>
  HAL_GPIO_WritePin(EEPROM_WC_GPIO_Port, EEPROM_WC_Pin, GPIO_PIN_RESET);
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	480b      	ldr	r0, [pc, #44]	; (8004c8c <main+0x88>)
 8004c5e:	f005 fe7f 	bl	800a960 <HAL_GPIO_WritePin>

		  //Sredni czas podczas wysylania danych do apki telefonu to okolo 40us jednak maxy napewno sa inne...

	 // zrob_charakterystki_siln();

	  oblicz_predkosc();
 8004c62:	f7fc fbc5 	bl	80013f0 <oblicz_predkosc>
	  mierzprzebdr();
 8004c66:	f7fc fc95 	bl	8001594 <mierzprzebdr>

	  ProfilPredkosci();
 8004c6a:	f000 f9d3 	bl	8005014 <ProfilPredkosci>

	  OBLICZ_BLAD(); //reference to file "CZUJNIKI.c"
 8004c6e:	f7fc f8a1 	bl	8000db4 <OBLICZ_BLAD>
	  calculatePID(); //reference to file "R_PID.c"
 8004c72:	f7fe fe93 	bl	800399c <calculatePID>
	  Robot_Control(); //reference to file "Robot_Control.c"
 8004c76:	f7ff f8e3 	bl	8003e40 <Robot_Control>
	  DANE_DO_APLIKACJI_MOBILNEJ(); ////reference to file "Komendy_BLE.h"
 8004c7a:	f7fd faf9 	bl	8002270 <DANE_DO_APLIKACJI_MOBILNEJ>
	  LED_BLINKING(); //defined in this file below
 8004c7e:	f000 f9d1 	bl	8005024 <LED_BLINKING>
	  IR_READER();
 8004c82:	f7ff f9dd 	bl	8004040 <IR_READER>

	 wykryj_znacznik();
 8004c86:	f7fc fcef 	bl	8001668 <wykryj_znacznik>
	  oblicz_predkosc();
 8004c8a:	e7ea      	b.n	8004c62 <main+0x5e>
 8004c8c:	58020400 	.word	0x58020400

08004c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b09c      	sub	sp, #112	; 0x70
 8004c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c9a:	224c      	movs	r2, #76	; 0x4c
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f00f f840 	bl	8013d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ca4:	1d3b      	adds	r3, r7, #4
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f00f f83a 	bl	8013d24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004cb0:	2002      	movs	r0, #2
 8004cb2:	f006 fc45 	bl	800b540 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	4b32      	ldr	r3, [pc, #200]	; (8004d84 <SystemClock_Config+0xf4>)
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	4a31      	ldr	r2, [pc, #196]	; (8004d84 <SystemClock_Config+0xf4>)
 8004cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cc4:	6193      	str	r3, [r2, #24]
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <SystemClock_Config+0xf4>)
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	4b2d      	ldr	r3, [pc, #180]	; (8004d88 <SystemClock_Config+0xf8>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4a2c      	ldr	r2, [pc, #176]	; (8004d88 <SystemClock_Config+0xf8>)
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cdc:	4b2a      	ldr	r3, [pc, #168]	; (8004d88 <SystemClock_Config+0xf8>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004ce8:	bf00      	nop
 8004cea:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <SystemClock_Config+0xf4>)
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf6:	d1f8      	bne.n	8004cea <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d06:	2340      	movs	r3, #64	; 0x40
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d0e:	2302      	movs	r3, #2
 8004d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8004d12:	2302      	movs	r3, #2
 8004d14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8004d16:	2378      	movs	r3, #120	; 0x78
 8004d18:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004d1e:	2308      	movs	r3, #8
 8004d20:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 8004d22:	2308      	movs	r3, #8
 8004d24:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004d26:	230c      	movs	r3, #12
 8004d28:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d36:	4618      	mov	r0, r3
 8004d38:	f006 fc3c 	bl	800b5b4 <HAL_RCC_OscConfig>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004d42:	f000 f9b9 	bl	80050b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d46:	233f      	movs	r3, #63	; 0x3f
 8004d48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004d52:	2308      	movs	r3, #8
 8004d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004d56:	2340      	movs	r3, #64	; 0x40
 8004d58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004d5a:	2340      	movs	r3, #64	; 0x40
 8004d5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d62:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004d64:	2340      	movs	r3, #64	; 0x40
 8004d66:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004d68:	1d3b      	adds	r3, r7, #4
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f007 f831 	bl	800bdd4 <HAL_RCC_ClockConfig>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8004d78:	f000 f99e 	bl	80050b8 <Error_Handler>
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	3770      	adds	r7, #112	; 0x70
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	58024800 	.word	0x58024800
 8004d88:	58000400 	.word	0x58000400

08004d8c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b0b0      	sub	sp, #192	; 0xc0
 8004d90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d92:	1d3b      	adds	r3, r7, #4
 8004d94:	22bc      	movs	r2, #188	; 0xbc
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f00e ffc3 	bl	8013d24 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8004d9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004da2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8004da4:	2300      	movs	r3, #0
 8004da6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004da8:	1d3b      	adds	r3, r7, #4
 8004daa:	4618      	mov	r0, r3
 8004dac:	f007 fb9e 	bl	800c4ec <HAL_RCCEx_PeriphCLKConfig>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8004db6:	f000 f97f 	bl	80050b8 <Error_Handler>
  }
}
 8004dba:	bf00      	nop
 8004dbc:	37c0      	adds	r7, #192	; 0xc0
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	0000      	movs	r0, r0
 8004dc4:	0000      	movs	r0, r0
	...

08004dc8 <P_trasaA>:


*/

void P_trasaA()
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
	if(ZMIENNA3==1) //trasa A
 8004dcc:	4b34      	ldr	r3, [pc, #208]	; (8004ea0 <P_trasaA+0xd8>)
 8004dce:	edd3 7a00 	vldr	s15, [r3]
 8004dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dd6:	eef4 7a47 	vcmp.f32	s15, s14
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dde:	d149      	bne.n	8004e74 <P_trasaA+0xac>
	{
	if(P_DRSR>0)
 8004de0:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <P_trasaA+0xdc>)
 8004de2:	edd3 7a00 	vldr	s15, [r3]
 8004de6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dee:	dd03      	ble.n	8004df8 <P_trasaA+0x30>
	{
		pr_pocz_silnikow=2.0;
 8004df0:	4b2d      	ldr	r3, [pc, #180]	; (8004ea8 <P_trasaA+0xe0>)
 8004df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004df6:	601a      	str	r2, [r3, #0]
	}

	if(P_DRSR>0.2)
 8004df8:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <P_trasaA+0xdc>)
 8004dfa:	edd3 7a00 	vldr	s15, [r3]
 8004dfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e02:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8004e80 <P_trasaA+0xb8>
 8004e06:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0e:	dd02      	ble.n	8004e16 <P_trasaA+0x4e>
	{
	pr_pocz_silnikow=1.7;
 8004e10:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <P_trasaA+0xe0>)
 8004e12:	4a26      	ldr	r2, [pc, #152]	; (8004eac <P_trasaA+0xe4>)
 8004e14:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>1.1)
 8004e16:	4b23      	ldr	r3, [pc, #140]	; (8004ea4 <P_trasaA+0xdc>)
 8004e18:	edd3 7a00 	vldr	s15, [r3]
 8004e1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e20:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8004e88 <P_trasaA+0xc0>
 8004e24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2c:	dd02      	ble.n	8004e34 <P_trasaA+0x6c>
	{
	pr_pocz_silnikow=2.2;
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ea8 <P_trasaA+0xe0>)
 8004e30:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <P_trasaA+0xe8>)
 8004e32:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>2.3)
 8004e34:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <P_trasaA+0xdc>)
 8004e36:	edd3 7a00 	vldr	s15, [r3]
 8004e3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e3e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8004e90 <P_trasaA+0xc8>
 8004e42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4a:	dd02      	ble.n	8004e52 <P_trasaA+0x8a>
	{
	pr_pocz_silnikow=1.7;
 8004e4c:	4b16      	ldr	r3, [pc, #88]	; (8004ea8 <P_trasaA+0xe0>)
 8004e4e:	4a17      	ldr	r2, [pc, #92]	; (8004eac <P_trasaA+0xe4>)
 8004e50:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>3.8)
 8004e52:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <P_trasaA+0xdc>)
 8004e54:	edd3 7a00 	vldr	s15, [r3]
 8004e58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e5c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8004e98 <P_trasaA+0xd0>
 8004e60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e68:	dc00      	bgt.n	8004e6c <P_trasaA+0xa4>
	{
	pr_pocz_silnikow=2.0;
	}
	}
}
 8004e6a:	e003      	b.n	8004e74 <P_trasaA+0xac>
	pr_pocz_silnikow=2.0;
 8004e6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ea8 <P_trasaA+0xe0>)
 8004e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e72:	601a      	str	r2, [r3, #0]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	9999999a 	.word	0x9999999a
 8004e84:	3fc99999 	.word	0x3fc99999
 8004e88:	9999999a 	.word	0x9999999a
 8004e8c:	3ff19999 	.word	0x3ff19999
 8004e90:	66666666 	.word	0x66666666
 8004e94:	40026666 	.word	0x40026666
 8004e98:	66666666 	.word	0x66666666
 8004e9c:	400e6666 	.word	0x400e6666
 8004ea0:	240002b8 	.word	0x240002b8
 8004ea4:	24000258 	.word	0x24000258
 8004ea8:	24000008 	.word	0x24000008
 8004eac:	3fd9999a 	.word	0x3fd9999a
 8004eb0:	400ccccd 	.word	0x400ccccd
 8004eb4:	00000000 	.word	0x00000000

08004eb8 <P_trasaB>:
void P_trasaB()
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//
	if(ZMIENNA3==2) //trasa B
 8004ebc:	4b4e      	ldr	r3, [pc, #312]	; (8004ff8 <P_trasaB+0x140>)
 8004ebe:	edd3 7a00 	vldr	s15, [r3]
 8004ec2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004ec6:	eef4 7a47 	vcmp.f32	s15, s14
 8004eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ece:	d174      	bne.n	8004fba <P_trasaB+0x102>
	{
	if(P_DRSR>0)
 8004ed0:	4b4a      	ldr	r3, [pc, #296]	; (8004ffc <P_trasaB+0x144>)
 8004ed2:	edd3 7a00 	vldr	s15, [r3]
 8004ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ede:	dd03      	ble.n	8004ee8 <P_trasaB+0x30>
	{
		pr_pocz_silnikow=1.5;
 8004ee0:	4b47      	ldr	r3, [pc, #284]	; (8005000 <P_trasaB+0x148>)
 8004ee2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004ee6:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>0.1)
 8004ee8:	4b44      	ldr	r3, [pc, #272]	; (8004ffc <P_trasaB+0x144>)
 8004eea:	edd3 7a00 	vldr	s15, [r3]
 8004eee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ef2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8004fc8 <P_trasaB+0x110>
 8004ef6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efe:	dd02      	ble.n	8004f06 <P_trasaB+0x4e>
	{
	pr_pocz_silnikow=2.5;
 8004f00:	4b3f      	ldr	r3, [pc, #252]	; (8005000 <P_trasaB+0x148>)
 8004f02:	4a40      	ldr	r2, [pc, #256]	; (8005004 <P_trasaB+0x14c>)
 8004f04:	601a      	str	r2, [r3, #0]
	}

	if(P_DRSR>0.8)
 8004f06:	4b3d      	ldr	r3, [pc, #244]	; (8004ffc <P_trasaB+0x144>)
 8004f08:	edd3 7a00 	vldr	s15, [r3]
 8004f0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f10:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8004fd0 <P_trasaB+0x118>
 8004f14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1c:	dd02      	ble.n	8004f24 <P_trasaB+0x6c>
	{
	pr_pocz_silnikow=2.2;
 8004f1e:	4b38      	ldr	r3, [pc, #224]	; (8005000 <P_trasaB+0x148>)
 8004f20:	4a39      	ldr	r2, [pc, #228]	; (8005008 <P_trasaB+0x150>)
 8004f22:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>1)
 8004f24:	4b35      	ldr	r3, [pc, #212]	; (8004ffc <P_trasaB+0x144>)
 8004f26:	edd3 7a00 	vldr	s15, [r3]
 8004f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f36:	dd02      	ble.n	8004f3e <P_trasaB+0x86>
	{
	pr_pocz_silnikow=2.5;
 8004f38:	4b31      	ldr	r3, [pc, #196]	; (8005000 <P_trasaB+0x148>)
 8004f3a:	4a32      	ldr	r2, [pc, #200]	; (8005004 <P_trasaB+0x14c>)
 8004f3c:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>1.3)
 8004f3e:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <P_trasaB+0x144>)
 8004f40:	edd3 7a00 	vldr	s15, [r3]
 8004f44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f48:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8004fd8 <P_trasaB+0x120>
 8004f4c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f54:	dd03      	ble.n	8004f5e <P_trasaB+0xa6>
	{
	pr_pocz_silnikow=1.5;
 8004f56:	4b2a      	ldr	r3, [pc, #168]	; (8005000 <P_trasaB+0x148>)
 8004f58:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004f5c:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>3.1)
 8004f5e:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <P_trasaB+0x144>)
 8004f60:	edd3 7a00 	vldr	s15, [r3]
 8004f64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f68:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8004fe0 <P_trasaB+0x128>
 8004f6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f74:	dd02      	ble.n	8004f7c <P_trasaB+0xc4>
	{
	pr_pocz_silnikow=2.2;
 8004f76:	4b22      	ldr	r3, [pc, #136]	; (8005000 <P_trasaB+0x148>)
 8004f78:	4a23      	ldr	r2, [pc, #140]	; (8005008 <P_trasaB+0x150>)
 8004f7a:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>3.6)
 8004f7c:	4b1f      	ldr	r3, [pc, #124]	; (8004ffc <P_trasaB+0x144>)
 8004f7e:	edd3 7a00 	vldr	s15, [r3]
 8004f82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f86:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8004fe8 <P_trasaB+0x130>
 8004f8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f92:	dd02      	ble.n	8004f9a <P_trasaB+0xe2>
	{
	pr_pocz_silnikow=2.3;
 8004f94:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <P_trasaB+0x148>)
 8004f96:	4a1d      	ldr	r2, [pc, #116]	; (800500c <P_trasaB+0x154>)
 8004f98:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>3.9)
 8004f9a:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <P_trasaB+0x144>)
 8004f9c:	edd3 7a00 	vldr	s15, [r3]
 8004fa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fa4:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8004ff0 <P_trasaB+0x138>
 8004fa8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb0:	dc00      	bgt.n	8004fb4 <P_trasaB+0xfc>
	{
	pr_pocz_silnikow=2.4;
	}
	}
}
 8004fb2:	e002      	b.n	8004fba <P_trasaB+0x102>
	pr_pocz_silnikow=2.4;
 8004fb4:	4b12      	ldr	r3, [pc, #72]	; (8005000 <P_trasaB+0x148>)
 8004fb6:	4a16      	ldr	r2, [pc, #88]	; (8005010 <P_trasaB+0x158>)
 8004fb8:	601a      	str	r2, [r3, #0]
}
 8004fba:	bf00      	nop
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	f3af 8000 	nop.w
 8004fc8:	9999999a 	.word	0x9999999a
 8004fcc:	3fb99999 	.word	0x3fb99999
 8004fd0:	9999999a 	.word	0x9999999a
 8004fd4:	3fe99999 	.word	0x3fe99999
 8004fd8:	cccccccd 	.word	0xcccccccd
 8004fdc:	3ff4cccc 	.word	0x3ff4cccc
 8004fe0:	cccccccd 	.word	0xcccccccd
 8004fe4:	4008cccc 	.word	0x4008cccc
 8004fe8:	cccccccd 	.word	0xcccccccd
 8004fec:	400ccccc 	.word	0x400ccccc
 8004ff0:	33333333 	.word	0x33333333
 8004ff4:	400f3333 	.word	0x400f3333
 8004ff8:	240002b8 	.word	0x240002b8
 8004ffc:	24000258 	.word	0x24000258
 8005000:	24000008 	.word	0x24000008
 8005004:	40200000 	.word	0x40200000
 8005008:	400ccccd 	.word	0x400ccccd
 800500c:	40133333 	.word	0x40133333
 8005010:	4019999a 	.word	0x4019999a

08005014 <ProfilPredkosci>:

void ProfilPredkosci()
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
	P_trasaA();
 8005018:	f7ff fed6 	bl	8004dc8 <P_trasaA>
	P_trasaB();
 800501c:	f7ff ff4c 	bl	8004eb8 <P_trasaB>
	{
	pr_pocz_silnikow=600;
	}
	}
*/
}
 8005020:	bf00      	nop
 8005022:	bd80      	pop	{r7, pc}

08005024 <LED_BLINKING>:


void LED_BLINKING()
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
#define LED_TOGGLE_TIME 500

	if(LED_BLINK)
 8005028:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <LED_BLINKING+0x7c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d034      	beq.n	800509a <LED_BLINKING+0x76>
	{

	  aktCzas=HAL_GetTick();
 8005030:	f000 ff56 	bl	8005ee0 <HAL_GetTick>
 8005034:	4603      	mov	r3, r0
 8005036:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <LED_BLINKING+0x80>)
 8005038:	6013      	str	r3, [r2, #0]

	  if( zapCzas+LED_TOGGLE_TIME < aktCzas)
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <LED_BLINKING+0x84>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8005042:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <LED_BLINKING+0x80>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d227      	bcs.n	800509a <LED_BLINKING+0x76>
	  {


	  if(LED_Helper)
 800504a:	4b18      	ldr	r3, [pc, #96]	; (80050ac <LED_BLINKING+0x88>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00d      	beq.n	800506e <LED_BLINKING+0x4a>
		  {
			 // HAL_GPIO_WritePin(LDD1_GPIO_Port, LDD1_Pin,GPIO_PIN_SET);
					//  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
					  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 8005052:	2201      	movs	r2, #1
 8005054:	2104      	movs	r1, #4
 8005056:	4816      	ldr	r0, [pc, #88]	; (80050b0 <LED_BLINKING+0x8c>)
 8005058:	f005 fc82 	bl	800a960 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
 800505c:	2201      	movs	r2, #1
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	4814      	ldr	r0, [pc, #80]	; (80050b4 <LED_BLINKING+0x90>)
 8005062:	f005 fc7d 	bl	800a960 <HAL_GPIO_WritePin>
					  LED_Helper=0;
 8005066:	4b11      	ldr	r3, [pc, #68]	; (80050ac <LED_BLINKING+0x88>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	e00c      	b.n	8005088 <LED_BLINKING+0x64>

	  else
	  {
		//  HAL_GPIO_WritePin(LDD1_GPIO_Port, LDD1_Pin,GPIO_PIN_RESET);
		//  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 800506e:	2200      	movs	r2, #0
 8005070:	2104      	movs	r1, #4
 8005072:	480f      	ldr	r0, [pc, #60]	; (80050b0 <LED_BLINKING+0x8c>)
 8005074:	f005 fc74 	bl	800a960 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
 8005078:	2200      	movs	r2, #0
 800507a:	2180      	movs	r1, #128	; 0x80
 800507c:	480d      	ldr	r0, [pc, #52]	; (80050b4 <LED_BLINKING+0x90>)
 800507e:	f005 fc6f 	bl	800a960 <HAL_GPIO_WritePin>
		  LED_Helper=1;
 8005082:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <LED_BLINKING+0x88>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]
	  }
		  zapCzas= HAL_GetTick();
 8005088:	f000 ff2a 	bl	8005ee0 <HAL_GetTick>
 800508c:	4603      	mov	r3, r0
 800508e:	4a06      	ldr	r2, [pc, #24]	; (80050a8 <LED_BLINKING+0x84>)
 8005090:	6013      	str	r3, [r2, #0]
		  		  zapCzas=aktCzas;
 8005092:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <LED_BLINKING+0x80>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <LED_BLINKING+0x84>)
 8005098:	6013      	str	r3, [r2, #0]
	  }
	}

}
 800509a:	bf00      	nop
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	2400000c 	.word	0x2400000c
 80050a4:	240002f0 	.word	0x240002f0
 80050a8:	240002f4 	.word	0x240002f4
 80050ac:	240002f8 	.word	0x240002f8
 80050b0:	58020400 	.word	0x58020400
 80050b4:	58021000 	.word	0x58021000

080050b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <MX_SDMMC1_SD_Init+0x44>)
 80050ce:	4a10      	ldr	r2, [pc, #64]	; (8005110 <MX_SDMMC1_SD_Init+0x48>)
 80050d0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80050d2:	4b0e      	ldr	r3, [pc, #56]	; (800510c <MX_SDMMC1_SD_Init+0x44>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <MX_SDMMC1_SD_Init+0x44>)
 80050da:	2200      	movs	r2, #0
 80050dc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80050de:	4b0b      	ldr	r3, [pc, #44]	; (800510c <MX_SDMMC1_SD_Init+0x44>)
 80050e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050e4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <MX_SDMMC1_SD_Init+0x44>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <MX_SDMMC1_SD_Init+0x44>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80050f2:	4b06      	ldr	r3, [pc, #24]	; (800510c <MX_SDMMC1_SD_Init+0x44>)
 80050f4:	2201      	movs	r2, #1
 80050f6:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80050f8:	4804      	ldr	r0, [pc, #16]	; (800510c <MX_SDMMC1_SD_Init+0x44>)
 80050fa:	f009 fb7d 	bl	800e7f8 <HAL_SD_Init>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8005104:	f7ff ffd8 	bl	80050b8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8005108:	bf00      	nop
 800510a:	bd80      	pop	{r7, pc}
 800510c:	240239bc 	.word	0x240239bc
 8005110:	52007000 	.word	0x52007000

08005114 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b0ba      	sub	sp, #232	; 0xe8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800511c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	609a      	str	r2, [r3, #8]
 8005128:	60da      	str	r2, [r3, #12]
 800512a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800512c:	f107 0318 	add.w	r3, r7, #24
 8005130:	22bc      	movs	r2, #188	; 0xbc
 8005132:	2100      	movs	r1, #0
 8005134:	4618      	mov	r0, r3
 8005136:	f00e fdf5 	bl	8013d24 <memset>
  if(sdHandle->Instance==SDMMC1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a37      	ldr	r2, [pc, #220]	; (800521c <HAL_SD_MspInit+0x108>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d166      	bne.n	8005212 <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8005144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005148:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800514a:	2300      	movs	r3, #0
 800514c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800514e:	f107 0318 	add.w	r3, r7, #24
 8005152:	4618      	mov	r0, r3
 8005154:	f007 f9ca 	bl	800c4ec <HAL_RCCEx_PeriphCLKConfig>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 800515e:	f7ff ffab 	bl	80050b8 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005162:	4b2f      	ldr	r3, [pc, #188]	; (8005220 <HAL_SD_MspInit+0x10c>)
 8005164:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005168:	4a2d      	ldr	r2, [pc, #180]	; (8005220 <HAL_SD_MspInit+0x10c>)
 800516a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005172:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <HAL_SD_MspInit+0x10c>)
 8005174:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005180:	4b27      	ldr	r3, [pc, #156]	; (8005220 <HAL_SD_MspInit+0x10c>)
 8005182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005186:	4a26      	ldr	r2, [pc, #152]	; (8005220 <HAL_SD_MspInit+0x10c>)
 8005188:	f043 0304 	orr.w	r3, r3, #4
 800518c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005190:	4b23      	ldr	r3, [pc, #140]	; (8005220 <HAL_SD_MspInit+0x10c>)
 8005192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800519e:	4b20      	ldr	r3, [pc, #128]	; (8005220 <HAL_SD_MspInit+0x10c>)
 80051a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051a4:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <HAL_SD_MspInit+0x10c>)
 80051a6:	f043 0308 	orr.w	r3, r3, #8
 80051aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051ae:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <HAL_SD_MspInit+0x10c>)
 80051b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80051bc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80051c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c4:	2302      	movs	r3, #2
 80051c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d0:	2303      	movs	r3, #3
 80051d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80051d6:	230c      	movs	r3, #12
 80051d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4810      	ldr	r0, [pc, #64]	; (8005224 <HAL_SD_MspInit+0x110>)
 80051e4:	f005 f902 	bl	800a3ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051e8:	2304      	movs	r3, #4
 80051ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ee:	2302      	movs	r3, #2
 80051f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051fa:	2303      	movs	r3, #3
 80051fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8005200:	230c      	movs	r3, #12
 8005202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005206:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800520a:	4619      	mov	r1, r3
 800520c:	4806      	ldr	r0, [pc, #24]	; (8005228 <HAL_SD_MspInit+0x114>)
 800520e:	f005 f8ed 	bl	800a3ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8005212:	bf00      	nop
 8005214:	37e8      	adds	r7, #232	; 0xe8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	52007000 	.word	0x52007000
 8005220:	58024400 	.word	0x58024400
 8005224:	58020800 	.word	0x58020800
 8005228:	58020c00 	.word	0x58020c00

0800522c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_MspInit+0x30>)
 8005234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005238:	4a08      	ldr	r2, [pc, #32]	; (800525c <HAL_MspInit+0x30>)
 800523a:	f043 0302 	orr.w	r3, r3, #2
 800523e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005242:	4b06      	ldr	r3, [pc, #24]	; (800525c <HAL_MspInit+0x30>)
 8005244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	58024400 	.word	0x58024400

08005260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800526e:	b480      	push	{r7}
 8005270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005272:	e7fe      	b.n	8005272 <HardFault_Handler+0x4>

08005274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005278:	e7fe      	b.n	8005278 <MemManage_Handler+0x4>

0800527a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800527a:	b480      	push	{r7}
 800527c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800527e:	e7fe      	b.n	800527e <BusFault_Handler+0x4>

08005280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005284:	e7fe      	b.n	8005284 <UsageFault_Handler+0x4>

08005286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800528a:	bf00      	nop
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005298:	bf00      	nop
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052a2:	b480      	push	{r7}
 80052a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052b4:	f000 fe00 	bl	8005eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052b8:	bf00      	nop
 80052ba:	bd80      	pop	{r7, pc}

080052bc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	IR_IT_Dec();
 80052c0:	f7fe fe30 	bl	8003f24 <IR_IT_Dec>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80052c4:	2004      	movs	r0, #4
 80052c6:	f005 fb7e 	bl	800a9c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80052ca:	bf00      	nop
 80052cc:	bd80      	pop	{r7, pc}

080052ce <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80052d2:	2008      	movs	r0, #8
 80052d4:	f005 fb77 	bl	800a9c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80052d8:	bf00      	nop
 80052da:	bd80      	pop	{r7, pc}

080052dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80052e0:	2010      	movs	r0, #16
 80052e2:	f005 fb70 	bl	800a9c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80052f0:	4802      	ldr	r0, [pc, #8]	; (80052fc <DMA1_Stream0_IRQHandler+0x10>)
 80052f2:	f003 fd69 	bl	8008dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80052f6:	bf00      	nop
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	240238ac 	.word	0x240238ac

08005300 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005304:	2040      	movs	r0, #64	; 0x40
 8005306:	f005 fb5e 	bl	800a9c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800530a:	2080      	movs	r0, #128	; 0x80
 800530c:	f005 fb5b 	bl	800a9c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005310:	bf00      	nop
 8005312:	bd80      	pop	{r7, pc}

08005314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
t2++;
 8005318:	4b04      	ldr	r3, [pc, #16]	; (800532c <TIM2_IRQHandler+0x18>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	4a03      	ldr	r2, [pc, #12]	; (800532c <TIM2_IRQHandler+0x18>)
 8005320:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005322:	4803      	ldr	r0, [pc, #12]	; (8005330 <TIM2_IRQHandler+0x1c>)
 8005324:	f00a fd78 	bl	800fe18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005328:	bf00      	nop
 800532a:	bd80      	pop	{r7, pc}
 800532c:	240002fc 	.word	0x240002fc
 8005330:	24023b20 	.word	0x24023b20

08005334 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005338:	4802      	ldr	r0, [pc, #8]	; (8005344 <USART2_IRQHandler+0x10>)
 800533a:	f00b ffb9 	bl	80112b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	24023bfc 	.word	0x24023bfc

08005348 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800534c:	4802      	ldr	r0, [pc, #8]	; (8005358 <TIM5_IRQHandler+0x10>)
 800534e:	f00a fd63 	bl	800fe18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005352:	bf00      	nop
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	24023ad4 	.word	0x24023ad4

0800535c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005360:	4802      	ldr	r0, [pc, #8]	; (800536c <UART5_IRQHandler+0x10>)
 8005362:	f00b ffa5 	bl	80112b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	24023b6c 	.word	0x24023b6c

08005370 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
	return 1;
 8005374:	2301      	movs	r3, #1
}
 8005376:	4618      	mov	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <_kill>:

int _kill(int pid, int sig)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800538a:	f00e fc87 	bl	8013c9c <__errno>
 800538e:	4603      	mov	r3, r0
 8005390:	2216      	movs	r2, #22
 8005392:	601a      	str	r2, [r3, #0]
	return -1;
 8005394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_exit>:

void _exit (int status)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80053a8:	f04f 31ff 	mov.w	r1, #4294967295
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff ffe7 	bl	8005380 <_kill>
	while (1) {}		/* Make sure we hang here */
 80053b2:	e7fe      	b.n	80053b2 <_exit+0x12>

080053b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	e00a      	b.n	80053dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80053c6:	f3af 8000 	nop.w
 80053ca:	4601      	mov	r1, r0
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	60ba      	str	r2, [r7, #8]
 80053d2:	b2ca      	uxtb	r2, r1
 80053d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	3301      	adds	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	dbf0      	blt.n	80053c6 <_read+0x12>
	}

return len;
 80053e4:	687b      	ldr	r3, [r7, #4]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b086      	sub	sp, #24
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e009      	b.n	8005414 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	60ba      	str	r2, [r7, #8]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7fb fb6f 	bl	8000aec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	3301      	adds	r3, #1
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	429a      	cmp	r2, r3
 800541a:	dbf1      	blt.n	8005400 <_write+0x12>
	}
	return len;
 800541c:	687b      	ldr	r3, [r7, #4]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <_close>:

int _close(int file)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
	return -1;
 800542e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800544e:	605a      	str	r2, [r3, #4]
	return 0;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <_isatty>:

int _isatty(int file)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
	return 1;
 8005466:	2301      	movs	r3, #1
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
	return 0;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
	...

08005490 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005498:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <_sbrk+0x50>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d102      	bne.n	80054a6 <_sbrk+0x16>
		heap_end = &end;
 80054a0:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <_sbrk+0x50>)
 80054a2:	4a10      	ldr	r2, [pc, #64]	; (80054e4 <_sbrk+0x54>)
 80054a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80054a6:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <_sbrk+0x50>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <_sbrk+0x50>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	466a      	mov	r2, sp
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d907      	bls.n	80054ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80054ba:	f00e fbef 	bl	8013c9c <__errno>
 80054be:	4603      	mov	r3, r0
 80054c0:	220c      	movs	r2, #12
 80054c2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80054c4:	f04f 33ff 	mov.w	r3, #4294967295
 80054c8:	e006      	b.n	80054d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <_sbrk+0x50>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	4a03      	ldr	r2, [pc, #12]	; (80054e0 <_sbrk+0x50>)
 80054d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80054d6:	68fb      	ldr	r3, [r7, #12]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	24000300 	.word	0x24000300
 80054e4:	24023ca0 	.word	0x24023ca0

080054e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80054ec:	4b29      	ldr	r3, [pc, #164]	; (8005594 <SystemInit+0xac>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	4a28      	ldr	r2, [pc, #160]	; (8005594 <SystemInit+0xac>)
 80054f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80054fc:	4b26      	ldr	r3, [pc, #152]	; (8005598 <SystemInit+0xb0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a25      	ldr	r2, [pc, #148]	; (8005598 <SystemInit+0xb0>)
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005508:	4b23      	ldr	r3, [pc, #140]	; (8005598 <SystemInit+0xb0>)
 800550a:	2200      	movs	r2, #0
 800550c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800550e:	4b22      	ldr	r3, [pc, #136]	; (8005598 <SystemInit+0xb0>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4921      	ldr	r1, [pc, #132]	; (8005598 <SystemInit+0xb0>)
 8005514:	4b21      	ldr	r3, [pc, #132]	; (800559c <SystemInit+0xb4>)
 8005516:	4013      	ands	r3, r2
 8005518:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800551a:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <SystemInit+0xb0>)
 800551c:	2200      	movs	r2, #0
 800551e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005520:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <SystemInit+0xb0>)
 8005522:	2200      	movs	r2, #0
 8005524:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005526:	4b1c      	ldr	r3, [pc, #112]	; (8005598 <SystemInit+0xb0>)
 8005528:	2200      	movs	r2, #0
 800552a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <SystemInit+0xb0>)
 800552e:	2200      	movs	r2, #0
 8005530:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8005532:	4b19      	ldr	r3, [pc, #100]	; (8005598 <SystemInit+0xb0>)
 8005534:	2200      	movs	r2, #0
 8005536:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8005538:	4b17      	ldr	r3, [pc, #92]	; (8005598 <SystemInit+0xb0>)
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800553e:	4b16      	ldr	r3, [pc, #88]	; (8005598 <SystemInit+0xb0>)
 8005540:	2200      	movs	r2, #0
 8005542:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8005544:	4b14      	ldr	r3, [pc, #80]	; (8005598 <SystemInit+0xb0>)
 8005546:	2200      	movs	r2, #0
 8005548:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800554a:	4b13      	ldr	r3, [pc, #76]	; (8005598 <SystemInit+0xb0>)
 800554c:	2200      	movs	r2, #0
 800554e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8005550:	4b11      	ldr	r3, [pc, #68]	; (8005598 <SystemInit+0xb0>)
 8005552:	2200      	movs	r2, #0
 8005554:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <SystemInit+0xb0>)
 8005558:	2200      	movs	r2, #0
 800555a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800555c:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <SystemInit+0xb0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <SystemInit+0xb0>)
 8005562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005566:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <SystemInit+0xb0>)
 800556a:	2200      	movs	r2, #0
 800556c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <SystemInit+0xb8>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <SystemInit+0xbc>)
 8005574:	4013      	ands	r3, r2
 8005576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557a:	d202      	bcs.n	8005582 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <SystemInit+0xc0>)
 800557e:	2201      	movs	r2, #1
 8005580:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005582:	4b04      	ldr	r3, [pc, #16]	; (8005594 <SystemInit+0xac>)
 8005584:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005588:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800558a:	bf00      	nop
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	e000ed00 	.word	0xe000ed00
 8005598:	58024400 	.word	0x58024400
 800559c:	eaf6ed7f 	.word	0xeaf6ed7f
 80055a0:	5c001000 	.word	0x5c001000
 80055a4:	ffff0000 	.word	0xffff0000
 80055a8:	51008108 	.word	0x51008108

080055ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055b2:	f107 0310 	add.w	r3, r7, #16
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	605a      	str	r2, [r3, #4]
 80055bc:	609a      	str	r2, [r3, #8]
 80055be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055c0:	1d3b      	adds	r3, r7, #4
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	605a      	str	r2, [r3, #4]
 80055c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80055ca:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <MX_TIM2_Init+0x94>)
 80055cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240;
 80055d2:	4b1b      	ldr	r3, [pc, #108]	; (8005640 <MX_TIM2_Init+0x94>)
 80055d4:	22f0      	movs	r2, #240	; 0xf0
 80055d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055d8:	4b19      	ldr	r3, [pc, #100]	; (8005640 <MX_TIM2_Init+0x94>)
 80055da:	2200      	movs	r2, #0
 80055dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80055de:	4b18      	ldr	r3, [pc, #96]	; (8005640 <MX_TIM2_Init+0x94>)
 80055e0:	2264      	movs	r2, #100	; 0x64
 80055e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055e4:	4b16      	ldr	r3, [pc, #88]	; (8005640 <MX_TIM2_Init+0x94>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055ea:	4b15      	ldr	r3, [pc, #84]	; (8005640 <MX_TIM2_Init+0x94>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80055f0:	4813      	ldr	r0, [pc, #76]	; (8005640 <MX_TIM2_Init+0x94>)
 80055f2:	f00a f9e9 	bl	800f9c8 <HAL_TIM_Base_Init>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80055fc:	f7ff fd5c 	bl	80050b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005604:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005606:	f107 0310 	add.w	r3, r7, #16
 800560a:	4619      	mov	r1, r3
 800560c:	480c      	ldr	r0, [pc, #48]	; (8005640 <MX_TIM2_Init+0x94>)
 800560e:	f00a fe33 	bl	8010278 <HAL_TIM_ConfigClockSource>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005618:	f7ff fd4e 	bl	80050b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800561c:	2300      	movs	r3, #0
 800561e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	4619      	mov	r1, r3
 8005628:	4805      	ldr	r0, [pc, #20]	; (8005640 <MX_TIM2_Init+0x94>)
 800562a:	f00b fb6d 	bl	8010d08 <HAL_TIMEx_MasterConfigSynchronization>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005634:	f7ff fd40 	bl	80050b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005638:	bf00      	nop
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	24023b20 	.word	0x24023b20

08005644 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08a      	sub	sp, #40	; 0x28
 8005648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800564a:	f107 031c 	add.w	r3, r7, #28
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	605a      	str	r2, [r3, #4]
 8005654:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005656:	463b      	mov	r3, r7
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	609a      	str	r2, [r3, #8]
 8005660:	60da      	str	r2, [r3, #12]
 8005662:	611a      	str	r2, [r3, #16]
 8005664:	615a      	str	r2, [r3, #20]
 8005666:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005668:	4b27      	ldr	r3, [pc, #156]	; (8005708 <MX_TIM4_Init+0xc4>)
 800566a:	4a28      	ldr	r2, [pc, #160]	; (800570c <MX_TIM4_Init+0xc8>)
 800566c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 800566e:	4b26      	ldr	r3, [pc, #152]	; (8005708 <MX_TIM4_Init+0xc4>)
 8005670:	220a      	movs	r2, #10
 8005672:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005674:	4b24      	ldr	r3, [pc, #144]	; (8005708 <MX_TIM4_Init+0xc4>)
 8005676:	2200      	movs	r2, #0
 8005678:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800567a:	4b23      	ldr	r3, [pc, #140]	; (8005708 <MX_TIM4_Init+0xc4>)
 800567c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005680:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005682:	4b21      	ldr	r3, [pc, #132]	; (8005708 <MX_TIM4_Init+0xc4>)
 8005684:	2200      	movs	r2, #0
 8005686:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005688:	4b1f      	ldr	r3, [pc, #124]	; (8005708 <MX_TIM4_Init+0xc4>)
 800568a:	2200      	movs	r2, #0
 800568c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800568e:	481e      	ldr	r0, [pc, #120]	; (8005708 <MX_TIM4_Init+0xc4>)
 8005690:	f00a fa62 	bl	800fb58 <HAL_TIM_PWM_Init>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800569a:	f7ff fd0d 	bl	80050b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80056a6:	f107 031c 	add.w	r3, r7, #28
 80056aa:	4619      	mov	r1, r3
 80056ac:	4816      	ldr	r0, [pc, #88]	; (8005708 <MX_TIM4_Init+0xc4>)
 80056ae:	f00b fb2b 	bl	8010d08 <HAL_TIMEx_MasterConfigSynchronization>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80056b8:	f7ff fcfe 	bl	80050b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056bc:	2360      	movs	r3, #96	; 0x60
 80056be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056cc:	463b      	mov	r3, r7
 80056ce:	2208      	movs	r2, #8
 80056d0:	4619      	mov	r1, r3
 80056d2:	480d      	ldr	r0, [pc, #52]	; (8005708 <MX_TIM4_Init+0xc4>)
 80056d4:	f00a fcc0 	bl	8010058 <HAL_TIM_PWM_ConfigChannel>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80056de:	f7ff fceb 	bl	80050b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80056e2:	463b      	mov	r3, r7
 80056e4:	220c      	movs	r2, #12
 80056e6:	4619      	mov	r1, r3
 80056e8:	4807      	ldr	r0, [pc, #28]	; (8005708 <MX_TIM4_Init+0xc4>)
 80056ea:	f00a fcb5 	bl	8010058 <HAL_TIM_PWM_ConfigChannel>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80056f4:	f7ff fce0 	bl	80050b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80056f8:	4803      	ldr	r0, [pc, #12]	; (8005708 <MX_TIM4_Init+0xc4>)
 80056fa:	f000 f985 	bl	8005a08 <HAL_TIM_MspPostInit>

}
 80056fe:	bf00      	nop
 8005700:	3728      	adds	r7, #40	; 0x28
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	24023a3c 	.word	0x24023a3c
 800570c:	40000800 	.word	0x40000800

08005710 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005716:	f107 0310 	add.w	r3, r7, #16
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	609a      	str	r2, [r3, #8]
 8005722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005724:	1d3b      	adds	r3, r7, #4
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	605a      	str	r2, [r3, #4]
 800572c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800572e:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <MX_TIM5_Init+0x94>)
 8005730:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <MX_TIM5_Init+0x98>)
 8005732:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240;
 8005734:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <MX_TIM5_Init+0x94>)
 8005736:	22f0      	movs	r2, #240	; 0xf0
 8005738:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800573a:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <MX_TIM5_Init+0x94>)
 800573c:	2200      	movs	r2, #0
 800573e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8005740:	4b18      	ldr	r3, [pc, #96]	; (80057a4 <MX_TIM5_Init+0x94>)
 8005742:	f242 7210 	movw	r2, #10000	; 0x2710
 8005746:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005748:	4b16      	ldr	r3, [pc, #88]	; (80057a4 <MX_TIM5_Init+0x94>)
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800574e:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <MX_TIM5_Init+0x94>)
 8005750:	2200      	movs	r2, #0
 8005752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005754:	4813      	ldr	r0, [pc, #76]	; (80057a4 <MX_TIM5_Init+0x94>)
 8005756:	f00a f937 	bl	800f9c8 <HAL_TIM_Base_Init>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005760:	f7ff fcaa 	bl	80050b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005768:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800576a:	f107 0310 	add.w	r3, r7, #16
 800576e:	4619      	mov	r1, r3
 8005770:	480c      	ldr	r0, [pc, #48]	; (80057a4 <MX_TIM5_Init+0x94>)
 8005772:	f00a fd81 	bl	8010278 <HAL_TIM_ConfigClockSource>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800577c:	f7ff fc9c 	bl	80050b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005780:	2300      	movs	r3, #0
 8005782:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	4619      	mov	r1, r3
 800578c:	4805      	ldr	r0, [pc, #20]	; (80057a4 <MX_TIM5_Init+0x94>)
 800578e:	f00b fabb 	bl	8010d08 <HAL_TIMEx_MasterConfigSynchronization>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005798:	f7ff fc8e 	bl	80050b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800579c:	bf00      	nop
 800579e:	3720      	adds	r7, #32
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	24023ad4 	.word	0x24023ad4
 80057a8:	40000c00 	.word	0x40000c00

080057ac <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b09a      	sub	sp, #104	; 0x68
 80057b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	605a      	str	r2, [r3, #4]
 80057bc:	609a      	str	r2, [r3, #8]
 80057be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	605a      	str	r2, [r3, #4]
 80057ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	611a      	str	r2, [r3, #16]
 80057dc:	615a      	str	r2, [r3, #20]
 80057de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80057e0:	1d3b      	adds	r3, r7, #4
 80057e2:	222c      	movs	r2, #44	; 0x2c
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f00e fa9c 	bl	8013d24 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80057ec:	4b45      	ldr	r3, [pc, #276]	; (8005904 <MX_TIM15_Init+0x158>)
 80057ee:	4a46      	ldr	r2, [pc, #280]	; (8005908 <MX_TIM15_Init+0x15c>)
 80057f0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10;
 80057f2:	4b44      	ldr	r3, [pc, #272]	; (8005904 <MX_TIM15_Init+0x158>)
 80057f4:	220a      	movs	r2, #10
 80057f6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057f8:	4b42      	ldr	r3, [pc, #264]	; (8005904 <MX_TIM15_Init+0x158>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000;
 80057fe:	4b41      	ldr	r3, [pc, #260]	; (8005904 <MX_TIM15_Init+0x158>)
 8005800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005804:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005806:	4b3f      	ldr	r3, [pc, #252]	; (8005904 <MX_TIM15_Init+0x158>)
 8005808:	2200      	movs	r2, #0
 800580a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800580c:	4b3d      	ldr	r3, [pc, #244]	; (8005904 <MX_TIM15_Init+0x158>)
 800580e:	2200      	movs	r2, #0
 8005810:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005812:	4b3c      	ldr	r3, [pc, #240]	; (8005904 <MX_TIM15_Init+0x158>)
 8005814:	2200      	movs	r2, #0
 8005816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005818:	483a      	ldr	r0, [pc, #232]	; (8005904 <MX_TIM15_Init+0x158>)
 800581a:	f00a f8d5 	bl	800f9c8 <HAL_TIM_Base_Init>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8005824:	f7ff fc48 	bl	80050b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800582c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800582e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005832:	4619      	mov	r1, r3
 8005834:	4833      	ldr	r0, [pc, #204]	; (8005904 <MX_TIM15_Init+0x158>)
 8005836:	f00a fd1f 	bl	8010278 <HAL_TIM_ConfigClockSource>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8005840:	f7ff fc3a 	bl	80050b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005844:	482f      	ldr	r0, [pc, #188]	; (8005904 <MX_TIM15_Init+0x158>)
 8005846:	f00a f987 	bl	800fb58 <HAL_TIM_PWM_Init>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8005850:	f7ff fc32 	bl	80050b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005854:	2300      	movs	r3, #0
 8005856:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005858:	2300      	movs	r3, #0
 800585a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800585c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005860:	4619      	mov	r1, r3
 8005862:	4828      	ldr	r0, [pc, #160]	; (8005904 <MX_TIM15_Init+0x158>)
 8005864:	f00b fa50 	bl	8010d08 <HAL_TIMEx_MasterConfigSynchronization>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800586e:	f7ff fc23 	bl	80050b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005872:	2360      	movs	r3, #96	; 0x60
 8005874:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800587a:	2300      	movs	r3, #0
 800587c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800587e:	2300      	movs	r3, #0
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005882:	2300      	movs	r3, #0
 8005884:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005886:	2300      	movs	r3, #0
 8005888:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800588a:	2300      	movs	r3, #0
 800588c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800588e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005892:	2200      	movs	r2, #0
 8005894:	4619      	mov	r1, r3
 8005896:	481b      	ldr	r0, [pc, #108]	; (8005904 <MX_TIM15_Init+0x158>)
 8005898:	f00a fbde 	bl	8010058 <HAL_TIM_PWM_ConfigChannel>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80058a2:	f7ff fc09 	bl	80050b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058aa:	2204      	movs	r2, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4815      	ldr	r0, [pc, #84]	; (8005904 <MX_TIM15_Init+0x158>)
 80058b0:	f00a fbd2 	bl	8010058 <HAL_TIM_PWM_ConfigChannel>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80058ba:	f7ff fbfd 	bl	80050b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80058be:	2300      	movs	r3, #0
 80058c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80058d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80058dc:	2300      	movs	r3, #0
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80058e0:	1d3b      	adds	r3, r7, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4807      	ldr	r0, [pc, #28]	; (8005904 <MX_TIM15_Init+0x158>)
 80058e6:	f00b fa97 	bl	8010e18 <HAL_TIMEx_ConfigBreakDeadTime>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 80058f0:	f7ff fbe2 	bl	80050b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80058f4:	4803      	ldr	r0, [pc, #12]	; (8005904 <MX_TIM15_Init+0x158>)
 80058f6:	f000 f887 	bl	8005a08 <HAL_TIM_MspPostInit>

}
 80058fa:	bf00      	nop
 80058fc:	3768      	adds	r7, #104	; 0x68
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	24023a88 	.word	0x24023a88
 8005908:	40014000 	.word	0x40014000

0800590c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591c:	d117      	bne.n	800594e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800591e:	4b26      	ldr	r3, [pc, #152]	; (80059b8 <HAL_TIM_Base_MspInit+0xac>)
 8005920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005924:	4a24      	ldr	r2, [pc, #144]	; (80059b8 <HAL_TIM_Base_MspInit+0xac>)
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800592e:	4b22      	ldr	r3, [pc, #136]	; (80059b8 <HAL_TIM_Base_MspInit+0xac>)
 8005930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 13, 0);
 800593c:	2200      	movs	r2, #0
 800593e:	210d      	movs	r1, #13
 8005940:	201c      	movs	r0, #28
 8005942:	f001 fee0 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005946:	201c      	movs	r0, #28
 8005948:	f001 fef7 	bl	800773a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800594c:	e030      	b.n	80059b0 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM5)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <HAL_TIM_Base_MspInit+0xb0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d117      	bne.n	8005988 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005958:	4b17      	ldr	r3, [pc, #92]	; (80059b8 <HAL_TIM_Base_MspInit+0xac>)
 800595a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800595e:	4a16      	ldr	r2, [pc, #88]	; (80059b8 <HAL_TIM_Base_MspInit+0xac>)
 8005960:	f043 0308 	orr.w	r3, r3, #8
 8005964:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005968:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <HAL_TIM_Base_MspInit+0xac>)
 800596a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 15, 0);
 8005976:	2200      	movs	r2, #0
 8005978:	210f      	movs	r1, #15
 800597a:	2032      	movs	r0, #50	; 0x32
 800597c:	f001 fec3 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005980:	2032      	movs	r0, #50	; 0x32
 8005982:	f001 feda 	bl	800773a <HAL_NVIC_EnableIRQ>
}
 8005986:	e013      	b.n	80059b0 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM15)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a0c      	ldr	r2, [pc, #48]	; (80059c0 <HAL_TIM_Base_MspInit+0xb4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d10e      	bne.n	80059b0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005992:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <HAL_TIM_Base_MspInit+0xac>)
 8005994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005998:	4a07      	ldr	r2, [pc, #28]	; (80059b8 <HAL_TIM_Base_MspInit+0xac>)
 800599a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80059a2:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <HAL_TIM_Base_MspInit+0xac>)
 80059a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
}
 80059b0:	bf00      	nop
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	58024400 	.word	0x58024400
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40014000 	.word	0x40014000

080059c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0b      	ldr	r2, [pc, #44]	; (8005a00 <HAL_TIM_PWM_MspInit+0x3c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d10e      	bne.n	80059f4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <HAL_TIM_PWM_MspInit+0x40>)
 80059d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059dc:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <HAL_TIM_PWM_MspInit+0x40>)
 80059de:	f043 0304 	orr.w	r3, r3, #4
 80059e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059e6:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <HAL_TIM_PWM_MspInit+0x40>)
 80059e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40000800 	.word	0x40000800
 8005a04:	58024400 	.word	0x58024400

08005a08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	; 0x28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a10:	f107 0314 	add.w	r3, r7, #20
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	609a      	str	r2, [r3, #8]
 8005a1c:	60da      	str	r2, [r3, #12]
 8005a1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a25      	ldr	r2, [pc, #148]	; (8005abc <HAL_TIM_MspPostInit+0xb4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d120      	bne.n	8005a6c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a2a:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <HAL_TIM_MspPostInit+0xb8>)
 8005a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a30:	4a23      	ldr	r2, [pc, #140]	; (8005ac0 <HAL_TIM_MspPostInit+0xb8>)
 8005a32:	f043 0308 	orr.w	r3, r3, #8
 8005a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a3a:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <HAL_TIM_MspPostInit+0xb8>)
 8005a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005a48:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a56:	2300      	movs	r3, #0
 8005a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a5e:	f107 0314 	add.w	r3, r7, #20
 8005a62:	4619      	mov	r1, r3
 8005a64:	4817      	ldr	r0, [pc, #92]	; (8005ac4 <HAL_TIM_MspPostInit+0xbc>)
 8005a66:	f004 fcc1 	bl	800a3ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005a6a:	e023      	b.n	8005ab4 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM15)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <HAL_TIM_MspPostInit+0xc0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d11e      	bne.n	8005ab4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <HAL_TIM_MspPostInit+0xb8>)
 8005a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a7c:	4a10      	ldr	r2, [pc, #64]	; (8005ac0 <HAL_TIM_MspPostInit+0xb8>)
 8005a7e:	f043 0310 	orr.w	r3, r3, #16
 8005a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a86:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <HAL_TIM_MspPostInit+0xb8>)
 8005a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005a94:	2360      	movs	r3, #96	; 0x60
 8005a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a98:	2302      	movs	r3, #2
 8005a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005aa8:	f107 0314 	add.w	r3, r7, #20
 8005aac:	4619      	mov	r1, r3
 8005aae:	4807      	ldr	r0, [pc, #28]	; (8005acc <HAL_TIM_MspPostInit+0xc4>)
 8005ab0:	f004 fc9c 	bl	800a3ec <HAL_GPIO_Init>
}
 8005ab4:	bf00      	nop
 8005ab6:	3728      	adds	r7, #40	; 0x28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40000800 	.word	0x40000800
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	58020c00 	.word	0x58020c00
 8005ac8:	40014000 	.word	0x40014000
 8005acc:	58021000 	.word	0x58021000

08005ad0 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005ad4:	4b22      	ldr	r3, [pc, #136]	; (8005b60 <MX_UART5_Init+0x90>)
 8005ad6:	4a23      	ldr	r2, [pc, #140]	; (8005b64 <MX_UART5_Init+0x94>)
 8005ad8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005ada:	4b21      	ldr	r3, [pc, #132]	; (8005b60 <MX_UART5_Init+0x90>)
 8005adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ae0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005ae2:	4b1f      	ldr	r3, [pc, #124]	; (8005b60 <MX_UART5_Init+0x90>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <MX_UART5_Init+0x90>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005aee:	4b1c      	ldr	r3, [pc, #112]	; (8005b60 <MX_UART5_Init+0x90>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005af4:	4b1a      	ldr	r3, [pc, #104]	; (8005b60 <MX_UART5_Init+0x90>)
 8005af6:	220c      	movs	r2, #12
 8005af8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005afa:	4b19      	ldr	r3, [pc, #100]	; (8005b60 <MX_UART5_Init+0x90>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b00:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <MX_UART5_Init+0x90>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b06:	4b16      	ldr	r3, [pc, #88]	; (8005b60 <MX_UART5_Init+0x90>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005b0c:	4b14      	ldr	r3, [pc, #80]	; (8005b60 <MX_UART5_Init+0x90>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b12:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <MX_UART5_Init+0x90>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005b18:	4811      	ldr	r0, [pc, #68]	; (8005b60 <MX_UART5_Init+0x90>)
 8005b1a:	f00b fa19 	bl	8010f50 <HAL_UART_Init>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8005b24:	f7ff fac8 	bl	80050b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b28:	2100      	movs	r1, #0
 8005b2a:	480d      	ldr	r0, [pc, #52]	; (8005b60 <MX_UART5_Init+0x90>)
 8005b2c:	f00d fad3 	bl	80130d6 <HAL_UARTEx_SetTxFifoThreshold>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8005b36:	f7ff fabf 	bl	80050b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4808      	ldr	r0, [pc, #32]	; (8005b60 <MX_UART5_Init+0x90>)
 8005b3e:	f00d fb08 	bl	8013152 <HAL_UARTEx_SetRxFifoThreshold>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8005b48:	f7ff fab6 	bl	80050b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8005b4c:	4804      	ldr	r0, [pc, #16]	; (8005b60 <MX_UART5_Init+0x90>)
 8005b4e:	f00d fa89 	bl	8013064 <HAL_UARTEx_DisableFifoMode>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8005b58:	f7ff faae 	bl	80050b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005b5c:	bf00      	nop
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	24023b6c 	.word	0x24023b6c
 8005b64:	40005000 	.word	0x40005000

08005b68 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b6c:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b6e:	4a23      	ldr	r2, [pc, #140]	; (8005bfc <MX_USART2_UART_Init+0x94>)
 8005b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005b72:	4b21      	ldr	r3, [pc, #132]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b7a:	4b1f      	ldr	r3, [pc, #124]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b80:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b86:	4b1c      	ldr	r3, [pc, #112]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b8e:	220c      	movs	r2, #12
 8005b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b92:	4b19      	ldr	r3, [pc, #100]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b98:	4b17      	ldr	r3, [pc, #92]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b9e:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005ba4:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005bb0:	4811      	ldr	r0, [pc, #68]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005bb2:	f00b f9cd 	bl	8010f50 <HAL_UART_Init>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005bbc:	f7ff fa7c 	bl	80050b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	480d      	ldr	r0, [pc, #52]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005bc4:	f00d fa87 	bl	80130d6 <HAL_UARTEx_SetTxFifoThreshold>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005bce:	f7ff fa73 	bl	80050b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4808      	ldr	r0, [pc, #32]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005bd6:	f00d fabc 	bl	8013152 <HAL_UARTEx_SetRxFifoThreshold>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005be0:	f7ff fa6a 	bl	80050b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005be4:	4804      	ldr	r0, [pc, #16]	; (8005bf8 <MX_USART2_UART_Init+0x90>)
 8005be6:	f00d fa3d 	bl	8013064 <HAL_UARTEx_DisableFifoMode>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005bf0:	f7ff fa62 	bl	80050b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005bf4:	bf00      	nop
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	24023bfc 	.word	0x24023bfc
 8005bfc:	40004400 	.word	0x40004400

08005c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b0ba      	sub	sp, #232	; 0xe8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c18:	f107 0318 	add.w	r3, r7, #24
 8005c1c:	22bc      	movs	r2, #188	; 0xbc
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f00e f87f 	bl	8013d24 <memset>
  if(uartHandle->Instance==UART5)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a50      	ldr	r2, [pc, #320]	; (8005d6c <HAL_UART_MspInit+0x16c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d14a      	bne.n	8005cc6 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005c30:	2302      	movs	r3, #2
 8005c32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c3a:	f107 0318 	add.w	r3, r7, #24
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f006 fc54 	bl	800c4ec <HAL_RCCEx_PeriphCLKConfig>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005c4a:	f7ff fa35 	bl	80050b8 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005c4e:	4b48      	ldr	r3, [pc, #288]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c54:	4a46      	ldr	r2, [pc, #280]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c5e:	4b44      	ldr	r3, [pc, #272]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c6c:	4b40      	ldr	r3, [pc, #256]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c72:	4a3f      	ldr	r2, [pc, #252]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005c74:	f043 0302 	orr.w	r3, r3, #2
 8005c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c7c:	4b3c      	ldr	r3, [pc, #240]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB5     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005c8a:	2360      	movs	r3, #96	; 0x60
 8005c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c90:	2302      	movs	r3, #2
 8005c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8005ca2:	230e      	movs	r3, #14
 8005ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ca8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4831      	ldr	r0, [pc, #196]	; (8005d74 <HAL_UART_MspInit+0x174>)
 8005cb0:	f004 fb9c 	bl	800a3ec <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 15, 0);
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	210f      	movs	r1, #15
 8005cb8:	2035      	movs	r0, #53	; 0x35
 8005cba:	f001 fd24 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005cbe:	2035      	movs	r0, #53	; 0x35
 8005cc0:	f001 fd3b 	bl	800773a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005cc4:	e04e      	b.n	8005d64 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a2b      	ldr	r2, [pc, #172]	; (8005d78 <HAL_UART_MspInit+0x178>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d149      	bne.n	8005d64 <HAL_UART_MspInit+0x164>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cda:	f107 0318 	add.w	r3, r7, #24
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f006 fc04 	bl	800c4ec <HAL_RCCEx_PeriphCLKConfig>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <HAL_UART_MspInit+0xee>
      Error_Handler();
 8005cea:	f7ff f9e5 	bl	80050b8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cee:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cf4:	4a1e      	ldr	r2, [pc, #120]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005cfe:	4b1c      	ldr	r3, [pc, #112]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d0c:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d12:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005d14:	f043 0308 	orr.w	r3, r3, #8
 8005d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d1c:	4b14      	ldr	r3, [pc, #80]	; (8005d70 <HAL_UART_MspInit+0x170>)
 8005d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	60bb      	str	r3, [r7, #8]
 8005d28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005d2a:	2360      	movs	r3, #96	; 0x60
 8005d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d30:	2302      	movs	r3, #2
 8005d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d42:	2307      	movs	r3, #7
 8005d44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	480b      	ldr	r0, [pc, #44]	; (8005d7c <HAL_UART_MspInit+0x17c>)
 8005d50:	f004 fb4c 	bl	800a3ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d54:	2200      	movs	r2, #0
 8005d56:	2100      	movs	r1, #0
 8005d58:	2026      	movs	r0, #38	; 0x26
 8005d5a:	f001 fcd4 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d5e:	2026      	movs	r0, #38	; 0x26
 8005d60:	f001 fceb 	bl	800773a <HAL_NVIC_EnableIRQ>
}
 8005d64:	bf00      	nop
 8005d66:	37e8      	adds	r7, #232	; 0xe8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40005000 	.word	0x40005000
 8005d70:	58024400 	.word	0x58024400
 8005d74:	58020400 	.word	0x58020400
 8005d78:	40004400 	.word	0x40004400
 8005d7c:	58020c00 	.word	0x58020c00

08005d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005db8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005d84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005d86:	e003      	b.n	8005d90 <LoopCopyDataInit>

08005d88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005d88:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005d8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005d8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005d8e:	3104      	adds	r1, #4

08005d90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005d90:	480b      	ldr	r0, [pc, #44]	; (8005dc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005d92:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005d94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005d96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005d98:	d3f6      	bcc.n	8005d88 <CopyDataInit>
  ldr  r2, =_sbss
 8005d9a:	4a0b      	ldr	r2, [pc, #44]	; (8005dc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005d9c:	e002      	b.n	8005da4 <LoopFillZerobss>

08005d9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005d9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005da0:	f842 3b04 	str.w	r3, [r2], #4

08005da4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005da4:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005da6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005da8:	d3f9      	bcc.n	8005d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005daa:	f7ff fb9d 	bl	80054e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dae:	f00d ff7b 	bl	8013ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005db2:	f7fe ff27 	bl	8004c04 <main>
  bx  lr    
 8005db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005db8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8005dbc:	08019978 	.word	0x08019978
  ldr  r0, =_sdata
 8005dc0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8005dc4:	240001f4 	.word	0x240001f4
  ldr  r2, =_sbss
 8005dc8:	240001f4 	.word	0x240001f4
  ldr  r3, = _ebss
 8005dcc:	24023ca0 	.word	0x24023ca0

08005dd0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dd0:	e7fe      	b.n	8005dd0 <ADC3_IRQHandler>
	...

08005dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dda:	2003      	movs	r0, #3
 8005ddc:	f001 fc88 	bl	80076f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005de0:	f006 f9ae 	bl	800c140 <HAL_RCC_GetSysClockFreq>
 8005de4:	4602      	mov	r2, r0
 8005de6:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <HAL_Init+0x68>)
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	4913      	ldr	r1, [pc, #76]	; (8005e40 <HAL_Init+0x6c>)
 8005df2:	5ccb      	ldrb	r3, [r1, r3]
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <HAL_Init+0x68>)
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	4a0e      	ldr	r2, [pc, #56]	; (8005e40 <HAL_Init+0x6c>)
 8005e08:	5cd3      	ldrb	r3, [r2, r3]
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
 8005e14:	4a0b      	ldr	r2, [pc, #44]	; (8005e44 <HAL_Init+0x70>)
 8005e16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e18:	4a0b      	ldr	r2, [pc, #44]	; (8005e48 <HAL_Init+0x74>)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e1e:	2000      	movs	r0, #0
 8005e20:	f000 f814 	bl	8005e4c <HAL_InitTick>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e002      	b.n	8005e34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005e2e:	f7ff f9fd 	bl	800522c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	58024400 	.word	0x58024400
 8005e40:	08019278 	.word	0x08019278
 8005e44:	24000014 	.word	0x24000014
 8005e48:	24000010 	.word	0x24000010

08005e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005e54:	4b15      	ldr	r3, [pc, #84]	; (8005eac <HAL_InitTick+0x60>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e021      	b.n	8005ea4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005e60:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <HAL_InitTick+0x64>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b11      	ldr	r3, [pc, #68]	; (8005eac <HAL_InitTick+0x60>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 fc71 	bl	800775e <HAL_SYSTICK_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e00e      	b.n	8005ea4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b0f      	cmp	r3, #15
 8005e8a:	d80a      	bhi.n	8005ea2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295
 8005e94:	f001 fc37 	bl	8007706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e98:	4a06      	ldr	r2, [pc, #24]	; (8005eb4 <HAL_InitTick+0x68>)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e000      	b.n	8005ea4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	2400001c 	.word	0x2400001c
 8005eb0:	24000010 	.word	0x24000010
 8005eb4:	24000018 	.word	0x24000018

08005eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <HAL_IncTick+0x20>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <HAL_IncTick+0x24>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <HAL_IncTick+0x24>)
 8005eca:	6013      	str	r3, [r2, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	2400001c 	.word	0x2400001c
 8005edc:	24023c8c 	.word	0x24023c8c

08005ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8005ee4:	4b03      	ldr	r3, [pc, #12]	; (8005ef4 <HAL_GetTick+0x14>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	24023c8c 	.word	0x24023c8c

08005ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f00:	f7ff ffee 	bl	8005ee0 <HAL_GetTick>
 8005f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f10:	d005      	beq.n	8005f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f12:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <HAL_Delay+0x44>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f1e:	bf00      	nop
 8005f20:	f7ff ffde 	bl	8005ee0 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d8f7      	bhi.n	8005f20 <HAL_Delay+0x28>
  {
  }
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	2400001c 	.word	0x2400001c

08005f40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005f44:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <HAL_GetREVID+0x14>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	0c1b      	lsrs	r3, r3, #16
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	5c001000 	.word	0x5c001000

08005f58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	609a      	str	r2, [r3, #8]
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	609a      	str	r2, [r3, #8]
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3360      	adds	r3, #96	; 0x60
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	430b      	orrs	r3, r1
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	fa01 f303 	lsl.w	r3, r1, r3
 8006020:	431a      	orrs	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	611a      	str	r2, [r3, #16]
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006032:	b480      	push	{r7}
 8006034:	b087      	sub	sp, #28
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3360      	adds	r3, #96	; 0x60
 8006042:	461a      	mov	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	431a      	orrs	r2, r3
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	601a      	str	r2, [r3, #0]
  }
}
 800605c:	bf00      	nop
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800608e:	b480      	push	{r7}
 8006090:	b087      	sub	sp, #28
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3330      	adds	r3, #48	; 0x30
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	f003 030c 	and.w	r3, r3, #12
 80060aa:	4413      	add	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	211f      	movs	r1, #31
 80060ba:	fa01 f303 	lsl.w	r3, r1, r3
 80060be:	43db      	mvns	r3, r3
 80060c0:	401a      	ands	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	0e9b      	lsrs	r3, r3, #26
 80060c6:	f003 011f 	and.w	r1, r3, #31
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	fa01 f303 	lsl.w	r3, r1, r3
 80060d4:	431a      	orrs	r2, r3
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f023 0203 	bic.w	r2, r3, #3
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3314      	adds	r3, #20
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	0e5b      	lsrs	r3, r3, #25
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	4413      	add	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	0d1b      	lsrs	r3, r3, #20
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	2107      	movs	r1, #7
 800613a:	fa01 f303 	lsl.w	r3, r1, r3
 800613e:	43db      	mvns	r3, r3
 8006140:	401a      	ands	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	0d1b      	lsrs	r3, r3, #20
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	fa01 f303 	lsl.w	r3, r1, r3
 8006150:	431a      	orrs	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800617c:	43db      	mvns	r3, r3
 800617e:	401a      	ands	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f003 0318 	and.w	r3, r3, #24
 8006186:	4908      	ldr	r1, [pc, #32]	; (80061a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006188:	40d9      	lsrs	r1, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	400b      	ands	r3, r1
 800618e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006192:	431a      	orrs	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	000fffff 	.word	0x000fffff

080061ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 031f 	and.w	r3, r3, #31
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6093      	str	r3, [r2, #8]
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	5fffffc0 	.word	0x5fffffc0

080061ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006200:	d101      	bne.n	8006206 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	4b05      	ldr	r3, [pc, #20]	; (8006238 <LL_ADC_EnableInternalRegulator+0x24>)
 8006222:	4013      	ands	r3, r2
 8006224:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	6fffffc0 	.word	0x6fffffc0

0800623c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006250:	d101      	bne.n	8006256 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	4b05      	ldr	r3, [pc, #20]	; (8006288 <LL_ADC_Enable+0x24>)
 8006272:	4013      	ands	r3, r2
 8006274:	f043 0201 	orr.w	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	7fffffc0 	.word	0x7fffffc0

0800628c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <LL_ADC_IsEnabled+0x18>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <LL_ADC_IsEnabled+0x1a>
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <LL_ADC_REG_StartConversion+0x24>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	f043 0204 	orr.w	r2, r3, #4
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	7fffffc0 	.word	0x7fffffc0

080062dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d101      	bne.n	80062f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b08      	cmp	r3, #8
 8006314:	d101      	bne.n	800631a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b089      	sub	sp, #36	; 0x24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006334:	2300      	movs	r3, #0
 8006336:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e18e      	b.n	8006660 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634c:	2b00      	cmp	r3, #0
 800634e:	d109      	bne.n	8006364 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7fd ffc7 	bl	80042e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff ff3f 	bl	80061ec <LL_ADC_IsDeepPowerDownEnabled>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff ff25 	bl	80061c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff ff5a 	bl	800623c <LL_ADC_IsInternalRegulatorEnabled>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d114      	bne.n	80063b8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff ff3e 	bl	8006214 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006398:	4b9a      	ldr	r3, [pc, #616]	; (8006604 <HAL_ADC_Init+0x2dc>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	099b      	lsrs	r3, r3, #6
 800639e:	4a9a      	ldr	r2, [pc, #616]	; (8006608 <HAL_ADC_Init+0x2e0>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	099b      	lsrs	r3, r3, #6
 80063a6:	3301      	adds	r3, #1
 80063a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80063aa:	e002      	b.n	80063b2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f9      	bne.n	80063ac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff ff3d 	bl	800623c <LL_ADC_IsInternalRegulatorEnabled>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10d      	bne.n	80063e4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063cc:	f043 0210 	orr.w	r2, r3, #16
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	f043 0201 	orr.w	r2, r3, #1
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff ff77 	bl	80062dc <LL_ADC_REG_IsConversionOngoing>
 80063ee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f040 8128 	bne.w	800664e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f040 8124 	bne.w	800664e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800640e:	f043 0202 	orr.w	r2, r3, #2
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff ff36 	bl	800628c <LL_ADC_IsEnabled>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d136      	bne.n	8006494 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a78      	ldr	r2, [pc, #480]	; (800660c <HAL_ADC_Init+0x2e4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <HAL_ADC_Init+0x112>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a76      	ldr	r2, [pc, #472]	; (8006610 <HAL_ADC_Init+0x2e8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d10e      	bne.n	8006458 <HAL_ADC_Init+0x130>
 800643a:	4874      	ldr	r0, [pc, #464]	; (800660c <HAL_ADC_Init+0x2e4>)
 800643c:	f7ff ff26 	bl	800628c <LL_ADC_IsEnabled>
 8006440:	4604      	mov	r4, r0
 8006442:	4873      	ldr	r0, [pc, #460]	; (8006610 <HAL_ADC_Init+0x2e8>)
 8006444:	f7ff ff22 	bl	800628c <LL_ADC_IsEnabled>
 8006448:	4603      	mov	r3, r0
 800644a:	4323      	orrs	r3, r4
 800644c:	2b00      	cmp	r3, #0
 800644e:	bf0c      	ite	eq
 8006450:	2301      	moveq	r3, #1
 8006452:	2300      	movne	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e008      	b.n	800646a <HAL_ADC_Init+0x142>
 8006458:	486e      	ldr	r0, [pc, #440]	; (8006614 <HAL_ADC_Init+0x2ec>)
 800645a:	f7ff ff17 	bl	800628c <LL_ADC_IsEnabled>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	bf0c      	ite	eq
 8006464:	2301      	moveq	r3, #1
 8006466:	2300      	movne	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d012      	beq.n	8006494 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a66      	ldr	r2, [pc, #408]	; (800660c <HAL_ADC_Init+0x2e4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_ADC_Init+0x15a>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a64      	ldr	r2, [pc, #400]	; (8006610 <HAL_ADC_Init+0x2e8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d101      	bne.n	8006486 <HAL_ADC_Init+0x15e>
 8006482:	4a65      	ldr	r2, [pc, #404]	; (8006618 <HAL_ADC_Init+0x2f0>)
 8006484:	e000      	b.n	8006488 <HAL_ADC_Init+0x160>
 8006486:	4a65      	ldr	r2, [pc, #404]	; (800661c <HAL_ADC_Init+0x2f4>)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f7ff fd62 	bl	8005f58 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006494:	f7ff fd54 	bl	8005f40 <HAL_GetREVID>
 8006498:	4603      	mov	r3, r0
 800649a:	f241 0203 	movw	r2, #4099	; 0x1003
 800649e:	4293      	cmp	r3, r2
 80064a0:	d914      	bls.n	80064cc <HAL_ADC_Init+0x1a4>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b10      	cmp	r3, #16
 80064a8:	d110      	bne.n	80064cc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	7d5b      	ldrb	r3, [r3, #21]
 80064ae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80064b4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80064ba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	7f1b      	ldrb	r3, [r3, #28]
 80064c0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80064c2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80064c4:	f043 030c 	orr.w	r3, r3, #12
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	e00d      	b.n	80064e8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	7d5b      	ldrb	r3, [r3, #21]
 80064d0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80064d6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80064dc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	7f1b      	ldrb	r3, [r3, #28]
 80064e2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80064e4:	4313      	orrs	r3, r2
 80064e6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	7f1b      	ldrb	r3, [r3, #28]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d106      	bne.n	80064fe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	045b      	lsls	r3, r3, #17
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	4313      	orrs	r3, r2
 8006518:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	4b3f      	ldr	r3, [pc, #252]	; (8006620 <HAL_ADC_Init+0x2f8>)
 8006522:	4013      	ands	r3, r2
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	69b9      	ldr	r1, [r7, #24]
 800652a:	430b      	orrs	r3, r1
 800652c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fed2 	bl	80062dc <LL_ADC_REG_IsConversionOngoing>
 8006538:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f7ff fedf 	bl	8006302 <LL_ADC_INJ_IsConversionOngoing>
 8006544:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d14a      	bne.n	80065e2 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d147      	bne.n	80065e2 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	7d1b      	ldrb	r3, [r3, #20]
 8006556:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800655c:	4313      	orrs	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	4b2f      	ldr	r3, [pc, #188]	; (8006624 <HAL_ADC_Init+0x2fc>)
 8006568:	4013      	ands	r3, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	69b9      	ldr	r1, [r7, #24]
 8006570:	430b      	orrs	r3, r1
 8006572:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800657a:	2b01      	cmp	r3, #1
 800657c:	d11b      	bne.n	80065b6 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	4b27      	ldr	r3, [pc, #156]	; (8006628 <HAL_ADC_Init+0x300>)
 800658c:	4013      	ands	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006592:	3a01      	subs	r2, #1
 8006594:	0411      	lsls	r1, r2, #16
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800659a:	4311      	orrs	r1, r2
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80065a0:	4311      	orrs	r1, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065a6:	430a      	orrs	r2, r1
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0201 	orr.w	r2, r2, #1
 80065b2:	611a      	str	r2, [r3, #16]
 80065b4:	e007      	b.n	80065c6 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0201 	bic.w	r2, r2, #1
 80065c4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fd93 	bl	8007108 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d120      	bne.n	800662c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	f023 010f 	bic.w	r1, r3, #15
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	1e5a      	subs	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	631a      	str	r2, [r3, #48]	; 0x30
 8006602:	e01b      	b.n	800663c <HAL_ADC_Init+0x314>
 8006604:	24000010 	.word	0x24000010
 8006608:	053e2d63 	.word	0x053e2d63
 800660c:	40022000 	.word	0x40022000
 8006610:	40022100 	.word	0x40022100
 8006614:	58026000 	.word	0x58026000
 8006618:	40022300 	.word	0x40022300
 800661c:	58026300 	.word	0x58026300
 8006620:	fff0c003 	.word	0xfff0c003
 8006624:	ffffbffc 	.word	0xffffbffc
 8006628:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 020f 	bic.w	r2, r2, #15
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006640:	f023 0303 	bic.w	r3, r3, #3
 8006644:	f043 0201 	orr.w	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	655a      	str	r2, [r3, #84]	; 0x54
 800664c:	e007      	b.n	800665e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	f043 0210 	orr.w	r2, r3, #16
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800665e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3724      	adds	r7, #36	; 0x24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd90      	pop	{r4, r7, pc}

08006668 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a55      	ldr	r2, [pc, #340]	; (80067d0 <HAL_ADC_Start_DMA+0x168>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <HAL_ADC_Start_DMA+0x20>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a54      	ldr	r2, [pc, #336]	; (80067d4 <HAL_ADC_Start_DMA+0x16c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d101      	bne.n	800668c <HAL_ADC_Start_DMA+0x24>
 8006688:	4b53      	ldr	r3, [pc, #332]	; (80067d8 <HAL_ADC_Start_DMA+0x170>)
 800668a:	e000      	b.n	800668e <HAL_ADC_Start_DMA+0x26>
 800668c:	4b53      	ldr	r3, [pc, #332]	; (80067dc <HAL_ADC_Start_DMA+0x174>)
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fd8c 	bl	80061ac <LL_ADC_GetMultimode>
 8006694:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fe1e 	bl	80062dc <LL_ADC_REG_IsConversionOngoing>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f040 808c 	bne.w	80067c0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d101      	bne.n	80066b6 <HAL_ADC_Start_DMA+0x4e>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e087      	b.n	80067c6 <HAL_ADC_Start_DMA+0x15e>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	d002      	beq.n	80066d0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b09      	cmp	r3, #9
 80066ce:	d170      	bne.n	80067b2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 fbfb 	bl	8006ecc <ADC_Enable>
 80066d6:	4603      	mov	r3, r0
 80066d8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d163      	bne.n	80067a8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066e4:	4b3e      	ldr	r3, [pc, #248]	; (80067e0 <HAL_ADC_Start_DMA+0x178>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a37      	ldr	r2, [pc, #220]	; (80067d4 <HAL_ADC_Start_DMA+0x16c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d002      	beq.n	8006700 <HAL_ADC_Start_DMA+0x98>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	e000      	b.n	8006702 <HAL_ADC_Start_DMA+0x9a>
 8006700:	4b33      	ldr	r3, [pc, #204]	; (80067d0 <HAL_ADC_Start_DMA+0x168>)
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	6812      	ldr	r2, [r2, #0]
 8006706:	4293      	cmp	r3, r2
 8006708:	d002      	beq.n	8006710 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d105      	bne.n	800671c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006714:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d006      	beq.n	8006736 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672c:	f023 0206 	bic.w	r2, r3, #6
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	659a      	str	r2, [r3, #88]	; 0x58
 8006734:	e002      	b.n	800673c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006740:	4a28      	ldr	r2, [pc, #160]	; (80067e4 <HAL_ADC_Start_DMA+0x17c>)
 8006742:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006748:	4a27      	ldr	r2, [pc, #156]	; (80067e8 <HAL_ADC_Start_DMA+0x180>)
 800674a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006750:	4a26      	ldr	r2, [pc, #152]	; (80067ec <HAL_ADC_Start_DMA+0x184>)
 8006752:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	221c      	movs	r2, #28
 800675a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0210 	orr.w	r2, r2, #16
 8006772:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f7ff fcb1 	bl	80060e6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3340      	adds	r3, #64	; 0x40
 800678e:	4619      	mov	r1, r3
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f001 fb4c 	bl	8007e30 <HAL_DMA_Start_IT>
 8006798:	4603      	mov	r3, r0
 800679a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fd87 	bl	80062b4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80067a6:	e00d      	b.n	80067c4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80067b0:	e008      	b.n	80067c4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80067be:	e001      	b.n	80067c4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
 80067c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	40022000 	.word	0x40022000
 80067d4:	40022100 	.word	0x40022100
 80067d8:	40022300 	.word	0x40022300
 80067dc:	58026300 	.word	0x58026300
 80067e0:	fffff0fe 	.word	0xfffff0fe
 80067e4:	08006fe1 	.word	0x08006fe1
 80067e8:	080070b9 	.word	0x080070b9
 80067ec:	080070d5 	.word	0x080070d5

080067f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800682c:	b590      	push	{r4, r7, lr}
 800682e:	b0a1      	sub	sp, #132	; 0x84
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4a9d      	ldr	r2, [pc, #628]	; (8006abc <HAL_ADC_ConfigChannel+0x290>)
 8006846:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <HAL_ADC_ConfigChannel+0x2a>
 8006852:	2302      	movs	r3, #2
 8006854:	e321      	b.n	8006e9a <HAL_ADC_ConfigChannel+0x66e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fd3a 	bl	80062dc <LL_ADC_REG_IsConversionOngoing>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	f040 8306 	bne.w	8006e7c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006878:	2b00      	cmp	r3, #0
 800687a:	d108      	bne.n	800688e <HAL_ADC_ConfigChannel+0x62>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	0e9b      	lsrs	r3, r3, #26
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2201      	movs	r2, #1
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	e016      	b.n	80068bc <HAL_ADC_ConfigChannel+0x90>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006896:	fa93 f3a3 	rbit	r3, r3
 800689a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800689c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800689e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80068a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80068a6:	2320      	movs	r3, #32
 80068a8:	e003      	b.n	80068b2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80068aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068ac:	fab3 f383 	clz	r3, r3
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	2201      	movs	r2, #1
 80068b8:	fa02 f303 	lsl.w	r3, r2, r3
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	69d1      	ldr	r1, [r2, #28]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	430b      	orrs	r3, r1
 80068c8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	6859      	ldr	r1, [r3, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	f7ff fbd9 	bl	800608e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff fcfb 	bl	80062dc <LL_ADC_REG_IsConversionOngoing>
 80068e6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff fd08 	bl	8006302 <LL_ADC_INJ_IsConversionOngoing>
 80068f2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80068f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f040 80b3 	bne.w	8006a62 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80068fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f040 80af 	bne.w	8006a62 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	6819      	ldr	r1, [r3, #0]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	461a      	mov	r2, r3
 8006912:	f7ff fbfb 	bl	800610c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006916:	4b6a      	ldr	r3, [pc, #424]	; (8006ac0 <HAL_ADC_ConfigChannel+0x294>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800691e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006922:	d10b      	bne.n	800693c <HAL_ADC_ConfigChannel+0x110>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	089b      	lsrs	r3, r3, #2
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	e01d      	b.n	8006978 <HAL_ADC_ConfigChannel+0x14c>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0310 	and.w	r3, r3, #16
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10b      	bne.n	8006962 <HAL_ADC_ConfigChannel+0x136>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	695a      	ldr	r2, [r3, #20]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	089b      	lsrs	r3, r3, #2
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	e00a      	b.n	8006978 <HAL_ADC_ConfigChannel+0x14c>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695a      	ldr	r2, [r3, #20]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	089b      	lsrs	r3, r3, #2
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b04      	cmp	r3, #4
 8006980:	d027      	beq.n	80069d2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6919      	ldr	r1, [r3, #16]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006990:	f7ff fb16 	bl	8005fc0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	6919      	ldr	r1, [r3, #16]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	7e5b      	ldrb	r3, [r3, #25]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d102      	bne.n	80069aa <HAL_ADC_ConfigChannel+0x17e>
 80069a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80069a8:	e000      	b.n	80069ac <HAL_ADC_ConfigChannel+0x180>
 80069aa:	2300      	movs	r3, #0
 80069ac:	461a      	mov	r2, r3
 80069ae:	f7ff fb40 	bl	8006032 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6919      	ldr	r1, [r3, #16]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	7e1b      	ldrb	r3, [r3, #24]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d102      	bne.n	80069c8 <HAL_ADC_ConfigChannel+0x19c>
 80069c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069c6:	e000      	b.n	80069ca <HAL_ADC_ConfigChannel+0x19e>
 80069c8:	2300      	movs	r3, #0
 80069ca:	461a      	mov	r2, r3
 80069cc:	f7ff fb18 	bl	8006000 <LL_ADC_SetDataRightShift>
 80069d0:	e047      	b.n	8006a62 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	069b      	lsls	r3, r3, #26
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d107      	bne.n	80069f6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80069f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	069b      	lsls	r3, r3, #26
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d107      	bne.n	8006a1a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a18:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	069b      	lsls	r3, r3, #26
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d107      	bne.n	8006a3e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a3c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	069b      	lsls	r3, r3, #26
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d107      	bne.n	8006a62 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a60:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff fc10 	bl	800628c <LL_ADC_IsEnabled>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f040 820d 	bne.w	8006e8e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	6819      	ldr	r1, [r3, #0]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	461a      	mov	r2, r3
 8006a82:	f7ff fb6f 	bl	8006164 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	4a0c      	ldr	r2, [pc, #48]	; (8006abc <HAL_ADC_ConfigChannel+0x290>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	f040 8133 	bne.w	8006cf8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d110      	bne.n	8006ac4 <HAL_ADC_ConfigChannel+0x298>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	0e9b      	lsrs	r3, r3, #26
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2b09      	cmp	r3, #9
 8006ab0:	bf94      	ite	ls
 8006ab2:	2301      	movls	r3, #1
 8006ab4:	2300      	movhi	r3, #0
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	e01e      	b.n	8006af8 <HAL_ADC_ConfigChannel+0x2cc>
 8006aba:	bf00      	nop
 8006abc:	47ff0000 	.word	0x47ff0000
 8006ac0:	5c001000 	.word	0x5c001000
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006acc:	fa93 f3a3 	rbit	r3, r3
 8006ad0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8006adc:	2320      	movs	r3, #32
 8006ade:	e003      	b.n	8006ae8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8006ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae2:	fab3 f383 	clz	r3, r3
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	3301      	adds	r3, #1
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	2b09      	cmp	r3, #9
 8006af0:	bf94      	ite	ls
 8006af2:	2301      	movls	r3, #1
 8006af4:	2300      	movhi	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d079      	beq.n	8006bf0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d107      	bne.n	8006b18 <HAL_ADC_ConfigChannel+0x2ec>
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	0e9b      	lsrs	r3, r3, #26
 8006b0e:	3301      	adds	r3, #1
 8006b10:	069b      	lsls	r3, r3, #26
 8006b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b16:	e015      	b.n	8006b44 <HAL_ADC_ConfigChannel+0x318>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b20:	fa93 f3a3 	rbit	r3, r3
 8006b24:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b28:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8006b30:	2320      	movs	r3, #32
 8006b32:	e003      	b.n	8006b3c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b36:	fab3 f383 	clz	r3, r3
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	069b      	lsls	r3, r3, #26
 8006b40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_ADC_ConfigChannel+0x338>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	0e9b      	lsrs	r3, r3, #26
 8006b56:	3301      	adds	r3, #1
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b62:	e017      	b.n	8006b94 <HAL_ADC_ConfigChannel+0x368>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b6c:	fa93 f3a3 	rbit	r3, r3
 8006b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b74:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8006b7c:	2320      	movs	r3, #32
 8006b7e:	e003      	b.n	8006b88 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8006b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b82:	fab3 f383 	clz	r3, r3
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	3301      	adds	r3, #1
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	2101      	movs	r1, #1
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	ea42 0103 	orr.w	r1, r2, r3
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10a      	bne.n	8006bba <HAL_ADC_ConfigChannel+0x38e>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	0e9b      	lsrs	r3, r3, #26
 8006baa:	3301      	adds	r3, #1
 8006bac:	f003 021f 	and.w	r2, r3, #31
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	051b      	lsls	r3, r3, #20
 8006bb8:	e018      	b.n	8006bec <HAL_ADC_ConfigChannel+0x3c0>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc2:	fa93 f3a3 	rbit	r3, r3
 8006bc6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8006bd2:	2320      	movs	r3, #32
 8006bd4:	e003      	b.n	8006bde <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	fab3 f383 	clz	r3, r3
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	3301      	adds	r3, #1
 8006be0:	f003 021f 	and.w	r2, r3, #31
 8006be4:	4613      	mov	r3, r2
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	4413      	add	r3, r2
 8006bea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bec:	430b      	orrs	r3, r1
 8006bee:	e07e      	b.n	8006cee <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d107      	bne.n	8006c0c <HAL_ADC_ConfigChannel+0x3e0>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	0e9b      	lsrs	r3, r3, #26
 8006c02:	3301      	adds	r3, #1
 8006c04:	069b      	lsls	r3, r3, #26
 8006c06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c0a:	e015      	b.n	8006c38 <HAL_ADC_ConfigChannel+0x40c>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	fa93 f3a3 	rbit	r3, r3
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006c24:	2320      	movs	r3, #32
 8006c26:	e003      	b.n	8006c30 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	fab3 f383 	clz	r3, r3
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	3301      	adds	r3, #1
 8006c32:	069b      	lsls	r3, r3, #26
 8006c34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <HAL_ADC_ConfigChannel+0x42c>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	0e9b      	lsrs	r3, r3, #26
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	2101      	movs	r1, #1
 8006c52:	fa01 f303 	lsl.w	r3, r1, r3
 8006c56:	e017      	b.n	8006c88 <HAL_ADC_ConfigChannel+0x45c>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	fa93 f3a3 	rbit	r3, r3
 8006c64:	61bb      	str	r3, [r7, #24]
  return result;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8006c70:	2320      	movs	r3, #32
 8006c72:	e003      	b.n	8006c7c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	fab3 f383 	clz	r3, r3
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	f003 031f 	and.w	r3, r3, #31
 8006c82:	2101      	movs	r1, #1
 8006c84:	fa01 f303 	lsl.w	r3, r1, r3
 8006c88:	ea42 0103 	orr.w	r1, r2, r3
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10d      	bne.n	8006cb4 <HAL_ADC_ConfigChannel+0x488>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	0e9b      	lsrs	r3, r3, #26
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	f003 021f 	and.w	r2, r3, #31
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	4413      	add	r3, r2
 8006caa:	3b1e      	subs	r3, #30
 8006cac:	051b      	lsls	r3, r3, #20
 8006cae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cb2:	e01b      	b.n	8006cec <HAL_ADC_ConfigChannel+0x4c0>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	fa93 f3a3 	rbit	r3, r3
 8006cc0:	60fb      	str	r3, [r7, #12]
  return result;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8006ccc:	2320      	movs	r3, #32
 8006cce:	e003      	b.n	8006cd8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	fab3 f383 	clz	r3, r3
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	3301      	adds	r3, #1
 8006cda:	f003 021f 	and.w	r2, r3, #31
 8006cde:	4613      	mov	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3b1e      	subs	r3, #30
 8006ce6:	051b      	lsls	r3, r3, #20
 8006ce8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cec:	430b      	orrs	r3, r1
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	6892      	ldr	r2, [r2, #8]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f7ff fa0a 	bl	800610c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f280 80c6 	bge.w	8006e8e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a67      	ldr	r2, [pc, #412]	; (8006ea4 <HAL_ADC_ConfigChannel+0x678>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <HAL_ADC_ConfigChannel+0x4ea>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a65      	ldr	r2, [pc, #404]	; (8006ea8 <HAL_ADC_ConfigChannel+0x67c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d101      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x4ee>
 8006d16:	4b65      	ldr	r3, [pc, #404]	; (8006eac <HAL_ADC_ConfigChannel+0x680>)
 8006d18:	e000      	b.n	8006d1c <HAL_ADC_ConfigChannel+0x4f0>
 8006d1a:	4b65      	ldr	r3, [pc, #404]	; (8006eb0 <HAL_ADC_ConfigChannel+0x684>)
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff f941 	bl	8005fa4 <LL_ADC_GetCommonPathInternalCh>
 8006d22:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a5e      	ldr	r2, [pc, #376]	; (8006ea4 <HAL_ADC_ConfigChannel+0x678>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_ADC_ConfigChannel+0x50c>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a5d      	ldr	r2, [pc, #372]	; (8006ea8 <HAL_ADC_ConfigChannel+0x67c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10e      	bne.n	8006d56 <HAL_ADC_ConfigChannel+0x52a>
 8006d38:	485a      	ldr	r0, [pc, #360]	; (8006ea4 <HAL_ADC_ConfigChannel+0x678>)
 8006d3a:	f7ff faa7 	bl	800628c <LL_ADC_IsEnabled>
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4859      	ldr	r0, [pc, #356]	; (8006ea8 <HAL_ADC_ConfigChannel+0x67c>)
 8006d42:	f7ff faa3 	bl	800628c <LL_ADC_IsEnabled>
 8006d46:	4603      	mov	r3, r0
 8006d48:	4323      	orrs	r3, r4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	e008      	b.n	8006d68 <HAL_ADC_ConfigChannel+0x53c>
 8006d56:	4857      	ldr	r0, [pc, #348]	; (8006eb4 <HAL_ADC_ConfigChannel+0x688>)
 8006d58:	f7ff fa98 	bl	800628c <LL_ADC_IsEnabled>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bf0c      	ite	eq
 8006d62:	2301      	moveq	r3, #1
 8006d64:	2300      	movne	r3, #0
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d07d      	beq.n	8006e68 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a51      	ldr	r2, [pc, #324]	; (8006eb8 <HAL_ADC_ConfigChannel+0x68c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d130      	bne.n	8006dd8 <HAL_ADC_ConfigChannel+0x5ac>
 8006d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d12b      	bne.n	8006dd8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a4b      	ldr	r2, [pc, #300]	; (8006eb4 <HAL_ADC_ConfigChannel+0x688>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	f040 8081 	bne.w	8006e8e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a44      	ldr	r2, [pc, #272]	; (8006ea4 <HAL_ADC_ConfigChannel+0x678>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d004      	beq.n	8006da0 <HAL_ADC_ConfigChannel+0x574>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a43      	ldr	r2, [pc, #268]	; (8006ea8 <HAL_ADC_ConfigChannel+0x67c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d101      	bne.n	8006da4 <HAL_ADC_ConfigChannel+0x578>
 8006da0:	4a42      	ldr	r2, [pc, #264]	; (8006eac <HAL_ADC_ConfigChannel+0x680>)
 8006da2:	e000      	b.n	8006da6 <HAL_ADC_ConfigChannel+0x57a>
 8006da4:	4a42      	ldr	r2, [pc, #264]	; (8006eb0 <HAL_ADC_ConfigChannel+0x684>)
 8006da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f7ff f8e5 	bl	8005f7e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006db4:	4b41      	ldr	r3, [pc, #260]	; (8006ebc <HAL_ADC_ConfigChannel+0x690>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	099b      	lsrs	r3, r3, #6
 8006dba:	4a41      	ldr	r2, [pc, #260]	; (8006ec0 <HAL_ADC_ConfigChannel+0x694>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	099b      	lsrs	r3, r3, #6
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006dc8:	e002      	b.n	8006dd0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f9      	bne.n	8006dca <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006dd6:	e05a      	b.n	8006e8e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a39      	ldr	r2, [pc, #228]	; (8006ec4 <HAL_ADC_ConfigChannel+0x698>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d11e      	bne.n	8006e20 <HAL_ADC_ConfigChannel+0x5f4>
 8006de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d119      	bne.n	8006e20 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a30      	ldr	r2, [pc, #192]	; (8006eb4 <HAL_ADC_ConfigChannel+0x688>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d14b      	bne.n	8006e8e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a2a      	ldr	r2, [pc, #168]	; (8006ea4 <HAL_ADC_ConfigChannel+0x678>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d004      	beq.n	8006e0a <HAL_ADC_ConfigChannel+0x5de>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a28      	ldr	r2, [pc, #160]	; (8006ea8 <HAL_ADC_ConfigChannel+0x67c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d101      	bne.n	8006e0e <HAL_ADC_ConfigChannel+0x5e2>
 8006e0a:	4a28      	ldr	r2, [pc, #160]	; (8006eac <HAL_ADC_ConfigChannel+0x680>)
 8006e0c:	e000      	b.n	8006e10 <HAL_ADC_ConfigChannel+0x5e4>
 8006e0e:	4a28      	ldr	r2, [pc, #160]	; (8006eb0 <HAL_ADC_ConfigChannel+0x684>)
 8006e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e16:	4619      	mov	r1, r3
 8006e18:	4610      	mov	r0, r2
 8006e1a:	f7ff f8b0 	bl	8005f7e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e1e:	e036      	b.n	8006e8e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a28      	ldr	r2, [pc, #160]	; (8006ec8 <HAL_ADC_ConfigChannel+0x69c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d131      	bne.n	8006e8e <HAL_ADC_ConfigChannel+0x662>
 8006e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d12c      	bne.n	8006e8e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1e      	ldr	r2, [pc, #120]	; (8006eb4 <HAL_ADC_ConfigChannel+0x688>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d127      	bne.n	8006e8e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <HAL_ADC_ConfigChannel+0x678>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d004      	beq.n	8006e52 <HAL_ADC_ConfigChannel+0x626>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a16      	ldr	r2, [pc, #88]	; (8006ea8 <HAL_ADC_ConfigChannel+0x67c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d101      	bne.n	8006e56 <HAL_ADC_ConfigChannel+0x62a>
 8006e52:	4a16      	ldr	r2, [pc, #88]	; (8006eac <HAL_ADC_ConfigChannel+0x680>)
 8006e54:	e000      	b.n	8006e58 <HAL_ADC_ConfigChannel+0x62c>
 8006e56:	4a16      	ldr	r2, [pc, #88]	; (8006eb0 <HAL_ADC_ConfigChannel+0x684>)
 8006e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f7ff f88c 	bl	8005f7e <LL_ADC_SetCommonPathInternalCh>
 8006e66:	e012      	b.n	8006e8e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6c:	f043 0220 	orr.w	r2, r3, #32
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006e7a:	e008      	b.n	8006e8e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e80:	f043 0220 	orr.w	r2, r3, #32
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006e96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3784      	adds	r7, #132	; 0x84
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd90      	pop	{r4, r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40022000 	.word	0x40022000
 8006ea8:	40022100 	.word	0x40022100
 8006eac:	40022300 	.word	0x40022300
 8006eb0:	58026300 	.word	0x58026300
 8006eb4:	58026000 	.word	0x58026000
 8006eb8:	cb840000 	.word	0xcb840000
 8006ebc:	24000010 	.word	0x24000010
 8006ec0:	053e2d63 	.word	0x053e2d63
 8006ec4:	c7520000 	.word	0xc7520000
 8006ec8:	cfb80000 	.word	0xcfb80000

08006ecc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff f9d7 	bl	800628c <LL_ADC_IsEnabled>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d16e      	bne.n	8006fc2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	4b38      	ldr	r3, [pc, #224]	; (8006fcc <ADC_Enable+0x100>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00d      	beq.n	8006f0e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef6:	f043 0210 	orr.w	r2, r3, #16
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f02:	f043 0201 	orr.w	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e05a      	b.n	8006fc4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff f9a6 	bl	8006264 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006f18:	f7fe ffe2 	bl	8005ee0 <HAL_GetTick>
 8006f1c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a2b      	ldr	r2, [pc, #172]	; (8006fd0 <ADC_Enable+0x104>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <ADC_Enable+0x66>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a29      	ldr	r2, [pc, #164]	; (8006fd4 <ADC_Enable+0x108>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d101      	bne.n	8006f36 <ADC_Enable+0x6a>
 8006f32:	4b29      	ldr	r3, [pc, #164]	; (8006fd8 <ADC_Enable+0x10c>)
 8006f34:	e000      	b.n	8006f38 <ADC_Enable+0x6c>
 8006f36:	4b29      	ldr	r3, [pc, #164]	; (8006fdc <ADC_Enable+0x110>)
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff f937 	bl	80061ac <LL_ADC_GetMultimode>
 8006f3e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a23      	ldr	r2, [pc, #140]	; (8006fd4 <ADC_Enable+0x108>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d002      	beq.n	8006f50 <ADC_Enable+0x84>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	e000      	b.n	8006f52 <ADC_Enable+0x86>
 8006f50:	4b1f      	ldr	r3, [pc, #124]	; (8006fd0 <ADC_Enable+0x104>)
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d02c      	beq.n	8006fb4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d130      	bne.n	8006fc2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f60:	e028      	b.n	8006fb4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7ff f990 	bl	800628c <LL_ADC_IsEnabled>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d104      	bne.n	8006f7c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff f974 	bl	8006264 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006f7c:	f7fe ffb0 	bl	8005ee0 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d914      	bls.n	8006fb4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d00d      	beq.n	8006fb4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9c:	f043 0210 	orr.w	r2, r3, #16
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa8:	f043 0201 	orr.w	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e007      	b.n	8006fc4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d1cf      	bne.n	8006f62 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	8000003f 	.word	0x8000003f
 8006fd0:	40022000 	.word	0x40022000
 8006fd4:	40022100 	.word	0x40022100
 8006fd8:	40022300 	.word	0x40022300
 8006fdc:	58026300 	.word	0x58026300

08006fe0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d14b      	bne.n	8007092 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d021      	beq.n	8007058 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff f825 	bl	8006068 <LL_ADC_REG_IsTriggerSourceSWStart>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d032      	beq.n	800708a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d12b      	bne.n	800708a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d11f      	bne.n	800708a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704e:	f043 0201 	orr.w	r2, r3, #1
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	655a      	str	r2, [r3, #84]	; 0x54
 8007056:	e018      	b.n	800708a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d111      	bne.n	800708a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007082:	f043 0201 	orr.w	r2, r3, #1
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff fbb0 	bl	80067f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007090:	e00e      	b.n	80070b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	f003 0310 	and.w	r3, r3, #16
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff fbba 	bl	8006818 <HAL_ADC_ErrorCallback>
}
 80070a4:	e004      	b.n	80070b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	4798      	blx	r3
}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fb9c 	bl	8006804 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f2:	f043 0204 	orr.w	r2, r3, #4
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7ff fb8c 	bl	8006818 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a79      	ldr	r2, [pc, #484]	; (80072fc <ADC_ConfigureBoostMode+0x1f4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d004      	beq.n	8007124 <ADC_ConfigureBoostMode+0x1c>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a78      	ldr	r2, [pc, #480]	; (8007300 <ADC_ConfigureBoostMode+0x1f8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d109      	bne.n	8007138 <ADC_ConfigureBoostMode+0x30>
 8007124:	4b77      	ldr	r3, [pc, #476]	; (8007304 <ADC_ConfigureBoostMode+0x1fc>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800712c:	2b00      	cmp	r3, #0
 800712e:	bf14      	ite	ne
 8007130:	2301      	movne	r3, #1
 8007132:	2300      	moveq	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	e008      	b.n	800714a <ADC_ConfigureBoostMode+0x42>
 8007138:	4b73      	ldr	r3, [pc, #460]	; (8007308 <ADC_ConfigureBoostMode+0x200>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007140:	2b00      	cmp	r3, #0
 8007142:	bf14      	ite	ne
 8007144:	2301      	movne	r3, #1
 8007146:	2300      	moveq	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01c      	beq.n	8007188 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800714e:	f005 f971 	bl	800c434 <HAL_RCC_GetHCLKFreq>
 8007152:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800715c:	d010      	beq.n	8007180 <ADC_ConfigureBoostMode+0x78>
 800715e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007162:	d871      	bhi.n	8007248 <ADC_ConfigureBoostMode+0x140>
 8007164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007168:	d002      	beq.n	8007170 <ADC_ConfigureBoostMode+0x68>
 800716a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800716e:	d16b      	bne.n	8007248 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	0c1b      	lsrs	r3, r3, #16
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	fbb2 f3f3 	udiv	r3, r2, r3
 800717c:	60fb      	str	r3, [r7, #12]
        break;
 800717e:	e066      	b.n	800724e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	089b      	lsrs	r3, r3, #2
 8007184:	60fb      	str	r3, [r7, #12]
        break;
 8007186:	e062      	b.n	800724e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007188:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800718c:	f006 f8ee 	bl	800d36c <HAL_RCCEx_GetPeriphCLKFreq>
 8007190:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800719a:	d051      	beq.n	8007240 <ADC_ConfigureBoostMode+0x138>
 800719c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80071a0:	d854      	bhi.n	800724c <ADC_ConfigureBoostMode+0x144>
 80071a2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80071a6:	d047      	beq.n	8007238 <ADC_ConfigureBoostMode+0x130>
 80071a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80071ac:	d84e      	bhi.n	800724c <ADC_ConfigureBoostMode+0x144>
 80071ae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80071b2:	d03d      	beq.n	8007230 <ADC_ConfigureBoostMode+0x128>
 80071b4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80071b8:	d848      	bhi.n	800724c <ADC_ConfigureBoostMode+0x144>
 80071ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071be:	d033      	beq.n	8007228 <ADC_ConfigureBoostMode+0x120>
 80071c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071c4:	d842      	bhi.n	800724c <ADC_ConfigureBoostMode+0x144>
 80071c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80071ca:	d029      	beq.n	8007220 <ADC_ConfigureBoostMode+0x118>
 80071cc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80071d0:	d83c      	bhi.n	800724c <ADC_ConfigureBoostMode+0x144>
 80071d2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80071d6:	d01a      	beq.n	800720e <ADC_ConfigureBoostMode+0x106>
 80071d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80071dc:	d836      	bhi.n	800724c <ADC_ConfigureBoostMode+0x144>
 80071de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80071e2:	d014      	beq.n	800720e <ADC_ConfigureBoostMode+0x106>
 80071e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80071e8:	d830      	bhi.n	800724c <ADC_ConfigureBoostMode+0x144>
 80071ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ee:	d00e      	beq.n	800720e <ADC_ConfigureBoostMode+0x106>
 80071f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071f4:	d82a      	bhi.n	800724c <ADC_ConfigureBoostMode+0x144>
 80071f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80071fa:	d008      	beq.n	800720e <ADC_ConfigureBoostMode+0x106>
 80071fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007200:	d824      	bhi.n	800724c <ADC_ConfigureBoostMode+0x144>
 8007202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007206:	d002      	beq.n	800720e <ADC_ConfigureBoostMode+0x106>
 8007208:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800720c:	d11e      	bne.n	800724c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	0c9b      	lsrs	r3, r3, #18
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	60fb      	str	r3, [r7, #12]
        break;
 800721e:	e016      	b.n	800724e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	091b      	lsrs	r3, r3, #4
 8007224:	60fb      	str	r3, [r7, #12]
        break;
 8007226:	e012      	b.n	800724e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	095b      	lsrs	r3, r3, #5
 800722c:	60fb      	str	r3, [r7, #12]
        break;
 800722e:	e00e      	b.n	800724e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	099b      	lsrs	r3, r3, #6
 8007234:	60fb      	str	r3, [r7, #12]
        break;
 8007236:	e00a      	b.n	800724e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	09db      	lsrs	r3, r3, #7
 800723c:	60fb      	str	r3, [r7, #12]
        break;
 800723e:	e006      	b.n	800724e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	0a1b      	lsrs	r3, r3, #8
 8007244:	60fb      	str	r3, [r7, #12]
        break;
 8007246:	e002      	b.n	800724e <ADC_ConfigureBoostMode+0x146>
        break;
 8007248:	bf00      	nop
 800724a:	e000      	b.n	800724e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800724c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800724e:	f7fe fe77 	bl	8005f40 <HAL_GetREVID>
 8007252:	4603      	mov	r3, r0
 8007254:	f241 0203 	movw	r2, #4099	; 0x1003
 8007258:	4293      	cmp	r3, r2
 800725a:	d815      	bhi.n	8007288 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4a2b      	ldr	r2, [pc, #172]	; (800730c <ADC_ConfigureBoostMode+0x204>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d908      	bls.n	8007276 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007272:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8007274:	e03e      	b.n	80072f4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007284:	609a      	str	r2, [r3, #8]
}
 8007286:	e035      	b.n	80072f4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	085b      	lsrs	r3, r3, #1
 800728c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4a1f      	ldr	r2, [pc, #124]	; (8007310 <ADC_ConfigureBoostMode+0x208>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d808      	bhi.n	80072a8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80072a4:	609a      	str	r2, [r3, #8]
}
 80072a6:	e025      	b.n	80072f4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4a1a      	ldr	r2, [pc, #104]	; (8007314 <ADC_ConfigureBoostMode+0x20c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d80a      	bhi.n	80072c6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c2:	609a      	str	r2, [r3, #8]
}
 80072c4:	e016      	b.n	80072f4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4a13      	ldr	r2, [pc, #76]	; (8007318 <ADC_ConfigureBoostMode+0x210>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d80a      	bhi.n	80072e4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e0:	609a      	str	r2, [r3, #8]
}
 80072e2:	e007      	b.n	80072f4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80072f2:	609a      	str	r2, [r3, #8]
}
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	40022000 	.word	0x40022000
 8007300:	40022100 	.word	0x40022100
 8007304:	40022300 	.word	0x40022300
 8007308:	58026300 	.word	0x58026300
 800730c:	01312d00 	.word	0x01312d00
 8007310:	005f5e10 	.word	0x005f5e10
 8007314:	00bebc20 	.word	0x00bebc20
 8007318:	017d7840 	.word	0x017d7840

0800731c <LL_ADC_IsEnabled>:
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <LL_ADC_IsEnabled+0x18>
 8007330:	2301      	movs	r3, #1
 8007332:	e000      	b.n	8007336 <LL_ADC_IsEnabled+0x1a>
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <LL_ADC_REG_IsConversionOngoing>:
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b04      	cmp	r3, #4
 8007354:	d101      	bne.n	800735a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b09f      	sub	sp, #124	; 0x7c
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007382:	2302      	movs	r3, #2
 8007384:	e0be      	b.n	8007504 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800738e:	2300      	movs	r3, #0
 8007390:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007392:	2300      	movs	r3, #0
 8007394:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a5c      	ldr	r2, [pc, #368]	; (800750c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d102      	bne.n	80073a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80073a0:	4b5b      	ldr	r3, [pc, #364]	; (8007510 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80073a2:	60bb      	str	r3, [r7, #8]
 80073a4:	e001      	b.n	80073aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80073a6:	2300      	movs	r3, #0
 80073a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10b      	bne.n	80073c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b4:	f043 0220 	orr.w	r2, r3, #32
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e09d      	b.n	8007504 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff ffb9 	bl	8007342 <LL_ADC_REG_IsConversionOngoing>
 80073d0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff ffb3 	bl	8007342 <LL_ADC_REG_IsConversionOngoing>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d17f      	bne.n	80074e2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80073e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d17c      	bne.n	80074e2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a47      	ldr	r2, [pc, #284]	; (800750c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d004      	beq.n	80073fc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a46      	ldr	r2, [pc, #280]	; (8007510 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d101      	bne.n	8007400 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80073fc:	4b45      	ldr	r3, [pc, #276]	; (8007514 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80073fe:	e000      	b.n	8007402 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007400:	4b45      	ldr	r3, [pc, #276]	; (8007518 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007402:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d039      	beq.n	8007480 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800740c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	431a      	orrs	r2, r3
 800741a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a3a      	ldr	r2, [pc, #232]	; (800750c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a38      	ldr	r2, [pc, #224]	; (8007510 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d10e      	bne.n	8007450 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007432:	4836      	ldr	r0, [pc, #216]	; (800750c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007434:	f7ff ff72 	bl	800731c <LL_ADC_IsEnabled>
 8007438:	4604      	mov	r4, r0
 800743a:	4835      	ldr	r0, [pc, #212]	; (8007510 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800743c:	f7ff ff6e 	bl	800731c <LL_ADC_IsEnabled>
 8007440:	4603      	mov	r3, r0
 8007442:	4323      	orrs	r3, r4
 8007444:	2b00      	cmp	r3, #0
 8007446:	bf0c      	ite	eq
 8007448:	2301      	moveq	r3, #1
 800744a:	2300      	movne	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	e008      	b.n	8007462 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8007450:	4832      	ldr	r0, [pc, #200]	; (800751c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007452:	f7ff ff63 	bl	800731c <LL_ADC_IsEnabled>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	bf0c      	ite	eq
 800745c:	2301      	moveq	r3, #1
 800745e:	2300      	movne	r3, #0
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d047      	beq.n	80074f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	4b2d      	ldr	r3, [pc, #180]	; (8007520 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800746c:	4013      	ands	r3, r2
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	6811      	ldr	r1, [r2, #0]
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	6892      	ldr	r2, [r2, #8]
 8007476:	430a      	orrs	r2, r1
 8007478:	431a      	orrs	r2, r3
 800747a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800747c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800747e:	e03a      	b.n	80074f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1e      	ldr	r2, [pc, #120]	; (800750c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d004      	beq.n	80074a0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1d      	ldr	r2, [pc, #116]	; (8007510 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d10e      	bne.n	80074be <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80074a0:	481a      	ldr	r0, [pc, #104]	; (800750c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80074a2:	f7ff ff3b 	bl	800731c <LL_ADC_IsEnabled>
 80074a6:	4604      	mov	r4, r0
 80074a8:	4819      	ldr	r0, [pc, #100]	; (8007510 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80074aa:	f7ff ff37 	bl	800731c <LL_ADC_IsEnabled>
 80074ae:	4603      	mov	r3, r0
 80074b0:	4323      	orrs	r3, r4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bf0c      	ite	eq
 80074b6:	2301      	moveq	r3, #1
 80074b8:	2300      	movne	r3, #0
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	e008      	b.n	80074d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80074be:	4817      	ldr	r0, [pc, #92]	; (800751c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80074c0:	f7ff ff2c 	bl	800731c <LL_ADC_IsEnabled>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	bf0c      	ite	eq
 80074ca:	2301      	moveq	r3, #1
 80074cc:	2300      	movne	r3, #0
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d010      	beq.n	80074f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80074d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	4b11      	ldr	r3, [pc, #68]	; (8007520 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80074da:	4013      	ands	r3, r2
 80074dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074de:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80074e0:	e009      	b.n	80074f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	f043 0220 	orr.w	r2, r3, #32
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80074f4:	e000      	b.n	80074f8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80074f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007500:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007504:	4618      	mov	r0, r3
 8007506:	377c      	adds	r7, #124	; 0x7c
 8007508:	46bd      	mov	sp, r7
 800750a:	bd90      	pop	{r4, r7, pc}
 800750c:	40022000 	.word	0x40022000
 8007510:	40022100 	.word	0x40022100
 8007514:	40022300 	.word	0x40022300
 8007518:	58026300 	.word	0x58026300
 800751c:	58026000 	.word	0x58026000
 8007520:	fffff0e0 	.word	0xfffff0e0

08007524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007534:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <__NVIC_SetPriorityGrouping+0x40>)
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007540:	4013      	ands	r3, r2
 8007542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800754c:	4b06      	ldr	r3, [pc, #24]	; (8007568 <__NVIC_SetPriorityGrouping+0x44>)
 800754e:	4313      	orrs	r3, r2
 8007550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007552:	4a04      	ldr	r2, [pc, #16]	; (8007564 <__NVIC_SetPriorityGrouping+0x40>)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	60d3      	str	r3, [r2, #12]
}
 8007558:	bf00      	nop
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	e000ed00 	.word	0xe000ed00
 8007568:	05fa0000 	.word	0x05fa0000

0800756c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007570:	4b04      	ldr	r3, [pc, #16]	; (8007584 <__NVIC_GetPriorityGrouping+0x18>)
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	0a1b      	lsrs	r3, r3, #8
 8007576:	f003 0307 	and.w	r3, r3, #7
}
 800757a:	4618      	mov	r0, r3
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	e000ed00 	.word	0xe000ed00

08007588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007596:	2b00      	cmp	r3, #0
 8007598:	db0b      	blt.n	80075b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	f003 021f 	and.w	r2, r3, #31
 80075a0:	4907      	ldr	r1, [pc, #28]	; (80075c0 <__NVIC_EnableIRQ+0x38>)
 80075a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	2001      	movs	r0, #1
 80075aa:	fa00 f202 	lsl.w	r2, r0, r2
 80075ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80075b2:	bf00      	nop
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	e000e100 	.word	0xe000e100

080075c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	6039      	str	r1, [r7, #0]
 80075ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80075d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	db0a      	blt.n	80075ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	490c      	ldr	r1, [pc, #48]	; (8007610 <__NVIC_SetPriority+0x4c>)
 80075de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075e2:	0112      	lsls	r2, r2, #4
 80075e4:	b2d2      	uxtb	r2, r2
 80075e6:	440b      	add	r3, r1
 80075e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80075ec:	e00a      	b.n	8007604 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	4908      	ldr	r1, [pc, #32]	; (8007614 <__NVIC_SetPriority+0x50>)
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	3b04      	subs	r3, #4
 80075fc:	0112      	lsls	r2, r2, #4
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	440b      	add	r3, r1
 8007602:	761a      	strb	r2, [r3, #24]
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	e000e100 	.word	0xe000e100
 8007614:	e000ed00 	.word	0xe000ed00

08007618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007618:	b480      	push	{r7}
 800761a:	b089      	sub	sp, #36	; 0x24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f1c3 0307 	rsb	r3, r3, #7
 8007632:	2b04      	cmp	r3, #4
 8007634:	bf28      	it	cs
 8007636:	2304      	movcs	r3, #4
 8007638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	3304      	adds	r3, #4
 800763e:	2b06      	cmp	r3, #6
 8007640:	d902      	bls.n	8007648 <NVIC_EncodePriority+0x30>
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	3b03      	subs	r3, #3
 8007646:	e000      	b.n	800764a <NVIC_EncodePriority+0x32>
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	fa02 f303 	lsl.w	r3, r2, r3
 8007656:	43da      	mvns	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	401a      	ands	r2, r3
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007660:	f04f 31ff 	mov.w	r1, #4294967295
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	fa01 f303 	lsl.w	r3, r1, r3
 800766a:	43d9      	mvns	r1, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007670:	4313      	orrs	r3, r2
         );
}
 8007672:	4618      	mov	r0, r3
 8007674:	3724      	adds	r7, #36	; 0x24
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
	...

08007680 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007684:	f3bf 8f4f 	dsb	sy
}
 8007688:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800768a:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <__NVIC_SystemReset+0x24>)
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007692:	4904      	ldr	r1, [pc, #16]	; (80076a4 <__NVIC_SystemReset+0x24>)
 8007694:	4b04      	ldr	r3, [pc, #16]	; (80076a8 <__NVIC_SystemReset+0x28>)
 8007696:	4313      	orrs	r3, r2
 8007698:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800769a:	f3bf 8f4f 	dsb	sy
}
 800769e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80076a0:	bf00      	nop
 80076a2:	e7fd      	b.n	80076a0 <__NVIC_SystemReset+0x20>
 80076a4:	e000ed00 	.word	0xe000ed00
 80076a8:	05fa0004 	.word	0x05fa0004

080076ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076bc:	d301      	bcc.n	80076c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076be:	2301      	movs	r3, #1
 80076c0:	e00f      	b.n	80076e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076c2:	4a0a      	ldr	r2, [pc, #40]	; (80076ec <SysTick_Config+0x40>)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80076ca:	210f      	movs	r1, #15
 80076cc:	f04f 30ff 	mov.w	r0, #4294967295
 80076d0:	f7ff ff78 	bl	80075c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <SysTick_Config+0x40>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076da:	4b04      	ldr	r3, [pc, #16]	; (80076ec <SysTick_Config+0x40>)
 80076dc:	2207      	movs	r2, #7
 80076de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	e000e010 	.word	0xe000e010

080076f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ff13 	bl	8007524 <__NVIC_SetPriorityGrouping>
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b086      	sub	sp, #24
 800770a:	af00      	add	r7, sp, #0
 800770c:	4603      	mov	r3, r0
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	607a      	str	r2, [r7, #4]
 8007712:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007714:	f7ff ff2a 	bl	800756c <__NVIC_GetPriorityGrouping>
 8007718:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	68b9      	ldr	r1, [r7, #8]
 800771e:	6978      	ldr	r0, [r7, #20]
 8007720:	f7ff ff7a 	bl	8007618 <NVIC_EncodePriority>
 8007724:	4602      	mov	r2, r0
 8007726:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800772a:	4611      	mov	r1, r2
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff ff49 	bl	80075c4 <__NVIC_SetPriority>
}
 8007732:	bf00      	nop
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	4603      	mov	r3, r0
 8007742:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff ff1d 	bl	8007588 <__NVIC_EnableIRQ>
}
 800774e:	bf00      	nop
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800775a:	f7ff ff91 	bl	8007680 <__NVIC_SystemReset>

0800775e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff ffa0 	bl	80076ac <SysTick_Config>
 800776c:	4603      	mov	r3, r0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007780:	f7fe fbae 	bl	8005ee0 <HAL_GetTick>
 8007784:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e316      	b.n	8007dbe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a66      	ldr	r2, [pc, #408]	; (8007930 <HAL_DMA_Init+0x1b8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d04a      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a65      	ldr	r2, [pc, #404]	; (8007934 <HAL_DMA_Init+0x1bc>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d045      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a63      	ldr	r2, [pc, #396]	; (8007938 <HAL_DMA_Init+0x1c0>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d040      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a62      	ldr	r2, [pc, #392]	; (800793c <HAL_DMA_Init+0x1c4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d03b      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a60      	ldr	r2, [pc, #384]	; (8007940 <HAL_DMA_Init+0x1c8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d036      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a5f      	ldr	r2, [pc, #380]	; (8007944 <HAL_DMA_Init+0x1cc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d031      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a5d      	ldr	r2, [pc, #372]	; (8007948 <HAL_DMA_Init+0x1d0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d02c      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a5c      	ldr	r2, [pc, #368]	; (800794c <HAL_DMA_Init+0x1d4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d027      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a5a      	ldr	r2, [pc, #360]	; (8007950 <HAL_DMA_Init+0x1d8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d022      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a59      	ldr	r2, [pc, #356]	; (8007954 <HAL_DMA_Init+0x1dc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d01d      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a57      	ldr	r2, [pc, #348]	; (8007958 <HAL_DMA_Init+0x1e0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d018      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a56      	ldr	r2, [pc, #344]	; (800795c <HAL_DMA_Init+0x1e4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a54      	ldr	r2, [pc, #336]	; (8007960 <HAL_DMA_Init+0x1e8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00e      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a53      	ldr	r2, [pc, #332]	; (8007964 <HAL_DMA_Init+0x1ec>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d009      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a51      	ldr	r2, [pc, #324]	; (8007968 <HAL_DMA_Init+0x1f0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <HAL_DMA_Init+0xb8>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a50      	ldr	r2, [pc, #320]	; (800796c <HAL_DMA_Init+0x1f4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d101      	bne.n	8007834 <HAL_DMA_Init+0xbc>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <HAL_DMA_Init+0xbe>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 813b 	beq.w	8007ab2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a37      	ldr	r2, [pc, #220]	; (8007930 <HAL_DMA_Init+0x1b8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d04a      	beq.n	80078ec <HAL_DMA_Init+0x174>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a36      	ldr	r2, [pc, #216]	; (8007934 <HAL_DMA_Init+0x1bc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d045      	beq.n	80078ec <HAL_DMA_Init+0x174>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a34      	ldr	r2, [pc, #208]	; (8007938 <HAL_DMA_Init+0x1c0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d040      	beq.n	80078ec <HAL_DMA_Init+0x174>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a33      	ldr	r2, [pc, #204]	; (800793c <HAL_DMA_Init+0x1c4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d03b      	beq.n	80078ec <HAL_DMA_Init+0x174>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a31      	ldr	r2, [pc, #196]	; (8007940 <HAL_DMA_Init+0x1c8>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d036      	beq.n	80078ec <HAL_DMA_Init+0x174>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a30      	ldr	r2, [pc, #192]	; (8007944 <HAL_DMA_Init+0x1cc>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d031      	beq.n	80078ec <HAL_DMA_Init+0x174>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a2e      	ldr	r2, [pc, #184]	; (8007948 <HAL_DMA_Init+0x1d0>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d02c      	beq.n	80078ec <HAL_DMA_Init+0x174>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a2d      	ldr	r2, [pc, #180]	; (800794c <HAL_DMA_Init+0x1d4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d027      	beq.n	80078ec <HAL_DMA_Init+0x174>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a2b      	ldr	r2, [pc, #172]	; (8007950 <HAL_DMA_Init+0x1d8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d022      	beq.n	80078ec <HAL_DMA_Init+0x174>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a2a      	ldr	r2, [pc, #168]	; (8007954 <HAL_DMA_Init+0x1dc>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d01d      	beq.n	80078ec <HAL_DMA_Init+0x174>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a28      	ldr	r2, [pc, #160]	; (8007958 <HAL_DMA_Init+0x1e0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d018      	beq.n	80078ec <HAL_DMA_Init+0x174>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a27      	ldr	r2, [pc, #156]	; (800795c <HAL_DMA_Init+0x1e4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d013      	beq.n	80078ec <HAL_DMA_Init+0x174>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a25      	ldr	r2, [pc, #148]	; (8007960 <HAL_DMA_Init+0x1e8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00e      	beq.n	80078ec <HAL_DMA_Init+0x174>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a24      	ldr	r2, [pc, #144]	; (8007964 <HAL_DMA_Init+0x1ec>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d009      	beq.n	80078ec <HAL_DMA_Init+0x174>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a22      	ldr	r2, [pc, #136]	; (8007968 <HAL_DMA_Init+0x1f0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_DMA_Init+0x174>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a21      	ldr	r2, [pc, #132]	; (800796c <HAL_DMA_Init+0x1f4>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d108      	bne.n	80078fe <HAL_DMA_Init+0x186>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0201 	bic.w	r2, r2, #1
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	e007      	b.n	800790e <HAL_DMA_Init+0x196>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0201 	bic.w	r2, r2, #1
 800790c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800790e:	e02f      	b.n	8007970 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007910:	f7fe fae6 	bl	8005ee0 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b05      	cmp	r3, #5
 800791c:	d928      	bls.n	8007970 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2203      	movs	r2, #3
 8007928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e246      	b.n	8007dbe <HAL_DMA_Init+0x646>
 8007930:	40020010 	.word	0x40020010
 8007934:	40020028 	.word	0x40020028
 8007938:	40020040 	.word	0x40020040
 800793c:	40020058 	.word	0x40020058
 8007940:	40020070 	.word	0x40020070
 8007944:	40020088 	.word	0x40020088
 8007948:	400200a0 	.word	0x400200a0
 800794c:	400200b8 	.word	0x400200b8
 8007950:	40020410 	.word	0x40020410
 8007954:	40020428 	.word	0x40020428
 8007958:	40020440 	.word	0x40020440
 800795c:	40020458 	.word	0x40020458
 8007960:	40020470 	.word	0x40020470
 8007964:	40020488 	.word	0x40020488
 8007968:	400204a0 	.word	0x400204a0
 800796c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1c8      	bne.n	8007910 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4b83      	ldr	r3, [pc, #524]	; (8007b98 <HAL_DMA_Init+0x420>)
 800798a:	4013      	ands	r3, r2
 800798c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007996:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d107      	bne.n	80079d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079cc:	4313      	orrs	r3, r2
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80079d4:	4b71      	ldr	r3, [pc, #452]	; (8007b9c <HAL_DMA_Init+0x424>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	4b71      	ldr	r3, [pc, #452]	; (8007ba0 <HAL_DMA_Init+0x428>)
 80079da:	4013      	ands	r3, r2
 80079dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079e0:	d328      	bcc.n	8007a34 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2b28      	cmp	r3, #40	; 0x28
 80079e8:	d903      	bls.n	80079f2 <HAL_DMA_Init+0x27a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	2b2e      	cmp	r3, #46	; 0x2e
 80079f0:	d917      	bls.n	8007a22 <HAL_DMA_Init+0x2aa>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2b3e      	cmp	r3, #62	; 0x3e
 80079f8:	d903      	bls.n	8007a02 <HAL_DMA_Init+0x28a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b42      	cmp	r3, #66	; 0x42
 8007a00:	d90f      	bls.n	8007a22 <HAL_DMA_Init+0x2aa>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b46      	cmp	r3, #70	; 0x46
 8007a08:	d903      	bls.n	8007a12 <HAL_DMA_Init+0x29a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2b48      	cmp	r3, #72	; 0x48
 8007a10:	d907      	bls.n	8007a22 <HAL_DMA_Init+0x2aa>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2b4e      	cmp	r3, #78	; 0x4e
 8007a18:	d905      	bls.n	8007a26 <HAL_DMA_Init+0x2ae>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b52      	cmp	r3, #82	; 0x52
 8007a20:	d801      	bhi.n	8007a26 <HAL_DMA_Init+0x2ae>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <HAL_DMA_Init+0x2b0>
 8007a26:	2300      	movs	r3, #0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a32:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d117      	bne.n	8007a8e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00e      	beq.n	8007a8e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f002 fb31 	bl	800a0d8 <DMA_CheckFifoParam>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d008      	beq.n	8007a8e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2240      	movs	r2, #64	; 0x40
 8007a80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e197      	b.n	8007dbe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f002 fa6c 	bl	8009f74 <DMA_CalcBaseAndBitshift>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa4:	f003 031f 	and.w	r3, r3, #31
 8007aa8:	223f      	movs	r2, #63	; 0x3f
 8007aaa:	409a      	lsls	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	609a      	str	r2, [r3, #8]
 8007ab0:	e0cd      	b.n	8007c4e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a3b      	ldr	r2, [pc, #236]	; (8007ba4 <HAL_DMA_Init+0x42c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d022      	beq.n	8007b02 <HAL_DMA_Init+0x38a>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a39      	ldr	r2, [pc, #228]	; (8007ba8 <HAL_DMA_Init+0x430>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d01d      	beq.n	8007b02 <HAL_DMA_Init+0x38a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a38      	ldr	r2, [pc, #224]	; (8007bac <HAL_DMA_Init+0x434>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d018      	beq.n	8007b02 <HAL_DMA_Init+0x38a>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a36      	ldr	r2, [pc, #216]	; (8007bb0 <HAL_DMA_Init+0x438>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d013      	beq.n	8007b02 <HAL_DMA_Init+0x38a>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a35      	ldr	r2, [pc, #212]	; (8007bb4 <HAL_DMA_Init+0x43c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00e      	beq.n	8007b02 <HAL_DMA_Init+0x38a>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a33      	ldr	r2, [pc, #204]	; (8007bb8 <HAL_DMA_Init+0x440>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d009      	beq.n	8007b02 <HAL_DMA_Init+0x38a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a32      	ldr	r2, [pc, #200]	; (8007bbc <HAL_DMA_Init+0x444>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d004      	beq.n	8007b02 <HAL_DMA_Init+0x38a>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a30      	ldr	r2, [pc, #192]	; (8007bc0 <HAL_DMA_Init+0x448>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d101      	bne.n	8007b06 <HAL_DMA_Init+0x38e>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <HAL_DMA_Init+0x390>
 8007b06:	2300      	movs	r3, #0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 8097 	beq.w	8007c3c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a24      	ldr	r2, [pc, #144]	; (8007ba4 <HAL_DMA_Init+0x42c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d021      	beq.n	8007b5c <HAL_DMA_Init+0x3e4>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a22      	ldr	r2, [pc, #136]	; (8007ba8 <HAL_DMA_Init+0x430>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d01c      	beq.n	8007b5c <HAL_DMA_Init+0x3e4>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a21      	ldr	r2, [pc, #132]	; (8007bac <HAL_DMA_Init+0x434>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d017      	beq.n	8007b5c <HAL_DMA_Init+0x3e4>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <HAL_DMA_Init+0x438>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d012      	beq.n	8007b5c <HAL_DMA_Init+0x3e4>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1e      	ldr	r2, [pc, #120]	; (8007bb4 <HAL_DMA_Init+0x43c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00d      	beq.n	8007b5c <HAL_DMA_Init+0x3e4>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a1c      	ldr	r2, [pc, #112]	; (8007bb8 <HAL_DMA_Init+0x440>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d008      	beq.n	8007b5c <HAL_DMA_Init+0x3e4>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a1b      	ldr	r2, [pc, #108]	; (8007bbc <HAL_DMA_Init+0x444>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d003      	beq.n	8007b5c <HAL_DMA_Init+0x3e4>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a19      	ldr	r2, [pc, #100]	; (8007bc0 <HAL_DMA_Init+0x448>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <HAL_DMA_Init+0x44c>)
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b40      	cmp	r3, #64	; 0x40
 8007b84:	d020      	beq.n	8007bc8 <HAL_DMA_Init+0x450>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	2b80      	cmp	r3, #128	; 0x80
 8007b8c:	d102      	bne.n	8007b94 <HAL_DMA_Init+0x41c>
 8007b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b92:	e01a      	b.n	8007bca <HAL_DMA_Init+0x452>
 8007b94:	2300      	movs	r3, #0
 8007b96:	e018      	b.n	8007bca <HAL_DMA_Init+0x452>
 8007b98:	fe10803f 	.word	0xfe10803f
 8007b9c:	5c001000 	.word	0x5c001000
 8007ba0:	ffff0000 	.word	0xffff0000
 8007ba4:	58025408 	.word	0x58025408
 8007ba8:	5802541c 	.word	0x5802541c
 8007bac:	58025430 	.word	0x58025430
 8007bb0:	58025444 	.word	0x58025444
 8007bb4:	58025458 	.word	0x58025458
 8007bb8:	5802546c 	.word	0x5802546c
 8007bbc:	58025480 	.word	0x58025480
 8007bc0:	58025494 	.word	0x58025494
 8007bc4:	fffe000f 	.word	0xfffe000f
 8007bc8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	68d2      	ldr	r2, [r2, #12]
 8007bce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007bd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007bd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007be0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007be8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007bf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007bf8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	4b6e      	ldr	r3, [pc, #440]	; (8007dc8 <HAL_DMA_Init+0x650>)
 8007c10:	4413      	add	r3, r2
 8007c12:	4a6e      	ldr	r2, [pc, #440]	; (8007dcc <HAL_DMA_Init+0x654>)
 8007c14:	fba2 2303 	umull	r2, r3, r2, r3
 8007c18:	091b      	lsrs	r3, r3, #4
 8007c1a:	009a      	lsls	r2, r3, #2
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f002 f9a7 	bl	8009f74 <DMA_CalcBaseAndBitshift>
 8007c26:	4603      	mov	r3, r0
 8007c28:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	2201      	movs	r2, #1
 8007c34:	409a      	lsls	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	605a      	str	r2, [r3, #4]
 8007c3a:	e008      	b.n	8007c4e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2240      	movs	r2, #64	; 0x40
 8007c40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2203      	movs	r2, #3
 8007c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e0b7      	b.n	8007dbe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a5f      	ldr	r2, [pc, #380]	; (8007dd0 <HAL_DMA_Init+0x658>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d072      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a5d      	ldr	r2, [pc, #372]	; (8007dd4 <HAL_DMA_Init+0x65c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d06d      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a5c      	ldr	r2, [pc, #368]	; (8007dd8 <HAL_DMA_Init+0x660>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d068      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a5a      	ldr	r2, [pc, #360]	; (8007ddc <HAL_DMA_Init+0x664>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d063      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a59      	ldr	r2, [pc, #356]	; (8007de0 <HAL_DMA_Init+0x668>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d05e      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a57      	ldr	r2, [pc, #348]	; (8007de4 <HAL_DMA_Init+0x66c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d059      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a56      	ldr	r2, [pc, #344]	; (8007de8 <HAL_DMA_Init+0x670>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d054      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a54      	ldr	r2, [pc, #336]	; (8007dec <HAL_DMA_Init+0x674>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d04f      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a53      	ldr	r2, [pc, #332]	; (8007df0 <HAL_DMA_Init+0x678>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d04a      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a51      	ldr	r2, [pc, #324]	; (8007df4 <HAL_DMA_Init+0x67c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d045      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a50      	ldr	r2, [pc, #320]	; (8007df8 <HAL_DMA_Init+0x680>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d040      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a4e      	ldr	r2, [pc, #312]	; (8007dfc <HAL_DMA_Init+0x684>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d03b      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a4d      	ldr	r2, [pc, #308]	; (8007e00 <HAL_DMA_Init+0x688>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d036      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a4b      	ldr	r2, [pc, #300]	; (8007e04 <HAL_DMA_Init+0x68c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d031      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a4a      	ldr	r2, [pc, #296]	; (8007e08 <HAL_DMA_Init+0x690>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d02c      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a48      	ldr	r2, [pc, #288]	; (8007e0c <HAL_DMA_Init+0x694>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d027      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a47      	ldr	r2, [pc, #284]	; (8007e10 <HAL_DMA_Init+0x698>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d022      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a45      	ldr	r2, [pc, #276]	; (8007e14 <HAL_DMA_Init+0x69c>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d01d      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a44      	ldr	r2, [pc, #272]	; (8007e18 <HAL_DMA_Init+0x6a0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d018      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a42      	ldr	r2, [pc, #264]	; (8007e1c <HAL_DMA_Init+0x6a4>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d013      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a41      	ldr	r2, [pc, #260]	; (8007e20 <HAL_DMA_Init+0x6a8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00e      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a3f      	ldr	r2, [pc, #252]	; (8007e24 <HAL_DMA_Init+0x6ac>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d009      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a3e      	ldr	r2, [pc, #248]	; (8007e28 <HAL_DMA_Init+0x6b0>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d004      	beq.n	8007d3e <HAL_DMA_Init+0x5c6>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a3c      	ldr	r2, [pc, #240]	; (8007e2c <HAL_DMA_Init+0x6b4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d101      	bne.n	8007d42 <HAL_DMA_Init+0x5ca>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e000      	b.n	8007d44 <HAL_DMA_Init+0x5cc>
 8007d42:	2300      	movs	r3, #0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d032      	beq.n	8007dae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f002 fa41 	bl	800a1d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2b80      	cmp	r3, #128	; 0x80
 8007d54:	d102      	bne.n	8007d5c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d64:	b2d2      	uxtb	r2, r2
 8007d66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d70:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d010      	beq.n	8007d9c <HAL_DMA_Init+0x624>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	2b08      	cmp	r3, #8
 8007d80:	d80c      	bhi.n	8007d9c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f002 fabe 	bl	800a304 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d98:	605a      	str	r2, [r3, #4]
 8007d9a:	e008      	b.n	8007dae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	a7fdabf8 	.word	0xa7fdabf8
 8007dcc:	cccccccd 	.word	0xcccccccd
 8007dd0:	40020010 	.word	0x40020010
 8007dd4:	40020028 	.word	0x40020028
 8007dd8:	40020040 	.word	0x40020040
 8007ddc:	40020058 	.word	0x40020058
 8007de0:	40020070 	.word	0x40020070
 8007de4:	40020088 	.word	0x40020088
 8007de8:	400200a0 	.word	0x400200a0
 8007dec:	400200b8 	.word	0x400200b8
 8007df0:	40020410 	.word	0x40020410
 8007df4:	40020428 	.word	0x40020428
 8007df8:	40020440 	.word	0x40020440
 8007dfc:	40020458 	.word	0x40020458
 8007e00:	40020470 	.word	0x40020470
 8007e04:	40020488 	.word	0x40020488
 8007e08:	400204a0 	.word	0x400204a0
 8007e0c:	400204b8 	.word	0x400204b8
 8007e10:	58025408 	.word	0x58025408
 8007e14:	5802541c 	.word	0x5802541c
 8007e18:	58025430 	.word	0x58025430
 8007e1c:	58025444 	.word	0x58025444
 8007e20:	58025458 	.word	0x58025458
 8007e24:	5802546c 	.word	0x5802546c
 8007e28:	58025480 	.word	0x58025480
 8007e2c:	58025494 	.word	0x58025494

08007e30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e226      	b.n	800829a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_DMA_Start_IT+0x2a>
 8007e56:	2302      	movs	r3, #2
 8007e58:	e21f      	b.n	800829a <HAL_DMA_Start_IT+0x46a>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	f040 820a 	bne.w	8008284 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a68      	ldr	r2, [pc, #416]	; (8008024 <HAL_DMA_Start_IT+0x1f4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d04a      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a66      	ldr	r2, [pc, #408]	; (8008028 <HAL_DMA_Start_IT+0x1f8>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d045      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a65      	ldr	r2, [pc, #404]	; (800802c <HAL_DMA_Start_IT+0x1fc>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d040      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a63      	ldr	r2, [pc, #396]	; (8008030 <HAL_DMA_Start_IT+0x200>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d03b      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a62      	ldr	r2, [pc, #392]	; (8008034 <HAL_DMA_Start_IT+0x204>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d036      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a60      	ldr	r2, [pc, #384]	; (8008038 <HAL_DMA_Start_IT+0x208>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d031      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a5f      	ldr	r2, [pc, #380]	; (800803c <HAL_DMA_Start_IT+0x20c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d02c      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a5d      	ldr	r2, [pc, #372]	; (8008040 <HAL_DMA_Start_IT+0x210>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d027      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a5c      	ldr	r2, [pc, #368]	; (8008044 <HAL_DMA_Start_IT+0x214>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d022      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a5a      	ldr	r2, [pc, #360]	; (8008048 <HAL_DMA_Start_IT+0x218>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d01d      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a59      	ldr	r2, [pc, #356]	; (800804c <HAL_DMA_Start_IT+0x21c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d018      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a57      	ldr	r2, [pc, #348]	; (8008050 <HAL_DMA_Start_IT+0x220>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d013      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a56      	ldr	r2, [pc, #344]	; (8008054 <HAL_DMA_Start_IT+0x224>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00e      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a54      	ldr	r2, [pc, #336]	; (8008058 <HAL_DMA_Start_IT+0x228>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d009      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a53      	ldr	r2, [pc, #332]	; (800805c <HAL_DMA_Start_IT+0x22c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d004      	beq.n	8007f1e <HAL_DMA_Start_IT+0xee>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a51      	ldr	r2, [pc, #324]	; (8008060 <HAL_DMA_Start_IT+0x230>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d108      	bne.n	8007f30 <HAL_DMA_Start_IT+0x100>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0201 	bic.w	r2, r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	e007      	b.n	8007f40 <HAL_DMA_Start_IT+0x110>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0201 	bic.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	68b9      	ldr	r1, [r7, #8]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f001 fe68 	bl	8009c1c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a34      	ldr	r2, [pc, #208]	; (8008024 <HAL_DMA_Start_IT+0x1f4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d04a      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a33      	ldr	r2, [pc, #204]	; (8008028 <HAL_DMA_Start_IT+0x1f8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d045      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a31      	ldr	r2, [pc, #196]	; (800802c <HAL_DMA_Start_IT+0x1fc>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d040      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a30      	ldr	r2, [pc, #192]	; (8008030 <HAL_DMA_Start_IT+0x200>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d03b      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a2e      	ldr	r2, [pc, #184]	; (8008034 <HAL_DMA_Start_IT+0x204>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d036      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a2d      	ldr	r2, [pc, #180]	; (8008038 <HAL_DMA_Start_IT+0x208>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d031      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a2b      	ldr	r2, [pc, #172]	; (800803c <HAL_DMA_Start_IT+0x20c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d02c      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a2a      	ldr	r2, [pc, #168]	; (8008040 <HAL_DMA_Start_IT+0x210>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d027      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a28      	ldr	r2, [pc, #160]	; (8008044 <HAL_DMA_Start_IT+0x214>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d022      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a27      	ldr	r2, [pc, #156]	; (8008048 <HAL_DMA_Start_IT+0x218>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d01d      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a25      	ldr	r2, [pc, #148]	; (800804c <HAL_DMA_Start_IT+0x21c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d018      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a24      	ldr	r2, [pc, #144]	; (8008050 <HAL_DMA_Start_IT+0x220>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d013      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a22      	ldr	r2, [pc, #136]	; (8008054 <HAL_DMA_Start_IT+0x224>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00e      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a21      	ldr	r2, [pc, #132]	; (8008058 <HAL_DMA_Start_IT+0x228>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d009      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1f      	ldr	r2, [pc, #124]	; (800805c <HAL_DMA_Start_IT+0x22c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d004      	beq.n	8007fec <HAL_DMA_Start_IT+0x1bc>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1e      	ldr	r2, [pc, #120]	; (8008060 <HAL_DMA_Start_IT+0x230>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d101      	bne.n	8007ff0 <HAL_DMA_Start_IT+0x1c0>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e000      	b.n	8007ff2 <HAL_DMA_Start_IT+0x1c2>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d036      	beq.n	8008064 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f023 021e 	bic.w	r2, r3, #30
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f042 0216 	orr.w	r2, r2, #22
 8008008:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	2b00      	cmp	r3, #0
 8008010:	d03e      	beq.n	8008090 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 0208 	orr.w	r2, r2, #8
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	e035      	b.n	8008090 <HAL_DMA_Start_IT+0x260>
 8008024:	40020010 	.word	0x40020010
 8008028:	40020028 	.word	0x40020028
 800802c:	40020040 	.word	0x40020040
 8008030:	40020058 	.word	0x40020058
 8008034:	40020070 	.word	0x40020070
 8008038:	40020088 	.word	0x40020088
 800803c:	400200a0 	.word	0x400200a0
 8008040:	400200b8 	.word	0x400200b8
 8008044:	40020410 	.word	0x40020410
 8008048:	40020428 	.word	0x40020428
 800804c:	40020440 	.word	0x40020440
 8008050:	40020458 	.word	0x40020458
 8008054:	40020470 	.word	0x40020470
 8008058:	40020488 	.word	0x40020488
 800805c:	400204a0 	.word	0x400204a0
 8008060:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f023 020e 	bic.w	r2, r3, #14
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 020a 	orr.w	r2, r2, #10
 8008076:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807c:	2b00      	cmp	r3, #0
 800807e:	d007      	beq.n	8008090 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0204 	orr.w	r2, r2, #4
 800808e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a83      	ldr	r2, [pc, #524]	; (80082a4 <HAL_DMA_Start_IT+0x474>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d072      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a82      	ldr	r2, [pc, #520]	; (80082a8 <HAL_DMA_Start_IT+0x478>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d06d      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a80      	ldr	r2, [pc, #512]	; (80082ac <HAL_DMA_Start_IT+0x47c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d068      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a7f      	ldr	r2, [pc, #508]	; (80082b0 <HAL_DMA_Start_IT+0x480>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d063      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a7d      	ldr	r2, [pc, #500]	; (80082b4 <HAL_DMA_Start_IT+0x484>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d05e      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a7c      	ldr	r2, [pc, #496]	; (80082b8 <HAL_DMA_Start_IT+0x488>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d059      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a7a      	ldr	r2, [pc, #488]	; (80082bc <HAL_DMA_Start_IT+0x48c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d054      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a79      	ldr	r2, [pc, #484]	; (80082c0 <HAL_DMA_Start_IT+0x490>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d04f      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a77      	ldr	r2, [pc, #476]	; (80082c4 <HAL_DMA_Start_IT+0x494>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d04a      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a76      	ldr	r2, [pc, #472]	; (80082c8 <HAL_DMA_Start_IT+0x498>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d045      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a74      	ldr	r2, [pc, #464]	; (80082cc <HAL_DMA_Start_IT+0x49c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d040      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a73      	ldr	r2, [pc, #460]	; (80082d0 <HAL_DMA_Start_IT+0x4a0>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d03b      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a71      	ldr	r2, [pc, #452]	; (80082d4 <HAL_DMA_Start_IT+0x4a4>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d036      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a70      	ldr	r2, [pc, #448]	; (80082d8 <HAL_DMA_Start_IT+0x4a8>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d031      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a6e      	ldr	r2, [pc, #440]	; (80082dc <HAL_DMA_Start_IT+0x4ac>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d02c      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a6d      	ldr	r2, [pc, #436]	; (80082e0 <HAL_DMA_Start_IT+0x4b0>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d027      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a6b      	ldr	r2, [pc, #428]	; (80082e4 <HAL_DMA_Start_IT+0x4b4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d022      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a6a      	ldr	r2, [pc, #424]	; (80082e8 <HAL_DMA_Start_IT+0x4b8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d01d      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a68      	ldr	r2, [pc, #416]	; (80082ec <HAL_DMA_Start_IT+0x4bc>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d018      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a67      	ldr	r2, [pc, #412]	; (80082f0 <HAL_DMA_Start_IT+0x4c0>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d013      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a65      	ldr	r2, [pc, #404]	; (80082f4 <HAL_DMA_Start_IT+0x4c4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00e      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a64      	ldr	r2, [pc, #400]	; (80082f8 <HAL_DMA_Start_IT+0x4c8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d009      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a62      	ldr	r2, [pc, #392]	; (80082fc <HAL_DMA_Start_IT+0x4cc>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d004      	beq.n	8008180 <HAL_DMA_Start_IT+0x350>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a61      	ldr	r2, [pc, #388]	; (8008300 <HAL_DMA_Start_IT+0x4d0>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d101      	bne.n	8008184 <HAL_DMA_Start_IT+0x354>
 8008180:	2301      	movs	r3, #1
 8008182:	e000      	b.n	8008186 <HAL_DMA_Start_IT+0x356>
 8008184:	2300      	movs	r3, #0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d01a      	beq.n	80081c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a37      	ldr	r2, [pc, #220]	; (80082a4 <HAL_DMA_Start_IT+0x474>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d04a      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a36      	ldr	r2, [pc, #216]	; (80082a8 <HAL_DMA_Start_IT+0x478>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d045      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a34      	ldr	r2, [pc, #208]	; (80082ac <HAL_DMA_Start_IT+0x47c>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d040      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a33      	ldr	r2, [pc, #204]	; (80082b0 <HAL_DMA_Start_IT+0x480>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d03b      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a31      	ldr	r2, [pc, #196]	; (80082b4 <HAL_DMA_Start_IT+0x484>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d036      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a30      	ldr	r2, [pc, #192]	; (80082b8 <HAL_DMA_Start_IT+0x488>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d031      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a2e      	ldr	r2, [pc, #184]	; (80082bc <HAL_DMA_Start_IT+0x48c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d02c      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a2d      	ldr	r2, [pc, #180]	; (80082c0 <HAL_DMA_Start_IT+0x490>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d027      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a2b      	ldr	r2, [pc, #172]	; (80082c4 <HAL_DMA_Start_IT+0x494>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d022      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a2a      	ldr	r2, [pc, #168]	; (80082c8 <HAL_DMA_Start_IT+0x498>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d01d      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a28      	ldr	r2, [pc, #160]	; (80082cc <HAL_DMA_Start_IT+0x49c>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d018      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a27      	ldr	r2, [pc, #156]	; (80082d0 <HAL_DMA_Start_IT+0x4a0>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d013      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a25      	ldr	r2, [pc, #148]	; (80082d4 <HAL_DMA_Start_IT+0x4a4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00e      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a24      	ldr	r2, [pc, #144]	; (80082d8 <HAL_DMA_Start_IT+0x4a8>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d009      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a22      	ldr	r2, [pc, #136]	; (80082dc <HAL_DMA_Start_IT+0x4ac>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d004      	beq.n	8008260 <HAL_DMA_Start_IT+0x430>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a21      	ldr	r2, [pc, #132]	; (80082e0 <HAL_DMA_Start_IT+0x4b0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d108      	bne.n	8008272 <HAL_DMA_Start_IT+0x442>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f042 0201 	orr.w	r2, r2, #1
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	e012      	b.n	8008298 <HAL_DMA_Start_IT+0x468>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0201 	orr.w	r2, r2, #1
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	e009      	b.n	8008298 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008292:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008298:	7dfb      	ldrb	r3, [r7, #23]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	40020010 	.word	0x40020010
 80082a8:	40020028 	.word	0x40020028
 80082ac:	40020040 	.word	0x40020040
 80082b0:	40020058 	.word	0x40020058
 80082b4:	40020070 	.word	0x40020070
 80082b8:	40020088 	.word	0x40020088
 80082bc:	400200a0 	.word	0x400200a0
 80082c0:	400200b8 	.word	0x400200b8
 80082c4:	40020410 	.word	0x40020410
 80082c8:	40020428 	.word	0x40020428
 80082cc:	40020440 	.word	0x40020440
 80082d0:	40020458 	.word	0x40020458
 80082d4:	40020470 	.word	0x40020470
 80082d8:	40020488 	.word	0x40020488
 80082dc:	400204a0 	.word	0x400204a0
 80082e0:	400204b8 	.word	0x400204b8
 80082e4:	58025408 	.word	0x58025408
 80082e8:	5802541c 	.word	0x5802541c
 80082ec:	58025430 	.word	0x58025430
 80082f0:	58025444 	.word	0x58025444
 80082f4:	58025458 	.word	0x58025458
 80082f8:	5802546c 	.word	0x5802546c
 80082fc:	58025480 	.word	0x58025480
 8008300:	58025494 	.word	0x58025494

08008304 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800830c:	f7fd fde8 	bl	8005ee0 <HAL_GetTick>
 8008310:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e2dc      	b.n	80088d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b02      	cmp	r3, #2
 8008326:	d008      	beq.n	800833a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2280      	movs	r2, #128	; 0x80
 800832c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e2cd      	b.n	80088d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a76      	ldr	r2, [pc, #472]	; (8008518 <HAL_DMA_Abort+0x214>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d04a      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a74      	ldr	r2, [pc, #464]	; (800851c <HAL_DMA_Abort+0x218>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d045      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a73      	ldr	r2, [pc, #460]	; (8008520 <HAL_DMA_Abort+0x21c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d040      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a71      	ldr	r2, [pc, #452]	; (8008524 <HAL_DMA_Abort+0x220>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d03b      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a70      	ldr	r2, [pc, #448]	; (8008528 <HAL_DMA_Abort+0x224>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d036      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a6e      	ldr	r2, [pc, #440]	; (800852c <HAL_DMA_Abort+0x228>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d031      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a6d      	ldr	r2, [pc, #436]	; (8008530 <HAL_DMA_Abort+0x22c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d02c      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a6b      	ldr	r2, [pc, #428]	; (8008534 <HAL_DMA_Abort+0x230>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d027      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a6a      	ldr	r2, [pc, #424]	; (8008538 <HAL_DMA_Abort+0x234>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d022      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a68      	ldr	r2, [pc, #416]	; (800853c <HAL_DMA_Abort+0x238>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d01d      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a67      	ldr	r2, [pc, #412]	; (8008540 <HAL_DMA_Abort+0x23c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d018      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a65      	ldr	r2, [pc, #404]	; (8008544 <HAL_DMA_Abort+0x240>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d013      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a64      	ldr	r2, [pc, #400]	; (8008548 <HAL_DMA_Abort+0x244>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00e      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a62      	ldr	r2, [pc, #392]	; (800854c <HAL_DMA_Abort+0x248>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d009      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a61      	ldr	r2, [pc, #388]	; (8008550 <HAL_DMA_Abort+0x24c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d004      	beq.n	80083da <HAL_DMA_Abort+0xd6>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a5f      	ldr	r2, [pc, #380]	; (8008554 <HAL_DMA_Abort+0x250>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d101      	bne.n	80083de <HAL_DMA_Abort+0xda>
 80083da:	2301      	movs	r3, #1
 80083dc:	e000      	b.n	80083e0 <HAL_DMA_Abort+0xdc>
 80083de:	2300      	movs	r3, #0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d013      	beq.n	800840c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 021e 	bic.w	r2, r2, #30
 80083f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	695a      	ldr	r2, [r3, #20]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008402:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	e00a      	b.n	8008422 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 020e 	bic.w	r2, r2, #14
 800841a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a3c      	ldr	r2, [pc, #240]	; (8008518 <HAL_DMA_Abort+0x214>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d072      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a3a      	ldr	r2, [pc, #232]	; (800851c <HAL_DMA_Abort+0x218>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d06d      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a39      	ldr	r2, [pc, #228]	; (8008520 <HAL_DMA_Abort+0x21c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d068      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a37      	ldr	r2, [pc, #220]	; (8008524 <HAL_DMA_Abort+0x220>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d063      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a36      	ldr	r2, [pc, #216]	; (8008528 <HAL_DMA_Abort+0x224>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d05e      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a34      	ldr	r2, [pc, #208]	; (800852c <HAL_DMA_Abort+0x228>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d059      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a33      	ldr	r2, [pc, #204]	; (8008530 <HAL_DMA_Abort+0x22c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d054      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a31      	ldr	r2, [pc, #196]	; (8008534 <HAL_DMA_Abort+0x230>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d04f      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a30      	ldr	r2, [pc, #192]	; (8008538 <HAL_DMA_Abort+0x234>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d04a      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a2e      	ldr	r2, [pc, #184]	; (800853c <HAL_DMA_Abort+0x238>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d045      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a2d      	ldr	r2, [pc, #180]	; (8008540 <HAL_DMA_Abort+0x23c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d040      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a2b      	ldr	r2, [pc, #172]	; (8008544 <HAL_DMA_Abort+0x240>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d03b      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a2a      	ldr	r2, [pc, #168]	; (8008548 <HAL_DMA_Abort+0x244>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d036      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a28      	ldr	r2, [pc, #160]	; (800854c <HAL_DMA_Abort+0x248>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d031      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a27      	ldr	r2, [pc, #156]	; (8008550 <HAL_DMA_Abort+0x24c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d02c      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a25      	ldr	r2, [pc, #148]	; (8008554 <HAL_DMA_Abort+0x250>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d027      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a24      	ldr	r2, [pc, #144]	; (8008558 <HAL_DMA_Abort+0x254>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d022      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a22      	ldr	r2, [pc, #136]	; (800855c <HAL_DMA_Abort+0x258>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d01d      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a21      	ldr	r2, [pc, #132]	; (8008560 <HAL_DMA_Abort+0x25c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d018      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a1f      	ldr	r2, [pc, #124]	; (8008564 <HAL_DMA_Abort+0x260>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d013      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <HAL_DMA_Abort+0x264>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d00e      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a1c      	ldr	r2, [pc, #112]	; (800856c <HAL_DMA_Abort+0x268>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d009      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1b      	ldr	r2, [pc, #108]	; (8008570 <HAL_DMA_Abort+0x26c>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d004      	beq.n	8008512 <HAL_DMA_Abort+0x20e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a19      	ldr	r2, [pc, #100]	; (8008574 <HAL_DMA_Abort+0x270>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d132      	bne.n	8008578 <HAL_DMA_Abort+0x274>
 8008512:	2301      	movs	r3, #1
 8008514:	e031      	b.n	800857a <HAL_DMA_Abort+0x276>
 8008516:	bf00      	nop
 8008518:	40020010 	.word	0x40020010
 800851c:	40020028 	.word	0x40020028
 8008520:	40020040 	.word	0x40020040
 8008524:	40020058 	.word	0x40020058
 8008528:	40020070 	.word	0x40020070
 800852c:	40020088 	.word	0x40020088
 8008530:	400200a0 	.word	0x400200a0
 8008534:	400200b8 	.word	0x400200b8
 8008538:	40020410 	.word	0x40020410
 800853c:	40020428 	.word	0x40020428
 8008540:	40020440 	.word	0x40020440
 8008544:	40020458 	.word	0x40020458
 8008548:	40020470 	.word	0x40020470
 800854c:	40020488 	.word	0x40020488
 8008550:	400204a0 	.word	0x400204a0
 8008554:	400204b8 	.word	0x400204b8
 8008558:	58025408 	.word	0x58025408
 800855c:	5802541c 	.word	0x5802541c
 8008560:	58025430 	.word	0x58025430
 8008564:	58025444 	.word	0x58025444
 8008568:	58025458 	.word	0x58025458
 800856c:	5802546c 	.word	0x5802546c
 8008570:	58025480 	.word	0x58025480
 8008574:	58025494 	.word	0x58025494
 8008578:	2300      	movs	r3, #0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d007      	beq.n	800858e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800858c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a6d      	ldr	r2, [pc, #436]	; (8008748 <HAL_DMA_Abort+0x444>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d04a      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a6b      	ldr	r2, [pc, #428]	; (800874c <HAL_DMA_Abort+0x448>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d045      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a6a      	ldr	r2, [pc, #424]	; (8008750 <HAL_DMA_Abort+0x44c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d040      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a68      	ldr	r2, [pc, #416]	; (8008754 <HAL_DMA_Abort+0x450>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d03b      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a67      	ldr	r2, [pc, #412]	; (8008758 <HAL_DMA_Abort+0x454>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d036      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a65      	ldr	r2, [pc, #404]	; (800875c <HAL_DMA_Abort+0x458>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d031      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a64      	ldr	r2, [pc, #400]	; (8008760 <HAL_DMA_Abort+0x45c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d02c      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a62      	ldr	r2, [pc, #392]	; (8008764 <HAL_DMA_Abort+0x460>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d027      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a61      	ldr	r2, [pc, #388]	; (8008768 <HAL_DMA_Abort+0x464>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d022      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a5f      	ldr	r2, [pc, #380]	; (800876c <HAL_DMA_Abort+0x468>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d01d      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a5e      	ldr	r2, [pc, #376]	; (8008770 <HAL_DMA_Abort+0x46c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d018      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a5c      	ldr	r2, [pc, #368]	; (8008774 <HAL_DMA_Abort+0x470>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d013      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a5b      	ldr	r2, [pc, #364]	; (8008778 <HAL_DMA_Abort+0x474>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00e      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a59      	ldr	r2, [pc, #356]	; (800877c <HAL_DMA_Abort+0x478>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d009      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a58      	ldr	r2, [pc, #352]	; (8008780 <HAL_DMA_Abort+0x47c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d004      	beq.n	800862e <HAL_DMA_Abort+0x32a>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a56      	ldr	r2, [pc, #344]	; (8008784 <HAL_DMA_Abort+0x480>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d108      	bne.n	8008640 <HAL_DMA_Abort+0x33c>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0201 	bic.w	r2, r2, #1
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	e007      	b.n	8008650 <HAL_DMA_Abort+0x34c>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 0201 	bic.w	r2, r2, #1
 800864e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008650:	e013      	b.n	800867a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008652:	f7fd fc45 	bl	8005ee0 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	2b05      	cmp	r3, #5
 800865e:	d90c      	bls.n	800867a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2203      	movs	r2, #3
 8008672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e12d      	b.n	80088d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e5      	bne.n	8008652 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a2f      	ldr	r2, [pc, #188]	; (8008748 <HAL_DMA_Abort+0x444>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d04a      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a2d      	ldr	r2, [pc, #180]	; (800874c <HAL_DMA_Abort+0x448>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d045      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a2c      	ldr	r2, [pc, #176]	; (8008750 <HAL_DMA_Abort+0x44c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d040      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a2a      	ldr	r2, [pc, #168]	; (8008754 <HAL_DMA_Abort+0x450>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d03b      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a29      	ldr	r2, [pc, #164]	; (8008758 <HAL_DMA_Abort+0x454>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d036      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a27      	ldr	r2, [pc, #156]	; (800875c <HAL_DMA_Abort+0x458>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d031      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a26      	ldr	r2, [pc, #152]	; (8008760 <HAL_DMA_Abort+0x45c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d02c      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a24      	ldr	r2, [pc, #144]	; (8008764 <HAL_DMA_Abort+0x460>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d027      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a23      	ldr	r2, [pc, #140]	; (8008768 <HAL_DMA_Abort+0x464>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d022      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a21      	ldr	r2, [pc, #132]	; (800876c <HAL_DMA_Abort+0x468>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01d      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a20      	ldr	r2, [pc, #128]	; (8008770 <HAL_DMA_Abort+0x46c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d018      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1e      	ldr	r2, [pc, #120]	; (8008774 <HAL_DMA_Abort+0x470>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d013      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a1d      	ldr	r2, [pc, #116]	; (8008778 <HAL_DMA_Abort+0x474>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00e      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a1b      	ldr	r2, [pc, #108]	; (800877c <HAL_DMA_Abort+0x478>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d009      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a1a      	ldr	r2, [pc, #104]	; (8008780 <HAL_DMA_Abort+0x47c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d004      	beq.n	8008726 <HAL_DMA_Abort+0x422>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a18      	ldr	r2, [pc, #96]	; (8008784 <HAL_DMA_Abort+0x480>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d101      	bne.n	800872a <HAL_DMA_Abort+0x426>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <HAL_DMA_Abort+0x428>
 800872a:	2300      	movs	r3, #0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d02b      	beq.n	8008788 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008734:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800873a:	f003 031f 	and.w	r3, r3, #31
 800873e:	223f      	movs	r2, #63	; 0x3f
 8008740:	409a      	lsls	r2, r3
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	609a      	str	r2, [r3, #8]
 8008746:	e02a      	b.n	800879e <HAL_DMA_Abort+0x49a>
 8008748:	40020010 	.word	0x40020010
 800874c:	40020028 	.word	0x40020028
 8008750:	40020040 	.word	0x40020040
 8008754:	40020058 	.word	0x40020058
 8008758:	40020070 	.word	0x40020070
 800875c:	40020088 	.word	0x40020088
 8008760:	400200a0 	.word	0x400200a0
 8008764:	400200b8 	.word	0x400200b8
 8008768:	40020410 	.word	0x40020410
 800876c:	40020428 	.word	0x40020428
 8008770:	40020440 	.word	0x40020440
 8008774:	40020458 	.word	0x40020458
 8008778:	40020470 	.word	0x40020470
 800877c:	40020488 	.word	0x40020488
 8008780:	400204a0 	.word	0x400204a0
 8008784:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008792:	f003 031f 	and.w	r3, r3, #31
 8008796:	2201      	movs	r2, #1
 8008798:	409a      	lsls	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a4f      	ldr	r2, [pc, #316]	; (80088e0 <HAL_DMA_Abort+0x5dc>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d072      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a4d      	ldr	r2, [pc, #308]	; (80088e4 <HAL_DMA_Abort+0x5e0>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d06d      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a4c      	ldr	r2, [pc, #304]	; (80088e8 <HAL_DMA_Abort+0x5e4>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d068      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a4a      	ldr	r2, [pc, #296]	; (80088ec <HAL_DMA_Abort+0x5e8>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d063      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a49      	ldr	r2, [pc, #292]	; (80088f0 <HAL_DMA_Abort+0x5ec>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d05e      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a47      	ldr	r2, [pc, #284]	; (80088f4 <HAL_DMA_Abort+0x5f0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d059      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a46      	ldr	r2, [pc, #280]	; (80088f8 <HAL_DMA_Abort+0x5f4>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d054      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a44      	ldr	r2, [pc, #272]	; (80088fc <HAL_DMA_Abort+0x5f8>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d04f      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a43      	ldr	r2, [pc, #268]	; (8008900 <HAL_DMA_Abort+0x5fc>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d04a      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a41      	ldr	r2, [pc, #260]	; (8008904 <HAL_DMA_Abort+0x600>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d045      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a40      	ldr	r2, [pc, #256]	; (8008908 <HAL_DMA_Abort+0x604>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d040      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a3e      	ldr	r2, [pc, #248]	; (800890c <HAL_DMA_Abort+0x608>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d03b      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a3d      	ldr	r2, [pc, #244]	; (8008910 <HAL_DMA_Abort+0x60c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d036      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a3b      	ldr	r2, [pc, #236]	; (8008914 <HAL_DMA_Abort+0x610>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d031      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a3a      	ldr	r2, [pc, #232]	; (8008918 <HAL_DMA_Abort+0x614>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d02c      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a38      	ldr	r2, [pc, #224]	; (800891c <HAL_DMA_Abort+0x618>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d027      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a37      	ldr	r2, [pc, #220]	; (8008920 <HAL_DMA_Abort+0x61c>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d022      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a35      	ldr	r2, [pc, #212]	; (8008924 <HAL_DMA_Abort+0x620>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d01d      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a34      	ldr	r2, [pc, #208]	; (8008928 <HAL_DMA_Abort+0x624>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d018      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a32      	ldr	r2, [pc, #200]	; (800892c <HAL_DMA_Abort+0x628>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d013      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a31      	ldr	r2, [pc, #196]	; (8008930 <HAL_DMA_Abort+0x62c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d00e      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a2f      	ldr	r2, [pc, #188]	; (8008934 <HAL_DMA_Abort+0x630>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d009      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a2e      	ldr	r2, [pc, #184]	; (8008938 <HAL_DMA_Abort+0x634>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d004      	beq.n	800888e <HAL_DMA_Abort+0x58a>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a2c      	ldr	r2, [pc, #176]	; (800893c <HAL_DMA_Abort+0x638>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d101      	bne.n	8008892 <HAL_DMA_Abort+0x58e>
 800888e:	2301      	movs	r3, #1
 8008890:	e000      	b.n	8008894 <HAL_DMA_Abort+0x590>
 8008892:	2300      	movs	r3, #0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d015      	beq.n	80088c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80088a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00c      	beq.n	80088c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	40020010 	.word	0x40020010
 80088e4:	40020028 	.word	0x40020028
 80088e8:	40020040 	.word	0x40020040
 80088ec:	40020058 	.word	0x40020058
 80088f0:	40020070 	.word	0x40020070
 80088f4:	40020088 	.word	0x40020088
 80088f8:	400200a0 	.word	0x400200a0
 80088fc:	400200b8 	.word	0x400200b8
 8008900:	40020410 	.word	0x40020410
 8008904:	40020428 	.word	0x40020428
 8008908:	40020440 	.word	0x40020440
 800890c:	40020458 	.word	0x40020458
 8008910:	40020470 	.word	0x40020470
 8008914:	40020488 	.word	0x40020488
 8008918:	400204a0 	.word	0x400204a0
 800891c:	400204b8 	.word	0x400204b8
 8008920:	58025408 	.word	0x58025408
 8008924:	5802541c 	.word	0x5802541c
 8008928:	58025430 	.word	0x58025430
 800892c:	58025444 	.word	0x58025444
 8008930:	58025458 	.word	0x58025458
 8008934:	5802546c 	.word	0x5802546c
 8008938:	58025480 	.word	0x58025480
 800893c:	58025494 	.word	0x58025494

08008940 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e205      	b.n	8008d5e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b02      	cmp	r3, #2
 800895c:	d004      	beq.n	8008968 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2280      	movs	r2, #128	; 0x80
 8008962:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e1fa      	b.n	8008d5e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a8c      	ldr	r2, [pc, #560]	; (8008ba0 <HAL_DMA_Abort_IT+0x260>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d04a      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a8b      	ldr	r2, [pc, #556]	; (8008ba4 <HAL_DMA_Abort_IT+0x264>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d045      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a89      	ldr	r2, [pc, #548]	; (8008ba8 <HAL_DMA_Abort_IT+0x268>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d040      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a88      	ldr	r2, [pc, #544]	; (8008bac <HAL_DMA_Abort_IT+0x26c>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d03b      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a86      	ldr	r2, [pc, #536]	; (8008bb0 <HAL_DMA_Abort_IT+0x270>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d036      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a85      	ldr	r2, [pc, #532]	; (8008bb4 <HAL_DMA_Abort_IT+0x274>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d031      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a83      	ldr	r2, [pc, #524]	; (8008bb8 <HAL_DMA_Abort_IT+0x278>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d02c      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a82      	ldr	r2, [pc, #520]	; (8008bbc <HAL_DMA_Abort_IT+0x27c>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d027      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a80      	ldr	r2, [pc, #512]	; (8008bc0 <HAL_DMA_Abort_IT+0x280>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d022      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a7f      	ldr	r2, [pc, #508]	; (8008bc4 <HAL_DMA_Abort_IT+0x284>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d01d      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a7d      	ldr	r2, [pc, #500]	; (8008bc8 <HAL_DMA_Abort_IT+0x288>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d018      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a7c      	ldr	r2, [pc, #496]	; (8008bcc <HAL_DMA_Abort_IT+0x28c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d013      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a7a      	ldr	r2, [pc, #488]	; (8008bd0 <HAL_DMA_Abort_IT+0x290>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d00e      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a79      	ldr	r2, [pc, #484]	; (8008bd4 <HAL_DMA_Abort_IT+0x294>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d009      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a77      	ldr	r2, [pc, #476]	; (8008bd8 <HAL_DMA_Abort_IT+0x298>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d004      	beq.n	8008a08 <HAL_DMA_Abort_IT+0xc8>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a76      	ldr	r2, [pc, #472]	; (8008bdc <HAL_DMA_Abort_IT+0x29c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d101      	bne.n	8008a0c <HAL_DMA_Abort_IT+0xcc>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e000      	b.n	8008a0e <HAL_DMA_Abort_IT+0xce>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d065      	beq.n	8008ade <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2204      	movs	r2, #4
 8008a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a60      	ldr	r2, [pc, #384]	; (8008ba0 <HAL_DMA_Abort_IT+0x260>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d04a      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a5e      	ldr	r2, [pc, #376]	; (8008ba4 <HAL_DMA_Abort_IT+0x264>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d045      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a5d      	ldr	r2, [pc, #372]	; (8008ba8 <HAL_DMA_Abort_IT+0x268>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d040      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a5b      	ldr	r2, [pc, #364]	; (8008bac <HAL_DMA_Abort_IT+0x26c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d03b      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a5a      	ldr	r2, [pc, #360]	; (8008bb0 <HAL_DMA_Abort_IT+0x270>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d036      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a58      	ldr	r2, [pc, #352]	; (8008bb4 <HAL_DMA_Abort_IT+0x274>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d031      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a57      	ldr	r2, [pc, #348]	; (8008bb8 <HAL_DMA_Abort_IT+0x278>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d02c      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a55      	ldr	r2, [pc, #340]	; (8008bbc <HAL_DMA_Abort_IT+0x27c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d027      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a54      	ldr	r2, [pc, #336]	; (8008bc0 <HAL_DMA_Abort_IT+0x280>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d022      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a52      	ldr	r2, [pc, #328]	; (8008bc4 <HAL_DMA_Abort_IT+0x284>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d01d      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a51      	ldr	r2, [pc, #324]	; (8008bc8 <HAL_DMA_Abort_IT+0x288>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d018      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a4f      	ldr	r2, [pc, #316]	; (8008bcc <HAL_DMA_Abort_IT+0x28c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d013      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a4e      	ldr	r2, [pc, #312]	; (8008bd0 <HAL_DMA_Abort_IT+0x290>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d00e      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a4c      	ldr	r2, [pc, #304]	; (8008bd4 <HAL_DMA_Abort_IT+0x294>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d009      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a4b      	ldr	r2, [pc, #300]	; (8008bd8 <HAL_DMA_Abort_IT+0x298>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d004      	beq.n	8008aba <HAL_DMA_Abort_IT+0x17a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a49      	ldr	r2, [pc, #292]	; (8008bdc <HAL_DMA_Abort_IT+0x29c>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d108      	bne.n	8008acc <HAL_DMA_Abort_IT+0x18c>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f022 0201 	bic.w	r2, r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	e147      	b.n	8008d5c <HAL_DMA_Abort_IT+0x41c>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 0201 	bic.w	r2, r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	e13e      	b.n	8008d5c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 020e 	bic.w	r2, r2, #14
 8008aec:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a2b      	ldr	r2, [pc, #172]	; (8008ba0 <HAL_DMA_Abort_IT+0x260>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d04a      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a29      	ldr	r2, [pc, #164]	; (8008ba4 <HAL_DMA_Abort_IT+0x264>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d045      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a28      	ldr	r2, [pc, #160]	; (8008ba8 <HAL_DMA_Abort_IT+0x268>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d040      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a26      	ldr	r2, [pc, #152]	; (8008bac <HAL_DMA_Abort_IT+0x26c>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d03b      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a25      	ldr	r2, [pc, #148]	; (8008bb0 <HAL_DMA_Abort_IT+0x270>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d036      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a23      	ldr	r2, [pc, #140]	; (8008bb4 <HAL_DMA_Abort_IT+0x274>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d031      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a22      	ldr	r2, [pc, #136]	; (8008bb8 <HAL_DMA_Abort_IT+0x278>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d02c      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a20      	ldr	r2, [pc, #128]	; (8008bbc <HAL_DMA_Abort_IT+0x27c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d027      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a1f      	ldr	r2, [pc, #124]	; (8008bc0 <HAL_DMA_Abort_IT+0x280>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d022      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a1d      	ldr	r2, [pc, #116]	; (8008bc4 <HAL_DMA_Abort_IT+0x284>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d01d      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1c      	ldr	r2, [pc, #112]	; (8008bc8 <HAL_DMA_Abort_IT+0x288>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d018      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a1a      	ldr	r2, [pc, #104]	; (8008bcc <HAL_DMA_Abort_IT+0x28c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d013      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a19      	ldr	r2, [pc, #100]	; (8008bd0 <HAL_DMA_Abort_IT+0x290>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d00e      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a17      	ldr	r2, [pc, #92]	; (8008bd4 <HAL_DMA_Abort_IT+0x294>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d009      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a16      	ldr	r2, [pc, #88]	; (8008bd8 <HAL_DMA_Abort_IT+0x298>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d004      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x24e>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a14      	ldr	r2, [pc, #80]	; (8008bdc <HAL_DMA_Abort_IT+0x29c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d128      	bne.n	8008be0 <HAL_DMA_Abort_IT+0x2a0>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0201 	bic.w	r2, r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	e027      	b.n	8008bf0 <HAL_DMA_Abort_IT+0x2b0>
 8008ba0:	40020010 	.word	0x40020010
 8008ba4:	40020028 	.word	0x40020028
 8008ba8:	40020040 	.word	0x40020040
 8008bac:	40020058 	.word	0x40020058
 8008bb0:	40020070 	.word	0x40020070
 8008bb4:	40020088 	.word	0x40020088
 8008bb8:	400200a0 	.word	0x400200a0
 8008bbc:	400200b8 	.word	0x400200b8
 8008bc0:	40020410 	.word	0x40020410
 8008bc4:	40020428 	.word	0x40020428
 8008bc8:	40020440 	.word	0x40020440
 8008bcc:	40020458 	.word	0x40020458
 8008bd0:	40020470 	.word	0x40020470
 8008bd4:	40020488 	.word	0x40020488
 8008bd8:	400204a0 	.word	0x400204a0
 8008bdc:	400204b8 	.word	0x400204b8
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0201 	bic.w	r2, r2, #1
 8008bee:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a5c      	ldr	r2, [pc, #368]	; (8008d68 <HAL_DMA_Abort_IT+0x428>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d072      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a5b      	ldr	r2, [pc, #364]	; (8008d6c <HAL_DMA_Abort_IT+0x42c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d06d      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a59      	ldr	r2, [pc, #356]	; (8008d70 <HAL_DMA_Abort_IT+0x430>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d068      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a58      	ldr	r2, [pc, #352]	; (8008d74 <HAL_DMA_Abort_IT+0x434>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d063      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a56      	ldr	r2, [pc, #344]	; (8008d78 <HAL_DMA_Abort_IT+0x438>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d05e      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a55      	ldr	r2, [pc, #340]	; (8008d7c <HAL_DMA_Abort_IT+0x43c>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d059      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a53      	ldr	r2, [pc, #332]	; (8008d80 <HAL_DMA_Abort_IT+0x440>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d054      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a52      	ldr	r2, [pc, #328]	; (8008d84 <HAL_DMA_Abort_IT+0x444>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d04f      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a50      	ldr	r2, [pc, #320]	; (8008d88 <HAL_DMA_Abort_IT+0x448>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d04a      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a4f      	ldr	r2, [pc, #316]	; (8008d8c <HAL_DMA_Abort_IT+0x44c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d045      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a4d      	ldr	r2, [pc, #308]	; (8008d90 <HAL_DMA_Abort_IT+0x450>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d040      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a4c      	ldr	r2, [pc, #304]	; (8008d94 <HAL_DMA_Abort_IT+0x454>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d03b      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a4a      	ldr	r2, [pc, #296]	; (8008d98 <HAL_DMA_Abort_IT+0x458>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d036      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a49      	ldr	r2, [pc, #292]	; (8008d9c <HAL_DMA_Abort_IT+0x45c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d031      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a47      	ldr	r2, [pc, #284]	; (8008da0 <HAL_DMA_Abort_IT+0x460>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d02c      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a46      	ldr	r2, [pc, #280]	; (8008da4 <HAL_DMA_Abort_IT+0x464>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d027      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a44      	ldr	r2, [pc, #272]	; (8008da8 <HAL_DMA_Abort_IT+0x468>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d022      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a43      	ldr	r2, [pc, #268]	; (8008dac <HAL_DMA_Abort_IT+0x46c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d01d      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a41      	ldr	r2, [pc, #260]	; (8008db0 <HAL_DMA_Abort_IT+0x470>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d018      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a40      	ldr	r2, [pc, #256]	; (8008db4 <HAL_DMA_Abort_IT+0x474>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d013      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a3e      	ldr	r2, [pc, #248]	; (8008db8 <HAL_DMA_Abort_IT+0x478>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00e      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a3d      	ldr	r2, [pc, #244]	; (8008dbc <HAL_DMA_Abort_IT+0x47c>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d009      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a3b      	ldr	r2, [pc, #236]	; (8008dc0 <HAL_DMA_Abort_IT+0x480>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d004      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x3a0>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a3a      	ldr	r2, [pc, #232]	; (8008dc4 <HAL_DMA_Abort_IT+0x484>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d101      	bne.n	8008ce4 <HAL_DMA_Abort_IT+0x3a4>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e000      	b.n	8008ce6 <HAL_DMA_Abort_IT+0x3a6>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d028      	beq.n	8008d3c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cf8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d04:	f003 031f 	and.w	r3, r3, #31
 8008d08:	2201      	movs	r2, #1
 8008d0a:	409a      	lsls	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008d18:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00c      	beq.n	8008d3c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d30:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008d3a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	40020010 	.word	0x40020010
 8008d6c:	40020028 	.word	0x40020028
 8008d70:	40020040 	.word	0x40020040
 8008d74:	40020058 	.word	0x40020058
 8008d78:	40020070 	.word	0x40020070
 8008d7c:	40020088 	.word	0x40020088
 8008d80:	400200a0 	.word	0x400200a0
 8008d84:	400200b8 	.word	0x400200b8
 8008d88:	40020410 	.word	0x40020410
 8008d8c:	40020428 	.word	0x40020428
 8008d90:	40020440 	.word	0x40020440
 8008d94:	40020458 	.word	0x40020458
 8008d98:	40020470 	.word	0x40020470
 8008d9c:	40020488 	.word	0x40020488
 8008da0:	400204a0 	.word	0x400204a0
 8008da4:	400204b8 	.word	0x400204b8
 8008da8:	58025408 	.word	0x58025408
 8008dac:	5802541c 	.word	0x5802541c
 8008db0:	58025430 	.word	0x58025430
 8008db4:	58025444 	.word	0x58025444
 8008db8:	58025458 	.word	0x58025458
 8008dbc:	5802546c 	.word	0x5802546c
 8008dc0:	58025480 	.word	0x58025480
 8008dc4:	58025494 	.word	0x58025494

08008dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08a      	sub	sp, #40	; 0x28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008dd4:	4b67      	ldr	r3, [pc, #412]	; (8008f74 <HAL_DMA_IRQHandler+0x1ac>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a67      	ldr	r2, [pc, #412]	; (8008f78 <HAL_DMA_IRQHandler+0x1b0>)
 8008dda:	fba2 2303 	umull	r2, r3, r2, r3
 8008dde:	0a9b      	lsrs	r3, r3, #10
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a5f      	ldr	r2, [pc, #380]	; (8008f7c <HAL_DMA_IRQHandler+0x1b4>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d04a      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a5d      	ldr	r2, [pc, #372]	; (8008f80 <HAL_DMA_IRQHandler+0x1b8>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d045      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a5c      	ldr	r2, [pc, #368]	; (8008f84 <HAL_DMA_IRQHandler+0x1bc>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d040      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a5a      	ldr	r2, [pc, #360]	; (8008f88 <HAL_DMA_IRQHandler+0x1c0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d03b      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a59      	ldr	r2, [pc, #356]	; (8008f8c <HAL_DMA_IRQHandler+0x1c4>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d036      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a57      	ldr	r2, [pc, #348]	; (8008f90 <HAL_DMA_IRQHandler+0x1c8>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d031      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a56      	ldr	r2, [pc, #344]	; (8008f94 <HAL_DMA_IRQHandler+0x1cc>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d02c      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a54      	ldr	r2, [pc, #336]	; (8008f98 <HAL_DMA_IRQHandler+0x1d0>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d027      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a53      	ldr	r2, [pc, #332]	; (8008f9c <HAL_DMA_IRQHandler+0x1d4>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d022      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a51      	ldr	r2, [pc, #324]	; (8008fa0 <HAL_DMA_IRQHandler+0x1d8>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d01d      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a50      	ldr	r2, [pc, #320]	; (8008fa4 <HAL_DMA_IRQHandler+0x1dc>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d018      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a4e      	ldr	r2, [pc, #312]	; (8008fa8 <HAL_DMA_IRQHandler+0x1e0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d013      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a4d      	ldr	r2, [pc, #308]	; (8008fac <HAL_DMA_IRQHandler+0x1e4>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d00e      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a4b      	ldr	r2, [pc, #300]	; (8008fb0 <HAL_DMA_IRQHandler+0x1e8>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d009      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a4a      	ldr	r2, [pc, #296]	; (8008fb4 <HAL_DMA_IRQHandler+0x1ec>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d004      	beq.n	8008e9a <HAL_DMA_IRQHandler+0xd2>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a48      	ldr	r2, [pc, #288]	; (8008fb8 <HAL_DMA_IRQHandler+0x1f0>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d101      	bne.n	8008e9e <HAL_DMA_IRQHandler+0xd6>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e000      	b.n	8008ea0 <HAL_DMA_IRQHandler+0xd8>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 842b 	beq.w	80096fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eaa:	f003 031f 	and.w	r3, r3, #31
 8008eae:	2208      	movs	r2, #8
 8008eb0:	409a      	lsls	r2, r3
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 80a2 	beq.w	8009000 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a2e      	ldr	r2, [pc, #184]	; (8008f7c <HAL_DMA_IRQHandler+0x1b4>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d04a      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a2d      	ldr	r2, [pc, #180]	; (8008f80 <HAL_DMA_IRQHandler+0x1b8>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d045      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a2b      	ldr	r2, [pc, #172]	; (8008f84 <HAL_DMA_IRQHandler+0x1bc>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d040      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a2a      	ldr	r2, [pc, #168]	; (8008f88 <HAL_DMA_IRQHandler+0x1c0>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d03b      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a28      	ldr	r2, [pc, #160]	; (8008f8c <HAL_DMA_IRQHandler+0x1c4>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d036      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a27      	ldr	r2, [pc, #156]	; (8008f90 <HAL_DMA_IRQHandler+0x1c8>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d031      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a25      	ldr	r2, [pc, #148]	; (8008f94 <HAL_DMA_IRQHandler+0x1cc>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d02c      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a24      	ldr	r2, [pc, #144]	; (8008f98 <HAL_DMA_IRQHandler+0x1d0>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d027      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a22      	ldr	r2, [pc, #136]	; (8008f9c <HAL_DMA_IRQHandler+0x1d4>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d022      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a21      	ldr	r2, [pc, #132]	; (8008fa0 <HAL_DMA_IRQHandler+0x1d8>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d01d      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a1f      	ldr	r2, [pc, #124]	; (8008fa4 <HAL_DMA_IRQHandler+0x1dc>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d018      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a1e      	ldr	r2, [pc, #120]	; (8008fa8 <HAL_DMA_IRQHandler+0x1e0>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d013      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1c      	ldr	r2, [pc, #112]	; (8008fac <HAL_DMA_IRQHandler+0x1e4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d00e      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a1b      	ldr	r2, [pc, #108]	; (8008fb0 <HAL_DMA_IRQHandler+0x1e8>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d009      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a19      	ldr	r2, [pc, #100]	; (8008fb4 <HAL_DMA_IRQHandler+0x1ec>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d004      	beq.n	8008f5c <HAL_DMA_IRQHandler+0x194>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <HAL_DMA_IRQHandler+0x1f0>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d12f      	bne.n	8008fbc <HAL_DMA_IRQHandler+0x1f4>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0304 	and.w	r3, r3, #4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bf14      	ite	ne
 8008f6a:	2301      	movne	r3, #1
 8008f6c:	2300      	moveq	r3, #0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	e02e      	b.n	8008fd0 <HAL_DMA_IRQHandler+0x208>
 8008f72:	bf00      	nop
 8008f74:	24000010 	.word	0x24000010
 8008f78:	1b4e81b5 	.word	0x1b4e81b5
 8008f7c:	40020010 	.word	0x40020010
 8008f80:	40020028 	.word	0x40020028
 8008f84:	40020040 	.word	0x40020040
 8008f88:	40020058 	.word	0x40020058
 8008f8c:	40020070 	.word	0x40020070
 8008f90:	40020088 	.word	0x40020088
 8008f94:	400200a0 	.word	0x400200a0
 8008f98:	400200b8 	.word	0x400200b8
 8008f9c:	40020410 	.word	0x40020410
 8008fa0:	40020428 	.word	0x40020428
 8008fa4:	40020440 	.word	0x40020440
 8008fa8:	40020458 	.word	0x40020458
 8008fac:	40020470 	.word	0x40020470
 8008fb0:	40020488 	.word	0x40020488
 8008fb4:	400204a0 	.word	0x400204a0
 8008fb8:	400204b8 	.word	0x400204b8
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0308 	and.w	r3, r3, #8
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bf14      	ite	ne
 8008fca:	2301      	movne	r3, #1
 8008fcc:	2300      	moveq	r3, #0
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d015      	beq.n	8009000 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f022 0204 	bic.w	r2, r2, #4
 8008fe2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe8:	f003 031f 	and.w	r3, r3, #31
 8008fec:	2208      	movs	r2, #8
 8008fee:	409a      	lsls	r2, r3
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff8:	f043 0201 	orr.w	r2, r3, #1
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009004:	f003 031f 	and.w	r3, r3, #31
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	fa22 f303 	lsr.w	r3, r2, r3
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d06e      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a69      	ldr	r2, [pc, #420]	; (80091c0 <HAL_DMA_IRQHandler+0x3f8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d04a      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a67      	ldr	r2, [pc, #412]	; (80091c4 <HAL_DMA_IRQHandler+0x3fc>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d045      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a66      	ldr	r2, [pc, #408]	; (80091c8 <HAL_DMA_IRQHandler+0x400>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d040      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a64      	ldr	r2, [pc, #400]	; (80091cc <HAL_DMA_IRQHandler+0x404>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d03b      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a63      	ldr	r2, [pc, #396]	; (80091d0 <HAL_DMA_IRQHandler+0x408>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d036      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a61      	ldr	r2, [pc, #388]	; (80091d4 <HAL_DMA_IRQHandler+0x40c>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d031      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a60      	ldr	r2, [pc, #384]	; (80091d8 <HAL_DMA_IRQHandler+0x410>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d02c      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a5e      	ldr	r2, [pc, #376]	; (80091dc <HAL_DMA_IRQHandler+0x414>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d027      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a5d      	ldr	r2, [pc, #372]	; (80091e0 <HAL_DMA_IRQHandler+0x418>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d022      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a5b      	ldr	r2, [pc, #364]	; (80091e4 <HAL_DMA_IRQHandler+0x41c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d01d      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a5a      	ldr	r2, [pc, #360]	; (80091e8 <HAL_DMA_IRQHandler+0x420>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d018      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a58      	ldr	r2, [pc, #352]	; (80091ec <HAL_DMA_IRQHandler+0x424>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d013      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a57      	ldr	r2, [pc, #348]	; (80091f0 <HAL_DMA_IRQHandler+0x428>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d00e      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a55      	ldr	r2, [pc, #340]	; (80091f4 <HAL_DMA_IRQHandler+0x42c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d009      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a54      	ldr	r2, [pc, #336]	; (80091f8 <HAL_DMA_IRQHandler+0x430>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d004      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x2ee>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a52      	ldr	r2, [pc, #328]	; (80091fc <HAL_DMA_IRQHandler+0x434>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d10a      	bne.n	80090cc <HAL_DMA_IRQHandler+0x304>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bf14      	ite	ne
 80090c4:	2301      	movne	r3, #1
 80090c6:	2300      	moveq	r3, #0
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	e003      	b.n	80090d4 <HAL_DMA_IRQHandler+0x30c>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2300      	movs	r3, #0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00d      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090dc:	f003 031f 	and.w	r3, r3, #31
 80090e0:	2201      	movs	r2, #1
 80090e2:	409a      	lsls	r2, r3
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ec:	f043 0202 	orr.w	r2, r3, #2
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090f8:	f003 031f 	and.w	r3, r3, #31
 80090fc:	2204      	movs	r2, #4
 80090fe:	409a      	lsls	r2, r3
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	4013      	ands	r3, r2
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 808f 	beq.w	8009228 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a2c      	ldr	r2, [pc, #176]	; (80091c0 <HAL_DMA_IRQHandler+0x3f8>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d04a      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a2a      	ldr	r2, [pc, #168]	; (80091c4 <HAL_DMA_IRQHandler+0x3fc>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d045      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a29      	ldr	r2, [pc, #164]	; (80091c8 <HAL_DMA_IRQHandler+0x400>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d040      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a27      	ldr	r2, [pc, #156]	; (80091cc <HAL_DMA_IRQHandler+0x404>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d03b      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a26      	ldr	r2, [pc, #152]	; (80091d0 <HAL_DMA_IRQHandler+0x408>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d036      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a24      	ldr	r2, [pc, #144]	; (80091d4 <HAL_DMA_IRQHandler+0x40c>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d031      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a23      	ldr	r2, [pc, #140]	; (80091d8 <HAL_DMA_IRQHandler+0x410>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d02c      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a21      	ldr	r2, [pc, #132]	; (80091dc <HAL_DMA_IRQHandler+0x414>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d027      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a20      	ldr	r2, [pc, #128]	; (80091e0 <HAL_DMA_IRQHandler+0x418>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d022      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a1e      	ldr	r2, [pc, #120]	; (80091e4 <HAL_DMA_IRQHandler+0x41c>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d01d      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a1d      	ldr	r2, [pc, #116]	; (80091e8 <HAL_DMA_IRQHandler+0x420>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d018      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a1b      	ldr	r2, [pc, #108]	; (80091ec <HAL_DMA_IRQHandler+0x424>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d013      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a1a      	ldr	r2, [pc, #104]	; (80091f0 <HAL_DMA_IRQHandler+0x428>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d00e      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a18      	ldr	r2, [pc, #96]	; (80091f4 <HAL_DMA_IRQHandler+0x42c>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d009      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a17      	ldr	r2, [pc, #92]	; (80091f8 <HAL_DMA_IRQHandler+0x430>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d004      	beq.n	80091aa <HAL_DMA_IRQHandler+0x3e2>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a15      	ldr	r2, [pc, #84]	; (80091fc <HAL_DMA_IRQHandler+0x434>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d12a      	bne.n	8009200 <HAL_DMA_IRQHandler+0x438>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bf14      	ite	ne
 80091b8:	2301      	movne	r3, #1
 80091ba:	2300      	moveq	r3, #0
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	e023      	b.n	8009208 <HAL_DMA_IRQHandler+0x440>
 80091c0:	40020010 	.word	0x40020010
 80091c4:	40020028 	.word	0x40020028
 80091c8:	40020040 	.word	0x40020040
 80091cc:	40020058 	.word	0x40020058
 80091d0:	40020070 	.word	0x40020070
 80091d4:	40020088 	.word	0x40020088
 80091d8:	400200a0 	.word	0x400200a0
 80091dc:	400200b8 	.word	0x400200b8
 80091e0:	40020410 	.word	0x40020410
 80091e4:	40020428 	.word	0x40020428
 80091e8:	40020440 	.word	0x40020440
 80091ec:	40020458 	.word	0x40020458
 80091f0:	40020470 	.word	0x40020470
 80091f4:	40020488 	.word	0x40020488
 80091f8:	400204a0 	.word	0x400204a0
 80091fc:	400204b8 	.word	0x400204b8
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2300      	movs	r3, #0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00d      	beq.n	8009228 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009210:	f003 031f 	and.w	r3, r3, #31
 8009214:	2204      	movs	r2, #4
 8009216:	409a      	lsls	r2, r3
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009220:	f043 0204 	orr.w	r2, r3, #4
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800922c:	f003 031f 	and.w	r3, r3, #31
 8009230:	2210      	movs	r2, #16
 8009232:	409a      	lsls	r2, r3
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	4013      	ands	r3, r2
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 80a6 	beq.w	800938a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a85      	ldr	r2, [pc, #532]	; (8009458 <HAL_DMA_IRQHandler+0x690>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d04a      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a83      	ldr	r2, [pc, #524]	; (800945c <HAL_DMA_IRQHandler+0x694>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d045      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a82      	ldr	r2, [pc, #520]	; (8009460 <HAL_DMA_IRQHandler+0x698>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d040      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a80      	ldr	r2, [pc, #512]	; (8009464 <HAL_DMA_IRQHandler+0x69c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d03b      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a7f      	ldr	r2, [pc, #508]	; (8009468 <HAL_DMA_IRQHandler+0x6a0>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d036      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a7d      	ldr	r2, [pc, #500]	; (800946c <HAL_DMA_IRQHandler+0x6a4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d031      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a7c      	ldr	r2, [pc, #496]	; (8009470 <HAL_DMA_IRQHandler+0x6a8>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d02c      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a7a      	ldr	r2, [pc, #488]	; (8009474 <HAL_DMA_IRQHandler+0x6ac>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d027      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a79      	ldr	r2, [pc, #484]	; (8009478 <HAL_DMA_IRQHandler+0x6b0>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d022      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a77      	ldr	r2, [pc, #476]	; (800947c <HAL_DMA_IRQHandler+0x6b4>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d01d      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a76      	ldr	r2, [pc, #472]	; (8009480 <HAL_DMA_IRQHandler+0x6b8>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d018      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a74      	ldr	r2, [pc, #464]	; (8009484 <HAL_DMA_IRQHandler+0x6bc>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d013      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a73      	ldr	r2, [pc, #460]	; (8009488 <HAL_DMA_IRQHandler+0x6c0>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d00e      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a71      	ldr	r2, [pc, #452]	; (800948c <HAL_DMA_IRQHandler+0x6c4>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d009      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a70      	ldr	r2, [pc, #448]	; (8009490 <HAL_DMA_IRQHandler+0x6c8>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d004      	beq.n	80092de <HAL_DMA_IRQHandler+0x516>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a6e      	ldr	r2, [pc, #440]	; (8009494 <HAL_DMA_IRQHandler+0x6cc>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d10a      	bne.n	80092f4 <HAL_DMA_IRQHandler+0x52c>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0308 	and.w	r3, r3, #8
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	bf14      	ite	ne
 80092ec:	2301      	movne	r3, #1
 80092ee:	2300      	moveq	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	e009      	b.n	8009308 <HAL_DMA_IRQHandler+0x540>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0304 	and.w	r3, r3, #4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bf14      	ite	ne
 8009302:	2301      	movne	r3, #1
 8009304:	2300      	moveq	r3, #0
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b00      	cmp	r3, #0
 800930a:	d03e      	beq.n	800938a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009310:	f003 031f 	and.w	r3, r3, #31
 8009314:	2210      	movs	r2, #16
 8009316:	409a      	lsls	r2, r3
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d018      	beq.n	800935c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d108      	bne.n	800934a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933c:	2b00      	cmp	r3, #0
 800933e:	d024      	beq.n	800938a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	4798      	blx	r3
 8009348:	e01f      	b.n	800938a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800934e:	2b00      	cmp	r3, #0
 8009350:	d01b      	beq.n	800938a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
 800935a:	e016      	b.n	800938a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009366:	2b00      	cmp	r3, #0
 8009368:	d107      	bne.n	800937a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f022 0208 	bic.w	r2, r2, #8
 8009378:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800938e:	f003 031f 	and.w	r3, r3, #31
 8009392:	2220      	movs	r2, #32
 8009394:	409a      	lsls	r2, r3
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 8110 	beq.w	80095c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a2c      	ldr	r2, [pc, #176]	; (8009458 <HAL_DMA_IRQHandler+0x690>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d04a      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a2b      	ldr	r2, [pc, #172]	; (800945c <HAL_DMA_IRQHandler+0x694>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d045      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a29      	ldr	r2, [pc, #164]	; (8009460 <HAL_DMA_IRQHandler+0x698>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d040      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a28      	ldr	r2, [pc, #160]	; (8009464 <HAL_DMA_IRQHandler+0x69c>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d03b      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a26      	ldr	r2, [pc, #152]	; (8009468 <HAL_DMA_IRQHandler+0x6a0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d036      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a25      	ldr	r2, [pc, #148]	; (800946c <HAL_DMA_IRQHandler+0x6a4>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d031      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a23      	ldr	r2, [pc, #140]	; (8009470 <HAL_DMA_IRQHandler+0x6a8>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d02c      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a22      	ldr	r2, [pc, #136]	; (8009474 <HAL_DMA_IRQHandler+0x6ac>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d027      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a20      	ldr	r2, [pc, #128]	; (8009478 <HAL_DMA_IRQHandler+0x6b0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d022      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a1f      	ldr	r2, [pc, #124]	; (800947c <HAL_DMA_IRQHandler+0x6b4>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d01d      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a1d      	ldr	r2, [pc, #116]	; (8009480 <HAL_DMA_IRQHandler+0x6b8>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d018      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a1c      	ldr	r2, [pc, #112]	; (8009484 <HAL_DMA_IRQHandler+0x6bc>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d013      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a1a      	ldr	r2, [pc, #104]	; (8009488 <HAL_DMA_IRQHandler+0x6c0>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d00e      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a19      	ldr	r2, [pc, #100]	; (800948c <HAL_DMA_IRQHandler+0x6c4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d009      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a17      	ldr	r2, [pc, #92]	; (8009490 <HAL_DMA_IRQHandler+0x6c8>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d004      	beq.n	8009440 <HAL_DMA_IRQHandler+0x678>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a16      	ldr	r2, [pc, #88]	; (8009494 <HAL_DMA_IRQHandler+0x6cc>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d12b      	bne.n	8009498 <HAL_DMA_IRQHandler+0x6d0>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 0310 	and.w	r3, r3, #16
 800944a:	2b00      	cmp	r3, #0
 800944c:	bf14      	ite	ne
 800944e:	2301      	movne	r3, #1
 8009450:	2300      	moveq	r3, #0
 8009452:	b2db      	uxtb	r3, r3
 8009454:	e02a      	b.n	80094ac <HAL_DMA_IRQHandler+0x6e4>
 8009456:	bf00      	nop
 8009458:	40020010 	.word	0x40020010
 800945c:	40020028 	.word	0x40020028
 8009460:	40020040 	.word	0x40020040
 8009464:	40020058 	.word	0x40020058
 8009468:	40020070 	.word	0x40020070
 800946c:	40020088 	.word	0x40020088
 8009470:	400200a0 	.word	0x400200a0
 8009474:	400200b8 	.word	0x400200b8
 8009478:	40020410 	.word	0x40020410
 800947c:	40020428 	.word	0x40020428
 8009480:	40020440 	.word	0x40020440
 8009484:	40020458 	.word	0x40020458
 8009488:	40020470 	.word	0x40020470
 800948c:	40020488 	.word	0x40020488
 8009490:	400204a0 	.word	0x400204a0
 8009494:	400204b8 	.word	0x400204b8
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bf14      	ite	ne
 80094a6:	2301      	movne	r3, #1
 80094a8:	2300      	moveq	r3, #0
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 8087 	beq.w	80095c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b6:	f003 031f 	and.w	r3, r3, #31
 80094ba:	2220      	movs	r2, #32
 80094bc:	409a      	lsls	r2, r3
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b04      	cmp	r3, #4
 80094cc:	d139      	bne.n	8009542 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f022 0216 	bic.w	r2, r2, #22
 80094dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	695a      	ldr	r2, [r3, #20]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d103      	bne.n	80094fe <HAL_DMA_IRQHandler+0x736>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d007      	beq.n	800950e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0208 	bic.w	r2, r2, #8
 800950c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009512:	f003 031f 	and.w	r3, r3, #31
 8009516:	223f      	movs	r2, #63	; 0x3f
 8009518:	409a      	lsls	r2, r3
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 834a 	beq.w	8009bcc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	4798      	blx	r3
          }
          return;
 8009540:	e344      	b.n	8009bcc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d018      	beq.n	8009582 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d108      	bne.n	8009570 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009562:	2b00      	cmp	r3, #0
 8009564:	d02c      	beq.n	80095c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	4798      	blx	r3
 800956e:	e027      	b.n	80095c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009574:	2b00      	cmp	r3, #0
 8009576:	d023      	beq.n	80095c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	4798      	blx	r3
 8009580:	e01e      	b.n	80095c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10f      	bne.n	80095b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f022 0210 	bic.w	r2, r2, #16
 800959e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d003      	beq.n	80095c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 8306 	beq.w	8009bd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 8088 	beq.w	80096e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2204      	movs	r2, #4
 80095dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a7a      	ldr	r2, [pc, #488]	; (80097d0 <HAL_DMA_IRQHandler+0xa08>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d04a      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a79      	ldr	r2, [pc, #484]	; (80097d4 <HAL_DMA_IRQHandler+0xa0c>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d045      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a77      	ldr	r2, [pc, #476]	; (80097d8 <HAL_DMA_IRQHandler+0xa10>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d040      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a76      	ldr	r2, [pc, #472]	; (80097dc <HAL_DMA_IRQHandler+0xa14>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d03b      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a74      	ldr	r2, [pc, #464]	; (80097e0 <HAL_DMA_IRQHandler+0xa18>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d036      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a73      	ldr	r2, [pc, #460]	; (80097e4 <HAL_DMA_IRQHandler+0xa1c>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d031      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a71      	ldr	r2, [pc, #452]	; (80097e8 <HAL_DMA_IRQHandler+0xa20>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d02c      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a70      	ldr	r2, [pc, #448]	; (80097ec <HAL_DMA_IRQHandler+0xa24>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d027      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a6e      	ldr	r2, [pc, #440]	; (80097f0 <HAL_DMA_IRQHandler+0xa28>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d022      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a6d      	ldr	r2, [pc, #436]	; (80097f4 <HAL_DMA_IRQHandler+0xa2c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d01d      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a6b      	ldr	r2, [pc, #428]	; (80097f8 <HAL_DMA_IRQHandler+0xa30>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d018      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a6a      	ldr	r2, [pc, #424]	; (80097fc <HAL_DMA_IRQHandler+0xa34>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d013      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a68      	ldr	r2, [pc, #416]	; (8009800 <HAL_DMA_IRQHandler+0xa38>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d00e      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a67      	ldr	r2, [pc, #412]	; (8009804 <HAL_DMA_IRQHandler+0xa3c>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d009      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a65      	ldr	r2, [pc, #404]	; (8009808 <HAL_DMA_IRQHandler+0xa40>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d004      	beq.n	8009680 <HAL_DMA_IRQHandler+0x8b8>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a64      	ldr	r2, [pc, #400]	; (800980c <HAL_DMA_IRQHandler+0xa44>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d108      	bne.n	8009692 <HAL_DMA_IRQHandler+0x8ca>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f022 0201 	bic.w	r2, r2, #1
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	e007      	b.n	80096a2 <HAL_DMA_IRQHandler+0x8da>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0201 	bic.w	r2, r2, #1
 80096a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3301      	adds	r3, #1
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d307      	bcc.n	80096be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1f2      	bne.n	80096a2 <HAL_DMA_IRQHandler+0x8da>
 80096bc:	e000      	b.n	80096c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80096be:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d004      	beq.n	80096e0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2203      	movs	r2, #3
 80096da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80096de:	e003      	b.n	80096e8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 8272 	beq.w	8009bd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	4798      	blx	r3
 80096fa:	e26c      	b.n	8009bd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a43      	ldr	r2, [pc, #268]	; (8009810 <HAL_DMA_IRQHandler+0xa48>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d022      	beq.n	800974c <HAL_DMA_IRQHandler+0x984>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a42      	ldr	r2, [pc, #264]	; (8009814 <HAL_DMA_IRQHandler+0xa4c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d01d      	beq.n	800974c <HAL_DMA_IRQHandler+0x984>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a40      	ldr	r2, [pc, #256]	; (8009818 <HAL_DMA_IRQHandler+0xa50>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d018      	beq.n	800974c <HAL_DMA_IRQHandler+0x984>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a3f      	ldr	r2, [pc, #252]	; (800981c <HAL_DMA_IRQHandler+0xa54>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d013      	beq.n	800974c <HAL_DMA_IRQHandler+0x984>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a3d      	ldr	r2, [pc, #244]	; (8009820 <HAL_DMA_IRQHandler+0xa58>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d00e      	beq.n	800974c <HAL_DMA_IRQHandler+0x984>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a3c      	ldr	r2, [pc, #240]	; (8009824 <HAL_DMA_IRQHandler+0xa5c>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d009      	beq.n	800974c <HAL_DMA_IRQHandler+0x984>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a3a      	ldr	r2, [pc, #232]	; (8009828 <HAL_DMA_IRQHandler+0xa60>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d004      	beq.n	800974c <HAL_DMA_IRQHandler+0x984>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a39      	ldr	r2, [pc, #228]	; (800982c <HAL_DMA_IRQHandler+0xa64>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d101      	bne.n	8009750 <HAL_DMA_IRQHandler+0x988>
 800974c:	2301      	movs	r3, #1
 800974e:	e000      	b.n	8009752 <HAL_DMA_IRQHandler+0x98a>
 8009750:	2300      	movs	r3, #0
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 823f 	beq.w	8009bd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009764:	f003 031f 	and.w	r3, r3, #31
 8009768:	2204      	movs	r2, #4
 800976a:	409a      	lsls	r2, r3
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	4013      	ands	r3, r2
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 80cd 	beq.w	8009910 <HAL_DMA_IRQHandler+0xb48>
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 80c7 	beq.w	8009910 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009786:	f003 031f 	and.w	r3, r3, #31
 800978a:	2204      	movs	r2, #4
 800978c:	409a      	lsls	r2, r3
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d049      	beq.n	8009830 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d109      	bne.n	80097ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 8210 	beq.w	8009bd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097b8:	e20a      	b.n	8009bd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 8206 	beq.w	8009bd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097cc:	e200      	b.n	8009bd0 <HAL_DMA_IRQHandler+0xe08>
 80097ce:	bf00      	nop
 80097d0:	40020010 	.word	0x40020010
 80097d4:	40020028 	.word	0x40020028
 80097d8:	40020040 	.word	0x40020040
 80097dc:	40020058 	.word	0x40020058
 80097e0:	40020070 	.word	0x40020070
 80097e4:	40020088 	.word	0x40020088
 80097e8:	400200a0 	.word	0x400200a0
 80097ec:	400200b8 	.word	0x400200b8
 80097f0:	40020410 	.word	0x40020410
 80097f4:	40020428 	.word	0x40020428
 80097f8:	40020440 	.word	0x40020440
 80097fc:	40020458 	.word	0x40020458
 8009800:	40020470 	.word	0x40020470
 8009804:	40020488 	.word	0x40020488
 8009808:	400204a0 	.word	0x400204a0
 800980c:	400204b8 	.word	0x400204b8
 8009810:	58025408 	.word	0x58025408
 8009814:	5802541c 	.word	0x5802541c
 8009818:	58025430 	.word	0x58025430
 800981c:	58025444 	.word	0x58025444
 8009820:	58025458 	.word	0x58025458
 8009824:	5802546c 	.word	0x5802546c
 8009828:	58025480 	.word	0x58025480
 800982c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	f003 0320 	and.w	r3, r3, #32
 8009836:	2b00      	cmp	r3, #0
 8009838:	d160      	bne.n	80098fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a8c      	ldr	r2, [pc, #560]	; (8009a70 <HAL_DMA_IRQHandler+0xca8>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d04a      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a8a      	ldr	r2, [pc, #552]	; (8009a74 <HAL_DMA_IRQHandler+0xcac>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d045      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a89      	ldr	r2, [pc, #548]	; (8009a78 <HAL_DMA_IRQHandler+0xcb0>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d040      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a87      	ldr	r2, [pc, #540]	; (8009a7c <HAL_DMA_IRQHandler+0xcb4>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d03b      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a86      	ldr	r2, [pc, #536]	; (8009a80 <HAL_DMA_IRQHandler+0xcb8>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d036      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a84      	ldr	r2, [pc, #528]	; (8009a84 <HAL_DMA_IRQHandler+0xcbc>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d031      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a83      	ldr	r2, [pc, #524]	; (8009a88 <HAL_DMA_IRQHandler+0xcc0>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d02c      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a81      	ldr	r2, [pc, #516]	; (8009a8c <HAL_DMA_IRQHandler+0xcc4>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d027      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a80      	ldr	r2, [pc, #512]	; (8009a90 <HAL_DMA_IRQHandler+0xcc8>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d022      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a7e      	ldr	r2, [pc, #504]	; (8009a94 <HAL_DMA_IRQHandler+0xccc>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d01d      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a7d      	ldr	r2, [pc, #500]	; (8009a98 <HAL_DMA_IRQHandler+0xcd0>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d018      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a7b      	ldr	r2, [pc, #492]	; (8009a9c <HAL_DMA_IRQHandler+0xcd4>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d013      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a7a      	ldr	r2, [pc, #488]	; (8009aa0 <HAL_DMA_IRQHandler+0xcd8>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d00e      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a78      	ldr	r2, [pc, #480]	; (8009aa4 <HAL_DMA_IRQHandler+0xcdc>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d009      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a77      	ldr	r2, [pc, #476]	; (8009aa8 <HAL_DMA_IRQHandler+0xce0>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d004      	beq.n	80098da <HAL_DMA_IRQHandler+0xb12>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a75      	ldr	r2, [pc, #468]	; (8009aac <HAL_DMA_IRQHandler+0xce4>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d108      	bne.n	80098ec <HAL_DMA_IRQHandler+0xb24>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f022 0208 	bic.w	r2, r2, #8
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	e007      	b.n	80098fc <HAL_DMA_IRQHandler+0xb34>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0204 	bic.w	r2, r2, #4
 80098fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 8165 	beq.w	8009bd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800990e:	e15f      	b.n	8009bd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009914:	f003 031f 	and.w	r3, r3, #31
 8009918:	2202      	movs	r2, #2
 800991a:	409a      	lsls	r2, r3
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	4013      	ands	r3, r2
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 80c5 	beq.w	8009ab0 <HAL_DMA_IRQHandler+0xce8>
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	f003 0302 	and.w	r3, r3, #2
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 80bf 	beq.w	8009ab0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009936:	f003 031f 	and.w	r3, r3, #31
 800993a:	2202      	movs	r2, #2
 800993c:	409a      	lsls	r2, r3
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d018      	beq.n	800997e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d109      	bne.n	800996a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 813a 	beq.w	8009bd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009968:	e134      	b.n	8009bd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 8130 	beq.w	8009bd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800997c:	e12a      	b.n	8009bd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f003 0320 	and.w	r3, r3, #32
 8009984:	2b00      	cmp	r3, #0
 8009986:	d168      	bne.n	8009a5a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a38      	ldr	r2, [pc, #224]	; (8009a70 <HAL_DMA_IRQHandler+0xca8>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d04a      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a37      	ldr	r2, [pc, #220]	; (8009a74 <HAL_DMA_IRQHandler+0xcac>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d045      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a35      	ldr	r2, [pc, #212]	; (8009a78 <HAL_DMA_IRQHandler+0xcb0>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d040      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a34      	ldr	r2, [pc, #208]	; (8009a7c <HAL_DMA_IRQHandler+0xcb4>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d03b      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a32      	ldr	r2, [pc, #200]	; (8009a80 <HAL_DMA_IRQHandler+0xcb8>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d036      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a31      	ldr	r2, [pc, #196]	; (8009a84 <HAL_DMA_IRQHandler+0xcbc>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d031      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a2f      	ldr	r2, [pc, #188]	; (8009a88 <HAL_DMA_IRQHandler+0xcc0>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d02c      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a2e      	ldr	r2, [pc, #184]	; (8009a8c <HAL_DMA_IRQHandler+0xcc4>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d027      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a2c      	ldr	r2, [pc, #176]	; (8009a90 <HAL_DMA_IRQHandler+0xcc8>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d022      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a2b      	ldr	r2, [pc, #172]	; (8009a94 <HAL_DMA_IRQHandler+0xccc>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d01d      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a29      	ldr	r2, [pc, #164]	; (8009a98 <HAL_DMA_IRQHandler+0xcd0>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d018      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a28      	ldr	r2, [pc, #160]	; (8009a9c <HAL_DMA_IRQHandler+0xcd4>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d013      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a26      	ldr	r2, [pc, #152]	; (8009aa0 <HAL_DMA_IRQHandler+0xcd8>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d00e      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a25      	ldr	r2, [pc, #148]	; (8009aa4 <HAL_DMA_IRQHandler+0xcdc>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d009      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a23      	ldr	r2, [pc, #140]	; (8009aa8 <HAL_DMA_IRQHandler+0xce0>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d004      	beq.n	8009a28 <HAL_DMA_IRQHandler+0xc60>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a22      	ldr	r2, [pc, #136]	; (8009aac <HAL_DMA_IRQHandler+0xce4>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d108      	bne.n	8009a3a <HAL_DMA_IRQHandler+0xc72>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0214 	bic.w	r2, r2, #20
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	e007      	b.n	8009a4a <HAL_DMA_IRQHandler+0xc82>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f022 020a 	bic.w	r2, r2, #10
 8009a48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 80b8 	beq.w	8009bd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a6c:	e0b2      	b.n	8009bd4 <HAL_DMA_IRQHandler+0xe0c>
 8009a6e:	bf00      	nop
 8009a70:	40020010 	.word	0x40020010
 8009a74:	40020028 	.word	0x40020028
 8009a78:	40020040 	.word	0x40020040
 8009a7c:	40020058 	.word	0x40020058
 8009a80:	40020070 	.word	0x40020070
 8009a84:	40020088 	.word	0x40020088
 8009a88:	400200a0 	.word	0x400200a0
 8009a8c:	400200b8 	.word	0x400200b8
 8009a90:	40020410 	.word	0x40020410
 8009a94:	40020428 	.word	0x40020428
 8009a98:	40020440 	.word	0x40020440
 8009a9c:	40020458 	.word	0x40020458
 8009aa0:	40020470 	.word	0x40020470
 8009aa4:	40020488 	.word	0x40020488
 8009aa8:	400204a0 	.word	0x400204a0
 8009aac:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab4:	f003 031f 	and.w	r3, r3, #31
 8009ab8:	2208      	movs	r2, #8
 8009aba:	409a      	lsls	r2, r3
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	4013      	ands	r3, r2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 8088 	beq.w	8009bd6 <HAL_DMA_IRQHandler+0xe0e>
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f003 0308 	and.w	r3, r3, #8
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 8082 	beq.w	8009bd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a41      	ldr	r2, [pc, #260]	; (8009bdc <HAL_DMA_IRQHandler+0xe14>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d04a      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a3f      	ldr	r2, [pc, #252]	; (8009be0 <HAL_DMA_IRQHandler+0xe18>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d045      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a3e      	ldr	r2, [pc, #248]	; (8009be4 <HAL_DMA_IRQHandler+0xe1c>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d040      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a3c      	ldr	r2, [pc, #240]	; (8009be8 <HAL_DMA_IRQHandler+0xe20>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d03b      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a3b      	ldr	r2, [pc, #236]	; (8009bec <HAL_DMA_IRQHandler+0xe24>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d036      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a39      	ldr	r2, [pc, #228]	; (8009bf0 <HAL_DMA_IRQHandler+0xe28>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d031      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a38      	ldr	r2, [pc, #224]	; (8009bf4 <HAL_DMA_IRQHandler+0xe2c>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d02c      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a36      	ldr	r2, [pc, #216]	; (8009bf8 <HAL_DMA_IRQHandler+0xe30>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d027      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a35      	ldr	r2, [pc, #212]	; (8009bfc <HAL_DMA_IRQHandler+0xe34>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d022      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a33      	ldr	r2, [pc, #204]	; (8009c00 <HAL_DMA_IRQHandler+0xe38>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d01d      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a32      	ldr	r2, [pc, #200]	; (8009c04 <HAL_DMA_IRQHandler+0xe3c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d018      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a30      	ldr	r2, [pc, #192]	; (8009c08 <HAL_DMA_IRQHandler+0xe40>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d013      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a2f      	ldr	r2, [pc, #188]	; (8009c0c <HAL_DMA_IRQHandler+0xe44>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d00e      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a2d      	ldr	r2, [pc, #180]	; (8009c10 <HAL_DMA_IRQHandler+0xe48>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d009      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a2c      	ldr	r2, [pc, #176]	; (8009c14 <HAL_DMA_IRQHandler+0xe4c>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d004      	beq.n	8009b72 <HAL_DMA_IRQHandler+0xdaa>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a2a      	ldr	r2, [pc, #168]	; (8009c18 <HAL_DMA_IRQHandler+0xe50>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d108      	bne.n	8009b84 <HAL_DMA_IRQHandler+0xdbc>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 021c 	bic.w	r2, r2, #28
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	e007      	b.n	8009b94 <HAL_DMA_IRQHandler+0xdcc>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f022 020e 	bic.w	r2, r2, #14
 8009b92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b98:	f003 031f 	and.w	r3, r3, #31
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	409a      	lsls	r2, r3
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d009      	beq.n	8009bd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	4798      	blx	r3
 8009bca:	e004      	b.n	8009bd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009bcc:	bf00      	nop
 8009bce:	e002      	b.n	8009bd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009bd0:	bf00      	nop
 8009bd2:	e000      	b.n	8009bd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009bd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009bd6:	3728      	adds	r7, #40	; 0x28
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	40020010 	.word	0x40020010
 8009be0:	40020028 	.word	0x40020028
 8009be4:	40020040 	.word	0x40020040
 8009be8:	40020058 	.word	0x40020058
 8009bec:	40020070 	.word	0x40020070
 8009bf0:	40020088 	.word	0x40020088
 8009bf4:	400200a0 	.word	0x400200a0
 8009bf8:	400200b8 	.word	0x400200b8
 8009bfc:	40020410 	.word	0x40020410
 8009c00:	40020428 	.word	0x40020428
 8009c04:	40020440 	.word	0x40020440
 8009c08:	40020458 	.word	0x40020458
 8009c0c:	40020470 	.word	0x40020470
 8009c10:	40020488 	.word	0x40020488
 8009c14:	400204a0 	.word	0x400204a0
 8009c18:	400204b8 	.word	0x400204b8

08009c1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
 8009c28:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c2e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c34:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a84      	ldr	r2, [pc, #528]	; (8009e4c <DMA_SetConfig+0x230>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d072      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a82      	ldr	r2, [pc, #520]	; (8009e50 <DMA_SetConfig+0x234>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d06d      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a81      	ldr	r2, [pc, #516]	; (8009e54 <DMA_SetConfig+0x238>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d068      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a7f      	ldr	r2, [pc, #508]	; (8009e58 <DMA_SetConfig+0x23c>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d063      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a7e      	ldr	r2, [pc, #504]	; (8009e5c <DMA_SetConfig+0x240>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d05e      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a7c      	ldr	r2, [pc, #496]	; (8009e60 <DMA_SetConfig+0x244>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d059      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a7b      	ldr	r2, [pc, #492]	; (8009e64 <DMA_SetConfig+0x248>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d054      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a79      	ldr	r2, [pc, #484]	; (8009e68 <DMA_SetConfig+0x24c>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d04f      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a78      	ldr	r2, [pc, #480]	; (8009e6c <DMA_SetConfig+0x250>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d04a      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a76      	ldr	r2, [pc, #472]	; (8009e70 <DMA_SetConfig+0x254>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d045      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a75      	ldr	r2, [pc, #468]	; (8009e74 <DMA_SetConfig+0x258>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d040      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a73      	ldr	r2, [pc, #460]	; (8009e78 <DMA_SetConfig+0x25c>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d03b      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a72      	ldr	r2, [pc, #456]	; (8009e7c <DMA_SetConfig+0x260>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d036      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a70      	ldr	r2, [pc, #448]	; (8009e80 <DMA_SetConfig+0x264>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d031      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a6f      	ldr	r2, [pc, #444]	; (8009e84 <DMA_SetConfig+0x268>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d02c      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a6d      	ldr	r2, [pc, #436]	; (8009e88 <DMA_SetConfig+0x26c>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d027      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a6c      	ldr	r2, [pc, #432]	; (8009e8c <DMA_SetConfig+0x270>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d022      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a6a      	ldr	r2, [pc, #424]	; (8009e90 <DMA_SetConfig+0x274>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d01d      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a69      	ldr	r2, [pc, #420]	; (8009e94 <DMA_SetConfig+0x278>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d018      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a67      	ldr	r2, [pc, #412]	; (8009e98 <DMA_SetConfig+0x27c>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d013      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a66      	ldr	r2, [pc, #408]	; (8009e9c <DMA_SetConfig+0x280>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00e      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a64      	ldr	r2, [pc, #400]	; (8009ea0 <DMA_SetConfig+0x284>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d009      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a63      	ldr	r2, [pc, #396]	; (8009ea4 <DMA_SetConfig+0x288>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d004      	beq.n	8009d26 <DMA_SetConfig+0x10a>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a61      	ldr	r2, [pc, #388]	; (8009ea8 <DMA_SetConfig+0x28c>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d101      	bne.n	8009d2a <DMA_SetConfig+0x10e>
 8009d26:	2301      	movs	r3, #1
 8009d28:	e000      	b.n	8009d2c <DMA_SetConfig+0x110>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00d      	beq.n	8009d4c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009d38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d004      	beq.n	8009d4c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009d4a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a3e      	ldr	r2, [pc, #248]	; (8009e4c <DMA_SetConfig+0x230>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d04a      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a3d      	ldr	r2, [pc, #244]	; (8009e50 <DMA_SetConfig+0x234>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d045      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a3b      	ldr	r2, [pc, #236]	; (8009e54 <DMA_SetConfig+0x238>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d040      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a3a      	ldr	r2, [pc, #232]	; (8009e58 <DMA_SetConfig+0x23c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d03b      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a38      	ldr	r2, [pc, #224]	; (8009e5c <DMA_SetConfig+0x240>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d036      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a37      	ldr	r2, [pc, #220]	; (8009e60 <DMA_SetConfig+0x244>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d031      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a35      	ldr	r2, [pc, #212]	; (8009e64 <DMA_SetConfig+0x248>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d02c      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a34      	ldr	r2, [pc, #208]	; (8009e68 <DMA_SetConfig+0x24c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d027      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a32      	ldr	r2, [pc, #200]	; (8009e6c <DMA_SetConfig+0x250>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d022      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a31      	ldr	r2, [pc, #196]	; (8009e70 <DMA_SetConfig+0x254>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d01d      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a2f      	ldr	r2, [pc, #188]	; (8009e74 <DMA_SetConfig+0x258>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d018      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a2e      	ldr	r2, [pc, #184]	; (8009e78 <DMA_SetConfig+0x25c>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d013      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a2c      	ldr	r2, [pc, #176]	; (8009e7c <DMA_SetConfig+0x260>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d00e      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a2b      	ldr	r2, [pc, #172]	; (8009e80 <DMA_SetConfig+0x264>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d009      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a29      	ldr	r2, [pc, #164]	; (8009e84 <DMA_SetConfig+0x268>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d004      	beq.n	8009dec <DMA_SetConfig+0x1d0>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a28      	ldr	r2, [pc, #160]	; (8009e88 <DMA_SetConfig+0x26c>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d101      	bne.n	8009df0 <DMA_SetConfig+0x1d4>
 8009dec:	2301      	movs	r3, #1
 8009dee:	e000      	b.n	8009df2 <DMA_SetConfig+0x1d6>
 8009df0:	2300      	movs	r3, #0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d05a      	beq.n	8009eac <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dfa:	f003 031f 	and.w	r3, r3, #31
 8009dfe:	223f      	movs	r2, #63	; 0x3f
 8009e00:	409a      	lsls	r2, r3
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e14:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	2b40      	cmp	r3, #64	; 0x40
 8009e24:	d108      	bne.n	8009e38 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009e36:	e087      	b.n	8009f48 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	60da      	str	r2, [r3, #12]
}
 8009e48:	e07e      	b.n	8009f48 <DMA_SetConfig+0x32c>
 8009e4a:	bf00      	nop
 8009e4c:	40020010 	.word	0x40020010
 8009e50:	40020028 	.word	0x40020028
 8009e54:	40020040 	.word	0x40020040
 8009e58:	40020058 	.word	0x40020058
 8009e5c:	40020070 	.word	0x40020070
 8009e60:	40020088 	.word	0x40020088
 8009e64:	400200a0 	.word	0x400200a0
 8009e68:	400200b8 	.word	0x400200b8
 8009e6c:	40020410 	.word	0x40020410
 8009e70:	40020428 	.word	0x40020428
 8009e74:	40020440 	.word	0x40020440
 8009e78:	40020458 	.word	0x40020458
 8009e7c:	40020470 	.word	0x40020470
 8009e80:	40020488 	.word	0x40020488
 8009e84:	400204a0 	.word	0x400204a0
 8009e88:	400204b8 	.word	0x400204b8
 8009e8c:	58025408 	.word	0x58025408
 8009e90:	5802541c 	.word	0x5802541c
 8009e94:	58025430 	.word	0x58025430
 8009e98:	58025444 	.word	0x58025444
 8009e9c:	58025458 	.word	0x58025458
 8009ea0:	5802546c 	.word	0x5802546c
 8009ea4:	58025480 	.word	0x58025480
 8009ea8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a28      	ldr	r2, [pc, #160]	; (8009f54 <DMA_SetConfig+0x338>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d022      	beq.n	8009efc <DMA_SetConfig+0x2e0>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a27      	ldr	r2, [pc, #156]	; (8009f58 <DMA_SetConfig+0x33c>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d01d      	beq.n	8009efc <DMA_SetConfig+0x2e0>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a25      	ldr	r2, [pc, #148]	; (8009f5c <DMA_SetConfig+0x340>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d018      	beq.n	8009efc <DMA_SetConfig+0x2e0>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a24      	ldr	r2, [pc, #144]	; (8009f60 <DMA_SetConfig+0x344>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d013      	beq.n	8009efc <DMA_SetConfig+0x2e0>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a22      	ldr	r2, [pc, #136]	; (8009f64 <DMA_SetConfig+0x348>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d00e      	beq.n	8009efc <DMA_SetConfig+0x2e0>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a21      	ldr	r2, [pc, #132]	; (8009f68 <DMA_SetConfig+0x34c>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d009      	beq.n	8009efc <DMA_SetConfig+0x2e0>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a1f      	ldr	r2, [pc, #124]	; (8009f6c <DMA_SetConfig+0x350>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d004      	beq.n	8009efc <DMA_SetConfig+0x2e0>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a1e      	ldr	r2, [pc, #120]	; (8009f70 <DMA_SetConfig+0x354>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d101      	bne.n	8009f00 <DMA_SetConfig+0x2e4>
 8009efc:	2301      	movs	r3, #1
 8009efe:	e000      	b.n	8009f02 <DMA_SetConfig+0x2e6>
 8009f00:	2300      	movs	r3, #0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d020      	beq.n	8009f48 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f0a:	f003 031f 	and.w	r3, r3, #31
 8009f0e:	2201      	movs	r2, #1
 8009f10:	409a      	lsls	r2, r3
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	2b40      	cmp	r3, #64	; 0x40
 8009f24:	d108      	bne.n	8009f38 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	60da      	str	r2, [r3, #12]
}
 8009f36:	e007      	b.n	8009f48 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	60da      	str	r2, [r3, #12]
}
 8009f48:	bf00      	nop
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	58025408 	.word	0x58025408
 8009f58:	5802541c 	.word	0x5802541c
 8009f5c:	58025430 	.word	0x58025430
 8009f60:	58025444 	.word	0x58025444
 8009f64:	58025458 	.word	0x58025458
 8009f68:	5802546c 	.word	0x5802546c
 8009f6c:	58025480 	.word	0x58025480
 8009f70:	58025494 	.word	0x58025494

08009f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a42      	ldr	r2, [pc, #264]	; (800a08c <DMA_CalcBaseAndBitshift+0x118>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d04a      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a41      	ldr	r2, [pc, #260]	; (800a090 <DMA_CalcBaseAndBitshift+0x11c>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d045      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a3f      	ldr	r2, [pc, #252]	; (800a094 <DMA_CalcBaseAndBitshift+0x120>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d040      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a3e      	ldr	r2, [pc, #248]	; (800a098 <DMA_CalcBaseAndBitshift+0x124>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d03b      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a3c      	ldr	r2, [pc, #240]	; (800a09c <DMA_CalcBaseAndBitshift+0x128>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d036      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a3b      	ldr	r2, [pc, #236]	; (800a0a0 <DMA_CalcBaseAndBitshift+0x12c>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d031      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a39      	ldr	r2, [pc, #228]	; (800a0a4 <DMA_CalcBaseAndBitshift+0x130>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d02c      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a38      	ldr	r2, [pc, #224]	; (800a0a8 <DMA_CalcBaseAndBitshift+0x134>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d027      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a36      	ldr	r2, [pc, #216]	; (800a0ac <DMA_CalcBaseAndBitshift+0x138>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d022      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a35      	ldr	r2, [pc, #212]	; (800a0b0 <DMA_CalcBaseAndBitshift+0x13c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d01d      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a33      	ldr	r2, [pc, #204]	; (800a0b4 <DMA_CalcBaseAndBitshift+0x140>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d018      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a32      	ldr	r2, [pc, #200]	; (800a0b8 <DMA_CalcBaseAndBitshift+0x144>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d013      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a30      	ldr	r2, [pc, #192]	; (800a0bc <DMA_CalcBaseAndBitshift+0x148>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d00e      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a2f      	ldr	r2, [pc, #188]	; (800a0c0 <DMA_CalcBaseAndBitshift+0x14c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d009      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a2d      	ldr	r2, [pc, #180]	; (800a0c4 <DMA_CalcBaseAndBitshift+0x150>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d004      	beq.n	800a01c <DMA_CalcBaseAndBitshift+0xa8>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a2c      	ldr	r2, [pc, #176]	; (800a0c8 <DMA_CalcBaseAndBitshift+0x154>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d101      	bne.n	800a020 <DMA_CalcBaseAndBitshift+0xac>
 800a01c:	2301      	movs	r3, #1
 800a01e:	e000      	b.n	800a022 <DMA_CalcBaseAndBitshift+0xae>
 800a020:	2300      	movs	r3, #0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d024      	beq.n	800a070 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	3b10      	subs	r3, #16
 800a02e:	4a27      	ldr	r2, [pc, #156]	; (800a0cc <DMA_CalcBaseAndBitshift+0x158>)
 800a030:	fba2 2303 	umull	r2, r3, r2, r3
 800a034:	091b      	lsrs	r3, r3, #4
 800a036:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	4a24      	ldr	r2, [pc, #144]	; (800a0d0 <DMA_CalcBaseAndBitshift+0x15c>)
 800a040:	5cd3      	ldrb	r3, [r2, r3]
 800a042:	461a      	mov	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d908      	bls.n	800a060 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	4b1f      	ldr	r3, [pc, #124]	; (800a0d4 <DMA_CalcBaseAndBitshift+0x160>)
 800a056:	4013      	ands	r3, r2
 800a058:	1d1a      	adds	r2, r3, #4
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	659a      	str	r2, [r3, #88]	; 0x58
 800a05e:	e00d      	b.n	800a07c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	461a      	mov	r2, r3
 800a066:	4b1b      	ldr	r3, [pc, #108]	; (800a0d4 <DMA_CalcBaseAndBitshift+0x160>)
 800a068:	4013      	ands	r3, r2
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	6593      	str	r3, [r2, #88]	; 0x58
 800a06e:	e005      	b.n	800a07c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	40020010 	.word	0x40020010
 800a090:	40020028 	.word	0x40020028
 800a094:	40020040 	.word	0x40020040
 800a098:	40020058 	.word	0x40020058
 800a09c:	40020070 	.word	0x40020070
 800a0a0:	40020088 	.word	0x40020088
 800a0a4:	400200a0 	.word	0x400200a0
 800a0a8:	400200b8 	.word	0x400200b8
 800a0ac:	40020410 	.word	0x40020410
 800a0b0:	40020428 	.word	0x40020428
 800a0b4:	40020440 	.word	0x40020440
 800a0b8:	40020458 	.word	0x40020458
 800a0bc:	40020470 	.word	0x40020470
 800a0c0:	40020488 	.word	0x40020488
 800a0c4:	400204a0 	.word	0x400204a0
 800a0c8:	400204b8 	.word	0x400204b8
 800a0cc:	aaaaaaab 	.word	0xaaaaaaab
 800a0d0:	08019288 	.word	0x08019288
 800a0d4:	fffffc00 	.word	0xfffffc00

0800a0d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d120      	bne.n	800a12e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d858      	bhi.n	800a1a6 <DMA_CheckFifoParam+0xce>
 800a0f4:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <DMA_CheckFifoParam+0x24>)
 800a0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fa:	bf00      	nop
 800a0fc:	0800a10d 	.word	0x0800a10d
 800a100:	0800a11f 	.word	0x0800a11f
 800a104:	0800a10d 	.word	0x0800a10d
 800a108:	0800a1a7 	.word	0x0800a1a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d048      	beq.n	800a1aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a11c:	e045      	b.n	800a1aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a126:	d142      	bne.n	800a1ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a12c:	e03f      	b.n	800a1ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a136:	d123      	bne.n	800a180 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d838      	bhi.n	800a1b2 <DMA_CheckFifoParam+0xda>
 800a140:	a201      	add	r2, pc, #4	; (adr r2, 800a148 <DMA_CheckFifoParam+0x70>)
 800a142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a146:	bf00      	nop
 800a148:	0800a159 	.word	0x0800a159
 800a14c:	0800a15f 	.word	0x0800a15f
 800a150:	0800a159 	.word	0x0800a159
 800a154:	0800a171 	.word	0x0800a171
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	73fb      	strb	r3, [r7, #15]
        break;
 800a15c:	e030      	b.n	800a1c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d025      	beq.n	800a1b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a16e:	e022      	b.n	800a1b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a174:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a178:	d11f      	bne.n	800a1ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a17e:	e01c      	b.n	800a1ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a184:	2b02      	cmp	r3, #2
 800a186:	d902      	bls.n	800a18e <DMA_CheckFifoParam+0xb6>
 800a188:	2b03      	cmp	r3, #3
 800a18a:	d003      	beq.n	800a194 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a18c:	e018      	b.n	800a1c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	73fb      	strb	r3, [r7, #15]
        break;
 800a192:	e015      	b.n	800a1c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00e      	beq.n	800a1be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a4:	e00b      	b.n	800a1be <DMA_CheckFifoParam+0xe6>
        break;
 800a1a6:	bf00      	nop
 800a1a8:	e00a      	b.n	800a1c0 <DMA_CheckFifoParam+0xe8>
        break;
 800a1aa:	bf00      	nop
 800a1ac:	e008      	b.n	800a1c0 <DMA_CheckFifoParam+0xe8>
        break;
 800a1ae:	bf00      	nop
 800a1b0:	e006      	b.n	800a1c0 <DMA_CheckFifoParam+0xe8>
        break;
 800a1b2:	bf00      	nop
 800a1b4:	e004      	b.n	800a1c0 <DMA_CheckFifoParam+0xe8>
        break;
 800a1b6:	bf00      	nop
 800a1b8:	e002      	b.n	800a1c0 <DMA_CheckFifoParam+0xe8>
        break;
 800a1ba:	bf00      	nop
 800a1bc:	e000      	b.n	800a1c0 <DMA_CheckFifoParam+0xe8>
    break;
 800a1be:	bf00      	nop
    }
  }

  return status;
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop

0800a1d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a38      	ldr	r2, [pc, #224]	; (800a2c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d022      	beq.n	800a22e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a36      	ldr	r2, [pc, #216]	; (800a2c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d01d      	beq.n	800a22e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a35      	ldr	r2, [pc, #212]	; (800a2cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d018      	beq.n	800a22e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a33      	ldr	r2, [pc, #204]	; (800a2d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d013      	beq.n	800a22e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a32      	ldr	r2, [pc, #200]	; (800a2d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d00e      	beq.n	800a22e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a30      	ldr	r2, [pc, #192]	; (800a2d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d009      	beq.n	800a22e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a2f      	ldr	r2, [pc, #188]	; (800a2dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d004      	beq.n	800a22e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a2d      	ldr	r2, [pc, #180]	; (800a2e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d101      	bne.n	800a232 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a22e:	2301      	movs	r3, #1
 800a230:	e000      	b.n	800a234 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a232:	2300      	movs	r3, #0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d01a      	beq.n	800a26e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	3b08      	subs	r3, #8
 800a240:	4a28      	ldr	r2, [pc, #160]	; (800a2e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a242:	fba2 2303 	umull	r2, r3, r2, r3
 800a246:	091b      	lsrs	r3, r3, #4
 800a248:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	4b26      	ldr	r3, [pc, #152]	; (800a2e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a24e:	4413      	add	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	461a      	mov	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a24      	ldr	r2, [pc, #144]	; (800a2ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a25c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f003 031f 	and.w	r3, r3, #31
 800a264:	2201      	movs	r2, #1
 800a266:	409a      	lsls	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a26c:	e024      	b.n	800a2b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	3b10      	subs	r3, #16
 800a276:	4a1e      	ldr	r2, [pc, #120]	; (800a2f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a278:	fba2 2303 	umull	r2, r3, r2, r3
 800a27c:	091b      	lsrs	r3, r3, #4
 800a27e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	4a1c      	ldr	r2, [pc, #112]	; (800a2f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d806      	bhi.n	800a296 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	4a1b      	ldr	r2, [pc, #108]	; (800a2f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d902      	bls.n	800a296 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3308      	adds	r3, #8
 800a294:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	4b18      	ldr	r3, [pc, #96]	; (800a2fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a29a:	4413      	add	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	461a      	mov	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a16      	ldr	r2, [pc, #88]	; (800a300 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a2a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f003 031f 	and.w	r3, r3, #31
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	409a      	lsls	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a2b8:	bf00      	nop
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	58025408 	.word	0x58025408
 800a2c8:	5802541c 	.word	0x5802541c
 800a2cc:	58025430 	.word	0x58025430
 800a2d0:	58025444 	.word	0x58025444
 800a2d4:	58025458 	.word	0x58025458
 800a2d8:	5802546c 	.word	0x5802546c
 800a2dc:	58025480 	.word	0x58025480
 800a2e0:	58025494 	.word	0x58025494
 800a2e4:	cccccccd 	.word	0xcccccccd
 800a2e8:	16009600 	.word	0x16009600
 800a2ec:	58025880 	.word	0x58025880
 800a2f0:	aaaaaaab 	.word	0xaaaaaaab
 800a2f4:	400204b8 	.word	0x400204b8
 800a2f8:	4002040f 	.word	0x4002040f
 800a2fc:	10008200 	.word	0x10008200
 800a300:	40020880 	.word	0x40020880

0800a304 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	b2db      	uxtb	r3, r3
 800a312:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d04a      	beq.n	800a3b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b08      	cmp	r3, #8
 800a31e:	d847      	bhi.n	800a3b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a25      	ldr	r2, [pc, #148]	; (800a3bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d022      	beq.n	800a370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a24      	ldr	r2, [pc, #144]	; (800a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d01d      	beq.n	800a370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a22      	ldr	r2, [pc, #136]	; (800a3c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d018      	beq.n	800a370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a21      	ldr	r2, [pc, #132]	; (800a3c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d013      	beq.n	800a370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a1f      	ldr	r2, [pc, #124]	; (800a3cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d00e      	beq.n	800a370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a1e      	ldr	r2, [pc, #120]	; (800a3d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d009      	beq.n	800a370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a1c      	ldr	r2, [pc, #112]	; (800a3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d004      	beq.n	800a370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a1b      	ldr	r2, [pc, #108]	; (800a3d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d101      	bne.n	800a374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a370:	2301      	movs	r3, #1
 800a372:	e000      	b.n	800a376 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a374:	2300      	movs	r3, #0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00a      	beq.n	800a390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	4b17      	ldr	r3, [pc, #92]	; (800a3dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a37e:	4413      	add	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	461a      	mov	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a15      	ldr	r2, [pc, #84]	; (800a3e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a38c:	671a      	str	r2, [r3, #112]	; 0x70
 800a38e:	e009      	b.n	800a3a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	4b14      	ldr	r3, [pc, #80]	; (800a3e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a394:	4413      	add	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	461a      	mov	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a11      	ldr	r2, [pc, #68]	; (800a3e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a3a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	409a      	lsls	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a3b0:	bf00      	nop
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	58025408 	.word	0x58025408
 800a3c0:	5802541c 	.word	0x5802541c
 800a3c4:	58025430 	.word	0x58025430
 800a3c8:	58025444 	.word	0x58025444
 800a3cc:	58025458 	.word	0x58025458
 800a3d0:	5802546c 	.word	0x5802546c
 800a3d4:	58025480 	.word	0x58025480
 800a3d8:	58025494 	.word	0x58025494
 800a3dc:	1600963f 	.word	0x1600963f
 800a3e0:	58025940 	.word	0x58025940
 800a3e4:	1000823f 	.word	0x1000823f
 800a3e8:	40020940 	.word	0x40020940

0800a3ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b089      	sub	sp, #36	; 0x24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a3fa:	4b89      	ldr	r3, [pc, #548]	; (800a620 <HAL_GPIO_Init+0x234>)
 800a3fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a3fe:	e194      	b.n	800a72a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	2101      	movs	r1, #1
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	fa01 f303 	lsl.w	r3, r1, r3
 800a40c:	4013      	ands	r3, r2
 800a40e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	2b00      	cmp	r3, #0
 800a414:	f000 8186 	beq.w	800a724 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d00b      	beq.n	800a438 <HAL_GPIO_Init+0x4c>
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d007      	beq.n	800a438 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a42c:	2b11      	cmp	r3, #17
 800a42e:	d003      	beq.n	800a438 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	2b12      	cmp	r3, #18
 800a436:	d130      	bne.n	800a49a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	2203      	movs	r2, #3
 800a444:	fa02 f303 	lsl.w	r3, r2, r3
 800a448:	43db      	mvns	r3, r3
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	4013      	ands	r3, r2
 800a44e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	68da      	ldr	r2, [r3, #12]
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	fa02 f303 	lsl.w	r3, r2, r3
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	4313      	orrs	r3, r2
 800a460:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	69ba      	ldr	r2, [r7, #24]
 800a466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a46e:	2201      	movs	r2, #1
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	fa02 f303 	lsl.w	r3, r2, r3
 800a476:	43db      	mvns	r3, r3
 800a478:	69ba      	ldr	r2, [r7, #24]
 800a47a:	4013      	ands	r3, r2
 800a47c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	091b      	lsrs	r3, r3, #4
 800a484:	f003 0201 	and.w	r2, r3, #1
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	fa02 f303 	lsl.w	r3, r2, r3
 800a48e:	69ba      	ldr	r2, [r7, #24]
 800a490:	4313      	orrs	r3, r2
 800a492:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	69ba      	ldr	r2, [r7, #24]
 800a498:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	005b      	lsls	r3, r3, #1
 800a4a4:	2203      	movs	r2, #3
 800a4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4aa:	43db      	mvns	r3, r3
 800a4ac:	69ba      	ldr	r2, [r7, #24]
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	689a      	ldr	r2, [r3, #8]
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a4be:	69ba      	ldr	r2, [r7, #24]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d003      	beq.n	800a4da <HAL_GPIO_Init+0xee>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	2b12      	cmp	r3, #18
 800a4d8:	d123      	bne.n	800a522 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	08da      	lsrs	r2, r3, #3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	3208      	adds	r2, #8
 800a4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	f003 0307 	and.w	r3, r3, #7
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	220f      	movs	r2, #15
 800a4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f6:	43db      	mvns	r3, r3
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	691a      	ldr	r2, [r3, #16]
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	f003 0307 	and.w	r3, r3, #7
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	fa02 f303 	lsl.w	r3, r2, r3
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	4313      	orrs	r3, r2
 800a512:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	08da      	lsrs	r2, r3, #3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	3208      	adds	r2, #8
 800a51c:	69b9      	ldr	r1, [r7, #24]
 800a51e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	005b      	lsls	r3, r3, #1
 800a52c:	2203      	movs	r2, #3
 800a52e:	fa02 f303 	lsl.w	r3, r2, r3
 800a532:	43db      	mvns	r3, r3
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	4013      	ands	r3, r2
 800a538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	f003 0203 	and.w	r2, r3, #3
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	005b      	lsls	r3, r3, #1
 800a546:	fa02 f303 	lsl.w	r3, r2, r3
 800a54a:	69ba      	ldr	r2, [r7, #24]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	69ba      	ldr	r2, [r7, #24]
 800a554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 80e0 	beq.w	800a724 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a564:	4b2f      	ldr	r3, [pc, #188]	; (800a624 <HAL_GPIO_Init+0x238>)
 800a566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a56a:	4a2e      	ldr	r2, [pc, #184]	; (800a624 <HAL_GPIO_Init+0x238>)
 800a56c:	f043 0302 	orr.w	r3, r3, #2
 800a570:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a574:	4b2b      	ldr	r3, [pc, #172]	; (800a624 <HAL_GPIO_Init+0x238>)
 800a576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a582:	4a29      	ldr	r2, [pc, #164]	; (800a628 <HAL_GPIO_Init+0x23c>)
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	089b      	lsrs	r3, r3, #2
 800a588:	3302      	adds	r3, #2
 800a58a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a58e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	f003 0303 	and.w	r3, r3, #3
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	220f      	movs	r2, #15
 800a59a:	fa02 f303 	lsl.w	r3, r2, r3
 800a59e:	43db      	mvns	r3, r3
 800a5a0:	69ba      	ldr	r2, [r7, #24]
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a20      	ldr	r2, [pc, #128]	; (800a62c <HAL_GPIO_Init+0x240>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d052      	beq.n	800a654 <HAL_GPIO_Init+0x268>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a1f      	ldr	r2, [pc, #124]	; (800a630 <HAL_GPIO_Init+0x244>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d031      	beq.n	800a61a <HAL_GPIO_Init+0x22e>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a1e      	ldr	r2, [pc, #120]	; (800a634 <HAL_GPIO_Init+0x248>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d02b      	beq.n	800a616 <HAL_GPIO_Init+0x22a>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a1d      	ldr	r2, [pc, #116]	; (800a638 <HAL_GPIO_Init+0x24c>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d025      	beq.n	800a612 <HAL_GPIO_Init+0x226>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a1c      	ldr	r2, [pc, #112]	; (800a63c <HAL_GPIO_Init+0x250>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d01f      	beq.n	800a60e <HAL_GPIO_Init+0x222>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a1b      	ldr	r2, [pc, #108]	; (800a640 <HAL_GPIO_Init+0x254>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d019      	beq.n	800a60a <HAL_GPIO_Init+0x21e>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a1a      	ldr	r2, [pc, #104]	; (800a644 <HAL_GPIO_Init+0x258>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d013      	beq.n	800a606 <HAL_GPIO_Init+0x21a>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4a19      	ldr	r2, [pc, #100]	; (800a648 <HAL_GPIO_Init+0x25c>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d00d      	beq.n	800a602 <HAL_GPIO_Init+0x216>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a18      	ldr	r2, [pc, #96]	; (800a64c <HAL_GPIO_Init+0x260>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d007      	beq.n	800a5fe <HAL_GPIO_Init+0x212>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a17      	ldr	r2, [pc, #92]	; (800a650 <HAL_GPIO_Init+0x264>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d101      	bne.n	800a5fa <HAL_GPIO_Init+0x20e>
 800a5f6:	2309      	movs	r3, #9
 800a5f8:	e02d      	b.n	800a656 <HAL_GPIO_Init+0x26a>
 800a5fa:	230a      	movs	r3, #10
 800a5fc:	e02b      	b.n	800a656 <HAL_GPIO_Init+0x26a>
 800a5fe:	2308      	movs	r3, #8
 800a600:	e029      	b.n	800a656 <HAL_GPIO_Init+0x26a>
 800a602:	2307      	movs	r3, #7
 800a604:	e027      	b.n	800a656 <HAL_GPIO_Init+0x26a>
 800a606:	2306      	movs	r3, #6
 800a608:	e025      	b.n	800a656 <HAL_GPIO_Init+0x26a>
 800a60a:	2305      	movs	r3, #5
 800a60c:	e023      	b.n	800a656 <HAL_GPIO_Init+0x26a>
 800a60e:	2304      	movs	r3, #4
 800a610:	e021      	b.n	800a656 <HAL_GPIO_Init+0x26a>
 800a612:	2303      	movs	r3, #3
 800a614:	e01f      	b.n	800a656 <HAL_GPIO_Init+0x26a>
 800a616:	2302      	movs	r3, #2
 800a618:	e01d      	b.n	800a656 <HAL_GPIO_Init+0x26a>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e01b      	b.n	800a656 <HAL_GPIO_Init+0x26a>
 800a61e:	bf00      	nop
 800a620:	58000080 	.word	0x58000080
 800a624:	58024400 	.word	0x58024400
 800a628:	58000400 	.word	0x58000400
 800a62c:	58020000 	.word	0x58020000
 800a630:	58020400 	.word	0x58020400
 800a634:	58020800 	.word	0x58020800
 800a638:	58020c00 	.word	0x58020c00
 800a63c:	58021000 	.word	0x58021000
 800a640:	58021400 	.word	0x58021400
 800a644:	58021800 	.word	0x58021800
 800a648:	58021c00 	.word	0x58021c00
 800a64c:	58022000 	.word	0x58022000
 800a650:	58022400 	.word	0x58022400
 800a654:	2300      	movs	r3, #0
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	f002 0203 	and.w	r2, r2, #3
 800a65c:	0092      	lsls	r2, r2, #2
 800a65e:	4093      	lsls	r3, r2
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	4313      	orrs	r3, r2
 800a664:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a666:	4938      	ldr	r1, [pc, #224]	; (800a748 <HAL_GPIO_Init+0x35c>)
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	089b      	lsrs	r3, r3, #2
 800a66c:	3302      	adds	r3, #2
 800a66e:	69ba      	ldr	r2, [r7, #24]
 800a670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	43db      	mvns	r3, r3
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	4013      	ands	r3, r2
 800a682:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a690:	69ba      	ldr	r2, [r7, #24]
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	4313      	orrs	r3, r2
 800a696:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	43db      	mvns	r3, r3
 800a6a8:	69ba      	ldr	r2, [r7, #24]
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a6ba:	69ba      	ldr	r2, [r7, #24]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a6c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	43db      	mvns	r3, r3
 800a6d4:	69ba      	ldr	r2, [r7, #24]
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800a6e6:	69ba      	ldr	r2, [r7, #24]
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a6ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a6f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	43db      	mvns	r3, r3
 800a702:	69ba      	ldr	r2, [r7, #24]
 800a704:	4013      	ands	r3, r2
 800a706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d003      	beq.n	800a71c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	4313      	orrs	r3, r2
 800a71a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a71c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	3301      	adds	r3, #1
 800a728:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	fa22 f303 	lsr.w	r3, r2, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	f47f ae63 	bne.w	800a400 <HAL_GPIO_Init+0x14>
  }
}
 800a73a:	bf00      	nop
 800a73c:	bf00      	nop
 800a73e:	3724      	adds	r7, #36	; 0x24
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr
 800a748:	58000400 	.word	0x58000400

0800a74c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b087      	sub	sp, #28
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a756:	2300      	movs	r3, #0
 800a758:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a75a:	4b75      	ldr	r3, [pc, #468]	; (800a930 <HAL_GPIO_DeInit+0x1e4>)
 800a75c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800a75e:	e0d9      	b.n	800a914 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800a760:	2201      	movs	r2, #1
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	fa02 f303 	lsl.w	r3, r2, r3
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	4013      	ands	r3, r2
 800a76c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	f000 80cc 	beq.w	800a90e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a776:	4a6f      	ldr	r2, [pc, #444]	; (800a934 <HAL_GPIO_DeInit+0x1e8>)
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	089b      	lsrs	r3, r3, #2
 800a77c:	3302      	adds	r3, #2
 800a77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a782:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	220f      	movs	r2, #15
 800a78e:	fa02 f303 	lsl.w	r3, r2, r3
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	4013      	ands	r3, r2
 800a796:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a67      	ldr	r2, [pc, #412]	; (800a938 <HAL_GPIO_DeInit+0x1ec>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d037      	beq.n	800a810 <HAL_GPIO_DeInit+0xc4>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a66      	ldr	r2, [pc, #408]	; (800a93c <HAL_GPIO_DeInit+0x1f0>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d031      	beq.n	800a80c <HAL_GPIO_DeInit+0xc0>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a65      	ldr	r2, [pc, #404]	; (800a940 <HAL_GPIO_DeInit+0x1f4>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d02b      	beq.n	800a808 <HAL_GPIO_DeInit+0xbc>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a64      	ldr	r2, [pc, #400]	; (800a944 <HAL_GPIO_DeInit+0x1f8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d025      	beq.n	800a804 <HAL_GPIO_DeInit+0xb8>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a63      	ldr	r2, [pc, #396]	; (800a948 <HAL_GPIO_DeInit+0x1fc>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d01f      	beq.n	800a800 <HAL_GPIO_DeInit+0xb4>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a62      	ldr	r2, [pc, #392]	; (800a94c <HAL_GPIO_DeInit+0x200>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d019      	beq.n	800a7fc <HAL_GPIO_DeInit+0xb0>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a61      	ldr	r2, [pc, #388]	; (800a950 <HAL_GPIO_DeInit+0x204>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d013      	beq.n	800a7f8 <HAL_GPIO_DeInit+0xac>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a60      	ldr	r2, [pc, #384]	; (800a954 <HAL_GPIO_DeInit+0x208>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00d      	beq.n	800a7f4 <HAL_GPIO_DeInit+0xa8>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a5f      	ldr	r2, [pc, #380]	; (800a958 <HAL_GPIO_DeInit+0x20c>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d007      	beq.n	800a7f0 <HAL_GPIO_DeInit+0xa4>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a5e      	ldr	r2, [pc, #376]	; (800a95c <HAL_GPIO_DeInit+0x210>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d101      	bne.n	800a7ec <HAL_GPIO_DeInit+0xa0>
 800a7e8:	2309      	movs	r3, #9
 800a7ea:	e012      	b.n	800a812 <HAL_GPIO_DeInit+0xc6>
 800a7ec:	230a      	movs	r3, #10
 800a7ee:	e010      	b.n	800a812 <HAL_GPIO_DeInit+0xc6>
 800a7f0:	2308      	movs	r3, #8
 800a7f2:	e00e      	b.n	800a812 <HAL_GPIO_DeInit+0xc6>
 800a7f4:	2307      	movs	r3, #7
 800a7f6:	e00c      	b.n	800a812 <HAL_GPIO_DeInit+0xc6>
 800a7f8:	2306      	movs	r3, #6
 800a7fa:	e00a      	b.n	800a812 <HAL_GPIO_DeInit+0xc6>
 800a7fc:	2305      	movs	r3, #5
 800a7fe:	e008      	b.n	800a812 <HAL_GPIO_DeInit+0xc6>
 800a800:	2304      	movs	r3, #4
 800a802:	e006      	b.n	800a812 <HAL_GPIO_DeInit+0xc6>
 800a804:	2303      	movs	r3, #3
 800a806:	e004      	b.n	800a812 <HAL_GPIO_DeInit+0xc6>
 800a808:	2302      	movs	r3, #2
 800a80a:	e002      	b.n	800a812 <HAL_GPIO_DeInit+0xc6>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e000      	b.n	800a812 <HAL_GPIO_DeInit+0xc6>
 800a810:	2300      	movs	r3, #0
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	f002 0203 	and.w	r2, r2, #3
 800a818:	0092      	lsls	r2, r2, #2
 800a81a:	4093      	lsls	r3, r2
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d136      	bne.n	800a890 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	43db      	mvns	r3, r3
 800a82a:	401a      	ands	r2, r3
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	43db      	mvns	r3, r3
 800a838:	401a      	ands	r2, r3
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a83e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	43db      	mvns	r3, r3
 800a848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a84c:	4013      	ands	r3, r2
 800a84e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800a850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a854:	685a      	ldr	r2, [r3, #4]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	43db      	mvns	r3, r3
 800a85a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a85e:	4013      	ands	r3, r2
 800a860:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	220f      	movs	r2, #15
 800a86c:	fa02 f303 	lsl.w	r3, r2, r3
 800a870:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a872:	4a30      	ldr	r2, [pc, #192]	; (800a934 <HAL_GPIO_DeInit+0x1e8>)
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	089b      	lsrs	r3, r3, #2
 800a878:	3302      	adds	r3, #2
 800a87a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	43da      	mvns	r2, r3
 800a882:	482c      	ldr	r0, [pc, #176]	; (800a934 <HAL_GPIO_DeInit+0x1e8>)
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	089b      	lsrs	r3, r3, #2
 800a888:	400a      	ands	r2, r1
 800a88a:	3302      	adds	r3, #2
 800a88c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	2103      	movs	r1, #3
 800a89a:	fa01 f303 	lsl.w	r3, r1, r3
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	08da      	lsrs	r2, r3, #3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3208      	adds	r2, #8
 800a8ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	220f      	movs	r2, #15
 800a8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a8be:	43db      	mvns	r3, r3
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	08d2      	lsrs	r2, r2, #3
 800a8c4:	4019      	ands	r1, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3208      	adds	r2, #8
 800a8ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	68da      	ldr	r2, [r3, #12]
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	2103      	movs	r1, #3
 800a8d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a8dc:	43db      	mvns	r3, r3
 800a8de:	401a      	ands	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a8f0:	43db      	mvns	r3, r3
 800a8f2:	401a      	ands	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	689a      	ldr	r2, [r3, #8]
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	2103      	movs	r1, #3
 800a902:	fa01 f303 	lsl.w	r3, r1, r3
 800a906:	43db      	mvns	r3, r3
 800a908:	401a      	ands	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	3301      	adds	r3, #1
 800a912:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	fa22 f303 	lsr.w	r3, r2, r3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f47f af1f 	bne.w	800a760 <HAL_GPIO_DeInit+0x14>
  }
}
 800a922:	bf00      	nop
 800a924:	bf00      	nop
 800a926:	371c      	adds	r7, #28
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	58000080 	.word	0x58000080
 800a934:	58000400 	.word	0x58000400
 800a938:	58020000 	.word	0x58020000
 800a93c:	58020400 	.word	0x58020400
 800a940:	58020800 	.word	0x58020800
 800a944:	58020c00 	.word	0x58020c00
 800a948:	58021000 	.word	0x58021000
 800a94c:	58021400 	.word	0x58021400
 800a950:	58021800 	.word	0x58021800
 800a954:	58021c00 	.word	0x58021c00
 800a958:	58022000 	.word	0x58022000
 800a95c:	58022400 	.word	0x58022400

0800a960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	460b      	mov	r3, r1
 800a96a:	807b      	strh	r3, [r7, #2]
 800a96c:	4613      	mov	r3, r2
 800a96e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a970:	787b      	ldrb	r3, [r7, #1]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a976:	887a      	ldrh	r2, [r7, #2]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a97c:	e003      	b.n	800a986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a97e:	887b      	ldrh	r3, [r7, #2]
 800a980:	041a      	lsls	r2, r3, #16
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	619a      	str	r2, [r3, #24]
}
 800a986:	bf00      	nop
 800a988:	370c      	adds	r7, #12
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a992:	b480      	push	{r7}
 800a994:	b085      	sub	sp, #20
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	460b      	mov	r3, r1
 800a99c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a9a4:	887a      	ldrh	r2, [r7, #2]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	041a      	lsls	r2, r3, #16
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	43d9      	mvns	r1, r3
 800a9b0:	887b      	ldrh	r3, [r7, #2]
 800a9b2:	400b      	ands	r3, r1
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	619a      	str	r2, [r3, #24]
}
 800a9ba:	bf00      	nop
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b082      	sub	sp, #8
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a9d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a9d8:	88fb      	ldrh	r3, [r7, #6]
 800a9da:	4013      	ands	r3, r2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d008      	beq.n	800a9f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a9e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9e4:	88fb      	ldrh	r3, [r7, #6]
 800a9e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a9ea:	88fb      	ldrh	r3, [r7, #6]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7f6 fcbb 	bl	8001368 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a9f2:	bf00      	nop
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
	...

0800a9fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e07f      	b.n	800ab0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7f9 ffee 	bl	8004a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2224      	movs	r2, #36	; 0x24
 800aa2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f022 0201 	bic.w	r2, r2, #1
 800aa3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800aa4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d107      	bne.n	800aa76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	689a      	ldr	r2, [r3, #8]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa72:	609a      	str	r2, [r3, #8]
 800aa74:	e006      	b.n	800aa84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	689a      	ldr	r2, [r3, #8]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800aa82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d104      	bne.n	800aa96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	6859      	ldr	r1, [r3, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	4b1d      	ldr	r3, [pc, #116]	; (800ab18 <HAL_I2C_Init+0x11c>)
 800aaa2:	430b      	orrs	r3, r1
 800aaa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68da      	ldr	r2, [r3, #12]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aab4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	691a      	ldr	r2, [r3, #16]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	ea42 0103 	orr.w	r1, r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	021a      	lsls	r2, r3, #8
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	69d9      	ldr	r1, [r3, #28]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a1a      	ldr	r2, [r3, #32]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	430a      	orrs	r2, r1
 800aade:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f042 0201 	orr.w	r2, r2, #1
 800aaee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2220      	movs	r2, #32
 800aafa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	02008000 	.word	0x02008000

0800ab1c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d101      	bne.n	800ab2e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e021      	b.n	800ab72 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2224      	movs	r2, #36	; 0x24
 800ab32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f022 0201 	bic.w	r2, r2, #1
 800ab44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7fa f80e 	bl	8004b68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b088      	sub	sp, #32
 800ab80:	af02      	add	r7, sp, #8
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	4608      	mov	r0, r1
 800ab86:	4611      	mov	r1, r2
 800ab88:	461a      	mov	r2, r3
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	817b      	strh	r3, [r7, #10]
 800ab8e:	460b      	mov	r3, r1
 800ab90:	813b      	strh	r3, [r7, #8]
 800ab92:	4613      	mov	r3, r2
 800ab94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b20      	cmp	r3, #32
 800aba0:	f040 80f9 	bne.w	800ad96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d002      	beq.n	800abb0 <HAL_I2C_Mem_Write+0x34>
 800abaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abac:	2b00      	cmp	r3, #0
 800abae:	d105      	bne.n	800abbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	e0ed      	b.n	800ad98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d101      	bne.n	800abca <HAL_I2C_Mem_Write+0x4e>
 800abc6:	2302      	movs	r3, #2
 800abc8:	e0e6      	b.n	800ad98 <HAL_I2C_Mem_Write+0x21c>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800abd2:	f7fb f985 	bl	8005ee0 <HAL_GetTick>
 800abd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	2319      	movs	r3, #25
 800abde:	2201      	movs	r2, #1
 800abe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f000 fac3 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e0d1      	b.n	800ad98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2221      	movs	r2, #33	; 0x21
 800abf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2240      	movs	r2, #64	; 0x40
 800ac00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6a3a      	ldr	r2, [r7, #32]
 800ac0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ac1c:	88f8      	ldrh	r0, [r7, #6]
 800ac1e:	893a      	ldrh	r2, [r7, #8]
 800ac20:	8979      	ldrh	r1, [r7, #10]
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 f9d3 	bl	800afd8 <I2C_RequestMemoryWrite>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d005      	beq.n	800ac44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e0a9      	b.n	800ad98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	2bff      	cmp	r3, #255	; 0xff
 800ac4c:	d90e      	bls.n	800ac6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	22ff      	movs	r2, #255	; 0xff
 800ac52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac58:	b2da      	uxtb	r2, r3
 800ac5a:	8979      	ldrh	r1, [r7, #10]
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f000 fba5 	bl	800b3b4 <I2C_TransferConfig>
 800ac6a:	e00f      	b.n	800ac8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	8979      	ldrh	r1, [r7, #10]
 800ac7e:	2300      	movs	r3, #0
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f000 fb94 	bl	800b3b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 faad 	bl	800b1f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e07b      	b.n	800ad98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca4:	781a      	ldrb	r2, [r3, #0]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acba:	b29b      	uxth	r3, r3
 800acbc:	3b01      	subs	r3, #1
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acc8:	3b01      	subs	r3, #1
 800acca:	b29a      	uxth	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d034      	beq.n	800ad44 <HAL_I2C_Mem_Write+0x1c8>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d130      	bne.n	800ad44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace8:	2200      	movs	r2, #0
 800acea:	2180      	movs	r1, #128	; 0x80
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 fa3f 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e04d      	b.n	800ad98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	2bff      	cmp	r3, #255	; 0xff
 800ad04:	d90e      	bls.n	800ad24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	22ff      	movs	r2, #255	; 0xff
 800ad0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	8979      	ldrh	r1, [r7, #10]
 800ad14:	2300      	movs	r3, #0
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 fb49 	bl	800b3b4 <I2C_TransferConfig>
 800ad22:	e00f      	b.n	800ad44 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	8979      	ldrh	r1, [r7, #10]
 800ad36:	2300      	movs	r3, #0
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f000 fb38 	bl	800b3b4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d19e      	bne.n	800ac8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f000 fa8c 	bl	800b270 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e01a      	b.n	800ad98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2220      	movs	r2, #32
 800ad68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6859      	ldr	r1, [r3, #4]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	4b0a      	ldr	r3, [pc, #40]	; (800ada0 <HAL_I2C_Mem_Write+0x224>)
 800ad76:	400b      	ands	r3, r1
 800ad78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	e000      	b.n	800ad98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ad96:	2302      	movs	r3, #2
  }
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	fe00e800 	.word	0xfe00e800

0800ada4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af02      	add	r7, sp, #8
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	4608      	mov	r0, r1
 800adae:	4611      	mov	r1, r2
 800adb0:	461a      	mov	r2, r3
 800adb2:	4603      	mov	r3, r0
 800adb4:	817b      	strh	r3, [r7, #10]
 800adb6:	460b      	mov	r3, r1
 800adb8:	813b      	strh	r3, [r7, #8]
 800adba:	4613      	mov	r3, r2
 800adbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b20      	cmp	r3, #32
 800adc8:	f040 80fd 	bne.w	800afc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800adcc:	6a3b      	ldr	r3, [r7, #32]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <HAL_I2C_Mem_Read+0x34>
 800add2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800add4:	2b00      	cmp	r3, #0
 800add6:	d105      	bne.n	800ade4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e0f1      	b.n	800afc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800adea:	2b01      	cmp	r3, #1
 800adec:	d101      	bne.n	800adf2 <HAL_I2C_Mem_Read+0x4e>
 800adee:	2302      	movs	r3, #2
 800adf0:	e0ea      	b.n	800afc8 <HAL_I2C_Mem_Read+0x224>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800adfa:	f7fb f871 	bl	8005ee0 <HAL_GetTick>
 800adfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	2319      	movs	r3, #25
 800ae06:	2201      	movs	r2, #1
 800ae08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 f9af 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e0d5      	b.n	800afc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2222      	movs	r2, #34	; 0x22
 800ae20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2240      	movs	r2, #64	; 0x40
 800ae28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6a3a      	ldr	r2, [r7, #32]
 800ae36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ae3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ae44:	88f8      	ldrh	r0, [r7, #6]
 800ae46:	893a      	ldrh	r2, [r7, #8]
 800ae48:	8979      	ldrh	r1, [r7, #10]
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	4603      	mov	r3, r0
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f000 f913 	bl	800b080 <I2C_RequestMemoryRead>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d005      	beq.n	800ae6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e0ad      	b.n	800afc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	2bff      	cmp	r3, #255	; 0xff
 800ae74:	d90e      	bls.n	800ae94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	22ff      	movs	r2, #255	; 0xff
 800ae7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	8979      	ldrh	r1, [r7, #10]
 800ae84:	4b52      	ldr	r3, [pc, #328]	; (800afd0 <HAL_I2C_Mem_Read+0x22c>)
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f000 fa91 	bl	800b3b4 <I2C_TransferConfig>
 800ae92:	e00f      	b.n	800aeb4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	8979      	ldrh	r1, [r7, #10]
 800aea6:	4b4a      	ldr	r3, [pc, #296]	; (800afd0 <HAL_I2C_Mem_Read+0x22c>)
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f000 fa80 	bl	800b3b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeba:	2200      	movs	r2, #0
 800aebc:	2104      	movs	r1, #4
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f000 f956 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e07c      	b.n	800afc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed8:	b2d2      	uxtb	r2, r2
 800aeda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	1c5a      	adds	r2, r3, #1
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeea:	3b01      	subs	r3, #1
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	3b01      	subs	r3, #1
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af04:	b29b      	uxth	r3, r3
 800af06:	2b00      	cmp	r3, #0
 800af08:	d034      	beq.n	800af74 <HAL_I2C_Mem_Read+0x1d0>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d130      	bne.n	800af74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af18:	2200      	movs	r2, #0
 800af1a:	2180      	movs	r1, #128	; 0x80
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f000 f927 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e04d      	b.n	800afc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af30:	b29b      	uxth	r3, r3
 800af32:	2bff      	cmp	r3, #255	; 0xff
 800af34:	d90e      	bls.n	800af54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	22ff      	movs	r2, #255	; 0xff
 800af3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af40:	b2da      	uxtb	r2, r3
 800af42:	8979      	ldrh	r1, [r7, #10]
 800af44:	2300      	movs	r3, #0
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f000 fa31 	bl	800b3b4 <I2C_TransferConfig>
 800af52:	e00f      	b.n	800af74 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af58:	b29a      	uxth	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af62:	b2da      	uxtb	r2, r3
 800af64:	8979      	ldrh	r1, [r7, #10]
 800af66:	2300      	movs	r3, #0
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f000 fa20 	bl	800b3b4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af78:	b29b      	uxth	r3, r3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d19a      	bne.n	800aeb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f000 f974 	bl	800b270 <I2C_WaitOnSTOPFlagUntilTimeout>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e01a      	b.n	800afc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2220      	movs	r2, #32
 800af98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	6859      	ldr	r1, [r3, #4]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <HAL_I2C_Mem_Read+0x230>)
 800afa6:	400b      	ands	r3, r1
 800afa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2220      	movs	r2, #32
 800afae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	e000      	b.n	800afc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800afc6:	2302      	movs	r3, #2
  }
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	80002400 	.word	0x80002400
 800afd4:	fe00e800 	.word	0xfe00e800

0800afd8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af02      	add	r7, sp, #8
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	4608      	mov	r0, r1
 800afe2:	4611      	mov	r1, r2
 800afe4:	461a      	mov	r2, r3
 800afe6:	4603      	mov	r3, r0
 800afe8:	817b      	strh	r3, [r7, #10]
 800afea:	460b      	mov	r3, r1
 800afec:	813b      	strh	r3, [r7, #8]
 800afee:	4613      	mov	r3, r2
 800aff0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aff2:	88fb      	ldrh	r3, [r7, #6]
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	8979      	ldrh	r1, [r7, #10]
 800aff8:	4b20      	ldr	r3, [pc, #128]	; (800b07c <I2C_RequestMemoryWrite+0xa4>)
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f000 f9d7 	bl	800b3b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b006:	69fa      	ldr	r2, [r7, #28]
 800b008:	69b9      	ldr	r1, [r7, #24]
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f000 f8f0 	bl	800b1f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	e02c      	b.n	800b074 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b01a:	88fb      	ldrh	r3, [r7, #6]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d105      	bne.n	800b02c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b020:	893b      	ldrh	r3, [r7, #8]
 800b022:	b2da      	uxtb	r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	629a      	str	r2, [r3, #40]	; 0x28
 800b02a:	e015      	b.n	800b058 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b02c:	893b      	ldrh	r3, [r7, #8]
 800b02e:	0a1b      	lsrs	r3, r3, #8
 800b030:	b29b      	uxth	r3, r3
 800b032:	b2da      	uxtb	r2, r3
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b03a:	69fa      	ldr	r2, [r7, #28]
 800b03c:	69b9      	ldr	r1, [r7, #24]
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f000 f8d6 	bl	800b1f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	e012      	b.n	800b074 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b04e:	893b      	ldrh	r3, [r7, #8]
 800b050:	b2da      	uxtb	r2, r3
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	2200      	movs	r2, #0
 800b060:	2180      	movs	r1, #128	; 0x80
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 f884 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e000      	b.n	800b074 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	80002000 	.word	0x80002000

0800b080 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af02      	add	r7, sp, #8
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	4608      	mov	r0, r1
 800b08a:	4611      	mov	r1, r2
 800b08c:	461a      	mov	r2, r3
 800b08e:	4603      	mov	r3, r0
 800b090:	817b      	strh	r3, [r7, #10]
 800b092:	460b      	mov	r3, r1
 800b094:	813b      	strh	r3, [r7, #8]
 800b096:	4613      	mov	r3, r2
 800b098:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b09a:	88fb      	ldrh	r3, [r7, #6]
 800b09c:	b2da      	uxtb	r2, r3
 800b09e:	8979      	ldrh	r1, [r7, #10]
 800b0a0:	4b20      	ldr	r3, [pc, #128]	; (800b124 <I2C_RequestMemoryRead+0xa4>)
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f000 f984 	bl	800b3b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0ac:	69fa      	ldr	r2, [r7, #28]
 800b0ae:	69b9      	ldr	r1, [r7, #24]
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 f89d 	bl	800b1f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d001      	beq.n	800b0c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e02c      	b.n	800b11a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b0c0:	88fb      	ldrh	r3, [r7, #6]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d105      	bne.n	800b0d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b0c6:	893b      	ldrh	r3, [r7, #8]
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	629a      	str	r2, [r3, #40]	; 0x28
 800b0d0:	e015      	b.n	800b0fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b0d2:	893b      	ldrh	r3, [r7, #8]
 800b0d4:	0a1b      	lsrs	r3, r3, #8
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0e0:	69fa      	ldr	r2, [r7, #28]
 800b0e2:	69b9      	ldr	r1, [r7, #24]
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 f883 	bl	800b1f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e012      	b.n	800b11a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b0f4:	893b      	ldrh	r3, [r7, #8]
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	2200      	movs	r2, #0
 800b106:	2140      	movs	r1, #64	; 0x40
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f000 f831 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	e000      	b.n	800b11a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	80002000 	.word	0x80002000

0800b128 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d103      	bne.n	800b146 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2200      	movs	r2, #0
 800b144:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	f003 0301 	and.w	r3, r3, #1
 800b150:	2b01      	cmp	r3, #1
 800b152:	d007      	beq.n	800b164 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	699a      	ldr	r2, [r3, #24]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f042 0201 	orr.w	r2, r2, #1
 800b162:	619a      	str	r2, [r3, #24]
  }
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	603b      	str	r3, [r7, #0]
 800b17c:	4613      	mov	r3, r2
 800b17e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b180:	e022      	b.n	800b1c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b188:	d01e      	beq.n	800b1c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b18a:	f7fa fea9 	bl	8005ee0 <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	429a      	cmp	r2, r3
 800b198:	d302      	bcc.n	800b1a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d113      	bne.n	800b1c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a4:	f043 0220 	orr.w	r2, r3, #32
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e00f      	b.n	800b1e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	699a      	ldr	r2, [r3, #24]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	68ba      	ldr	r2, [r7, #8]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	bf0c      	ite	eq
 800b1d8:	2301      	moveq	r3, #1
 800b1da:	2300      	movne	r3, #0
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	461a      	mov	r2, r3
 800b1e0:	79fb      	ldrb	r3, [r7, #7]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d0cd      	beq.n	800b182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b1fc:	e02c      	b.n	800b258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	68b9      	ldr	r1, [r7, #8]
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f000 f870 	bl	800b2e8 <I2C_IsAcknowledgeFailed>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e02a      	b.n	800b268 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b218:	d01e      	beq.n	800b258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b21a:	f7fa fe61 	bl	8005ee0 <HAL_GetTick>
 800b21e:	4602      	mov	r2, r0
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	429a      	cmp	r2, r3
 800b228:	d302      	bcc.n	800b230 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d113      	bne.n	800b258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b234:	f043 0220 	orr.w	r2, r3, #32
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2220      	movs	r2, #32
 800b240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e007      	b.n	800b268 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	699b      	ldr	r3, [r3, #24]
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	2b02      	cmp	r3, #2
 800b264:	d1cb      	bne.n	800b1fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b27c:	e028      	b.n	800b2d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	68b9      	ldr	r1, [r7, #8]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f000 f830 	bl	800b2e8 <I2C_IsAcknowledgeFailed>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	e026      	b.n	800b2e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b292:	f7fa fe25 	bl	8005ee0 <HAL_GetTick>
 800b296:	4602      	mov	r2, r0
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d302      	bcc.n	800b2a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d113      	bne.n	800b2d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ac:	f043 0220 	orr.w	r2, r3, #32
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e007      	b.n	800b2e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	f003 0320 	and.w	r3, r3, #32
 800b2da:	2b20      	cmp	r3, #32
 800b2dc:	d1cf      	bne.n	800b27e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	f003 0310 	and.w	r3, r3, #16
 800b2fe:	2b10      	cmp	r3, #16
 800b300:	d151      	bne.n	800b3a6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b302:	e022      	b.n	800b34a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30a:	d01e      	beq.n	800b34a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b30c:	f7fa fde8 	bl	8005ee0 <HAL_GetTick>
 800b310:	4602      	mov	r2, r0
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d302      	bcc.n	800b322 <I2C_IsAcknowledgeFailed+0x3a>
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d113      	bne.n	800b34a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b326:	f043 0220 	orr.w	r2, r3, #32
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2220      	movs	r2, #32
 800b332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e02e      	b.n	800b3a8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	f003 0320 	and.w	r3, r3, #32
 800b354:	2b20      	cmp	r3, #32
 800b356:	d1d5      	bne.n	800b304 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2210      	movs	r2, #16
 800b35e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2220      	movs	r2, #32
 800b366:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f7ff fedd 	bl	800b128 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6859      	ldr	r1, [r3, #4]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	4b0d      	ldr	r3, [pc, #52]	; (800b3b0 <I2C_IsAcknowledgeFailed+0xc8>)
 800b37a:	400b      	ands	r3, r1
 800b37c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b382:	f043 0204 	orr.w	r2, r3, #4
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2220      	movs	r2, #32
 800b38e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e000      	b.n	800b3a8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	fe00e800 	.word	0xfe00e800

0800b3b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	607b      	str	r3, [r7, #4]
 800b3be:	460b      	mov	r3, r1
 800b3c0:	817b      	strh	r3, [r7, #10]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	0d5b      	lsrs	r3, r3, #21
 800b3d0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b3d4:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <I2C_TransferConfig+0x58>)
 800b3d6:	430b      	orrs	r3, r1
 800b3d8:	43db      	mvns	r3, r3
 800b3da:	ea02 0103 	and.w	r1, r2, r3
 800b3de:	897b      	ldrh	r3, [r7, #10]
 800b3e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b3e4:	7a7b      	ldrb	r3, [r7, #9]
 800b3e6:	041b      	lsls	r3, r3, #16
 800b3e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3ec:	431a      	orrs	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	431a      	orrs	r2, r3
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b3fe:	bf00      	nop
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	03ff63ff 	.word	0x03ff63ff

0800b410 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b20      	cmp	r3, #32
 800b424:	d138      	bne.n	800b498 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d101      	bne.n	800b434 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b430:	2302      	movs	r3, #2
 800b432:	e032      	b.n	800b49a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2224      	movs	r2, #36	; 0x24
 800b440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f022 0201 	bic.w	r2, r2, #1
 800b452:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b462:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6819      	ldr	r1, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	430a      	orrs	r2, r1
 800b472:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f042 0201 	orr.w	r2, r2, #1
 800b482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2220      	movs	r2, #32
 800b488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	e000      	b.n	800b49a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b498:	2302      	movs	r3, #2
  }
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	370c      	adds	r7, #12
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b085      	sub	sp, #20
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b20      	cmp	r3, #32
 800b4ba:	d139      	bne.n	800b530 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d101      	bne.n	800b4ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	e033      	b.n	800b532 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2224      	movs	r2, #36	; 0x24
 800b4d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f022 0201 	bic.w	r2, r2, #1
 800b4e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b4f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	021b      	lsls	r3, r3, #8
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	4313      	orrs	r3, r2
 800b502:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f042 0201 	orr.w	r2, r2, #1
 800b51a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2220      	movs	r2, #32
 800b520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	e000      	b.n	800b532 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b530:	2302      	movs	r3, #2
  }
}
 800b532:	4618      	mov	r0, r3
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
	...

0800b540 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b548:	4b19      	ldr	r3, [pc, #100]	; (800b5b0 <HAL_PWREx_ConfigSupply+0x70>)
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	f003 0304 	and.w	r3, r3, #4
 800b550:	2b04      	cmp	r3, #4
 800b552:	d00a      	beq.n	800b56a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b554:	4b16      	ldr	r3, [pc, #88]	; (800b5b0 <HAL_PWREx_ConfigSupply+0x70>)
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	f003 0307 	and.w	r3, r3, #7
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d001      	beq.n	800b566 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e01f      	b.n	800b5a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	e01d      	b.n	800b5a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b56a:	4b11      	ldr	r3, [pc, #68]	; (800b5b0 <HAL_PWREx_ConfigSupply+0x70>)
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	f023 0207 	bic.w	r2, r3, #7
 800b572:	490f      	ldr	r1, [pc, #60]	; (800b5b0 <HAL_PWREx_ConfigSupply+0x70>)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4313      	orrs	r3, r2
 800b578:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b57a:	f7fa fcb1 	bl	8005ee0 <HAL_GetTick>
 800b57e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b580:	e009      	b.n	800b596 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b582:	f7fa fcad 	bl	8005ee0 <HAL_GetTick>
 800b586:	4602      	mov	r2, r0
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	1ad3      	subs	r3, r2, r3
 800b58c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b590:	d901      	bls.n	800b596 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	e007      	b.n	800b5a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b596:	4b06      	ldr	r3, [pc, #24]	; (800b5b0 <HAL_PWREx_ConfigSupply+0x70>)
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b59e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5a2:	d1ee      	bne.n	800b582 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	58024800 	.word	0x58024800

0800b5b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08c      	sub	sp, #48	; 0x30
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d101      	bne.n	800b5c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e3ff      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f003 0301 	and.w	r3, r3, #1
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 8087 	beq.w	800b6e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5d4:	4b99      	ldr	r3, [pc, #612]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b5d6:	691b      	ldr	r3, [r3, #16]
 800b5d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b5de:	4b97      	ldr	r3, [pc, #604]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e6:	2b10      	cmp	r3, #16
 800b5e8:	d007      	beq.n	800b5fa <HAL_RCC_OscConfig+0x46>
 800b5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ec:	2b18      	cmp	r3, #24
 800b5ee:	d110      	bne.n	800b612 <HAL_RCC_OscConfig+0x5e>
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	f003 0303 	and.w	r3, r3, #3
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d10b      	bne.n	800b612 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5fa:	4b90      	ldr	r3, [pc, #576]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d06c      	beq.n	800b6e0 <HAL_RCC_OscConfig+0x12c>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d168      	bne.n	800b6e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e3d9      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b61a:	d106      	bne.n	800b62a <HAL_RCC_OscConfig+0x76>
 800b61c:	4b87      	ldr	r3, [pc, #540]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a86      	ldr	r2, [pc, #536]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	e02e      	b.n	800b688 <HAL_RCC_OscConfig+0xd4>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10c      	bne.n	800b64c <HAL_RCC_OscConfig+0x98>
 800b632:	4b82      	ldr	r3, [pc, #520]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a81      	ldr	r2, [pc, #516]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	4b7f      	ldr	r3, [pc, #508]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a7e      	ldr	r2, [pc, #504]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b648:	6013      	str	r3, [r2, #0]
 800b64a:	e01d      	b.n	800b688 <HAL_RCC_OscConfig+0xd4>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b654:	d10c      	bne.n	800b670 <HAL_RCC_OscConfig+0xbc>
 800b656:	4b79      	ldr	r3, [pc, #484]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a78      	ldr	r2, [pc, #480]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b65c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b660:	6013      	str	r3, [r2, #0]
 800b662:	4b76      	ldr	r3, [pc, #472]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a75      	ldr	r2, [pc, #468]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b66c:	6013      	str	r3, [r2, #0]
 800b66e:	e00b      	b.n	800b688 <HAL_RCC_OscConfig+0xd4>
 800b670:	4b72      	ldr	r3, [pc, #456]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a71      	ldr	r2, [pc, #452]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b67a:	6013      	str	r3, [r2, #0]
 800b67c:	4b6f      	ldr	r3, [pc, #444]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a6e      	ldr	r2, [pc, #440]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d013      	beq.n	800b6b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b690:	f7fa fc26 	bl	8005ee0 <HAL_GetTick>
 800b694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b696:	e008      	b.n	800b6aa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b698:	f7fa fc22 	bl	8005ee0 <HAL_GetTick>
 800b69c:	4602      	mov	r2, r0
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	2b64      	cmp	r3, #100	; 0x64
 800b6a4:	d901      	bls.n	800b6aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e38d      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b6aa:	4b64      	ldr	r3, [pc, #400]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d0f0      	beq.n	800b698 <HAL_RCC_OscConfig+0xe4>
 800b6b6:	e014      	b.n	800b6e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6b8:	f7fa fc12 	bl	8005ee0 <HAL_GetTick>
 800b6bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b6be:	e008      	b.n	800b6d2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b6c0:	f7fa fc0e 	bl	8005ee0 <HAL_GetTick>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	2b64      	cmp	r3, #100	; 0x64
 800b6cc:	d901      	bls.n	800b6d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e379      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b6d2:	4b5a      	ldr	r3, [pc, #360]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1f0      	bne.n	800b6c0 <HAL_RCC_OscConfig+0x10c>
 800b6de:	e000      	b.n	800b6e2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f003 0302 	and.w	r3, r3, #2
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f000 80ae 	beq.w	800b84c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6f0:	4b52      	ldr	r3, [pc, #328]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b6f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b6fa:	4b50      	ldr	r3, [pc, #320]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d007      	beq.n	800b716 <HAL_RCC_OscConfig+0x162>
 800b706:	6a3b      	ldr	r3, [r7, #32]
 800b708:	2b18      	cmp	r3, #24
 800b70a:	d13a      	bne.n	800b782 <HAL_RCC_OscConfig+0x1ce>
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	f003 0303 	and.w	r3, r3, #3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d135      	bne.n	800b782 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b716:	4b49      	ldr	r3, [pc, #292]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 0304 	and.w	r3, r3, #4
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d005      	beq.n	800b72e <HAL_RCC_OscConfig+0x17a>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d101      	bne.n	800b72e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	e34b      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b72e:	f7fa fc07 	bl	8005f40 <HAL_GetREVID>
 800b732:	4603      	mov	r3, r0
 800b734:	f241 0203 	movw	r2, #4099	; 0x1003
 800b738:	4293      	cmp	r3, r2
 800b73a:	d817      	bhi.n	800b76c <HAL_RCC_OscConfig+0x1b8>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	2b40      	cmp	r3, #64	; 0x40
 800b742:	d108      	bne.n	800b756 <HAL_RCC_OscConfig+0x1a2>
 800b744:	4b3d      	ldr	r3, [pc, #244]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b74c:	4a3b      	ldr	r2, [pc, #236]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b74e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b752:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b754:	e07a      	b.n	800b84c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b756:	4b39      	ldr	r3, [pc, #228]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	031b      	lsls	r3, r3, #12
 800b764:	4935      	ldr	r1, [pc, #212]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b766:	4313      	orrs	r3, r2
 800b768:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b76a:	e06f      	b.n	800b84c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b76c:	4b33      	ldr	r3, [pc, #204]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	061b      	lsls	r3, r3, #24
 800b77a:	4930      	ldr	r1, [pc, #192]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b77c:	4313      	orrs	r3, r2
 800b77e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b780:	e064      	b.n	800b84c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d045      	beq.n	800b816 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b78a:	4b2c      	ldr	r3, [pc, #176]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f023 0219 	bic.w	r2, r3, #25
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	4929      	ldr	r1, [pc, #164]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b798:	4313      	orrs	r3, r2
 800b79a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b79c:	f7fa fba0 	bl	8005ee0 <HAL_GetTick>
 800b7a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b7a2:	e008      	b.n	800b7b6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b7a4:	f7fa fb9c 	bl	8005ee0 <HAL_GetTick>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d901      	bls.n	800b7b6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e307      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b7b6:	4b21      	ldr	r3, [pc, #132]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 0304 	and.w	r3, r3, #4
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0f0      	beq.n	800b7a4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7c2:	f7fa fbbd 	bl	8005f40 <HAL_GetREVID>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	f241 0203 	movw	r2, #4099	; 0x1003
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d817      	bhi.n	800b800 <HAL_RCC_OscConfig+0x24c>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	2b40      	cmp	r3, #64	; 0x40
 800b7d6:	d108      	bne.n	800b7ea <HAL_RCC_OscConfig+0x236>
 800b7d8:	4b18      	ldr	r3, [pc, #96]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b7e0:	4a16      	ldr	r2, [pc, #88]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b7e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7e6:	6053      	str	r3, [r2, #4]
 800b7e8:	e030      	b.n	800b84c <HAL_RCC_OscConfig+0x298>
 800b7ea:	4b14      	ldr	r3, [pc, #80]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	031b      	lsls	r3, r3, #12
 800b7f8:	4910      	ldr	r1, [pc, #64]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	604b      	str	r3, [r1, #4]
 800b7fe:	e025      	b.n	800b84c <HAL_RCC_OscConfig+0x298>
 800b800:	4b0e      	ldr	r3, [pc, #56]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	061b      	lsls	r3, r3, #24
 800b80e:	490b      	ldr	r1, [pc, #44]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b810:	4313      	orrs	r3, r2
 800b812:	604b      	str	r3, [r1, #4]
 800b814:	e01a      	b.n	800b84c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b816:	4b09      	ldr	r3, [pc, #36]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a08      	ldr	r2, [pc, #32]	; (800b83c <HAL_RCC_OscConfig+0x288>)
 800b81c:	f023 0301 	bic.w	r3, r3, #1
 800b820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b822:	f7fa fb5d 	bl	8005ee0 <HAL_GetTick>
 800b826:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b828:	e00a      	b.n	800b840 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b82a:	f7fa fb59 	bl	8005ee0 <HAL_GetTick>
 800b82e:	4602      	mov	r2, r0
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	2b02      	cmp	r3, #2
 800b836:	d903      	bls.n	800b840 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e2c4      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
 800b83c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b840:	4ba4      	ldr	r3, [pc, #656]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 0304 	and.w	r3, r3, #4
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1ee      	bne.n	800b82a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 0310 	and.w	r3, r3, #16
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 80a9 	beq.w	800b9ac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b85a:	4b9e      	ldr	r3, [pc, #632]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b862:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b864:	4b9b      	ldr	r3, [pc, #620]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b868:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	2b08      	cmp	r3, #8
 800b86e:	d007      	beq.n	800b880 <HAL_RCC_OscConfig+0x2cc>
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	2b18      	cmp	r3, #24
 800b874:	d13a      	bne.n	800b8ec <HAL_RCC_OscConfig+0x338>
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f003 0303 	and.w	r3, r3, #3
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d135      	bne.n	800b8ec <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b880:	4b94      	ldr	r3, [pc, #592]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d005      	beq.n	800b898 <HAL_RCC_OscConfig+0x2e4>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	69db      	ldr	r3, [r3, #28]
 800b890:	2b80      	cmp	r3, #128	; 0x80
 800b892:	d001      	beq.n	800b898 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	e296      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b898:	f7fa fb52 	bl	8005f40 <HAL_GetREVID>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f241 0203 	movw	r2, #4099	; 0x1003
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d817      	bhi.n	800b8d6 <HAL_RCC_OscConfig+0x322>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	2b20      	cmp	r3, #32
 800b8ac:	d108      	bne.n	800b8c0 <HAL_RCC_OscConfig+0x30c>
 800b8ae:	4b89      	ldr	r3, [pc, #548]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b8b6:	4a87      	ldr	r2, [pc, #540]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b8b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b8be:	e075      	b.n	800b9ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b8c0:	4b84      	ldr	r3, [pc, #528]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a1b      	ldr	r3, [r3, #32]
 800b8cc:	069b      	lsls	r3, r3, #26
 800b8ce:	4981      	ldr	r1, [pc, #516]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b8d4:	e06a      	b.n	800b9ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b8d6:	4b7f      	ldr	r3, [pc, #508]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a1b      	ldr	r3, [r3, #32]
 800b8e2:	061b      	lsls	r3, r3, #24
 800b8e4:	497b      	ldr	r1, [pc, #492]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b8ea:	e05f      	b.n	800b9ac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	69db      	ldr	r3, [r3, #28]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d042      	beq.n	800b97a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b8f4:	4b77      	ldr	r3, [pc, #476]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a76      	ldr	r2, [pc, #472]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b8fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b900:	f7fa faee 	bl	8005ee0 <HAL_GetTick>
 800b904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b906:	e008      	b.n	800b91a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b908:	f7fa faea 	bl	8005ee0 <HAL_GetTick>
 800b90c:	4602      	mov	r2, r0
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	2b02      	cmp	r3, #2
 800b914:	d901      	bls.n	800b91a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800b916:	2303      	movs	r3, #3
 800b918:	e255      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b91a:	4b6e      	ldr	r3, [pc, #440]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b922:	2b00      	cmp	r3, #0
 800b924:	d0f0      	beq.n	800b908 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b926:	f7fa fb0b 	bl	8005f40 <HAL_GetREVID>
 800b92a:	4603      	mov	r3, r0
 800b92c:	f241 0203 	movw	r2, #4099	; 0x1003
 800b930:	4293      	cmp	r3, r2
 800b932:	d817      	bhi.n	800b964 <HAL_RCC_OscConfig+0x3b0>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6a1b      	ldr	r3, [r3, #32]
 800b938:	2b20      	cmp	r3, #32
 800b93a:	d108      	bne.n	800b94e <HAL_RCC_OscConfig+0x39a>
 800b93c:	4b65      	ldr	r3, [pc, #404]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b944:	4a63      	ldr	r2, [pc, #396]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b946:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b94a:	6053      	str	r3, [r2, #4]
 800b94c:	e02e      	b.n	800b9ac <HAL_RCC_OscConfig+0x3f8>
 800b94e:	4b61      	ldr	r3, [pc, #388]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a1b      	ldr	r3, [r3, #32]
 800b95a:	069b      	lsls	r3, r3, #26
 800b95c:	495d      	ldr	r1, [pc, #372]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b95e:	4313      	orrs	r3, r2
 800b960:	604b      	str	r3, [r1, #4]
 800b962:	e023      	b.n	800b9ac <HAL_RCC_OscConfig+0x3f8>
 800b964:	4b5b      	ldr	r3, [pc, #364]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a1b      	ldr	r3, [r3, #32]
 800b970:	061b      	lsls	r3, r3, #24
 800b972:	4958      	ldr	r1, [pc, #352]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b974:	4313      	orrs	r3, r2
 800b976:	60cb      	str	r3, [r1, #12]
 800b978:	e018      	b.n	800b9ac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b97a:	4b56      	ldr	r3, [pc, #344]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a55      	ldr	r2, [pc, #340]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b986:	f7fa faab 	bl	8005ee0 <HAL_GetTick>
 800b98a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b98c:	e008      	b.n	800b9a0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b98e:	f7fa faa7 	bl	8005ee0 <HAL_GetTick>
 800b992:	4602      	mov	r2, r0
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d901      	bls.n	800b9a0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800b99c:	2303      	movs	r3, #3
 800b99e:	e212      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b9a0:	4b4c      	ldr	r3, [pc, #304]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1f0      	bne.n	800b98e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 0308 	and.w	r3, r3, #8
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d036      	beq.n	800ba26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d019      	beq.n	800b9f4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b9c0:	4b44      	ldr	r3, [pc, #272]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b9c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9c4:	4a43      	ldr	r2, [pc, #268]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b9c6:	f043 0301 	orr.w	r3, r3, #1
 800b9ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9cc:	f7fa fa88 	bl	8005ee0 <HAL_GetTick>
 800b9d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b9d2:	e008      	b.n	800b9e6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b9d4:	f7fa fa84 	bl	8005ee0 <HAL_GetTick>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d901      	bls.n	800b9e6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	e1ef      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b9e6:	4b3b      	ldr	r3, [pc, #236]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b9e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9ea:	f003 0302 	and.w	r3, r3, #2
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d0f0      	beq.n	800b9d4 <HAL_RCC_OscConfig+0x420>
 800b9f2:	e018      	b.n	800ba26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9f4:	4b37      	ldr	r3, [pc, #220]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9f8:	4a36      	ldr	r2, [pc, #216]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800b9fa:	f023 0301 	bic.w	r3, r3, #1
 800b9fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba00:	f7fa fa6e 	bl	8005ee0 <HAL_GetTick>
 800ba04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ba06:	e008      	b.n	800ba1a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ba08:	f7fa fa6a 	bl	8005ee0 <HAL_GetTick>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	2b02      	cmp	r3, #2
 800ba14:	d901      	bls.n	800ba1a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800ba16:	2303      	movs	r3, #3
 800ba18:	e1d5      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ba1a:	4b2e      	ldr	r3, [pc, #184]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800ba1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba1e:	f003 0302 	and.w	r3, r3, #2
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1f0      	bne.n	800ba08 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 0320 	and.w	r3, r3, #32
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d036      	beq.n	800baa0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	699b      	ldr	r3, [r3, #24]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d019      	beq.n	800ba6e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ba3a:	4b26      	ldr	r3, [pc, #152]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a25      	ldr	r2, [pc, #148]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800ba40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ba46:	f7fa fa4b 	bl	8005ee0 <HAL_GetTick>
 800ba4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ba4c:	e008      	b.n	800ba60 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ba4e:	f7fa fa47 	bl	8005ee0 <HAL_GetTick>
 800ba52:	4602      	mov	r2, r0
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d901      	bls.n	800ba60 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e1b2      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ba60:	4b1c      	ldr	r3, [pc, #112]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d0f0      	beq.n	800ba4e <HAL_RCC_OscConfig+0x49a>
 800ba6c:	e018      	b.n	800baa0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ba6e:	4b19      	ldr	r3, [pc, #100]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a18      	ldr	r2, [pc, #96]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800ba74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ba7a:	f7fa fa31 	bl	8005ee0 <HAL_GetTick>
 800ba7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba80:	e008      	b.n	800ba94 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ba82:	f7fa fa2d 	bl	8005ee0 <HAL_GetTick>
 800ba86:	4602      	mov	r2, r0
 800ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d901      	bls.n	800ba94 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e198      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba94:	4b0f      	ldr	r3, [pc, #60]	; (800bad4 <HAL_RCC_OscConfig+0x520>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1f0      	bne.n	800ba82 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f000 8085 	beq.w	800bbb8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800baae:	4b0a      	ldr	r3, [pc, #40]	; (800bad8 <HAL_RCC_OscConfig+0x524>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a09      	ldr	r2, [pc, #36]	; (800bad8 <HAL_RCC_OscConfig+0x524>)
 800bab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bab8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800baba:	f7fa fa11 	bl	8005ee0 <HAL_GetTick>
 800babe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bac0:	e00c      	b.n	800badc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bac2:	f7fa fa0d 	bl	8005ee0 <HAL_GetTick>
 800bac6:	4602      	mov	r2, r0
 800bac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	2b64      	cmp	r3, #100	; 0x64
 800bace:	d905      	bls.n	800badc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e178      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
 800bad4:	58024400 	.word	0x58024400
 800bad8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800badc:	4b96      	ldr	r3, [pc, #600]	; (800bd38 <HAL_RCC_OscConfig+0x784>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d0ec      	beq.n	800bac2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d106      	bne.n	800bafe <HAL_RCC_OscConfig+0x54a>
 800baf0:	4b92      	ldr	r3, [pc, #584]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800baf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf4:	4a91      	ldr	r2, [pc, #580]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800baf6:	f043 0301 	orr.w	r3, r3, #1
 800bafa:	6713      	str	r3, [r2, #112]	; 0x70
 800bafc:	e02d      	b.n	800bb5a <HAL_RCC_OscConfig+0x5a6>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10c      	bne.n	800bb20 <HAL_RCC_OscConfig+0x56c>
 800bb06:	4b8d      	ldr	r3, [pc, #564]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb0a:	4a8c      	ldr	r2, [pc, #560]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb0c:	f023 0301 	bic.w	r3, r3, #1
 800bb10:	6713      	str	r3, [r2, #112]	; 0x70
 800bb12:	4b8a      	ldr	r3, [pc, #552]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb16:	4a89      	ldr	r2, [pc, #548]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb18:	f023 0304 	bic.w	r3, r3, #4
 800bb1c:	6713      	str	r3, [r2, #112]	; 0x70
 800bb1e:	e01c      	b.n	800bb5a <HAL_RCC_OscConfig+0x5a6>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	2b05      	cmp	r3, #5
 800bb26:	d10c      	bne.n	800bb42 <HAL_RCC_OscConfig+0x58e>
 800bb28:	4b84      	ldr	r3, [pc, #528]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb2c:	4a83      	ldr	r2, [pc, #524]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb2e:	f043 0304 	orr.w	r3, r3, #4
 800bb32:	6713      	str	r3, [r2, #112]	; 0x70
 800bb34:	4b81      	ldr	r3, [pc, #516]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb38:	4a80      	ldr	r2, [pc, #512]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb3a:	f043 0301 	orr.w	r3, r3, #1
 800bb3e:	6713      	str	r3, [r2, #112]	; 0x70
 800bb40:	e00b      	b.n	800bb5a <HAL_RCC_OscConfig+0x5a6>
 800bb42:	4b7e      	ldr	r3, [pc, #504]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb46:	4a7d      	ldr	r2, [pc, #500]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb48:	f023 0301 	bic.w	r3, r3, #1
 800bb4c:	6713      	str	r3, [r2, #112]	; 0x70
 800bb4e:	4b7b      	ldr	r3, [pc, #492]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb52:	4a7a      	ldr	r2, [pc, #488]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb54:	f023 0304 	bic.w	r3, r3, #4
 800bb58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d015      	beq.n	800bb8e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb62:	f7fa f9bd 	bl	8005ee0 <HAL_GetTick>
 800bb66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb68:	e00a      	b.n	800bb80 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb6a:	f7fa f9b9 	bl	8005ee0 <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d901      	bls.n	800bb80 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e122      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb80:	4b6e      	ldr	r3, [pc, #440]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bb82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d0ee      	beq.n	800bb6a <HAL_RCC_OscConfig+0x5b6>
 800bb8c:	e014      	b.n	800bbb8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb8e:	f7fa f9a7 	bl	8005ee0 <HAL_GetTick>
 800bb92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb94:	e00a      	b.n	800bbac <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb96:	f7fa f9a3 	bl	8005ee0 <HAL_GetTick>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d901      	bls.n	800bbac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e10c      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bbac:	4b63      	ldr	r3, [pc, #396]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bbae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbb0:	f003 0302 	and.w	r3, r3, #2
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1ee      	bne.n	800bb96 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8101 	beq.w	800bdc4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bbc2:	4b5e      	ldr	r3, [pc, #376]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbca:	2b18      	cmp	r3, #24
 800bbcc:	f000 80bc 	beq.w	800bd48 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	f040 8095 	bne.w	800bd04 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbda:	4b58      	ldr	r3, [pc, #352]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a57      	ldr	r2, [pc, #348]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bbe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bbe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbe6:	f7fa f97b 	bl	8005ee0 <HAL_GetTick>
 800bbea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbec:	e008      	b.n	800bc00 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bbee:	f7fa f977 	bl	8005ee0 <HAL_GetTick>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d901      	bls.n	800bc00 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e0e2      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bc00:	4b4e      	ldr	r3, [pc, #312]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1f0      	bne.n	800bbee <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc0c:	4b4b      	ldr	r3, [pc, #300]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc10:	4b4b      	ldr	r3, [pc, #300]	; (800bd40 <HAL_RCC_OscConfig+0x78c>)
 800bc12:	4013      	ands	r3, r2
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bc1c:	0112      	lsls	r2, r2, #4
 800bc1e:	430a      	orrs	r2, r1
 800bc20:	4946      	ldr	r1, [pc, #280]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc22:	4313      	orrs	r3, r2
 800bc24:	628b      	str	r3, [r1, #40]	; 0x28
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc34:	3b01      	subs	r3, #1
 800bc36:	025b      	lsls	r3, r3, #9
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	431a      	orrs	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc40:	3b01      	subs	r3, #1
 800bc42:	041b      	lsls	r3, r3, #16
 800bc44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bc48:	431a      	orrs	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	061b      	lsls	r3, r3, #24
 800bc52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bc56:	4939      	ldr	r1, [pc, #228]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800bc5c:	4b37      	ldr	r3, [pc, #220]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc60:	4a36      	ldr	r2, [pc, #216]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc62:	f023 0301 	bic.w	r3, r3, #1
 800bc66:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bc68:	4b34      	ldr	r3, [pc, #208]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc6c:	4b35      	ldr	r3, [pc, #212]	; (800bd44 <HAL_RCC_OscConfig+0x790>)
 800bc6e:	4013      	ands	r3, r2
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bc74:	00d2      	lsls	r2, r2, #3
 800bc76:	4931      	ldr	r1, [pc, #196]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bc7c:	4b2f      	ldr	r3, [pc, #188]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc80:	f023 020c 	bic.w	r2, r3, #12
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc88:	492c      	ldr	r1, [pc, #176]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bc8e:	4b2b      	ldr	r3, [pc, #172]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc92:	f023 0202 	bic.w	r2, r3, #2
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc9a:	4928      	ldr	r1, [pc, #160]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bca0:	4b26      	ldr	r3, [pc, #152]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	4a25      	ldr	r2, [pc, #148]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcac:	4b23      	ldr	r3, [pc, #140]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb0:	4a22      	ldr	r2, [pc, #136]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bcb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bcb8:	4b20      	ldr	r3, [pc, #128]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcbc:	4a1f      	ldr	r2, [pc, #124]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bcbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bcc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800bcc4:	4b1d      	ldr	r3, [pc, #116]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc8:	4a1c      	ldr	r2, [pc, #112]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bcca:	f043 0301 	orr.w	r3, r3, #1
 800bcce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bcd0:	4b1a      	ldr	r3, [pc, #104]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a19      	ldr	r2, [pc, #100]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bcd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcdc:	f7fa f900 	bl	8005ee0 <HAL_GetTick>
 800bce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bce2:	e008      	b.n	800bcf6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bce4:	f7fa f8fc 	bl	8005ee0 <HAL_GetTick>
 800bce8:	4602      	mov	r2, r0
 800bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d901      	bls.n	800bcf6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e067      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bcf6:	4b11      	ldr	r3, [pc, #68]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d0f0      	beq.n	800bce4 <HAL_RCC_OscConfig+0x730>
 800bd02:	e05f      	b.n	800bdc4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd04:	4b0d      	ldr	r3, [pc, #52]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a0c      	ldr	r2, [pc, #48]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bd0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd10:	f7fa f8e6 	bl	8005ee0 <HAL_GetTick>
 800bd14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd16:	e008      	b.n	800bd2a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd18:	f7fa f8e2 	bl	8005ee0 <HAL_GetTick>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d901      	bls.n	800bd2a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800bd26:	2303      	movs	r3, #3
 800bd28:	e04d      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd2a:	4b04      	ldr	r3, [pc, #16]	; (800bd3c <HAL_RCC_OscConfig+0x788>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1f0      	bne.n	800bd18 <HAL_RCC_OscConfig+0x764>
 800bd36:	e045      	b.n	800bdc4 <HAL_RCC_OscConfig+0x810>
 800bd38:	58024800 	.word	0x58024800
 800bd3c:	58024400 	.word	0x58024400
 800bd40:	fffffc0c 	.word	0xfffffc0c
 800bd44:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bd48:	4b21      	ldr	r3, [pc, #132]	; (800bdd0 <HAL_RCC_OscConfig+0x81c>)
 800bd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bd4e:	4b20      	ldr	r3, [pc, #128]	; (800bdd0 <HAL_RCC_OscConfig+0x81c>)
 800bd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd52:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d031      	beq.n	800bdc0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	f003 0203 	and.w	r2, r3, #3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d12a      	bne.n	800bdc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	091b      	lsrs	r3, r3, #4
 800bd6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d122      	bne.n	800bdc0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd84:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d11a      	bne.n	800bdc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	0a5b      	lsrs	r3, r3, #9
 800bd8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd96:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d111      	bne.n	800bdc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	0c1b      	lsrs	r3, r3, #16
 800bda0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d108      	bne.n	800bdc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	0e1b      	lsrs	r3, r3, #24
 800bdb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d001      	beq.n	800bdc4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e000      	b.n	800bdc6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3730      	adds	r7, #48	; 0x30
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	58024400 	.word	0x58024400

0800bdd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d101      	bne.n	800bde8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e19c      	b.n	800c122 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bde8:	4b8a      	ldr	r3, [pc, #552]	; (800c014 <HAL_RCC_ClockConfig+0x240>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f003 030f 	and.w	r3, r3, #15
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d910      	bls.n	800be18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdf6:	4b87      	ldr	r3, [pc, #540]	; (800c014 <HAL_RCC_ClockConfig+0x240>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f023 020f 	bic.w	r2, r3, #15
 800bdfe:	4985      	ldr	r1, [pc, #532]	; (800c014 <HAL_RCC_ClockConfig+0x240>)
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	4313      	orrs	r3, r2
 800be04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be06:	4b83      	ldr	r3, [pc, #524]	; (800c014 <HAL_RCC_ClockConfig+0x240>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f003 030f 	and.w	r3, r3, #15
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	429a      	cmp	r2, r3
 800be12:	d001      	beq.n	800be18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	e184      	b.n	800c122 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f003 0304 	and.w	r3, r3, #4
 800be20:	2b00      	cmp	r3, #0
 800be22:	d010      	beq.n	800be46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	691a      	ldr	r2, [r3, #16]
 800be28:	4b7b      	ldr	r3, [pc, #492]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800be2a:	699b      	ldr	r3, [r3, #24]
 800be2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be30:	429a      	cmp	r2, r3
 800be32:	d908      	bls.n	800be46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be34:	4b78      	ldr	r3, [pc, #480]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800be36:	699b      	ldr	r3, [r3, #24]
 800be38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	4975      	ldr	r1, [pc, #468]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800be42:	4313      	orrs	r3, r2
 800be44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 0308 	and.w	r3, r3, #8
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d010      	beq.n	800be74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	695a      	ldr	r2, [r3, #20]
 800be56:	4b70      	ldr	r3, [pc, #448]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800be58:	69db      	ldr	r3, [r3, #28]
 800be5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be5e:	429a      	cmp	r2, r3
 800be60:	d908      	bls.n	800be74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800be62:	4b6d      	ldr	r3, [pc, #436]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800be64:	69db      	ldr	r3, [r3, #28]
 800be66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	695b      	ldr	r3, [r3, #20]
 800be6e:	496a      	ldr	r1, [pc, #424]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800be70:	4313      	orrs	r3, r2
 800be72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 0310 	and.w	r3, r3, #16
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d010      	beq.n	800bea2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	699a      	ldr	r2, [r3, #24]
 800be84:	4b64      	ldr	r3, [pc, #400]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800be86:	69db      	ldr	r3, [r3, #28]
 800be88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d908      	bls.n	800bea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800be90:	4b61      	ldr	r3, [pc, #388]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800be92:	69db      	ldr	r3, [r3, #28]
 800be94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	699b      	ldr	r3, [r3, #24]
 800be9c:	495e      	ldr	r1, [pc, #376]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 0320 	and.w	r3, r3, #32
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d010      	beq.n	800bed0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	69da      	ldr	r2, [r3, #28]
 800beb2:	4b59      	ldr	r3, [pc, #356]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800beba:	429a      	cmp	r2, r3
 800bebc:	d908      	bls.n	800bed0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bebe:	4b56      	ldr	r3, [pc, #344]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bec0:	6a1b      	ldr	r3, [r3, #32]
 800bec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	69db      	ldr	r3, [r3, #28]
 800beca:	4953      	ldr	r1, [pc, #332]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800becc:	4313      	orrs	r3, r2
 800bece:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f003 0302 	and.w	r3, r3, #2
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d010      	beq.n	800befe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	68da      	ldr	r2, [r3, #12]
 800bee0:	4b4d      	ldr	r3, [pc, #308]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	f003 030f 	and.w	r3, r3, #15
 800bee8:	429a      	cmp	r2, r3
 800beea:	d908      	bls.n	800befe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800beec:	4b4a      	ldr	r3, [pc, #296]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	f023 020f 	bic.w	r2, r3, #15
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	4947      	ldr	r1, [pc, #284]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800befa:	4313      	orrs	r3, r2
 800befc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d055      	beq.n	800bfb6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bf0a:	4b43      	ldr	r3, [pc, #268]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	4940      	ldr	r1, [pc, #256]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d107      	bne.n	800bf34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bf24:	4b3c      	ldr	r3, [pc, #240]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d121      	bne.n	800bf74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e0f6      	b.n	800c122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	2b03      	cmp	r3, #3
 800bf3a:	d107      	bne.n	800bf4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf3c:	4b36      	ldr	r3, [pc, #216]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d115      	bne.n	800bf74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e0ea      	b.n	800c122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d107      	bne.n	800bf64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf54:	4b30      	ldr	r3, [pc, #192]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d109      	bne.n	800bf74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	e0de      	b.n	800c122 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bf64:	4b2c      	ldr	r3, [pc, #176]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 0304 	and.w	r3, r3, #4
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d101      	bne.n	800bf74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e0d6      	b.n	800c122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bf74:	4b28      	ldr	r3, [pc, #160]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	f023 0207 	bic.w	r2, r3, #7
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	4925      	ldr	r1, [pc, #148]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bf82:	4313      	orrs	r3, r2
 800bf84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf86:	f7f9 ffab 	bl	8005ee0 <HAL_GetTick>
 800bf8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf8c:	e00a      	b.n	800bfa4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf8e:	f7f9 ffa7 	bl	8005ee0 <HAL_GetTick>
 800bf92:	4602      	mov	r2, r0
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d901      	bls.n	800bfa4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	e0be      	b.n	800c122 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfa4:	4b1c      	ldr	r3, [pc, #112]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	00db      	lsls	r3, r3, #3
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d1eb      	bne.n	800bf8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f003 0302 	and.w	r3, r3, #2
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d010      	beq.n	800bfe4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	68da      	ldr	r2, [r3, #12]
 800bfc6:	4b14      	ldr	r3, [pc, #80]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	f003 030f 	and.w	r3, r3, #15
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d208      	bcs.n	800bfe4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfd2:	4b11      	ldr	r3, [pc, #68]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bfd4:	699b      	ldr	r3, [r3, #24]
 800bfd6:	f023 020f 	bic.w	r2, r3, #15
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	490e      	ldr	r1, [pc, #56]	; (800c018 <HAL_RCC_ClockConfig+0x244>)
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bfe4:	4b0b      	ldr	r3, [pc, #44]	; (800c014 <HAL_RCC_ClockConfig+0x240>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 030f 	and.w	r3, r3, #15
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d214      	bcs.n	800c01c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bff2:	4b08      	ldr	r3, [pc, #32]	; (800c014 <HAL_RCC_ClockConfig+0x240>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f023 020f 	bic.w	r2, r3, #15
 800bffa:	4906      	ldr	r1, [pc, #24]	; (800c014 <HAL_RCC_ClockConfig+0x240>)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	4313      	orrs	r3, r2
 800c000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c002:	4b04      	ldr	r3, [pc, #16]	; (800c014 <HAL_RCC_ClockConfig+0x240>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 030f 	and.w	r3, r3, #15
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d005      	beq.n	800c01c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e086      	b.n	800c122 <HAL_RCC_ClockConfig+0x34e>
 800c014:	52002000 	.word	0x52002000
 800c018:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f003 0304 	and.w	r3, r3, #4
 800c024:	2b00      	cmp	r3, #0
 800c026:	d010      	beq.n	800c04a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	691a      	ldr	r2, [r3, #16]
 800c02c:	4b3f      	ldr	r3, [pc, #252]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c02e:	699b      	ldr	r3, [r3, #24]
 800c030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c034:	429a      	cmp	r2, r3
 800c036:	d208      	bcs.n	800c04a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c038:	4b3c      	ldr	r3, [pc, #240]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	4939      	ldr	r1, [pc, #228]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c046:	4313      	orrs	r3, r2
 800c048:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f003 0308 	and.w	r3, r3, #8
 800c052:	2b00      	cmp	r3, #0
 800c054:	d010      	beq.n	800c078 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	695a      	ldr	r2, [r3, #20]
 800c05a:	4b34      	ldr	r3, [pc, #208]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c062:	429a      	cmp	r2, r3
 800c064:	d208      	bcs.n	800c078 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c066:	4b31      	ldr	r3, [pc, #196]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c068:	69db      	ldr	r3, [r3, #28]
 800c06a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	695b      	ldr	r3, [r3, #20]
 800c072:	492e      	ldr	r1, [pc, #184]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c074:	4313      	orrs	r3, r2
 800c076:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0310 	and.w	r3, r3, #16
 800c080:	2b00      	cmp	r3, #0
 800c082:	d010      	beq.n	800c0a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	699a      	ldr	r2, [r3, #24]
 800c088:	4b28      	ldr	r3, [pc, #160]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c08a:	69db      	ldr	r3, [r3, #28]
 800c08c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c090:	429a      	cmp	r2, r3
 800c092:	d208      	bcs.n	800c0a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c094:	4b25      	ldr	r3, [pc, #148]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c096:	69db      	ldr	r3, [r3, #28]
 800c098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	699b      	ldr	r3, [r3, #24]
 800c0a0:	4922      	ldr	r1, [pc, #136]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0320 	and.w	r3, r3, #32
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d010      	beq.n	800c0d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	69da      	ldr	r2, [r3, #28]
 800c0b6:	4b1d      	ldr	r3, [pc, #116]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d208      	bcs.n	800c0d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800c0c2:	4b1a      	ldr	r3, [pc, #104]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	4917      	ldr	r1, [pc, #92]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c0d4:	f000 f834 	bl	800c140 <HAL_RCC_GetSysClockFreq>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	4b14      	ldr	r3, [pc, #80]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	0a1b      	lsrs	r3, r3, #8
 800c0e0:	f003 030f 	and.w	r3, r3, #15
 800c0e4:	4912      	ldr	r1, [pc, #72]	; (800c130 <HAL_RCC_ClockConfig+0x35c>)
 800c0e6:	5ccb      	ldrb	r3, [r1, r3]
 800c0e8:	f003 031f 	and.w	r3, r3, #31
 800c0ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c0f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c0f2:	4b0e      	ldr	r3, [pc, #56]	; (800c12c <HAL_RCC_ClockConfig+0x358>)
 800c0f4:	699b      	ldr	r3, [r3, #24]
 800c0f6:	f003 030f 	and.w	r3, r3, #15
 800c0fa:	4a0d      	ldr	r2, [pc, #52]	; (800c130 <HAL_RCC_ClockConfig+0x35c>)
 800c0fc:	5cd3      	ldrb	r3, [r2, r3]
 800c0fe:	f003 031f 	and.w	r3, r3, #31
 800c102:	693a      	ldr	r2, [r7, #16]
 800c104:	fa22 f303 	lsr.w	r3, r2, r3
 800c108:	4a0a      	ldr	r2, [pc, #40]	; (800c134 <HAL_RCC_ClockConfig+0x360>)
 800c10a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c10c:	4a0a      	ldr	r2, [pc, #40]	; (800c138 <HAL_RCC_ClockConfig+0x364>)
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800c112:	4b0a      	ldr	r3, [pc, #40]	; (800c13c <HAL_RCC_ClockConfig+0x368>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4618      	mov	r0, r3
 800c118:	f7f9 fe98 	bl	8005e4c <HAL_InitTick>
 800c11c:	4603      	mov	r3, r0
 800c11e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c120:	7bfb      	ldrb	r3, [r7, #15]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3718      	adds	r7, #24
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	58024400 	.word	0x58024400
 800c130:	08019278 	.word	0x08019278
 800c134:	24000014 	.word	0x24000014
 800c138:	24000010 	.word	0x24000010
 800c13c:	24000018 	.word	0x24000018

0800c140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c140:	b480      	push	{r7}
 800c142:	b089      	sub	sp, #36	; 0x24
 800c144:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c146:	4bb3      	ldr	r3, [pc, #716]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c14e:	2b18      	cmp	r3, #24
 800c150:	f200 8155 	bhi.w	800c3fe <HAL_RCC_GetSysClockFreq+0x2be>
 800c154:	a201      	add	r2, pc, #4	; (adr r2, 800c15c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15a:	bf00      	nop
 800c15c:	0800c1c1 	.word	0x0800c1c1
 800c160:	0800c3ff 	.word	0x0800c3ff
 800c164:	0800c3ff 	.word	0x0800c3ff
 800c168:	0800c3ff 	.word	0x0800c3ff
 800c16c:	0800c3ff 	.word	0x0800c3ff
 800c170:	0800c3ff 	.word	0x0800c3ff
 800c174:	0800c3ff 	.word	0x0800c3ff
 800c178:	0800c3ff 	.word	0x0800c3ff
 800c17c:	0800c1e7 	.word	0x0800c1e7
 800c180:	0800c3ff 	.word	0x0800c3ff
 800c184:	0800c3ff 	.word	0x0800c3ff
 800c188:	0800c3ff 	.word	0x0800c3ff
 800c18c:	0800c3ff 	.word	0x0800c3ff
 800c190:	0800c3ff 	.word	0x0800c3ff
 800c194:	0800c3ff 	.word	0x0800c3ff
 800c198:	0800c3ff 	.word	0x0800c3ff
 800c19c:	0800c1ed 	.word	0x0800c1ed
 800c1a0:	0800c3ff 	.word	0x0800c3ff
 800c1a4:	0800c3ff 	.word	0x0800c3ff
 800c1a8:	0800c3ff 	.word	0x0800c3ff
 800c1ac:	0800c3ff 	.word	0x0800c3ff
 800c1b0:	0800c3ff 	.word	0x0800c3ff
 800c1b4:	0800c3ff 	.word	0x0800c3ff
 800c1b8:	0800c3ff 	.word	0x0800c3ff
 800c1bc:	0800c1f3 	.word	0x0800c1f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1c0:	4b94      	ldr	r3, [pc, #592]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f003 0320 	and.w	r3, r3, #32
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d009      	beq.n	800c1e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c1cc:	4b91      	ldr	r3, [pc, #580]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	08db      	lsrs	r3, r3, #3
 800c1d2:	f003 0303 	and.w	r3, r3, #3
 800c1d6:	4a90      	ldr	r2, [pc, #576]	; (800c418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c1d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800c1de:	e111      	b.n	800c404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c1e0:	4b8d      	ldr	r3, [pc, #564]	; (800c418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c1e2:	61bb      	str	r3, [r7, #24]
    break;
 800c1e4:	e10e      	b.n	800c404 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c1e6:	4b8d      	ldr	r3, [pc, #564]	; (800c41c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c1e8:	61bb      	str	r3, [r7, #24]
    break;
 800c1ea:	e10b      	b.n	800c404 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800c1ec:	4b8c      	ldr	r3, [pc, #560]	; (800c420 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c1ee:	61bb      	str	r3, [r7, #24]
    break;
 800c1f0:	e108      	b.n	800c404 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1f2:	4b88      	ldr	r3, [pc, #544]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1f6:	f003 0303 	and.w	r3, r3, #3
 800c1fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800c1fc:	4b85      	ldr	r3, [pc, #532]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c200:	091b      	lsrs	r3, r3, #4
 800c202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c206:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c208:	4b82      	ldr	r3, [pc, #520]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20c:	f003 0301 	and.w	r3, r3, #1
 800c210:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c212:	4b80      	ldr	r3, [pc, #512]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c216:	08db      	lsrs	r3, r3, #3
 800c218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	fb02 f303 	mul.w	r3, r2, r3
 800c222:	ee07 3a90 	vmov	s15, r3
 800c226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 80e1 	beq.w	800c3f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2b02      	cmp	r3, #2
 800c23a:	f000 8083 	beq.w	800c344 <HAL_RCC_GetSysClockFreq+0x204>
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	2b02      	cmp	r3, #2
 800c242:	f200 80a1 	bhi.w	800c388 <HAL_RCC_GetSysClockFreq+0x248>
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d003      	beq.n	800c254 <HAL_RCC_GetSysClockFreq+0x114>
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d056      	beq.n	800c300 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c252:	e099      	b.n	800c388 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c254:	4b6f      	ldr	r3, [pc, #444]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f003 0320 	and.w	r3, r3, #32
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d02d      	beq.n	800c2bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c260:	4b6c      	ldr	r3, [pc, #432]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	08db      	lsrs	r3, r3, #3
 800c266:	f003 0303 	and.w	r3, r3, #3
 800c26a:	4a6b      	ldr	r2, [pc, #428]	; (800c418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c26c:	fa22 f303 	lsr.w	r3, r2, r3
 800c270:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	ee07 3a90 	vmov	s15, r3
 800c278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	ee07 3a90 	vmov	s15, r3
 800c282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c28a:	4b62      	ldr	r3, [pc, #392]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c292:	ee07 3a90 	vmov	s15, r3
 800c296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c29a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c29e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c2a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800c2ba:	e087      	b.n	800c3cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	ee07 3a90 	vmov	s15, r3
 800c2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c428 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c2ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2ce:	4b51      	ldr	r3, [pc, #324]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d6:	ee07 3a90 	vmov	s15, r3
 800c2da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2de:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c2e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2fe:	e065      	b.n	800c3cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	ee07 3a90 	vmov	s15, r3
 800c306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c42c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c30e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c312:	4b40      	ldr	r3, [pc, #256]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c31a:	ee07 3a90 	vmov	s15, r3
 800c31e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c322:	ed97 6a02 	vldr	s12, [r7, #8]
 800c326:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c32a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c32e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c342:	e043      	b.n	800c3cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	ee07 3a90 	vmov	s15, r3
 800c34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c34e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c430 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c356:	4b2f      	ldr	r3, [pc, #188]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c35e:	ee07 3a90 	vmov	s15, r3
 800c362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c366:	ed97 6a02 	vldr	s12, [r7, #8]
 800c36a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c36e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c37a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c386:	e021      	b.n	800c3cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c392:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c42c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c39a:	4b1e      	ldr	r3, [pc, #120]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3a2:	ee07 3a90 	vmov	s15, r3
 800c3a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c3cc:	4b11      	ldr	r3, [pc, #68]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d0:	0a5b      	lsrs	r3, r3, #9
 800c3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	ee07 3a90 	vmov	s15, r3
 800c3e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c3e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3f0:	ee17 3a90 	vmov	r3, s15
 800c3f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c3f6:	e005      	b.n	800c404 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	61bb      	str	r3, [r7, #24]
    break;
 800c3fc:	e002      	b.n	800c404 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c3fe:	4b07      	ldr	r3, [pc, #28]	; (800c41c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c400:	61bb      	str	r3, [r7, #24]
    break;
 800c402:	bf00      	nop
  }

  return sysclockfreq;
 800c404:	69bb      	ldr	r3, [r7, #24]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3724      	adds	r7, #36	; 0x24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	58024400 	.word	0x58024400
 800c418:	03d09000 	.word	0x03d09000
 800c41c:	003d0900 	.word	0x003d0900
 800c420:	00f42400 	.word	0x00f42400
 800c424:	46000000 	.word	0x46000000
 800c428:	4c742400 	.word	0x4c742400
 800c42c:	4a742400 	.word	0x4a742400
 800c430:	4b742400 	.word	0x4b742400

0800c434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c43a:	f7ff fe81 	bl	800c140 <HAL_RCC_GetSysClockFreq>
 800c43e:	4602      	mov	r2, r0
 800c440:	4b10      	ldr	r3, [pc, #64]	; (800c484 <HAL_RCC_GetHCLKFreq+0x50>)
 800c442:	699b      	ldr	r3, [r3, #24]
 800c444:	0a1b      	lsrs	r3, r3, #8
 800c446:	f003 030f 	and.w	r3, r3, #15
 800c44a:	490f      	ldr	r1, [pc, #60]	; (800c488 <HAL_RCC_GetHCLKFreq+0x54>)
 800c44c:	5ccb      	ldrb	r3, [r1, r3]
 800c44e:	f003 031f 	and.w	r3, r3, #31
 800c452:	fa22 f303 	lsr.w	r3, r2, r3
 800c456:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c458:	4b0a      	ldr	r3, [pc, #40]	; (800c484 <HAL_RCC_GetHCLKFreq+0x50>)
 800c45a:	699b      	ldr	r3, [r3, #24]
 800c45c:	f003 030f 	and.w	r3, r3, #15
 800c460:	4a09      	ldr	r2, [pc, #36]	; (800c488 <HAL_RCC_GetHCLKFreq+0x54>)
 800c462:	5cd3      	ldrb	r3, [r2, r3]
 800c464:	f003 031f 	and.w	r3, r3, #31
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	fa22 f303 	lsr.w	r3, r2, r3
 800c46e:	4a07      	ldr	r2, [pc, #28]	; (800c48c <HAL_RCC_GetHCLKFreq+0x58>)
 800c470:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c472:	4a07      	ldr	r2, [pc, #28]	; (800c490 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c478:	4b04      	ldr	r3, [pc, #16]	; (800c48c <HAL_RCC_GetHCLKFreq+0x58>)
 800c47a:	681b      	ldr	r3, [r3, #0]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	58024400 	.word	0x58024400
 800c488:	08019278 	.word	0x08019278
 800c48c:	24000014 	.word	0x24000014
 800c490:	24000010 	.word	0x24000010

0800c494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c498:	f7ff ffcc 	bl	800c434 <HAL_RCC_GetHCLKFreq>
 800c49c:	4602      	mov	r2, r0
 800c49e:	4b06      	ldr	r3, [pc, #24]	; (800c4b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c4a0:	69db      	ldr	r3, [r3, #28]
 800c4a2:	091b      	lsrs	r3, r3, #4
 800c4a4:	f003 0307 	and.w	r3, r3, #7
 800c4a8:	4904      	ldr	r1, [pc, #16]	; (800c4bc <HAL_RCC_GetPCLK1Freq+0x28>)
 800c4aa:	5ccb      	ldrb	r3, [r1, r3]
 800c4ac:	f003 031f 	and.w	r3, r3, #31
 800c4b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	58024400 	.word	0x58024400
 800c4bc:	08019278 	.word	0x08019278

0800c4c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c4c4:	f7ff ffb6 	bl	800c434 <HAL_RCC_GetHCLKFreq>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	4b06      	ldr	r3, [pc, #24]	; (800c4e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c4cc:	69db      	ldr	r3, [r3, #28]
 800c4ce:	0a1b      	lsrs	r3, r3, #8
 800c4d0:	f003 0307 	and.w	r3, r3, #7
 800c4d4:	4904      	ldr	r1, [pc, #16]	; (800c4e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c4d6:	5ccb      	ldrb	r3, [r1, r3]
 800c4d8:	f003 031f 	and.w	r3, r3, #31
 800c4dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	58024400 	.word	0x58024400
 800c4e8:	08019278 	.word	0x08019278

0800c4ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b086      	sub	sp, #24
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d03f      	beq.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c50c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c510:	d02a      	beq.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c512:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c516:	d824      	bhi.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c518:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c51c:	d018      	beq.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c51e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c522:	d81e      	bhi.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c524:	2b00      	cmp	r3, #0
 800c526:	d003      	beq.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c52c:	d007      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c52e:	e018      	b.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c530:	4bab      	ldr	r3, [pc, #684]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c534:	4aaa      	ldr	r2, [pc, #680]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c53a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c53c:	e015      	b.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	3304      	adds	r3, #4
 800c542:	2102      	movs	r1, #2
 800c544:	4618      	mov	r0, r3
 800c546:	f001 fff3 	bl	800e530 <RCCEx_PLL2_Config>
 800c54a:	4603      	mov	r3, r0
 800c54c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c54e:	e00c      	b.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	3324      	adds	r3, #36	; 0x24
 800c554:	2102      	movs	r1, #2
 800c556:	4618      	mov	r0, r3
 800c558:	f002 f89c 	bl	800e694 <RCCEx_PLL3_Config>
 800c55c:	4603      	mov	r3, r0
 800c55e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c560:	e003      	b.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	75fb      	strb	r3, [r7, #23]
      break;
 800c566:	e000      	b.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d109      	bne.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c570:	4b9b      	ldr	r3, [pc, #620]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c574:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c57c:	4998      	ldr	r1, [pc, #608]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c57e:	4313      	orrs	r3, r2
 800c580:	650b      	str	r3, [r1, #80]	; 0x50
 800c582:	e001      	b.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c584:	7dfb      	ldrb	r3, [r7, #23]
 800c586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c590:	2b00      	cmp	r3, #0
 800c592:	d03d      	beq.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c598:	2b04      	cmp	r3, #4
 800c59a:	d826      	bhi.n	800c5ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c59c:	a201      	add	r2, pc, #4	; (adr r2, 800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a2:	bf00      	nop
 800c5a4:	0800c5b9 	.word	0x0800c5b9
 800c5a8:	0800c5c7 	.word	0x0800c5c7
 800c5ac:	0800c5d9 	.word	0x0800c5d9
 800c5b0:	0800c5f1 	.word	0x0800c5f1
 800c5b4:	0800c5f1 	.word	0x0800c5f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5b8:	4b89      	ldr	r3, [pc, #548]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5bc:	4a88      	ldr	r2, [pc, #544]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c5be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c5c4:	e015      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f001 ffaf 	bl	800e530 <RCCEx_PLL2_Config>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c5d6:	e00c      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3324      	adds	r3, #36	; 0x24
 800c5dc:	2100      	movs	r1, #0
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f002 f858 	bl	800e694 <RCCEx_PLL3_Config>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c5e8:	e003      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	75fb      	strb	r3, [r7, #23]
      break;
 800c5ee:	e000      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c5f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5f2:	7dfb      	ldrb	r3, [r7, #23]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d109      	bne.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c5f8:	4b79      	ldr	r3, [pc, #484]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5fc:	f023 0207 	bic.w	r2, r3, #7
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c604:	4976      	ldr	r1, [pc, #472]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c606:	4313      	orrs	r3, r2
 800c608:	650b      	str	r3, [r1, #80]	; 0x50
 800c60a:	e001      	b.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c60c:	7dfb      	ldrb	r3, [r7, #23]
 800c60e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d042      	beq.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c624:	d02b      	beq.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c62a:	d825      	bhi.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c62c:	2bc0      	cmp	r3, #192	; 0xc0
 800c62e:	d028      	beq.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c630:	2bc0      	cmp	r3, #192	; 0xc0
 800c632:	d821      	bhi.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c634:	2b80      	cmp	r3, #128	; 0x80
 800c636:	d016      	beq.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800c638:	2b80      	cmp	r3, #128	; 0x80
 800c63a:	d81d      	bhi.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800c640:	2b40      	cmp	r3, #64	; 0x40
 800c642:	d007      	beq.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c644:	e018      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c646:	4b66      	ldr	r3, [pc, #408]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64a:	4a65      	ldr	r2, [pc, #404]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c64c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c652:	e017      	b.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	3304      	adds	r3, #4
 800c658:	2100      	movs	r1, #0
 800c65a:	4618      	mov	r0, r3
 800c65c:	f001 ff68 	bl	800e530 <RCCEx_PLL2_Config>
 800c660:	4603      	mov	r3, r0
 800c662:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c664:	e00e      	b.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	3324      	adds	r3, #36	; 0x24
 800c66a:	2100      	movs	r1, #0
 800c66c:	4618      	mov	r0, r3
 800c66e:	f002 f811 	bl	800e694 <RCCEx_PLL3_Config>
 800c672:	4603      	mov	r3, r0
 800c674:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c676:	e005      	b.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	75fb      	strb	r3, [r7, #23]
      break;
 800c67c:	e002      	b.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c67e:	bf00      	nop
 800c680:	e000      	b.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c682:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c684:	7dfb      	ldrb	r3, [r7, #23]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d109      	bne.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c68a:	4b55      	ldr	r3, [pc, #340]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c68c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c68e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c696:	4952      	ldr	r1, [pc, #328]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c698:	4313      	orrs	r3, r2
 800c69a:	650b      	str	r3, [r1, #80]	; 0x50
 800c69c:	e001      	b.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d049      	beq.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c6b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6b8:	d030      	beq.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c6ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6be:	d82a      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c6c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c6c4:	d02c      	beq.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c6c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c6ca:	d824      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c6cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6d0:	d018      	beq.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800c6d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6d6:	d81e      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c6dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6e0:	d007      	beq.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c6e2:	e018      	b.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6e4:	4b3e      	ldr	r3, [pc, #248]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e8:	4a3d      	ldr	r2, [pc, #244]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c6f0:	e017      	b.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f001 ff19 	bl	800e530 <RCCEx_PLL2_Config>
 800c6fe:	4603      	mov	r3, r0
 800c700:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c702:	e00e      	b.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	3324      	adds	r3, #36	; 0x24
 800c708:	2100      	movs	r1, #0
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 ffc2 	bl	800e694 <RCCEx_PLL3_Config>
 800c710:	4603      	mov	r3, r0
 800c712:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c714:	e005      	b.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	75fb      	strb	r3, [r7, #23]
      break;
 800c71a:	e002      	b.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c71c:	bf00      	nop
 800c71e:	e000      	b.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c720:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c722:	7dfb      	ldrb	r3, [r7, #23]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10a      	bne.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c728:	4b2d      	ldr	r3, [pc, #180]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c72a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c72c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c736:	492a      	ldr	r1, [pc, #168]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c738:	4313      	orrs	r3, r2
 800c73a:	658b      	str	r3, [r1, #88]	; 0x58
 800c73c:	e001      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
 800c740:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d04c      	beq.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c758:	d030      	beq.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800c75a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c75e:	d82a      	bhi.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c760:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c764:	d02c      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800c766:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c76a:	d824      	bhi.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c76c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c770:	d018      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800c772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c776:	d81e      	bhi.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c77c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c780:	d007      	beq.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c782:	e018      	b.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c784:	4b16      	ldr	r3, [pc, #88]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c788:	4a15      	ldr	r2, [pc, #84]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c78a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c78e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c790:	e017      	b.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3304      	adds	r3, #4
 800c796:	2100      	movs	r1, #0
 800c798:	4618      	mov	r0, r3
 800c79a:	f001 fec9 	bl	800e530 <RCCEx_PLL2_Config>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c7a2:	e00e      	b.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3324      	adds	r3, #36	; 0x24
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f001 ff72 	bl	800e694 <RCCEx_PLL3_Config>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c7b4:	e005      	b.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	75fb      	strb	r3, [r7, #23]
      break;
 800c7ba:	e002      	b.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800c7bc:	bf00      	nop
 800c7be:	e000      	b.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800c7c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10d      	bne.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c7c8:	4b05      	ldr	r3, [pc, #20]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c7ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c7d6:	4902      	ldr	r1, [pc, #8]	; (800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	658b      	str	r3, [r1, #88]	; 0x58
 800c7dc:	e004      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800c7de:	bf00      	nop
 800c7e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
 800c7e6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d032      	beq.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7f8:	2b30      	cmp	r3, #48	; 0x30
 800c7fa:	d01c      	beq.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c7fc:	2b30      	cmp	r3, #48	; 0x30
 800c7fe:	d817      	bhi.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c800:	2b20      	cmp	r3, #32
 800c802:	d00c      	beq.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800c804:	2b20      	cmp	r3, #32
 800c806:	d813      	bhi.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d016      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800c80c:	2b10      	cmp	r3, #16
 800c80e:	d10f      	bne.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c810:	4baf      	ldr	r3, [pc, #700]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c814:	4aae      	ldr	r2, [pc, #696]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c81a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c81c:	e00e      	b.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3304      	adds	r3, #4
 800c822:	2102      	movs	r1, #2
 800c824:	4618      	mov	r0, r3
 800c826:	f001 fe83 	bl	800e530 <RCCEx_PLL2_Config>
 800c82a:	4603      	mov	r3, r0
 800c82c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c82e:	e005      	b.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c830:	2301      	movs	r3, #1
 800c832:	75fb      	strb	r3, [r7, #23]
      break;
 800c834:	e002      	b.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800c836:	bf00      	nop
 800c838:	e000      	b.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800c83a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c83c:	7dfb      	ldrb	r3, [r7, #23]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d109      	bne.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c842:	4ba3      	ldr	r3, [pc, #652]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c846:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c84e:	49a0      	ldr	r1, [pc, #640]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c850:	4313      	orrs	r3, r2
 800c852:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c854:	e001      	b.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c856:	7dfb      	ldrb	r3, [r7, #23]
 800c858:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c862:	2b00      	cmp	r3, #0
 800c864:	d047      	beq.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c86a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c86e:	d030      	beq.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800c870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c874:	d82a      	bhi.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c876:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c87a:	d02c      	beq.n	800c8d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800c87c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c880:	d824      	bhi.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c886:	d018      	beq.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800c888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c88c:	d81e      	bhi.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d003      	beq.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800c892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c896:	d007      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800c898:	e018      	b.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c89a:	4b8d      	ldr	r3, [pc, #564]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89e:	4a8c      	ldr	r2, [pc, #560]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c8a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c8a6:	e017      	b.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f001 fe3e 	bl	800e530 <RCCEx_PLL2_Config>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c8b8:	e00e      	b.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3324      	adds	r3, #36	; 0x24
 800c8be:	2100      	movs	r1, #0
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f001 fee7 	bl	800e694 <RCCEx_PLL3_Config>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c8ca:	e005      	b.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	75fb      	strb	r3, [r7, #23]
      break;
 800c8d0:	e002      	b.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800c8d2:	bf00      	nop
 800c8d4:	e000      	b.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800c8d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c8d8:	7dfb      	ldrb	r3, [r7, #23]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d109      	bne.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c8de:	4b7c      	ldr	r3, [pc, #496]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8e2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8ea:	4979      	ldr	r1, [pc, #484]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	650b      	str	r3, [r1, #80]	; 0x50
 800c8f0:	e001      	b.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8f2:	7dfb      	ldrb	r3, [r7, #23]
 800c8f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d049      	beq.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c90a:	d02e      	beq.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800c90c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c910:	d828      	bhi.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c912:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c916:	d02a      	beq.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0x482>
 800c918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c91c:	d822      	bhi.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c91e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c922:	d026      	beq.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800c924:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c928:	d81c      	bhi.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c92a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c92e:	d010      	beq.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800c930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c934:	d816      	bhi.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c936:	2b00      	cmp	r3, #0
 800c938:	d01d      	beq.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800c93a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c93e:	d111      	bne.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	3304      	adds	r3, #4
 800c944:	2101      	movs	r1, #1
 800c946:	4618      	mov	r0, r3
 800c948:	f001 fdf2 	bl	800e530 <RCCEx_PLL2_Config>
 800c94c:	4603      	mov	r3, r0
 800c94e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c950:	e012      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	3324      	adds	r3, #36	; 0x24
 800c956:	2101      	movs	r1, #1
 800c958:	4618      	mov	r0, r3
 800c95a:	f001 fe9b 	bl	800e694 <RCCEx_PLL3_Config>
 800c95e:	4603      	mov	r3, r0
 800c960:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c962:	e009      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	75fb      	strb	r3, [r7, #23]
      break;
 800c968:	e006      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c96a:	bf00      	nop
 800c96c:	e004      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c96e:	bf00      	nop
 800c970:	e002      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c972:	bf00      	nop
 800c974:	e000      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c976:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c978:	7dfb      	ldrb	r3, [r7, #23]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d109      	bne.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c97e:	4b54      	ldr	r3, [pc, #336]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c982:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c98a:	4951      	ldr	r1, [pc, #324]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c98c:	4313      	orrs	r3, r2
 800c98e:	650b      	str	r3, [r1, #80]	; 0x50
 800c990:	e001      	b.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c992:	7dfb      	ldrb	r3, [r7, #23]
 800c994:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d04b      	beq.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c9a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9ac:	d02e      	beq.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800c9ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9b2:	d828      	bhi.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c9b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9b8:	d02a      	beq.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800c9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9be:	d822      	bhi.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c9c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c9c4:	d026      	beq.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800c9c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c9ca:	d81c      	bhi.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c9cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9d0:	d010      	beq.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800c9d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9d6:	d816      	bhi.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d01d      	beq.n	800ca18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800c9dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9e0:	d111      	bne.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	2101      	movs	r1, #1
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f001 fda1 	bl	800e530 <RCCEx_PLL2_Config>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c9f2:	e012      	b.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	3324      	adds	r3, #36	; 0x24
 800c9f8:	2101      	movs	r1, #1
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f001 fe4a 	bl	800e694 <RCCEx_PLL3_Config>
 800ca00:	4603      	mov	r3, r0
 800ca02:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ca04:	e009      	b.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	75fb      	strb	r3, [r7, #23]
      break;
 800ca0a:	e006      	b.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ca0c:	bf00      	nop
 800ca0e:	e004      	b.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ca10:	bf00      	nop
 800ca12:	e002      	b.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ca14:	bf00      	nop
 800ca16:	e000      	b.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ca18:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca1a:	7dfb      	ldrb	r3, [r7, #23]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10a      	bne.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ca20:	4b2b      	ldr	r3, [pc, #172]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ca22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca24:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ca2e:	4928      	ldr	r1, [pc, #160]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ca30:	4313      	orrs	r3, r2
 800ca32:	658b      	str	r3, [r1, #88]	; 0x58
 800ca34:	e001      	b.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d02f      	beq.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca4e:	d00e      	beq.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ca50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca54:	d814      	bhi.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d015      	beq.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ca5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca5e:	d10f      	bne.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca60:	4b1b      	ldr	r3, [pc, #108]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	4a1a      	ldr	r2, [pc, #104]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ca66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ca6c:	e00c      	b.n	800ca88 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3304      	adds	r3, #4
 800ca72:	2101      	movs	r1, #1
 800ca74:	4618      	mov	r0, r3
 800ca76:	f001 fd5b 	bl	800e530 <RCCEx_PLL2_Config>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ca7e:	e003      	b.n	800ca88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca80:	2301      	movs	r3, #1
 800ca82:	75fb      	strb	r3, [r7, #23]
      break;
 800ca84:	e000      	b.n	800ca88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800ca86:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d109      	bne.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ca8e:	4b10      	ldr	r3, [pc, #64]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ca90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca9a:	490d      	ldr	r1, [pc, #52]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	650b      	str	r3, [r1, #80]	; 0x50
 800caa0:	e001      	b.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caa2:	7dfb      	ldrb	r3, [r7, #23]
 800caa4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d033      	beq.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cab6:	2b03      	cmp	r3, #3
 800cab8:	d81c      	bhi.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800caba:	a201      	add	r2, pc, #4	; (adr r2, 800cac0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800cabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac0:	0800cafb 	.word	0x0800cafb
 800cac4:	0800cad5 	.word	0x0800cad5
 800cac8:	0800cae3 	.word	0x0800cae3
 800cacc:	0800cafb 	.word	0x0800cafb
 800cad0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cad4:	4bb8      	ldr	r3, [pc, #736]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad8:	4ab7      	ldr	r2, [pc, #732]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800cae0:	e00c      	b.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	3304      	adds	r3, #4
 800cae6:	2102      	movs	r1, #2
 800cae8:	4618      	mov	r0, r3
 800caea:	f001 fd21 	bl	800e530 <RCCEx_PLL2_Config>
 800caee:	4603      	mov	r3, r0
 800caf0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800caf2:	e003      	b.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	75fb      	strb	r3, [r7, #23]
      break;
 800caf8:	e000      	b.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800cafa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d109      	bne.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cb02:	4bad      	ldr	r3, [pc, #692]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb06:	f023 0203 	bic.w	r2, r3, #3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb0e:	49aa      	ldr	r1, [pc, #680]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb10:	4313      	orrs	r3, r2
 800cb12:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cb14:	e001      	b.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb16:	7dfb      	ldrb	r3, [r7, #23]
 800cb18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f000 8086 	beq.w	800cc34 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cb28:	4ba4      	ldr	r3, [pc, #656]	; (800cdbc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4aa3      	ldr	r2, [pc, #652]	; (800cdbc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800cb2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cb34:	f7f9 f9d4 	bl	8005ee0 <HAL_GetTick>
 800cb38:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cb3a:	e009      	b.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cb3c:	f7f9 f9d0 	bl	8005ee0 <HAL_GetTick>
 800cb40:	4602      	mov	r2, r0
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	2b64      	cmp	r3, #100	; 0x64
 800cb48:	d902      	bls.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800cb4a:	2303      	movs	r3, #3
 800cb4c:	75fb      	strb	r3, [r7, #23]
        break;
 800cb4e:	e005      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cb50:	4b9a      	ldr	r3, [pc, #616]	; (800cdbc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d0ef      	beq.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800cb5c:	7dfb      	ldrb	r3, [r7, #23]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d166      	bne.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cb62:	4b95      	ldr	r3, [pc, #596]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cb6c:	4053      	eors	r3, r2
 800cb6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d013      	beq.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cb76:	4b90      	ldr	r3, [pc, #576]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb7e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cb80:	4b8d      	ldr	r3, [pc, #564]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb84:	4a8c      	ldr	r2, [pc, #560]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb8a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cb8c:	4b8a      	ldr	r3, [pc, #552]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb90:	4a89      	ldr	r2, [pc, #548]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb96:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cb98:	4a87      	ldr	r2, [pc, #540]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cba8:	d115      	bne.n	800cbd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbaa:	f7f9 f999 	bl	8005ee0 <HAL_GetTick>
 800cbae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cbb0:	e00b      	b.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cbb2:	f7f9 f995 	bl	8005ee0 <HAL_GetTick>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d902      	bls.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	75fb      	strb	r3, [r7, #23]
            break;
 800cbc8:	e005      	b.n	800cbd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cbca:	4b7b      	ldr	r3, [pc, #492]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbce:	f003 0302 	and.w	r3, r3, #2
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d0ed      	beq.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800cbd6:	7dfb      	ldrb	r3, [r7, #23]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d126      	bne.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cbe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbea:	d10d      	bne.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800cbec:	4b72      	ldr	r3, [pc, #456]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cbee:	691b      	ldr	r3, [r3, #16]
 800cbf0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cbfa:	0919      	lsrs	r1, r3, #4
 800cbfc:	4b70      	ldr	r3, [pc, #448]	; (800cdc0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800cbfe:	400b      	ands	r3, r1
 800cc00:	496d      	ldr	r1, [pc, #436]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cc02:	4313      	orrs	r3, r2
 800cc04:	610b      	str	r3, [r1, #16]
 800cc06:	e005      	b.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800cc08:	4b6b      	ldr	r3, [pc, #428]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cc0a:	691b      	ldr	r3, [r3, #16]
 800cc0c:	4a6a      	ldr	r2, [pc, #424]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cc0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cc12:	6113      	str	r3, [r2, #16]
 800cc14:	4b68      	ldr	r3, [pc, #416]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cc16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cc1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc22:	4965      	ldr	r1, [pc, #404]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cc24:	4313      	orrs	r3, r2
 800cc26:	670b      	str	r3, [r1, #112]	; 0x70
 800cc28:	e004      	b.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cc2a:	7dfb      	ldrb	r3, [r7, #23]
 800cc2c:	75bb      	strb	r3, [r7, #22]
 800cc2e:	e001      	b.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc30:	7dfb      	ldrb	r3, [r7, #23]
 800cc32:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f003 0301 	and.w	r3, r3, #1
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d07e      	beq.n	800cd3e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc44:	2b28      	cmp	r3, #40	; 0x28
 800cc46:	d867      	bhi.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800cc48:	a201      	add	r2, pc, #4	; (adr r2, 800cc50 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800cc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4e:	bf00      	nop
 800cc50:	0800cd1f 	.word	0x0800cd1f
 800cc54:	0800cd19 	.word	0x0800cd19
 800cc58:	0800cd19 	.word	0x0800cd19
 800cc5c:	0800cd19 	.word	0x0800cd19
 800cc60:	0800cd19 	.word	0x0800cd19
 800cc64:	0800cd19 	.word	0x0800cd19
 800cc68:	0800cd19 	.word	0x0800cd19
 800cc6c:	0800cd19 	.word	0x0800cd19
 800cc70:	0800ccf5 	.word	0x0800ccf5
 800cc74:	0800cd19 	.word	0x0800cd19
 800cc78:	0800cd19 	.word	0x0800cd19
 800cc7c:	0800cd19 	.word	0x0800cd19
 800cc80:	0800cd19 	.word	0x0800cd19
 800cc84:	0800cd19 	.word	0x0800cd19
 800cc88:	0800cd19 	.word	0x0800cd19
 800cc8c:	0800cd19 	.word	0x0800cd19
 800cc90:	0800cd07 	.word	0x0800cd07
 800cc94:	0800cd19 	.word	0x0800cd19
 800cc98:	0800cd19 	.word	0x0800cd19
 800cc9c:	0800cd19 	.word	0x0800cd19
 800cca0:	0800cd19 	.word	0x0800cd19
 800cca4:	0800cd19 	.word	0x0800cd19
 800cca8:	0800cd19 	.word	0x0800cd19
 800ccac:	0800cd19 	.word	0x0800cd19
 800ccb0:	0800cd1f 	.word	0x0800cd1f
 800ccb4:	0800cd19 	.word	0x0800cd19
 800ccb8:	0800cd19 	.word	0x0800cd19
 800ccbc:	0800cd19 	.word	0x0800cd19
 800ccc0:	0800cd19 	.word	0x0800cd19
 800ccc4:	0800cd19 	.word	0x0800cd19
 800ccc8:	0800cd19 	.word	0x0800cd19
 800cccc:	0800cd19 	.word	0x0800cd19
 800ccd0:	0800cd1f 	.word	0x0800cd1f
 800ccd4:	0800cd19 	.word	0x0800cd19
 800ccd8:	0800cd19 	.word	0x0800cd19
 800ccdc:	0800cd19 	.word	0x0800cd19
 800cce0:	0800cd19 	.word	0x0800cd19
 800cce4:	0800cd19 	.word	0x0800cd19
 800cce8:	0800cd19 	.word	0x0800cd19
 800ccec:	0800cd19 	.word	0x0800cd19
 800ccf0:	0800cd1f 	.word	0x0800cd1f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	3304      	adds	r3, #4
 800ccf8:	2101      	movs	r1, #1
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f001 fc18 	bl	800e530 <RCCEx_PLL2_Config>
 800cd00:	4603      	mov	r3, r0
 800cd02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800cd04:	e00c      	b.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	3324      	adds	r3, #36	; 0x24
 800cd0a:	2101      	movs	r1, #1
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f001 fcc1 	bl	800e694 <RCCEx_PLL3_Config>
 800cd12:	4603      	mov	r3, r0
 800cd14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800cd16:	e003      	b.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	75fb      	strb	r3, [r7, #23]
      break;
 800cd1c:	e000      	b.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800cd1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd20:	7dfb      	ldrb	r3, [r7, #23]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d109      	bne.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cd26:	4b24      	ldr	r3, [pc, #144]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd32:	4921      	ldr	r1, [pc, #132]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cd34:	4313      	orrs	r3, r2
 800cd36:	654b      	str	r3, [r1, #84]	; 0x54
 800cd38:	e001      	b.n	800cd3e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 0302 	and.w	r3, r3, #2
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d03e      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd4e:	2b05      	cmp	r3, #5
 800cd50:	d820      	bhi.n	800cd94 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800cd52:	a201      	add	r2, pc, #4	; (adr r2, 800cd58 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800cd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd58:	0800cd9b 	.word	0x0800cd9b
 800cd5c:	0800cd71 	.word	0x0800cd71
 800cd60:	0800cd83 	.word	0x0800cd83
 800cd64:	0800cd9b 	.word	0x0800cd9b
 800cd68:	0800cd9b 	.word	0x0800cd9b
 800cd6c:	0800cd9b 	.word	0x0800cd9b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3304      	adds	r3, #4
 800cd74:	2101      	movs	r1, #1
 800cd76:	4618      	mov	r0, r3
 800cd78:	f001 fbda 	bl	800e530 <RCCEx_PLL2_Config>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cd80:	e00c      	b.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	3324      	adds	r3, #36	; 0x24
 800cd86:	2101      	movs	r1, #1
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f001 fc83 	bl	800e694 <RCCEx_PLL3_Config>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cd92:	e003      	b.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	75fb      	strb	r3, [r7, #23]
      break;
 800cd98:	e000      	b.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800cd9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d110      	bne.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cda2:	4b05      	ldr	r3, [pc, #20]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda6:	f023 0207 	bic.w	r2, r3, #7
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdae:	4902      	ldr	r1, [pc, #8]	; (800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	654b      	str	r3, [r1, #84]	; 0x54
 800cdb4:	e008      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800cdb6:	bf00      	nop
 800cdb8:	58024400 	.word	0x58024400
 800cdbc:	58024800 	.word	0x58024800
 800cdc0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdc4:	7dfb      	ldrb	r3, [r7, #23]
 800cdc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f003 0304 	and.w	r3, r3, #4
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d039      	beq.n	800ce48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdda:	2b05      	cmp	r3, #5
 800cddc:	d820      	bhi.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800cdde:	a201      	add	r2, pc, #4	; (adr r2, 800cde4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800cde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde4:	0800ce27 	.word	0x0800ce27
 800cde8:	0800cdfd 	.word	0x0800cdfd
 800cdec:	0800ce0f 	.word	0x0800ce0f
 800cdf0:	0800ce27 	.word	0x0800ce27
 800cdf4:	0800ce27 	.word	0x0800ce27
 800cdf8:	0800ce27 	.word	0x0800ce27
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	3304      	adds	r3, #4
 800ce00:	2101      	movs	r1, #1
 800ce02:	4618      	mov	r0, r3
 800ce04:	f001 fb94 	bl	800e530 <RCCEx_PLL2_Config>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ce0c:	e00c      	b.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	3324      	adds	r3, #36	; 0x24
 800ce12:	2101      	movs	r1, #1
 800ce14:	4618      	mov	r0, r3
 800ce16:	f001 fc3d 	bl	800e694 <RCCEx_PLL3_Config>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ce1e:	e003      	b.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	75fb      	strb	r3, [r7, #23]
      break;
 800ce24:	e000      	b.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800ce26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d10a      	bne.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ce2e:	4bb7      	ldr	r3, [pc, #732]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ce30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce32:	f023 0207 	bic.w	r2, r3, #7
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce3c:	49b3      	ldr	r1, [pc, #716]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	658b      	str	r3, [r1, #88]	; 0x58
 800ce42:	e001      	b.n	800ce48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce44:	7dfb      	ldrb	r3, [r7, #23]
 800ce46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f003 0320 	and.w	r3, r3, #32
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d04b      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce5e:	d02e      	beq.n	800cebe <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800ce60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce64:	d828      	bhi.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ce66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce6a:	d02a      	beq.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800ce6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce70:	d822      	bhi.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ce72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce76:	d026      	beq.n	800cec6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800ce78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce7c:	d81c      	bhi.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ce7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce82:	d010      	beq.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800ce84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce88:	d816      	bhi.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d01d      	beq.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800ce8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce92:	d111      	bne.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	3304      	adds	r3, #4
 800ce98:	2100      	movs	r1, #0
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f001 fb48 	bl	800e530 <RCCEx_PLL2_Config>
 800cea0:	4603      	mov	r3, r0
 800cea2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cea4:	e012      	b.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	3324      	adds	r3, #36	; 0x24
 800ceaa:	2102      	movs	r1, #2
 800ceac:	4618      	mov	r0, r3
 800ceae:	f001 fbf1 	bl	800e694 <RCCEx_PLL3_Config>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ceb6:	e009      	b.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	75fb      	strb	r3, [r7, #23]
      break;
 800cebc:	e006      	b.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cebe:	bf00      	nop
 800cec0:	e004      	b.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cec2:	bf00      	nop
 800cec4:	e002      	b.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cec6:	bf00      	nop
 800cec8:	e000      	b.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ceca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cecc:	7dfb      	ldrb	r3, [r7, #23]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10a      	bne.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ced2:	4b8e      	ldr	r3, [pc, #568]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ced4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ced6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cee0:	498a      	ldr	r1, [pc, #552]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cee2:	4313      	orrs	r3, r2
 800cee4:	654b      	str	r3, [r1, #84]	; 0x54
 800cee6:	e001      	b.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
 800ceea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d04b      	beq.n	800cf90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cefe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cf02:	d02e      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800cf04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cf08:	d828      	bhi.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800cf0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf0e:	d02a      	beq.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800cf10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf14:	d822      	bhi.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800cf16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cf1a:	d026      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800cf1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cf20:	d81c      	bhi.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800cf22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf26:	d010      	beq.n	800cf4a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800cf28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf2c:	d816      	bhi.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d01d      	beq.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800cf32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf36:	d111      	bne.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	3304      	adds	r3, #4
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f001 faf6 	bl	800e530 <RCCEx_PLL2_Config>
 800cf44:	4603      	mov	r3, r0
 800cf46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cf48:	e012      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	3324      	adds	r3, #36	; 0x24
 800cf4e:	2102      	movs	r1, #2
 800cf50:	4618      	mov	r0, r3
 800cf52:	f001 fb9f 	bl	800e694 <RCCEx_PLL3_Config>
 800cf56:	4603      	mov	r3, r0
 800cf58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cf5a:	e009      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	75fb      	strb	r3, [r7, #23]
      break;
 800cf60:	e006      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800cf62:	bf00      	nop
 800cf64:	e004      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800cf66:	bf00      	nop
 800cf68:	e002      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800cf6a:	bf00      	nop
 800cf6c:	e000      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800cf6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf70:	7dfb      	ldrb	r3, [r7, #23]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10a      	bne.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf76:	4b65      	ldr	r3, [pc, #404]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cf84:	4961      	ldr	r1, [pc, #388]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf86:	4313      	orrs	r3, r2
 800cf88:	658b      	str	r3, [r1, #88]	; 0x58
 800cf8a:	e001      	b.n	800cf90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf8c:	7dfb      	ldrb	r3, [r7, #23]
 800cf8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d04b      	beq.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cfa2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cfa6:	d02e      	beq.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800cfa8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cfac:	d828      	bhi.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cfae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfb2:	d02a      	beq.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800cfb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfb8:	d822      	bhi.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cfba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cfbe:	d026      	beq.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800cfc0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cfc4:	d81c      	bhi.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cfc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfca:	d010      	beq.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800cfcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfd0:	d816      	bhi.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d01d      	beq.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800cfd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfda:	d111      	bne.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	3304      	adds	r3, #4
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f001 faa4 	bl	800e530 <RCCEx_PLL2_Config>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cfec:	e012      	b.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	3324      	adds	r3, #36	; 0x24
 800cff2:	2102      	movs	r1, #2
 800cff4:	4618      	mov	r0, r3
 800cff6:	f001 fb4d 	bl	800e694 <RCCEx_PLL3_Config>
 800cffa:	4603      	mov	r3, r0
 800cffc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cffe:	e009      	b.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	75fb      	strb	r3, [r7, #23]
      break;
 800d004:	e006      	b.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800d006:	bf00      	nop
 800d008:	e004      	b.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800d00a:	bf00      	nop
 800d00c:	e002      	b.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800d00e:	bf00      	nop
 800d010:	e000      	b.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800d012:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d014:	7dfb      	ldrb	r3, [r7, #23]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d10a      	bne.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d01a:	4b3c      	ldr	r3, [pc, #240]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800d01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d01e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d028:	4938      	ldr	r1, [pc, #224]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800d02a:	4313      	orrs	r3, r2
 800d02c:	658b      	str	r3, [r1, #88]	; 0x58
 800d02e:	e001      	b.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d030:	7dfb      	ldrb	r3, [r7, #23]
 800d032:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f003 0308 	and.w	r3, r3, #8
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d01a      	beq.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d04a:	d10a      	bne.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	3324      	adds	r3, #36	; 0x24
 800d050:	2102      	movs	r1, #2
 800d052:	4618      	mov	r0, r3
 800d054:	f001 fb1e 	bl	800e694 <RCCEx_PLL3_Config>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d001      	beq.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d062:	4b2a      	ldr	r3, [pc, #168]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800d064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d066:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d070:	4926      	ldr	r1, [pc, #152]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800d072:	4313      	orrs	r3, r2
 800d074:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f003 0310 	and.w	r3, r3, #16
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d01a      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d08c:	d10a      	bne.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	3324      	adds	r3, #36	; 0x24
 800d092:	2102      	movs	r1, #2
 800d094:	4618      	mov	r0, r3
 800d096:	f001 fafd 	bl	800e694 <RCCEx_PLL3_Config>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d001      	beq.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d0a4:	4b19      	ldr	r3, [pc, #100]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800d0a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0b2:	4916      	ldr	r1, [pc, #88]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d036      	beq.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d0ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0ce:	d01f      	beq.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800d0d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0d4:	d817      	bhi.n	800d106 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d003      	beq.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800d0da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0de:	d009      	beq.n	800d0f4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800d0e0:	e011      	b.n	800d106 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f001 fa21 	bl	800e530 <RCCEx_PLL2_Config>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d0f2:	e00e      	b.n	800d112 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	3324      	adds	r3, #36	; 0x24
 800d0f8:	2102      	movs	r1, #2
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f001 faca 	bl	800e694 <RCCEx_PLL3_Config>
 800d100:	4603      	mov	r3, r0
 800d102:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d104:	e005      	b.n	800d112 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d106:	2301      	movs	r3, #1
 800d108:	75fb      	strb	r3, [r7, #23]
      break;
 800d10a:	e002      	b.n	800d112 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800d10c:	58024400 	.word	0x58024400
      break;
 800d110:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d112:	7dfb      	ldrb	r3, [r7, #23]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10a      	bne.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d118:	4b93      	ldr	r3, [pc, #588]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d11c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d126:	4990      	ldr	r1, [pc, #576]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d128:	4313      	orrs	r3, r2
 800d12a:	658b      	str	r3, [r1, #88]	; 0x58
 800d12c:	e001      	b.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d12e:	7dfb      	ldrb	r3, [r7, #23]
 800d130:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d033      	beq.n	800d1a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d144:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d148:	d01c      	beq.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800d14a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d14e:	d816      	bhi.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800d150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d154:	d003      	beq.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800d156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d15a:	d007      	beq.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800d15c:	e00f      	b.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d15e:	4b82      	ldr	r3, [pc, #520]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d162:	4a81      	ldr	r2, [pc, #516]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d168:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800d16a:	e00c      	b.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	3324      	adds	r3, #36	; 0x24
 800d170:	2101      	movs	r1, #1
 800d172:	4618      	mov	r0, r3
 800d174:	f001 fa8e 	bl	800e694 <RCCEx_PLL3_Config>
 800d178:	4603      	mov	r3, r0
 800d17a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800d17c:	e003      	b.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	75fb      	strb	r3, [r7, #23]
      break;
 800d182:	e000      	b.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800d184:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10a      	bne.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d18c:	4b76      	ldr	r3, [pc, #472]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d19a:	4973      	ldr	r1, [pc, #460]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d19c:	4313      	orrs	r3, r2
 800d19e:	654b      	str	r3, [r1, #84]	; 0x54
 800d1a0:	e001      	b.n	800d1a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1a2:	7dfb      	ldrb	r3, [r7, #23]
 800d1a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d029      	beq.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d003      	beq.n	800d1c2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800d1ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1be:	d007      	beq.n	800d1d0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800d1c0:	e00f      	b.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1c2:	4b69      	ldr	r3, [pc, #420]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c6:	4a68      	ldr	r2, [pc, #416]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d1ce:	e00b      	b.n	800d1e8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	3304      	adds	r3, #4
 800d1d4:	2102      	movs	r1, #2
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f001 f9aa 	bl	800e530 <RCCEx_PLL2_Config>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d1e0:	e002      	b.n	800d1e8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	75fb      	strb	r3, [r7, #23]
      break;
 800d1e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d1e8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d109      	bne.n	800d202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d1ee:	4b5e      	ldr	r3, [pc, #376]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1fa:	495b      	ldr	r1, [pc, #364]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d200:	e001      	b.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d202:	7dfb      	ldrb	r3, [r7, #23]
 800d204:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00a      	beq.n	800d228 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	3324      	adds	r3, #36	; 0x24
 800d216:	2102      	movs	r1, #2
 800d218:	4618      	mov	r0, r3
 800d21a:	f001 fa3b 	bl	800e694 <RCCEx_PLL3_Config>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d001      	beq.n	800d228 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d230:	2b00      	cmp	r3, #0
 800d232:	d030      	beq.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d23c:	d017      	beq.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800d23e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d242:	d811      	bhi.n	800d268 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800d244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d248:	d013      	beq.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800d24a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d24e:	d80b      	bhi.n	800d268 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800d250:	2b00      	cmp	r3, #0
 800d252:	d010      	beq.n	800d276 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800d254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d258:	d106      	bne.n	800d268 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d25a:	4b43      	ldr	r3, [pc, #268]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25e:	4a42      	ldr	r2, [pc, #264]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800d266:	e007      	b.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d268:	2301      	movs	r3, #1
 800d26a:	75fb      	strb	r3, [r7, #23]
      break;
 800d26c:	e004      	b.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800d26e:	bf00      	nop
 800d270:	e002      	b.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800d272:	bf00      	nop
 800d274:	e000      	b.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800d276:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d278:	7dfb      	ldrb	r3, [r7, #23]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d109      	bne.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d27e:	4b3a      	ldr	r3, [pc, #232]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d28a:	4937      	ldr	r1, [pc, #220]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d28c:	4313      	orrs	r3, r2
 800d28e:	654b      	str	r3, [r1, #84]	; 0x54
 800d290:	e001      	b.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d292:	7dfb      	ldrb	r3, [r7, #23]
 800d294:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d008      	beq.n	800d2b4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d2a2:	4b31      	ldr	r3, [pc, #196]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d2a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ae:	492e      	ldr	r1, [pc, #184]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d009      	beq.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d2c0:	4b29      	ldr	r3, [pc, #164]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d2ce:	4926      	ldr	r1, [pc, #152]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d008      	beq.n	800d2f2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d2e0:	4b21      	ldr	r3, [pc, #132]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2ec:	491e      	ldr	r1, [pc, #120]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00d      	beq.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d2fe:	4b1a      	ldr	r3, [pc, #104]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	4a19      	ldr	r2, [pc, #100]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d304:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d308:	6113      	str	r3, [r2, #16]
 800d30a:	4b17      	ldr	r3, [pc, #92]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d30c:	691a      	ldr	r2, [r3, #16]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d314:	4914      	ldr	r1, [pc, #80]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d316:	4313      	orrs	r3, r2
 800d318:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	da08      	bge.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d322:	4b11      	ldr	r3, [pc, #68]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d326:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d32e:	490e      	ldr	r1, [pc, #56]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d330:	4313      	orrs	r3, r2
 800d332:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d009      	beq.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d340:	4b09      	ldr	r3, [pc, #36]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d344:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d34e:	4906      	ldr	r1, [pc, #24]	; (800d368 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d350:	4313      	orrs	r3, r2
 800d352:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d354:	7dbb      	ldrb	r3, [r7, #22]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800d35a:	2300      	movs	r3, #0
 800d35c:	e000      	b.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800d35e:	2301      	movs	r3, #1
}
 800d360:	4618      	mov	r0, r3
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	58024400 	.word	0x58024400

0800d36c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b090      	sub	sp, #64	; 0x40
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d37a:	f040 8095 	bne.w	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800d37e:	4bae      	ldr	r3, [pc, #696]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d382:	f003 0307 	and.w	r3, r3, #7
 800d386:	633b      	str	r3, [r7, #48]	; 0x30
 800d388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38a:	2b04      	cmp	r3, #4
 800d38c:	f200 8088 	bhi.w	800d4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800d390:	a201      	add	r2, pc, #4	; (adr r2, 800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800d392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d396:	bf00      	nop
 800d398:	0800d3ad 	.word	0x0800d3ad
 800d39c:	0800d3d5 	.word	0x0800d3d5
 800d3a0:	0800d3fd 	.word	0x0800d3fd
 800d3a4:	0800d499 	.word	0x0800d499
 800d3a8:	0800d425 	.word	0x0800d425

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3ac:	4ba2      	ldr	r3, [pc, #648]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3b8:	d108      	bne.n	800d3cc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f000 ff64 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d3c8:	f000 bc95 	b.w	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d3d0:	f000 bc91 	b.w	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3d4:	4b98      	ldr	r3, [pc, #608]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d3e0:	d108      	bne.n	800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3e2:	f107 0318 	add.w	r3, r7, #24
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f000 fca8 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d3f0:	f000 bc81 	b.w	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d3f8:	f000 bc7d 	b.w	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d3fc:	4b8e      	ldr	r3, [pc, #568]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d408:	d108      	bne.n	800d41c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d40a:	f107 030c 	add.w	r3, r7, #12
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 fde8 	bl	800dfe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d418:	f000 bc6d 	b.w	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d420:	f000 bc69 	b.w	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d424:	4b84      	ldr	r3, [pc, #528]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d42c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d42e:	4b82      	ldr	r3, [pc, #520]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f003 0304 	and.w	r3, r3, #4
 800d436:	2b04      	cmp	r3, #4
 800d438:	d10c      	bne.n	800d454 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800d43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d109      	bne.n	800d454 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d440:	4b7d      	ldr	r3, [pc, #500]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	08db      	lsrs	r3, r3, #3
 800d446:	f003 0303 	and.w	r3, r3, #3
 800d44a:	4a7c      	ldr	r2, [pc, #496]	; (800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800d44c:	fa22 f303 	lsr.w	r3, r2, r3
 800d450:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d452:	e01f      	b.n	800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d454:	4b78      	ldr	r3, [pc, #480]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d45c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d460:	d106      	bne.n	800d470 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800d462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d468:	d102      	bne.n	800d470 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d46a:	4b75      	ldr	r3, [pc, #468]	; (800d640 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800d46c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d46e:	e011      	b.n	800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d470:	4b71      	ldr	r3, [pc, #452]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d47c:	d106      	bne.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800d47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d484:	d102      	bne.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d486:	4b6f      	ldr	r3, [pc, #444]	; (800d644 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800d488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d48a:	e003      	b.n	800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d48c:	2300      	movs	r3, #0
 800d48e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d490:	f000 bc31 	b.w	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d494:	f000 bc2f 	b.w	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d498:	4b6b      	ldr	r3, [pc, #428]	; (800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800d49a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d49c:	f000 bc2b 	b.w	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d4a4:	f000 bc27 	b.w	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4ae:	f040 8095 	bne.w	800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800d4b2:	4b61      	ldr	r3, [pc, #388]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800d4ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4c2:	d04d      	beq.n	800d560 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4ca:	f200 8084 	bhi.w	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	2bc0      	cmp	r3, #192	; 0xc0
 800d4d2:	d07d      	beq.n	800d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d6:	2bc0      	cmp	r3, #192	; 0xc0
 800d4d8:	d87d      	bhi.n	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4dc:	2b80      	cmp	r3, #128	; 0x80
 800d4de:	d02d      	beq.n	800d53c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	2b80      	cmp	r3, #128	; 0x80
 800d4e4:	d877      	bhi.n	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d003      	beq.n	800d4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ee:	2b40      	cmp	r3, #64	; 0x40
 800d4f0:	d012      	beq.n	800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800d4f2:	e070      	b.n	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d4f4:	4b50      	ldr	r3, [pc, #320]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d500:	d107      	bne.n	800d512 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d506:	4618      	mov	r0, r3
 800d508:	f000 fec0 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d510:	e3f1      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d512:	2300      	movs	r3, #0
 800d514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d516:	e3ee      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d518:	4b47      	ldr	r3, [pc, #284]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d524:	d107      	bne.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d526:	f107 0318 	add.w	r3, r7, #24
 800d52a:	4618      	mov	r0, r3
 800d52c:	f000 fc06 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d534:	e3df      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d536:	2300      	movs	r3, #0
 800d538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d53a:	e3dc      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d53c:	4b3e      	ldr	r3, [pc, #248]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d548:	d107      	bne.n	800d55a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d54a:	f107 030c 	add.w	r3, r7, #12
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 fd48 	bl	800dfe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d558:	e3cd      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d55e:	e3ca      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d560:	4b35      	ldr	r3, [pc, #212]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d564:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d568:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d56a:	4b33      	ldr	r3, [pc, #204]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f003 0304 	and.w	r3, r3, #4
 800d572:	2b04      	cmp	r3, #4
 800d574:	d10c      	bne.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800d576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d109      	bne.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d57c:	4b2e      	ldr	r3, [pc, #184]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	08db      	lsrs	r3, r3, #3
 800d582:	f003 0303 	and.w	r3, r3, #3
 800d586:	4a2d      	ldr	r2, [pc, #180]	; (800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800d588:	fa22 f303 	lsr.w	r3, r2, r3
 800d58c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d58e:	e01e      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d590:	4b29      	ldr	r3, [pc, #164]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d59c:	d106      	bne.n	800d5ac <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800d59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d5a4:	d102      	bne.n	800d5ac <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d5a6:	4b26      	ldr	r3, [pc, #152]	; (800d640 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800d5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5aa:	e010      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d5ac:	4b22      	ldr	r3, [pc, #136]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d5b8:	d106      	bne.n	800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800d5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5c0:	d102      	bne.n	800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d5c2:	4b20      	ldr	r3, [pc, #128]	; (800d644 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800d5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5c6:	e002      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d5cc:	e393      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d5ce:	e392      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d5d0:	4b1d      	ldr	r3, [pc, #116]	; (800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800d5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d5d4:	e38f      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d5da:	e38c      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5e2:	f040 80a7 	bne.w	800d734 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800d5e6:	4b14      	ldr	r3, [pc, #80]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5ea:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800d5ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d5f6:	d05f      	beq.n	800d6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d5fe:	f200 8096 	bhi.w	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d604:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d608:	f000 808e 	beq.w	800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800d60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d612:	f200 808c 	bhi.w	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800d616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d61c:	d03a      	beq.n	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d624:	f200 8083 	bhi.w	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00e      	beq.n	800d64c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800d62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d634:	d01c      	beq.n	800d670 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800d636:	e07a      	b.n	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800d638:	58024400 	.word	0x58024400
 800d63c:	03d09000 	.word	0x03d09000
 800d640:	003d0900 	.word	0x003d0900
 800d644:	00f42400 	.word	0x00f42400
 800d648:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d64c:	4baa      	ldr	r3, [pc, #680]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d658:	d107      	bne.n	800d66a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d65a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 fe14 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d666:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d668:	e345      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d66e:	e342      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d670:	4ba1      	ldr	r3, [pc, #644]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d67c:	d107      	bne.n	800d68e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d67e:	f107 0318 	add.w	r3, r7, #24
 800d682:	4618      	mov	r0, r3
 800d684:	f000 fb5a 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d68c:	e333      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d692:	e330      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d694:	4b98      	ldr	r3, [pc, #608]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d69c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6a0:	d107      	bne.n	800d6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6a2:	f107 030c 	add.w	r3, r7, #12
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 fc9c 	bl	800dfe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d6b0:	e321      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d6b6:	e31e      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d6b8:	4b8f      	ldr	r3, [pc, #572]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d6ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d6c0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d6c2:	4b8d      	ldr	r3, [pc, #564]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f003 0304 	and.w	r3, r3, #4
 800d6ca:	2b04      	cmp	r3, #4
 800d6cc:	d10c      	bne.n	800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800d6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d109      	bne.n	800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d6d4:	4b88      	ldr	r3, [pc, #544]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	08db      	lsrs	r3, r3, #3
 800d6da:	f003 0303 	and.w	r3, r3, #3
 800d6de:	4a87      	ldr	r2, [pc, #540]	; (800d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d6e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6e6:	e01e      	b.n	800d726 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d6e8:	4b83      	ldr	r3, [pc, #524]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6f4:	d106      	bne.n	800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800d6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6fc:	d102      	bne.n	800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d6fe:	4b80      	ldr	r3, [pc, #512]	; (800d900 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d700:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d702:	e010      	b.n	800d726 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d704:	4b7c      	ldr	r3, [pc, #496]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d70c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d710:	d106      	bne.n	800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800d712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d718:	d102      	bne.n	800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d71a:	4b7a      	ldr	r3, [pc, #488]	; (800d904 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800d71c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d71e:	e002      	b.n	800d726 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d720:	2300      	movs	r3, #0
 800d722:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d724:	e2e7      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d726:	e2e6      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d728:	4b77      	ldr	r3, [pc, #476]	; (800d908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800d72a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d72c:	e2e3      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800d72e:	2300      	movs	r3, #0
 800d730:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d732:	e2e0      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d73a:	f040 809c 	bne.w	800d876 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800d73e:	4b6e      	ldr	r3, [pc, #440]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d742:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800d746:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d74e:	d054      	beq.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800d750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d756:	f200 808b 	bhi.w	800d870 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d760:	f000 8083 	beq.w	800d86a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800d764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d766:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d76a:	f200 8081 	bhi.w	800d870 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800d76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d770:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d774:	d02f      	beq.n	800d7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800d776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d77c:	d878      	bhi.n	800d870 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d780:	2b00      	cmp	r3, #0
 800d782:	d004      	beq.n	800d78e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d78a:	d012      	beq.n	800d7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800d78c:	e070      	b.n	800d870 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d78e:	4b5a      	ldr	r3, [pc, #360]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d79a:	d107      	bne.n	800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d79c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 fd73 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d7aa:	e2a4      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7b0:	e2a1      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d7b2:	4b51      	ldr	r3, [pc, #324]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d7be:	d107      	bne.n	800d7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7c0:	f107 0318 	add.w	r3, r7, #24
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 fab9 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800d7ce:	e292      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7d4:	e28f      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d7d6:	4b48      	ldr	r3, [pc, #288]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7e2:	d107      	bne.n	800d7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7e4:	f107 030c 	add.w	r3, r7, #12
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 fbfb 	bl	800dfe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d7f2:	e280      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7f8:	e27d      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d7fa:	4b3f      	ldr	r3, [pc, #252]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d7fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d802:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d804:	4b3c      	ldr	r3, [pc, #240]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f003 0304 	and.w	r3, r3, #4
 800d80c:	2b04      	cmp	r3, #4
 800d80e:	d10c      	bne.n	800d82a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800d810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d812:	2b00      	cmp	r3, #0
 800d814:	d109      	bne.n	800d82a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d816:	4b38      	ldr	r3, [pc, #224]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	08db      	lsrs	r3, r3, #3
 800d81c:	f003 0303 	and.w	r3, r3, #3
 800d820:	4a36      	ldr	r2, [pc, #216]	; (800d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d822:	fa22 f303 	lsr.w	r3, r2, r3
 800d826:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d828:	e01e      	b.n	800d868 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d82a:	4b33      	ldr	r3, [pc, #204]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d836:	d106      	bne.n	800d846 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800d838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d83a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d83e:	d102      	bne.n	800d846 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d840:	4b2f      	ldr	r3, [pc, #188]	; (800d900 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d842:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d844:	e010      	b.n	800d868 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d846:	4b2c      	ldr	r3, [pc, #176]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d84e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d852:	d106      	bne.n	800d862 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800d854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d85a:	d102      	bne.n	800d862 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d85c:	4b29      	ldr	r3, [pc, #164]	; (800d904 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800d85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d860:	e002      	b.n	800d868 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d862:	2300      	movs	r3, #0
 800d864:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d866:	e246      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d868:	e245      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d86a:	4b27      	ldr	r3, [pc, #156]	; (800d908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800d86c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d86e:	e242      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800d870:	2300      	movs	r3, #0
 800d872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d874:	e23f      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d87c:	f040 80a8 	bne.w	800d9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800d880:	4b1d      	ldr	r3, [pc, #116]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d884:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d888:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d890:	d060      	beq.n	800d954 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800d892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d898:	f200 8097 	bhi.w	800d9ca <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800d89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d8a2:	f000 808f 	beq.w	800d9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800d8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d8ac:	f200 808d 	bhi.w	800d9ca <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8b6:	d03b      	beq.n	800d930 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8be:	f200 8084 	bhi.w	800d9ca <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d004      	beq.n	800d8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8ce:	d01d      	beq.n	800d90c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800d8d0:	e07b      	b.n	800d9ca <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d8d2:	4b09      	ldr	r3, [pc, #36]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d8de:	d107      	bne.n	800d8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d8e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f000 fcd1 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d8ee:	e202      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d8f4:	e1ff      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d8f6:	bf00      	nop
 800d8f8:	58024400 	.word	0x58024400
 800d8fc:	03d09000 	.word	0x03d09000
 800d900:	003d0900 	.word	0x003d0900
 800d904:	00f42400 	.word	0x00f42400
 800d908:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d90c:	4ba3      	ldr	r3, [pc, #652]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d918:	d107      	bne.n	800d92a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d91a:	f107 0318 	add.w	r3, r7, #24
 800d91e:	4618      	mov	r0, r3
 800d920:	f000 fa0c 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d928:	e1e5      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d92e:	e1e2      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d930:	4b9a      	ldr	r3, [pc, #616]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d93c:	d107      	bne.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d93e:	f107 030c 	add.w	r3, r7, #12
 800d942:	4618      	mov	r0, r3
 800d944:	f000 fb4e 	bl	800dfe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d94c:	e1d3      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d952:	e1d0      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d954:	4b91      	ldr	r3, [pc, #580]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800d956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d95c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d95e:	4b8f      	ldr	r3, [pc, #572]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f003 0304 	and.w	r3, r3, #4
 800d966:	2b04      	cmp	r3, #4
 800d968:	d10c      	bne.n	800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800d96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d109      	bne.n	800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d970:	4b8a      	ldr	r3, [pc, #552]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	08db      	lsrs	r3, r3, #3
 800d976:	f003 0303 	and.w	r3, r3, #3
 800d97a:	4a89      	ldr	r2, [pc, #548]	; (800dba0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800d97c:	fa22 f303 	lsr.w	r3, r2, r3
 800d980:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d982:	e01e      	b.n	800d9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d984:	4b85      	ldr	r3, [pc, #532]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d98c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d990:	d106      	bne.n	800d9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800d992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d998:	d102      	bne.n	800d9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d99a:	4b82      	ldr	r3, [pc, #520]	; (800dba4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800d99c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d99e:	e010      	b.n	800d9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d9a0:	4b7e      	ldr	r3, [pc, #504]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d9ac:	d106      	bne.n	800d9bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d9b4:	d102      	bne.n	800d9bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d9b6:	4b7c      	ldr	r3, [pc, #496]	; (800dba8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9ba:	e002      	b.n	800d9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d9c0:	e199      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d9c2:	e198      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d9c4:	4b79      	ldr	r3, [pc, #484]	; (800dbac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d9c8:	e195      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d9ce:	e192      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d9d6:	d173      	bne.n	800dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800d9d8:	4b70      	ldr	r3, [pc, #448]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800d9da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d9e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d9e8:	d02f      	beq.n	800da4a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800d9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d9f0:	d863      	bhi.n	800daba <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800d9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d004      	beq.n	800da02 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800d9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9fe:	d012      	beq.n	800da26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800da00:	e05b      	b.n	800daba <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da02:	4b66      	ldr	r3, [pc, #408]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da0e:	d107      	bne.n	800da20 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da10:	f107 0318 	add.w	r3, r7, #24
 800da14:	4618      	mov	r0, r3
 800da16:	f000 f991 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800da1e:	e16a      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800da20:	2300      	movs	r3, #0
 800da22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800da24:	e167      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800da26:	4b5d      	ldr	r3, [pc, #372]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da32:	d107      	bne.n	800da44 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da34:	f107 030c 	add.w	r3, r7, #12
 800da38:	4618      	mov	r0, r3
 800da3a:	f000 fad3 	bl	800dfe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800da42:	e158      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800da48:	e155      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800da4a:	4b54      	ldr	r3, [pc, #336]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800da4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800da52:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800da54:	4b51      	ldr	r3, [pc, #324]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f003 0304 	and.w	r3, r3, #4
 800da5c:	2b04      	cmp	r3, #4
 800da5e:	d10c      	bne.n	800da7a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800da60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da62:	2b00      	cmp	r3, #0
 800da64:	d109      	bne.n	800da7a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800da66:	4b4d      	ldr	r3, [pc, #308]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	08db      	lsrs	r3, r3, #3
 800da6c:	f003 0303 	and.w	r3, r3, #3
 800da70:	4a4b      	ldr	r2, [pc, #300]	; (800dba0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800da72:	fa22 f303 	lsr.w	r3, r2, r3
 800da76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da78:	e01e      	b.n	800dab8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800da7a:	4b48      	ldr	r3, [pc, #288]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da86:	d106      	bne.n	800da96 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800da88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da8e:	d102      	bne.n	800da96 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800da90:	4b44      	ldr	r3, [pc, #272]	; (800dba4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800da92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da94:	e010      	b.n	800dab8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800da96:	4b41      	ldr	r3, [pc, #260]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800daa2:	d106      	bne.n	800dab2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800daa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800daaa:	d102      	bne.n	800dab2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800daac:	4b3e      	ldr	r3, [pc, #248]	; (800dba8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800daae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dab0:	e002      	b.n	800dab8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800dab6:	e11e      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dab8:	e11d      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dabe:	e11a      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dac6:	d133      	bne.n	800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800dac8:	4b34      	ldr	r3, [pc, #208]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800daca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dacc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dad0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800dad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d004      	beq.n	800dae2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800dad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dade:	d012      	beq.n	800db06 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800dae0:	e023      	b.n	800db2a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dae2:	4b2e      	ldr	r3, [pc, #184]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800daea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800daee:	d107      	bne.n	800db00 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800daf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800daf4:	4618      	mov	r0, r3
 800daf6:	f000 fbc9 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dafe:	e0fa      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db00:	2300      	movs	r3, #0
 800db02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800db04:	e0f7      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800db06:	4b25      	ldr	r3, [pc, #148]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db12:	d107      	bne.n	800db24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db14:	f107 0318 	add.w	r3, r7, #24
 800db18:	4618      	mov	r0, r3
 800db1a:	f000 f90f 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800db1e:	6a3b      	ldr	r3, [r7, #32]
 800db20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800db22:	e0e8      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db24:	2300      	movs	r3, #0
 800db26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800db28:	e0e5      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800db2a:	2300      	movs	r3, #0
 800db2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800db2e:	e0e2      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db36:	f040 808f 	bne.w	800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800db3a:	4b18      	ldr	r3, [pc, #96]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800db3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db3e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800db42:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800db44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800db4a:	d075      	beq.n	800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800db4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800db52:	d87e      	bhi.n	800dc52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800db54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db5a:	d060      	beq.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800db5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db62:	d876      	bhi.n	800dc52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800db64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800db6a:	d045      	beq.n	800dbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800db6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800db72:	d86e      	bhi.n	800dc52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800db74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db7a:	d02b      	beq.n	800dbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800db7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db82:	d866      	bhi.n	800dc52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800db84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db86:	2b00      	cmp	r3, #0
 800db88:	d004      	beq.n	800db94 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800db8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db90:	d00e      	beq.n	800dbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800db92:	e05e      	b.n	800dc52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800db94:	f000 f8bc 	bl	800dd10 <HAL_RCCEx_GetD3PCLK1Freq>
 800db98:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800db9a:	e0ac      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800db9c:	58024400 	.word	0x58024400
 800dba0:	03d09000 	.word	0x03d09000
 800dba4:	003d0900 	.word	0x003d0900
 800dba8:	00f42400 	.word	0x00f42400
 800dbac:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dbb0:	4b53      	ldr	r3, [pc, #332]	; (800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dbb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dbbc:	d107      	bne.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbbe:	f107 0318 	add.w	r3, r7, #24
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f000 f8ba 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dbcc:	e093      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dbd2:	e090      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dbd4:	4b4a      	ldr	r3, [pc, #296]	; (800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dbdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbe0:	d107      	bne.n	800dbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbe2:	f107 030c 	add.w	r3, r7, #12
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 f9fc 	bl	800dfe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dbf0:	e081      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dbf6:	e07e      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dbf8:	4b41      	ldr	r3, [pc, #260]	; (800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f003 0304 	and.w	r3, r3, #4
 800dc00:	2b04      	cmp	r3, #4
 800dc02:	d109      	bne.n	800dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dc04:	4b3e      	ldr	r3, [pc, #248]	; (800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	08db      	lsrs	r3, r3, #3
 800dc0a:	f003 0303 	and.w	r3, r3, #3
 800dc0e:	4a3d      	ldr	r2, [pc, #244]	; (800dd04 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800dc10:	fa22 f303 	lsr.w	r3, r2, r3
 800dc14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dc16:	e06e      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dc1c:	e06b      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800dc1e:	4b38      	ldr	r3, [pc, #224]	; (800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc2a:	d102      	bne.n	800dc32 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800dc2c:	4b36      	ldr	r3, [pc, #216]	; (800dd08 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800dc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800dc30:	e061      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800dc32:	2300      	movs	r3, #0
 800dc34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dc36:	e05e      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dc38:	4b31      	ldr	r3, [pc, #196]	; (800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc44:	d102      	bne.n	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800dc46:	4b31      	ldr	r3, [pc, #196]	; (800dd0c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800dc48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dc4a:	e054      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dc50:	e051      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800dc52:	2300      	movs	r3, #0
 800dc54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dc56:	e04e      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc5e:	d148      	bne.n	800dcf2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800dc60:	4b27      	ldr	r3, [pc, #156]	; (800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dc62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dc68:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800dc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc70:	d02a      	beq.n	800dcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800dc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc78:	d838      	bhi.n	800dcec <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800dc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d004      	beq.n	800dc8a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800dc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc86:	d00d      	beq.n	800dca4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800dc88:	e030      	b.n	800dcec <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dc8a:	4b1d      	ldr	r3, [pc, #116]	; (800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc96:	d102      	bne.n	800dc9e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800dc98:	4b1c      	ldr	r3, [pc, #112]	; (800dd0c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800dc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dc9c:	e02b      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dca2:	e028      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dca4:	4b16      	ldr	r3, [pc, #88]	; (800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dcb0:	d107      	bne.n	800dcc2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dcb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f000 fae8 	bl	800e28c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dcc0:	e019      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dcc6:	e016      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dcc8:	4b0d      	ldr	r3, [pc, #52]	; (800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dcd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dcd4:	d107      	bne.n	800dce6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcd6:	f107 0318 	add.w	r3, r7, #24
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f000 f82e 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800dce4:	e007      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dcea:	e004      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800dcec:	2300      	movs	r3, #0
 800dcee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dcf0:	e001      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800dcf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3740      	adds	r7, #64	; 0x40
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	58024400 	.word	0x58024400
 800dd04:	03d09000 	.word	0x03d09000
 800dd08:	003d0900 	.word	0x003d0900
 800dd0c:	00f42400 	.word	0x00f42400

0800dd10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800dd14:	f7fe fb8e 	bl	800c434 <HAL_RCC_GetHCLKFreq>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	4b06      	ldr	r3, [pc, #24]	; (800dd34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800dd1c:	6a1b      	ldr	r3, [r3, #32]
 800dd1e:	091b      	lsrs	r3, r3, #4
 800dd20:	f003 0307 	and.w	r3, r3, #7
 800dd24:	4904      	ldr	r1, [pc, #16]	; (800dd38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800dd26:	5ccb      	ldrb	r3, [r1, r3]
 800dd28:	f003 031f 	and.w	r3, r3, #31
 800dd2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	58024400 	.word	0x58024400
 800dd38:	08019278 	.word	0x08019278

0800dd3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b089      	sub	sp, #36	; 0x24
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dd44:	4ba1      	ldr	r3, [pc, #644]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd48:	f003 0303 	and.w	r3, r3, #3
 800dd4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800dd4e:	4b9f      	ldr	r3, [pc, #636]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd52:	0b1b      	lsrs	r3, r3, #12
 800dd54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800dd5a:	4b9c      	ldr	r3, [pc, #624]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5e:	091b      	lsrs	r3, r3, #4
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800dd66:	4b99      	ldr	r3, [pc, #612]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd6a:	08db      	lsrs	r3, r3, #3
 800dd6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd70:	693a      	ldr	r2, [r7, #16]
 800dd72:	fb02 f303 	mul.w	r3, r2, r3
 800dd76:	ee07 3a90 	vmov	s15, r3
 800dd7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	f000 8111 	beq.w	800dfac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	2b02      	cmp	r3, #2
 800dd8e:	f000 8083 	beq.w	800de98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	2b02      	cmp	r3, #2
 800dd96:	f200 80a1 	bhi.w	800dedc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d003      	beq.n	800dda8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d056      	beq.n	800de54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800dda6:	e099      	b.n	800dedc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dda8:	4b88      	ldr	r3, [pc, #544]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f003 0320 	and.w	r3, r3, #32
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d02d      	beq.n	800de10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ddb4:	4b85      	ldr	r3, [pc, #532]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	08db      	lsrs	r3, r3, #3
 800ddba:	f003 0303 	and.w	r3, r3, #3
 800ddbe:	4a84      	ldr	r2, [pc, #528]	; (800dfd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ddc0:	fa22 f303 	lsr.w	r3, r2, r3
 800ddc4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	ee07 3a90 	vmov	s15, r3
 800ddcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	ee07 3a90 	vmov	s15, r3
 800ddd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddde:	4b7b      	ldr	r3, [pc, #492]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dde6:	ee07 3a90 	vmov	s15, r3
 800ddea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddee:	ed97 6a03 	vldr	s12, [r7, #12]
 800ddf2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800dfd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ddf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ddfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800de0e:	e087      	b.n	800df20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	ee07 3a90 	vmov	s15, r3
 800de16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dfd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800de1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de22:	4b6a      	ldr	r3, [pc, #424]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de2a:	ee07 3a90 	vmov	s15, r3
 800de2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de32:	ed97 6a03 	vldr	s12, [r7, #12]
 800de36:	eddf 5a67 	vldr	s11, [pc, #412]	; 800dfd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800de3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800de52:	e065      	b.n	800df20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	ee07 3a90 	vmov	s15, r3
 800de5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800dfdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800de62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de66:	4b59      	ldr	r3, [pc, #356]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de6e:	ee07 3a90 	vmov	s15, r3
 800de72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de76:	ed97 6a03 	vldr	s12, [r7, #12]
 800de7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800dfd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800de7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800de96:	e043      	b.n	800df20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	ee07 3a90 	vmov	s15, r3
 800de9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dea2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800dfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800dea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800deaa:	4b48      	ldr	r3, [pc, #288]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800deac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deb2:	ee07 3a90 	vmov	s15, r3
 800deb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800deba:	ed97 6a03 	vldr	s12, [r7, #12]
 800debe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800dfd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800deca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ded2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ded6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800deda:	e021      	b.n	800df20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	ee07 3a90 	vmov	s15, r3
 800dee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dee6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dfdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800deea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800deee:	4b37      	ldr	r3, [pc, #220]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800def0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800def6:	ee07 3a90 	vmov	s15, r3
 800defa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800defe:	ed97 6a03 	vldr	s12, [r7, #12]
 800df02:	eddf 5a34 	vldr	s11, [pc, #208]	; 800dfd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800df1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800df20:	4b2a      	ldr	r3, [pc, #168]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df24:	0a5b      	lsrs	r3, r3, #9
 800df26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df2a:	ee07 3a90 	vmov	s15, r3
 800df2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800df36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800df3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df46:	ee17 2a90 	vmov	r2, s15
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800df4e:	4b1f      	ldr	r3, [pc, #124]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df52:	0c1b      	lsrs	r3, r3, #16
 800df54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df58:	ee07 3a90 	vmov	s15, r3
 800df5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800df64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df68:	edd7 6a07 	vldr	s13, [r7, #28]
 800df6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df74:	ee17 2a90 	vmov	r2, s15
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800df7c:	4b13      	ldr	r3, [pc, #76]	; (800dfcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df80:	0e1b      	lsrs	r3, r3, #24
 800df82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df86:	ee07 3a90 	vmov	s15, r3
 800df8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800df92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df96:	edd7 6a07 	vldr	s13, [r7, #28]
 800df9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfa2:	ee17 2a90 	vmov	r2, s15
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800dfaa:	e008      	b.n	800dfbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	609a      	str	r2, [r3, #8]
}
 800dfbe:	bf00      	nop
 800dfc0:	3724      	adds	r7, #36	; 0x24
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr
 800dfca:	bf00      	nop
 800dfcc:	58024400 	.word	0x58024400
 800dfd0:	03d09000 	.word	0x03d09000
 800dfd4:	46000000 	.word	0x46000000
 800dfd8:	4c742400 	.word	0x4c742400
 800dfdc:	4a742400 	.word	0x4a742400
 800dfe0:	4b742400 	.word	0x4b742400

0800dfe4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b089      	sub	sp, #36	; 0x24
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dfec:	4ba1      	ldr	r3, [pc, #644]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dff0:	f003 0303 	and.w	r3, r3, #3
 800dff4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800dff6:	4b9f      	ldr	r3, [pc, #636]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dffa:	0d1b      	lsrs	r3, r3, #20
 800dffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e000:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e002:	4b9c      	ldr	r3, [pc, #624]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e006:	0a1b      	lsrs	r3, r3, #8
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800e00e:	4b99      	ldr	r3, [pc, #612]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e012:	08db      	lsrs	r3, r3, #3
 800e014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e018:	693a      	ldr	r2, [r7, #16]
 800e01a:	fb02 f303 	mul.w	r3, r2, r3
 800e01e:	ee07 3a90 	vmov	s15, r3
 800e022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e026:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f000 8111 	beq.w	800e254 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	2b02      	cmp	r3, #2
 800e036:	f000 8083 	beq.w	800e140 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	f200 80a1 	bhi.w	800e184 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d003      	beq.n	800e050 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d056      	beq.n	800e0fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e04e:	e099      	b.n	800e184 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e050:	4b88      	ldr	r3, [pc, #544]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f003 0320 	and.w	r3, r3, #32
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d02d      	beq.n	800e0b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e05c:	4b85      	ldr	r3, [pc, #532]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	08db      	lsrs	r3, r3, #3
 800e062:	f003 0303 	and.w	r3, r3, #3
 800e066:	4a84      	ldr	r2, [pc, #528]	; (800e278 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e068:	fa22 f303 	lsr.w	r3, r2, r3
 800e06c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	ee07 3a90 	vmov	s15, r3
 800e074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	ee07 3a90 	vmov	s15, r3
 800e07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e086:	4b7b      	ldr	r3, [pc, #492]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e08e:	ee07 3a90 	vmov	s15, r3
 800e092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e096:	ed97 6a03 	vldr	s12, [r7, #12]
 800e09a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e27c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800e0b6:	e087      	b.n	800e1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	ee07 3a90 	vmov	s15, r3
 800e0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e280 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e0ca:	4b6a      	ldr	r3, [pc, #424]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0d2:	ee07 3a90 	vmov	s15, r3
 800e0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800e0de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e27c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e0fa:	e065      	b.n	800e1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	ee07 3a90 	vmov	s15, r3
 800e102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e106:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e10e:	4b59      	ldr	r3, [pc, #356]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e116:	ee07 3a90 	vmov	s15, r3
 800e11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e122:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e27c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e13a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e13e:	e043      	b.n	800e1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	ee07 3a90 	vmov	s15, r3
 800e146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e14a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e288 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e152:	4b48      	ldr	r3, [pc, #288]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e15a:	ee07 3a90 	vmov	s15, r3
 800e15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e162:	ed97 6a03 	vldr	s12, [r7, #12]
 800e166:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e27c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e17e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e182:	e021      	b.n	800e1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	ee07 3a90 	vmov	s15, r3
 800e18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e18e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e196:	4b37      	ldr	r3, [pc, #220]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e19e:	ee07 3a90 	vmov	s15, r3
 800e1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e27c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e1c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800e1c8:	4b2a      	ldr	r3, [pc, #168]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1cc:	0a5b      	lsrs	r3, r3, #9
 800e1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1d2:	ee07 3a90 	vmov	s15, r3
 800e1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e1de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e1e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1ee:	ee17 2a90 	vmov	r2, s15
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800e1f6:	4b1f      	ldr	r3, [pc, #124]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1fa:	0c1b      	lsrs	r3, r3, #16
 800e1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e200:	ee07 3a90 	vmov	s15, r3
 800e204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e20c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e210:	edd7 6a07 	vldr	s13, [r7, #28]
 800e214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e21c:	ee17 2a90 	vmov	r2, s15
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800e224:	4b13      	ldr	r3, [pc, #76]	; (800e274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e228:	0e1b      	lsrs	r3, r3, #24
 800e22a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e22e:	ee07 3a90 	vmov	s15, r3
 800e232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e23a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e23e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e24a:	ee17 2a90 	vmov	r2, s15
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e252:	e008      	b.n	800e266 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	609a      	str	r2, [r3, #8]
}
 800e266:	bf00      	nop
 800e268:	3724      	adds	r7, #36	; 0x24
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	58024400 	.word	0x58024400
 800e278:	03d09000 	.word	0x03d09000
 800e27c:	46000000 	.word	0x46000000
 800e280:	4c742400 	.word	0x4c742400
 800e284:	4a742400 	.word	0x4a742400
 800e288:	4b742400 	.word	0x4b742400

0800e28c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b089      	sub	sp, #36	; 0x24
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e294:	4ba0      	ldr	r3, [pc, #640]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e298:	f003 0303 	and.w	r3, r3, #3
 800e29c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800e29e:	4b9e      	ldr	r3, [pc, #632]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2a2:	091b      	lsrs	r3, r3, #4
 800e2a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e2aa:	4b9b      	ldr	r3, [pc, #620]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e2b4:	4b98      	ldr	r3, [pc, #608]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2b8:	08db      	lsrs	r3, r3, #3
 800e2ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2be:	693a      	ldr	r2, [r7, #16]
 800e2c0:	fb02 f303 	mul.w	r3, r2, r3
 800e2c4:	ee07 3a90 	vmov	s15, r3
 800e2c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	f000 8111 	beq.w	800e4fa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	2b02      	cmp	r3, #2
 800e2dc:	f000 8083 	beq.w	800e3e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	2b02      	cmp	r3, #2
 800e2e4:	f200 80a1 	bhi.w	800e42a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d003      	beq.n	800e2f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d056      	beq.n	800e3a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e2f4:	e099      	b.n	800e42a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e2f6:	4b88      	ldr	r3, [pc, #544]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f003 0320 	and.w	r3, r3, #32
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d02d      	beq.n	800e35e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e302:	4b85      	ldr	r3, [pc, #532]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	08db      	lsrs	r3, r3, #3
 800e308:	f003 0303 	and.w	r3, r3, #3
 800e30c:	4a83      	ldr	r2, [pc, #524]	; (800e51c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e30e:	fa22 f303 	lsr.w	r3, r2, r3
 800e312:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	ee07 3a90 	vmov	s15, r3
 800e31a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	ee07 3a90 	vmov	s15, r3
 800e324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e32c:	4b7a      	ldr	r3, [pc, #488]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e334:	ee07 3a90 	vmov	s15, r3
 800e338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e33c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e340:	eddf 5a77 	vldr	s11, [pc, #476]	; 800e520 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e34c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e354:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e358:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800e35c:	e087      	b.n	800e46e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	ee07 3a90 	vmov	s15, r3
 800e364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e368:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800e524 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e36c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e370:	4b69      	ldr	r3, [pc, #420]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e378:	ee07 3a90 	vmov	s15, r3
 800e37c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e380:	ed97 6a03 	vldr	s12, [r7, #12]
 800e384:	eddf 5a66 	vldr	s11, [pc, #408]	; 800e520 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e38c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e39c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e3a0:	e065      	b.n	800e46e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	ee07 3a90 	vmov	s15, r3
 800e3a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800e528 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e3b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e3b4:	4b58      	ldr	r3, [pc, #352]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3bc:	ee07 3a90 	vmov	s15, r3
 800e3c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e3c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e3c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800e520 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e3cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e3d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e3d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e3d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e3dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e3e4:	e043      	b.n	800e46e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	ee07 3a90 	vmov	s15, r3
 800e3ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800e52c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e3f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e3f8:	4b47      	ldr	r3, [pc, #284]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e400:	ee07 3a90 	vmov	s15, r3
 800e404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e408:	ed97 6a03 	vldr	s12, [r7, #12]
 800e40c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e520 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e41c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e420:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e424:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e428:	e021      	b.n	800e46e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	ee07 3a90 	vmov	s15, r3
 800e430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e434:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e524 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e43c:	4b36      	ldr	r3, [pc, #216]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e444:	ee07 3a90 	vmov	s15, r3
 800e448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e44c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e450:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e520 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e45c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e464:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e468:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e46c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800e46e:	4b2a      	ldr	r3, [pc, #168]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e472:	0a5b      	lsrs	r3, r3, #9
 800e474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e478:	ee07 3a90 	vmov	s15, r3
 800e47c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e484:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e488:	edd7 6a07 	vldr	s13, [r7, #28]
 800e48c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e494:	ee17 2a90 	vmov	r2, s15
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800e49c:	4b1e      	ldr	r3, [pc, #120]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a0:	0c1b      	lsrs	r3, r3, #16
 800e4a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4a6:	ee07 3a90 	vmov	s15, r3
 800e4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e4b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e4b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e4ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4c2:	ee17 2a90 	vmov	r2, s15
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800e4ca:	4b13      	ldr	r3, [pc, #76]	; (800e518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ce:	0e1b      	lsrs	r3, r3, #24
 800e4d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4d4:	ee07 3a90 	vmov	s15, r3
 800e4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e4e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e4e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800e4e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4f0:	ee17 2a90 	vmov	r2, s15
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e4f8:	e008      	b.n	800e50c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	609a      	str	r2, [r3, #8]
}
 800e50c:	bf00      	nop
 800e50e:	3724      	adds	r7, #36	; 0x24
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr
 800e518:	58024400 	.word	0x58024400
 800e51c:	03d09000 	.word	0x03d09000
 800e520:	46000000 	.word	0x46000000
 800e524:	4c742400 	.word	0x4c742400
 800e528:	4a742400 	.word	0x4a742400
 800e52c:	4b742400 	.word	0x4b742400

0800e530 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e53a:	2300      	movs	r3, #0
 800e53c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e53e:	4b53      	ldr	r3, [pc, #332]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e542:	f003 0303 	and.w	r3, r3, #3
 800e546:	2b03      	cmp	r3, #3
 800e548:	d101      	bne.n	800e54e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e54a:	2301      	movs	r3, #1
 800e54c:	e099      	b.n	800e682 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e54e:	4b4f      	ldr	r3, [pc, #316]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4a4e      	ldr	r2, [pc, #312]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e554:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e55a:	f7f7 fcc1 	bl	8005ee0 <HAL_GetTick>
 800e55e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e560:	e008      	b.n	800e574 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e562:	f7f7 fcbd 	bl	8005ee0 <HAL_GetTick>
 800e566:	4602      	mov	r2, r0
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	1ad3      	subs	r3, r2, r3
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	d901      	bls.n	800e574 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e570:	2303      	movs	r3, #3
 800e572:	e086      	b.n	800e682 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e574:	4b45      	ldr	r3, [pc, #276]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d1f0      	bne.n	800e562 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e580:	4b42      	ldr	r3, [pc, #264]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e584:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	031b      	lsls	r3, r3, #12
 800e58e:	493f      	ldr	r1, [pc, #252]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e590:	4313      	orrs	r3, r2
 800e592:	628b      	str	r3, [r1, #40]	; 0x28
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	3b01      	subs	r3, #1
 800e59a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	689b      	ldr	r3, [r3, #8]
 800e5a2:	3b01      	subs	r3, #1
 800e5a4:	025b      	lsls	r3, r3, #9
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	431a      	orrs	r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	3b01      	subs	r3, #1
 800e5b0:	041b      	lsls	r3, r3, #16
 800e5b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e5b6:	431a      	orrs	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	691b      	ldr	r3, [r3, #16]
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	061b      	lsls	r3, r3, #24
 800e5c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e5c4:	4931      	ldr	r1, [pc, #196]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e5ca:	4b30      	ldr	r3, [pc, #192]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	695b      	ldr	r3, [r3, #20]
 800e5d6:	492d      	ldr	r1, [pc, #180]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e5d8:	4313      	orrs	r3, r2
 800e5da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e5dc:	4b2b      	ldr	r3, [pc, #172]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e0:	f023 0220 	bic.w	r2, r3, #32
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	699b      	ldr	r3, [r3, #24]
 800e5e8:	4928      	ldr	r1, [pc, #160]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e5ee:	4b27      	ldr	r3, [pc, #156]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f2:	4a26      	ldr	r2, [pc, #152]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e5f4:	f023 0310 	bic.w	r3, r3, #16
 800e5f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e5fa:	4b24      	ldr	r3, [pc, #144]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e5fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5fe:	4b24      	ldr	r3, [pc, #144]	; (800e690 <RCCEx_PLL2_Config+0x160>)
 800e600:	4013      	ands	r3, r2
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	69d2      	ldr	r2, [r2, #28]
 800e606:	00d2      	lsls	r2, r2, #3
 800e608:	4920      	ldr	r1, [pc, #128]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e60a:	4313      	orrs	r3, r2
 800e60c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e60e:	4b1f      	ldr	r3, [pc, #124]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e612:	4a1e      	ldr	r2, [pc, #120]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e614:	f043 0310 	orr.w	r3, r3, #16
 800e618:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d106      	bne.n	800e62e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e620:	4b1a      	ldr	r3, [pc, #104]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e624:	4a19      	ldr	r2, [pc, #100]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e62a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e62c:	e00f      	b.n	800e64e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	2b01      	cmp	r3, #1
 800e632:	d106      	bne.n	800e642 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e634:	4b15      	ldr	r3, [pc, #84]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e638:	4a14      	ldr	r2, [pc, #80]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e63a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e63e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e640:	e005      	b.n	800e64e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e642:	4b12      	ldr	r3, [pc, #72]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e646:	4a11      	ldr	r2, [pc, #68]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e64c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e64e:	4b0f      	ldr	r3, [pc, #60]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4a0e      	ldr	r2, [pc, #56]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e65a:	f7f7 fc41 	bl	8005ee0 <HAL_GetTick>
 800e65e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e660:	e008      	b.n	800e674 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e662:	f7f7 fc3d 	bl	8005ee0 <HAL_GetTick>
 800e666:	4602      	mov	r2, r0
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	2b02      	cmp	r3, #2
 800e66e:	d901      	bls.n	800e674 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e670:	2303      	movs	r3, #3
 800e672:	e006      	b.n	800e682 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e674:	4b05      	ldr	r3, [pc, #20]	; (800e68c <RCCEx_PLL2_Config+0x15c>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d0f0      	beq.n	800e662 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e680:	7bfb      	ldrb	r3, [r7, #15]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	58024400 	.word	0x58024400
 800e690:	ffff0007 	.word	0xffff0007

0800e694 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e6a2:	4b53      	ldr	r3, [pc, #332]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6a6:	f003 0303 	and.w	r3, r3, #3
 800e6aa:	2b03      	cmp	r3, #3
 800e6ac:	d101      	bne.n	800e6b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e099      	b.n	800e7e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e6b2:	4b4f      	ldr	r3, [pc, #316]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4a4e      	ldr	r2, [pc, #312]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e6b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e6bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6be:	f7f7 fc0f 	bl	8005ee0 <HAL_GetTick>
 800e6c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e6c4:	e008      	b.n	800e6d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e6c6:	f7f7 fc0b 	bl	8005ee0 <HAL_GetTick>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	1ad3      	subs	r3, r2, r3
 800e6d0:	2b02      	cmp	r3, #2
 800e6d2:	d901      	bls.n	800e6d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e6d4:	2303      	movs	r3, #3
 800e6d6:	e086      	b.n	800e7e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e6d8:	4b45      	ldr	r3, [pc, #276]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d1f0      	bne.n	800e6c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e6e4:	4b42      	ldr	r3, [pc, #264]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	051b      	lsls	r3, r3, #20
 800e6f2:	493f      	ldr	r1, [pc, #252]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	628b      	str	r3, [r1, #40]	; 0x28
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	3b01      	subs	r3, #1
 800e708:	025b      	lsls	r3, r3, #9
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	431a      	orrs	r2, r3
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	3b01      	subs	r3, #1
 800e714:	041b      	lsls	r3, r3, #16
 800e716:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e71a:	431a      	orrs	r2, r3
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	691b      	ldr	r3, [r3, #16]
 800e720:	3b01      	subs	r3, #1
 800e722:	061b      	lsls	r3, r3, #24
 800e724:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e728:	4931      	ldr	r1, [pc, #196]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e72a:	4313      	orrs	r3, r2
 800e72c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e72e:	4b30      	ldr	r3, [pc, #192]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e732:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	695b      	ldr	r3, [r3, #20]
 800e73a:	492d      	ldr	r1, [pc, #180]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e73c:	4313      	orrs	r3, r2
 800e73e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e740:	4b2b      	ldr	r3, [pc, #172]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e744:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	699b      	ldr	r3, [r3, #24]
 800e74c:	4928      	ldr	r1, [pc, #160]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e74e:	4313      	orrs	r3, r2
 800e750:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e752:	4b27      	ldr	r3, [pc, #156]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e756:	4a26      	ldr	r2, [pc, #152]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e75c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e75e:	4b24      	ldr	r3, [pc, #144]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e762:	4b24      	ldr	r3, [pc, #144]	; (800e7f4 <RCCEx_PLL3_Config+0x160>)
 800e764:	4013      	ands	r3, r2
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	69d2      	ldr	r2, [r2, #28]
 800e76a:	00d2      	lsls	r2, r2, #3
 800e76c:	4920      	ldr	r1, [pc, #128]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e76e:	4313      	orrs	r3, r2
 800e770:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e772:	4b1f      	ldr	r3, [pc, #124]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e776:	4a1e      	ldr	r2, [pc, #120]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e77c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d106      	bne.n	800e792 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e784:	4b1a      	ldr	r3, [pc, #104]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e788:	4a19      	ldr	r2, [pc, #100]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e78a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e78e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e790:	e00f      	b.n	800e7b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	2b01      	cmp	r3, #1
 800e796:	d106      	bne.n	800e7a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e798:	4b15      	ldr	r3, [pc, #84]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e79c:	4a14      	ldr	r2, [pc, #80]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e79e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e7a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e7a4:	e005      	b.n	800e7b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e7a6:	4b12      	ldr	r3, [pc, #72]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7aa:	4a11      	ldr	r2, [pc, #68]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e7ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e7b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e7b2:	4b0f      	ldr	r3, [pc, #60]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a0e      	ldr	r2, [pc, #56]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e7b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e7be:	f7f7 fb8f 	bl	8005ee0 <HAL_GetTick>
 800e7c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e7c4:	e008      	b.n	800e7d8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e7c6:	f7f7 fb8b 	bl	8005ee0 <HAL_GetTick>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	1ad3      	subs	r3, r2, r3
 800e7d0:	2b02      	cmp	r3, #2
 800e7d2:	d901      	bls.n	800e7d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e7d4:	2303      	movs	r3, #3
 800e7d6:	e006      	b.n	800e7e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e7d8:	4b05      	ldr	r3, [pc, #20]	; (800e7f0 <RCCEx_PLL3_Config+0x15c>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d0f0      	beq.n	800e7c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	58024400 	.word	0x58024400
 800e7f4:	ffff0007 	.word	0xffff0007

0800e7f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b08a      	sub	sp, #40	; 0x28
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e806:	2301      	movs	r3, #1
 800e808:	e07c      	b.n	800e904 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e810:	b2db      	uxtb	r3, r3
 800e812:	2b00      	cmp	r3, #0
 800e814:	d10c      	bne.n	800e830 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	699b      	ldr	r3, [r3, #24]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d102      	bne.n	800e82a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2202      	movs	r2, #2
 800e828:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7f6 fc72 	bl	8005114 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2203      	movs	r2, #3
 800e834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 f867 	bl	800e90c <HAL_SD_InitCard>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d001      	beq.n	800e848 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800e844:	2301      	movs	r3, #1
 800e846:	e05d      	b.n	800e904 <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e848:	f107 0308 	add.w	r3, r7, #8
 800e84c:	4619      	mov	r1, r3
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f000 faae 	bl	800edb0 <HAL_SD_GetCardStatus>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d001      	beq.n	800e85e <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800e85a:	2301      	movs	r3, #1
 800e85c:	e052      	b.n	800e904 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e85e:	7e3b      	ldrb	r3, [r7, #24]
 800e860:	b2db      	uxtb	r3, r3
 800e862:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e864:	7e7b      	ldrb	r3, [r7, #25]
 800e866:	b2db      	uxtb	r3, r3
 800e868:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d10a      	bne.n	800e888 <HAL_SD_Init+0x90>
 800e872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e874:	2b00      	cmp	r3, #0
 800e876:	d102      	bne.n	800e87e <HAL_SD_Init+0x86>
 800e878:	6a3b      	ldr	r3, [r7, #32]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d004      	beq.n	800e888 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e884:	65da      	str	r2, [r3, #92]	; 0x5c
 800e886:	e00b      	b.n	800e8a0 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d104      	bne.n	800e89a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e896:	65da      	str	r2, [r3, #92]	; 0x5c
 800e898:	e002      	b.n	800e8a0 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f000 fb38 	bl	800ef1c <HAL_SD_ConfigWideBusOperation>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d001      	beq.n	800e8b6 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e026      	b.n	800e904 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e8b6:	f7f7 fb13 	bl	8005ee0 <HAL_GetTick>
 800e8ba:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e8bc:	e011      	b.n	800e8e2 <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e8be:	f7f7 fb0f 	bl	8005ee0 <HAL_GetTick>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	1ad3      	subs	r3, r2, r3
 800e8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8cc:	d109      	bne.n	800e8e2 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e8d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800e8de:	2303      	movs	r3, #3
 800e8e0:	e010      	b.n	800e904 <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 fc2e 	bl	800f144 <HAL_SD_GetCardState>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b04      	cmp	r3, #4
 800e8ec:	d1e7      	bne.n	800e8be <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e902:	2300      	movs	r3, #0
}
 800e904:	4618      	mov	r0, r3
 800e906:	3728      	adds	r7, #40	; 0x28
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e90c:	b5b0      	push	{r4, r5, r7, lr}
 800e90e:	b08e      	sub	sp, #56	; 0x38
 800e910:	af04      	add	r7, sp, #16
 800e912:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e914:	2300      	movs	r3, #0
 800e916:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e918:	2300      	movs	r3, #0
 800e91a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e91c:	2300      	movs	r3, #0
 800e91e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e920:	2300      	movs	r3, #0
 800e922:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e924:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e928:	f7fe fd20 	bl	800d36c <HAL_RCCEx_GetPeriphCLKFreq>
 800e92c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	2b00      	cmp	r3, #0
 800e932:	d109      	bne.n	800e948 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e942:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e944:	2301      	movs	r3, #1
 800e946:	e079      	b.n	800ea3c <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94a:	0a1b      	lsrs	r3, r3, #8
 800e94c:	4a3d      	ldr	r2, [pc, #244]	; (800ea44 <HAL_SD_InitCard+0x138>)
 800e94e:	fba2 2303 	umull	r2, r3, r2, r3
 800e952:	091b      	lsrs	r3, r3, #4
 800e954:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	699b      	ldr	r3, [r3, #24]
 800e95a:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	699b      	ldr	r3, [r3, #24]
 800e960:	2b02      	cmp	r3, #2
 800e962:	d107      	bne.n	800e974 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f042 0210 	orr.w	r2, r2, #16
 800e972:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681d      	ldr	r5, [r3, #0]
 800e978:	466c      	mov	r4, sp
 800e97a:	f107 0314 	add.w	r3, r7, #20
 800e97e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e982:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e986:	f107 0308 	add.w	r3, r7, #8
 800e98a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e98c:	4628      	mov	r0, r5
 800e98e:	f004 fc6d 	bl	801326c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4618      	mov	r0, r3
 800e998:	f004 fc9f 	bl	80132da <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	005b      	lsls	r3, r3, #1
 800e9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e9a8:	4a27      	ldr	r2, [pc, #156]	; (800ea48 <HAL_SD_InitCard+0x13c>)
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7f7 faa0 	bl	8005ef8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f000 fc9f 	bl	800f2fc <SD_PowerON>
 800e9be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9c0:	6a3b      	ldr	r3, [r7, #32]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00b      	beq.n	800e9de <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2201      	movs	r2, #1
 800e9ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9d2:	6a3b      	ldr	r3, [r7, #32]
 800e9d4:	431a      	orrs	r2, r3
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e9da:	2301      	movs	r3, #1
 800e9dc:	e02e      	b.n	800ea3c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f000 fbd0 	bl	800f184 <SD_InitCard>
 800e9e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9e6:	6a3b      	ldr	r3, [r7, #32]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00b      	beq.n	800ea04 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9f8:	6a3b      	ldr	r3, [r7, #32]
 800e9fa:	431a      	orrs	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ea00:	2301      	movs	r3, #1
 800ea02:	e01b      	b.n	800ea3c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f004 fcf9 	bl	8013404 <SDMMC_CmdBlockLength>
 800ea12:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea14:	6a3b      	ldr	r3, [r7, #32]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00f      	beq.n	800ea3a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4a0b      	ldr	r2, [pc, #44]	; (800ea4c <HAL_SD_InitCard+0x140>)
 800ea20:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea26:	6a3b      	ldr	r3, [r7, #32]
 800ea28:	431a      	orrs	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2201      	movs	r2, #1
 800ea32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ea36:	2301      	movs	r3, #1
 800ea38:	e000      	b.n	800ea3c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800ea3a:	2300      	movs	r3, #0
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3728      	adds	r7, #40	; 0x28
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bdb0      	pop	{r4, r5, r7, pc}
 800ea44:	014f8b59 	.word	0x014f8b59
 800ea48:	00012110 	.word	0x00012110
 800ea4c:	1fe00fff 	.word	0x1fe00fff

0800ea50 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	4603      	mov	r3, r0
 800ea58:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800ea5a:	bf00      	nop
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr
	...

0800ea68 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea76:	0f9b      	lsrs	r3, r3, #30
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea82:	0e9b      	lsrs	r3, r3, #26
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	f003 030f 	and.w	r3, r3, #15
 800ea8a:	b2da      	uxtb	r2, r3
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea94:	0e1b      	lsrs	r3, r3, #24
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	f003 0303 	and.w	r3, r3, #3
 800ea9c:	b2da      	uxtb	r2, r3
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eaa6:	0c1b      	lsrs	r3, r3, #16
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eab2:	0a1b      	lsrs	r3, r3, #8
 800eab4:	b2da      	uxtb	r2, r3
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eabe:	b2da      	uxtb	r2, r3
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eac8:	0d1b      	lsrs	r3, r3, #20
 800eaca:	b29a      	uxth	r2, r3
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ead4:	0c1b      	lsrs	r3, r3, #16
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	f003 030f 	and.w	r3, r3, #15
 800eadc:	b2da      	uxtb	r2, r3
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eae6:	0bdb      	lsrs	r3, r3, #15
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	f003 0301 	and.w	r3, r3, #1
 800eaee:	b2da      	uxtb	r2, r3
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eaf8:	0b9b      	lsrs	r3, r3, #14
 800eafa:	b2db      	uxtb	r3, r3
 800eafc:	f003 0301 	and.w	r3, r3, #1
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb0a:	0b5b      	lsrs	r3, r3, #13
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	b2da      	uxtb	r2, r3
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb1c:	0b1b      	lsrs	r3, r3, #12
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	f003 0301 	and.w	r3, r3, #1
 800eb24:	b2da      	uxtb	r2, r3
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d163      	bne.n	800ec00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb3c:	009a      	lsls	r2, r3, #2
 800eb3e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800eb42:	4013      	ands	r3, r2
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800eb48:	0f92      	lsrs	r2, r2, #30
 800eb4a:	431a      	orrs	r2, r3
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb54:	0edb      	lsrs	r3, r3, #27
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	f003 0307 	and.w	r3, r3, #7
 800eb5c:	b2da      	uxtb	r2, r3
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb66:	0e1b      	lsrs	r3, r3, #24
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	f003 0307 	and.w	r3, r3, #7
 800eb6e:	b2da      	uxtb	r2, r3
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb78:	0d5b      	lsrs	r3, r3, #21
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	f003 0307 	and.w	r3, r3, #7
 800eb80:	b2da      	uxtb	r2, r3
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb8a:	0c9b      	lsrs	r3, r3, #18
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	f003 0307 	and.w	r3, r3, #7
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb9c:	0bdb      	lsrs	r3, r3, #15
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	f003 0307 	and.w	r3, r3, #7
 800eba4:	b2da      	uxtb	r2, r3
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	691b      	ldr	r3, [r3, #16]
 800ebae:	1c5a      	adds	r2, r3, #1
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	7e1b      	ldrb	r3, [r3, #24]
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	f003 0307 	and.w	r3, r3, #7
 800ebbe:	3302      	adds	r3, #2
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	fa02 f303 	lsl.w	r3, r2, r3
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ebca:	fb02 f203 	mul.w	r2, r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	7a1b      	ldrb	r3, [r3, #8]
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	f003 030f 	and.w	r3, r3, #15
 800ebdc:	2201      	movs	r2, #1
 800ebde:	409a      	lsls	r2, r3
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ebec:	0a52      	lsrs	r2, r2, #9
 800ebee:	fb02 f203 	mul.w	r2, r2, r3
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebfc:	659a      	str	r2, [r3, #88]	; 0x58
 800ebfe:	e031      	b.n	800ec64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d11d      	bne.n	800ec44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec0c:	041b      	lsls	r3, r3, #16
 800ec0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec16:	0c1b      	lsrs	r3, r3, #16
 800ec18:	431a      	orrs	r2, r3
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	691b      	ldr	r3, [r3, #16]
 800ec22:	3301      	adds	r3, #1
 800ec24:	029a      	lsls	r2, r3, #10
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec38:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	659a      	str	r2, [r3, #88]	; 0x58
 800ec42:	e00f      	b.n	800ec64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a58      	ldr	r2, [pc, #352]	; (800edac <HAL_SD_GetCardCSD+0x344>)
 800ec4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ec60:	2301      	movs	r3, #1
 800ec62:	e09d      	b.n	800eda0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec68:	0b9b      	lsrs	r3, r3, #14
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	f003 0301 	and.w	r3, r3, #1
 800ec70:	b2da      	uxtb	r2, r3
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec7a:	09db      	lsrs	r3, r3, #7
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec82:	b2da      	uxtb	r2, r3
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec92:	b2da      	uxtb	r2, r3
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec9c:	0fdb      	lsrs	r3, r3, #31
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eca8:	0f5b      	lsrs	r3, r3, #29
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	f003 0303 	and.w	r3, r3, #3
 800ecb0:	b2da      	uxtb	r2, r3
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecba:	0e9b      	lsrs	r3, r3, #26
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	f003 0307 	and.w	r3, r3, #7
 800ecc2:	b2da      	uxtb	r2, r3
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eccc:	0d9b      	lsrs	r3, r3, #22
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	f003 030f 	and.w	r3, r3, #15
 800ecd4:	b2da      	uxtb	r2, r3
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecde:	0d5b      	lsrs	r3, r3, #21
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	f003 0301 	and.w	r3, r3, #1
 800ece6:	b2da      	uxtb	r2, r3
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecfa:	0c1b      	lsrs	r3, r3, #16
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	f003 0301 	and.w	r3, r3, #1
 800ed02:	b2da      	uxtb	r2, r3
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed0e:	0bdb      	lsrs	r3, r3, #15
 800ed10:	b2db      	uxtb	r3, r3
 800ed12:	f003 0301 	and.w	r3, r3, #1
 800ed16:	b2da      	uxtb	r2, r3
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed22:	0b9b      	lsrs	r3, r3, #14
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	f003 0301 	and.w	r3, r3, #1
 800ed2a:	b2da      	uxtb	r2, r3
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed36:	0b5b      	lsrs	r3, r3, #13
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	f003 0301 	and.w	r3, r3, #1
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed4a:	0b1b      	lsrs	r3, r3, #12
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	f003 0301 	and.w	r3, r3, #1
 800ed52:	b2da      	uxtb	r2, r3
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed5e:	0a9b      	lsrs	r3, r3, #10
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	f003 0303 	and.w	r3, r3, #3
 800ed66:	b2da      	uxtb	r2, r3
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed72:	0a1b      	lsrs	r3, r3, #8
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	f003 0303 	and.w	r3, r3, #3
 800ed7a:	b2da      	uxtb	r2, r3
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed86:	085b      	lsrs	r3, r3, #1
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed8e:	b2da      	uxtb	r2, r3
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr
 800edac:	1fe00fff 	.word	0x1fe00fff

0800edb0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b094      	sub	sp, #80	; 0x50
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800edba:	2300      	movs	r3, #0
 800edbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800edc0:	f107 0308 	add.w	r3, r7, #8
 800edc4:	4619      	mov	r1, r3
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 fba0 	bl	800f50c <SD_SendSDStatus>
 800edcc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800edce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d011      	beq.n	800edf8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a4f      	ldr	r2, [pc, #316]	; (800ef18 <HAL_SD_GetCardStatus+0x168>)
 800edda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ede0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ede2:	431a      	orrs	r2, r3
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800edf0:	2301      	movs	r3, #1
 800edf2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800edf6:	e070      	b.n	800eeda <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	099b      	lsrs	r3, r3, #6
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	f003 0303 	and.w	r3, r3, #3
 800ee02:	b2da      	uxtb	r2, r3
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	095b      	lsrs	r3, r3, #5
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	f003 0301 	and.w	r3, r3, #1
 800ee12:	b2da      	uxtb	r2, r3
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	0a1b      	lsrs	r3, r3, #8
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	0e1b      	lsrs	r3, r3, #24
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	b29a      	uxth	r2, r3
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	061a      	lsls	r2, r3, #24
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	021b      	lsls	r3, r3, #8
 800ee3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ee3e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	0a1b      	lsrs	r3, r3, #8
 800ee44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ee48:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	0e1b      	lsrs	r3, r3, #24
 800ee4e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	b2da      	uxtb	r2, r3
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	0a1b      	lsrs	r3, r3, #8
 800ee60:	b2da      	uxtb	r2, r3
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	0d1b      	lsrs	r3, r3, #20
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	f003 030f 	and.w	r3, r3, #15
 800ee70:	b2da      	uxtb	r2, r3
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	0c1b      	lsrs	r3, r3, #16
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	4313      	orrs	r3, r2
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	0a9b      	lsrs	r3, r3, #10
 800ee96:	b2db      	uxtb	r3, r3
 800ee98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee9c:	b2da      	uxtb	r2, r3
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	0a1b      	lsrs	r3, r3, #8
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	f003 0303 	and.w	r3, r3, #3
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	091b      	lsrs	r3, r3, #4
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	f003 030f 	and.w	r3, r3, #15
 800eebc:	b2da      	uxtb	r2, r3
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	f003 030f 	and.w	r3, r3, #15
 800eeca:	b2da      	uxtb	r2, r3
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800eed0:	69bb      	ldr	r3, [r7, #24]
 800eed2:	0e1b      	lsrs	r3, r3, #24
 800eed4:	b2da      	uxtb	r2, r3
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eee2:	4618      	mov	r0, r3
 800eee4:	f004 fa8e 	bl	8013404 <SDMMC_CmdBlockLength>
 800eee8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800eeea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d00d      	beq.n	800ef0c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4a08      	ldr	r2, [pc, #32]	; (800ef18 <HAL_SD_GetCardStatus+0x168>)
 800eef6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eefc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2201      	movs	r2, #1
 800ef02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ef06:	2301      	movs	r3, #1
 800ef08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ef0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3750      	adds	r7, #80	; 0x50
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	1fe00fff 	.word	0x1fe00fff

0800ef1c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ef1c:	b5b0      	push	{r4, r5, r7, lr}
 800ef1e:	b090      	sub	sp, #64	; 0x40
 800ef20:	af04      	add	r7, sp, #16
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ef26:	2300      	movs	r3, #0
 800ef28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2203      	movs	r2, #3
 800ef30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef38:	2b03      	cmp	r3, #3
 800ef3a:	d02e      	beq.n	800ef9a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef42:	d106      	bne.n	800ef52 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	639a      	str	r2, [r3, #56]	; 0x38
 800ef50:	e029      	b.n	800efa6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef58:	d10a      	bne.n	800ef70 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 fbce 	bl	800f6fc <SD_WideBus_Enable>
 800ef60:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef68:	431a      	orrs	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	639a      	str	r2, [r3, #56]	; 0x38
 800ef6e:	e01a      	b.n	800efa6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d10a      	bne.n	800ef8c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f000 fc0b 	bl	800f792 <SD_WideBus_Disable>
 800ef7c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef84:	431a      	orrs	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	639a      	str	r2, [r3, #56]	; 0x38
 800ef8a:	e00c      	b.n	800efa6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	639a      	str	r2, [r3, #56]	; 0x38
 800ef98:	e005      	b.n	800efa6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef9e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d007      	beq.n	800efbe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	4a60      	ldr	r2, [pc, #384]	; (800f134 <HAL_SD_ConfigWideBusOperation+0x218>)
 800efb4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800efb6:	2301      	movs	r3, #1
 800efb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800efbc:	e097      	b.n	800f0ee <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800efbe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800efc2:	f7fe f9d3 	bl	800d36c <HAL_RCCEx_GetPeriphCLKFreq>
 800efc6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800efc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f000 8086 	beq.w	800f0dc <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	689b      	ldr	r3, [r3, #8]
 800efda:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	691b      	ldr	r3, [r3, #16]
 800efe4:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	695a      	ldr	r2, [r3, #20]
 800efea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efec:	4952      	ldr	r1, [pc, #328]	; (800f138 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800efee:	fba1 1303 	umull	r1, r3, r1, r3
 800eff2:	0e1b      	lsrs	r3, r3, #24
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d303      	bcc.n	800f000 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	695b      	ldr	r3, [r3, #20]
 800effc:	61fb      	str	r3, [r7, #28]
 800effe:	e05a      	b.n	800f0b6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f008:	d103      	bne.n	800f012 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	695b      	ldr	r3, [r3, #20]
 800f00e:	61fb      	str	r3, [r7, #28]
 800f010:	e051      	b.n	800f0b6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f01a:	d126      	bne.n	800f06a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	695b      	ldr	r3, [r3, #20]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d10e      	bne.n	800f042 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800f024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f026:	4a45      	ldr	r2, [pc, #276]	; (800f13c <HAL_SD_ConfigWideBusOperation+0x220>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d906      	bls.n	800f03a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02e:	4a42      	ldr	r2, [pc, #264]	; (800f138 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f030:	fba2 2303 	umull	r2, r3, r2, r3
 800f034:	0e5b      	lsrs	r3, r3, #25
 800f036:	61fb      	str	r3, [r7, #28]
 800f038:	e03d      	b.n	800f0b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	695b      	ldr	r3, [r3, #20]
 800f03e:	61fb      	str	r3, [r7, #28]
 800f040:	e039      	b.n	800f0b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	695b      	ldr	r3, [r3, #20]
 800f046:	005b      	lsls	r3, r3, #1
 800f048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f04a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f04e:	4a3b      	ldr	r2, [pc, #236]	; (800f13c <HAL_SD_ConfigWideBusOperation+0x220>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d906      	bls.n	800f062 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f056:	4a38      	ldr	r2, [pc, #224]	; (800f138 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f058:	fba2 2303 	umull	r2, r3, r2, r3
 800f05c:	0e5b      	lsrs	r3, r3, #25
 800f05e:	61fb      	str	r3, [r7, #28]
 800f060:	e029      	b.n	800f0b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	695b      	ldr	r3, [r3, #20]
 800f066:	61fb      	str	r3, [r7, #28]
 800f068:	e025      	b.n	800f0b6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	695b      	ldr	r3, [r3, #20]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d10e      	bne.n	800f090 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800f072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f074:	4a32      	ldr	r2, [pc, #200]	; (800f140 <HAL_SD_ConfigWideBusOperation+0x224>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d906      	bls.n	800f088 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800f07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07c:	4a2e      	ldr	r2, [pc, #184]	; (800f138 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f07e:	fba2 2303 	umull	r2, r3, r2, r3
 800f082:	0e1b      	lsrs	r3, r3, #24
 800f084:	61fb      	str	r3, [r7, #28]
 800f086:	e016      	b.n	800f0b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	695b      	ldr	r3, [r3, #20]
 800f08c:	61fb      	str	r3, [r7, #28]
 800f08e:	e012      	b.n	800f0b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	695b      	ldr	r3, [r3, #20]
 800f094:	005b      	lsls	r3, r3, #1
 800f096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f098:	fbb2 f3f3 	udiv	r3, r2, r3
 800f09c:	4a28      	ldr	r2, [pc, #160]	; (800f140 <HAL_SD_ConfigWideBusOperation+0x224>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d906      	bls.n	800f0b0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	4a24      	ldr	r2, [pc, #144]	; (800f138 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f0aa:	0e1b      	lsrs	r3, r3, #24
 800f0ac:	61fb      	str	r3, [r7, #28]
 800f0ae:	e002      	b.n	800f0b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	695b      	ldr	r3, [r3, #20]
 800f0b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	699b      	ldr	r3, [r3, #24]
 800f0ba:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681d      	ldr	r5, [r3, #0]
 800f0c0:	466c      	mov	r4, sp
 800f0c2:	f107 0318 	add.w	r3, r7, #24
 800f0c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f0ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f0ce:	f107 030c 	add.w	r3, r7, #12
 800f0d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	f004 f8c9 	bl	801326c <SDMMC_Init>
 800f0da:	e008      	b.n	800f0ee <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f004 f984 	bl	8013404 <SDMMC_CmdBlockLength>
 800f0fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00c      	beq.n	800f11e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a0a      	ldr	r2, [pc, #40]	; (800f134 <HAL_SD_ConfigWideBusOperation+0x218>)
 800f10a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f112:	431a      	orrs	r2, r3
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800f118:	2301      	movs	r3, #1
 800f11a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2201      	movs	r2, #1
 800f122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800f126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3730      	adds	r7, #48	; 0x30
 800f12e:	46bd      	mov	sp, r7
 800f130:	bdb0      	pop	{r4, r5, r7, pc}
 800f132:	bf00      	nop
 800f134:	1fe00fff 	.word	0x1fe00fff
 800f138:	55e63b89 	.word	0x55e63b89
 800f13c:	02faf080 	.word	0x02faf080
 800f140:	017d7840 	.word	0x017d7840

0800f144 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b086      	sub	sp, #24
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f14c:	2300      	movs	r3, #0
 800f14e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f150:	f107 030c 	add.w	r3, r7, #12
 800f154:	4619      	mov	r1, r3
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 faa8 	bl	800f6ac <SD_SendStatus>
 800f15c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d005      	beq.n	800f170 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	431a      	orrs	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	0a5b      	lsrs	r3, r3, #9
 800f174:	f003 030f 	and.w	r3, r3, #15
 800f178:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f17a:	693b      	ldr	r3, [r7, #16]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3718      	adds	r7, #24
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b090      	sub	sp, #64	; 0x40
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f18c:	2301      	movs	r3, #1
 800f18e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4618      	mov	r0, r3
 800f196:	f004 f8b1 	bl	80132fc <SDMMC_GetPowerState>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d102      	bne.n	800f1a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f1a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f1a4:	e0a5      	b.n	800f2f2 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1aa:	2b03      	cmp	r3, #3
 800f1ac:	d02e      	beq.n	800f20c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f004 fa32 	bl	801361c <SDMMC_CmdSendCID>
 800f1b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800f1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d001      	beq.n	800f1c4 <SD_InitCard+0x40>
    {
      return errorstate;
 800f1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1c2:	e096      	b.n	800f2f2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f004 f8db 	bl	8013386 <SDMMC_GetResponse>
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2104      	movs	r1, #4
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f004 f8d2 	bl	8013386 <SDMMC_GetResponse>
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2108      	movs	r1, #8
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f004 f8c9 	bl	8013386 <SDMMC_GetResponse>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	210c      	movs	r1, #12
 800f200:	4618      	mov	r0, r3
 800f202:	f004 f8c0 	bl	8013386 <SDMMC_GetResponse>
 800f206:	4602      	mov	r2, r0
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f210:	2b03      	cmp	r3, #3
 800f212:	d00d      	beq.n	800f230 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f107 020e 	add.w	r2, r7, #14
 800f21c:	4611      	mov	r1, r2
 800f21e:	4618      	mov	r0, r3
 800f220:	f004 fa3b 	bl	801369a <SDMMC_CmdSetRelAdd>
 800f224:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800f226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d001      	beq.n	800f230 <SD_InitCard+0xac>
    {
      return errorstate;
 800f22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f22e:	e060      	b.n	800f2f2 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f234:	2b03      	cmp	r3, #3
 800f236:	d036      	beq.n	800f2a6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f238:	89fb      	ldrh	r3, [r7, #14]
 800f23a:	461a      	mov	r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f248:	041b      	lsls	r3, r3, #16
 800f24a:	4619      	mov	r1, r3
 800f24c:	4610      	mov	r0, r2
 800f24e:	f004 fa04 	bl	801365a <SDMMC_CmdSendCSD>
 800f252:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800f254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <SD_InitCard+0xda>
    {
      return errorstate;
 800f25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f25c:	e049      	b.n	800f2f2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	2100      	movs	r1, #0
 800f264:	4618      	mov	r0, r3
 800f266:	f004 f88e 	bl	8013386 <SDMMC_GetResponse>
 800f26a:	4602      	mov	r2, r0
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2104      	movs	r1, #4
 800f276:	4618      	mov	r0, r3
 800f278:	f004 f885 	bl	8013386 <SDMMC_GetResponse>
 800f27c:	4602      	mov	r2, r0
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2108      	movs	r1, #8
 800f288:	4618      	mov	r0, r3
 800f28a:	f004 f87c 	bl	8013386 <SDMMC_GetResponse>
 800f28e:	4602      	mov	r2, r0
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	210c      	movs	r1, #12
 800f29a:	4618      	mov	r0, r3
 800f29c:	f004 f873 	bl	8013386 <SDMMC_GetResponse>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2104      	movs	r1, #4
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f004 f86a 	bl	8013386 <SDMMC_GetResponse>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	0d1a      	lsrs	r2, r3, #20
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f2ba:	f107 0310 	add.w	r3, r7, #16
 800f2be:	4619      	mov	r1, r3
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f7ff fbd1 	bl	800ea68 <HAL_SD_GetCardCSD>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d002      	beq.n	800f2d2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f2d0:	e00f      	b.n	800f2f2 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2da:	041b      	lsls	r3, r3, #16
 800f2dc:	4619      	mov	r1, r3
 800f2de:	4610      	mov	r0, r2
 800f2e0:	f004 f8b3 	bl	801344a <SDMMC_CmdSelDesel>
 800f2e4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800f2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d001      	beq.n	800f2f0 <SD_InitCard+0x16c>
  {
    return errorstate;
 800f2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ee:	e000      	b.n	800f2f2 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3740      	adds	r7, #64	; 0x40
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
	...

0800f2fc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b088      	sub	sp, #32
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f304:	2300      	movs	r3, #0
 800f306:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 800f308:	2300      	movs	r3, #0
 800f30a:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 800f30c:	2300      	movs	r3, #0
 800f30e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800f310:	f7f6 fde6 	bl	8005ee0 <HAL_GetTick>
 800f314:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4618      	mov	r0, r3
 800f31c:	f004 f8b8 	bl	8013490 <SDMMC_CmdGoIdleState>
 800f320:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d001      	beq.n	800f32c <SD_PowerON+0x30>
  {
    return errorstate;
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	e0e9      	b.n	800f500 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4618      	mov	r0, r3
 800f332:	f004 f8cb 	bl	80134cc <SDMMC_CmdOperCond>
 800f336:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00d      	beq.n	800f35a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2200      	movs	r2, #0
 800f342:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4618      	mov	r0, r3
 800f34a:	f004 f8a1 	bl	8013490 <SDMMC_CmdGoIdleState>
 800f34e:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d004      	beq.n	800f360 <SD_PowerON+0x64>
    {
      return errorstate;
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	e0d2      	b.n	800f500 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2201      	movs	r2, #1
 800f35e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f364:	2b01      	cmp	r3, #1
 800f366:	d137      	bne.n	800f3d8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2100      	movs	r1, #0
 800f36e:	4618      	mov	r0, r3
 800f370:	f004 f8cc 	bl	801350c <SDMMC_CmdAppCommand>
 800f374:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d02d      	beq.n	800f3d8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f37c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f380:	e0be      	b.n	800f500 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2100      	movs	r1, #0
 800f388:	4618      	mov	r0, r3
 800f38a:	f004 f8bf 	bl	801350c <SDMMC_CmdAppCommand>
 800f38e:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d001      	beq.n	800f39a <SD_PowerON+0x9e>
    {
      return errorstate;
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	e0b2      	b.n	800f500 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	495a      	ldr	r1, [pc, #360]	; (800f508 <SD_PowerON+0x20c>)
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f004 f8d6 	bl	8013552 <SDMMC_CmdAppOperCommand>
 800f3a6:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d002      	beq.n	800f3b4 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f3ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f3b2:	e0a5      	b.n	800f500 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2100      	movs	r1, #0
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f003 ffe3 	bl	8013386 <SDMMC_GetResponse>
 800f3c0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	0fdb      	lsrs	r3, r3, #31
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d101      	bne.n	800f3ce <SD_PowerON+0xd2>
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	e000      	b.n	800f3d0 <SD_PowerON+0xd4>
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	61bb      	str	r3, [r7, #24]

    count++;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d802      	bhi.n	800f3e8 <SD_PowerON+0xec>
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d0cc      	beq.n	800f382 <SD_PowerON+0x86>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d902      	bls.n	800f3f8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f3f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f3f6:	e083      	b.n	800f500 <SD_PowerON+0x204>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d07d      	beq.n	800f4fe <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2201      	movs	r2, #1
 800f406:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	699b      	ldr	r3, [r3, #24]
 800f40c:	2b02      	cmp	r3, #2
 800f40e:	d176      	bne.n	800f4fe <SD_PowerON+0x202>
    {
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f416:	2b00      	cmp	r3, #0
 800f418:	d071      	beq.n	800f4fe <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f420:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f042 0208 	orr.w	r2, r2, #8
 800f430:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4618      	mov	r0, r3
 800f438:	f004 f996 	bl	8013768 <SDMMC_CmdVoltageSwitch>
 800f43c:	6138      	str	r0, [r7, #16]
        if (errorstate != HAL_SD_ERROR_NONE)
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d00c      	beq.n	800f45e <SD_PowerON+0x162>
        {
          return errorstate;
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	e05b      	b.n	800f500 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f448:	f7f6 fd4a 	bl	8005ee0 <HAL_GetTick>
 800f44c:	4602      	mov	r2, r0
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	1ad3      	subs	r3, r2, r3
 800f452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f456:	d102      	bne.n	800f45e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800f458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f45c:	e050      	b.n	800f500 <SD_PowerON+0x204>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f46c:	d1ec      	bne.n	800f448 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f476:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f47e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f486:	d002      	beq.n	800f48e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800f488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f48c:	e038      	b.n	800f500 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800f48e:	2001      	movs	r0, #1
 800f490:	f7ff fade 	bl	800ea50 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f042 0204 	orr.w	r2, r2, #4
 800f4a2:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800f4a4:	e00a      	b.n	800f4bc <SD_PowerON+0x1c0>
          {
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f4a6:	f7f6 fd1b 	bl	8005ee0 <HAL_GetTick>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	1ad3      	subs	r3, r2, r3
 800f4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b4:	d102      	bne.n	800f4bc <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800f4b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4ba:	e021      	b.n	800f500 <SD_PowerON+0x204>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f4ca:	d1ec      	bne.n	800f4a6 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f4d4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f4e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4e4:	d102      	bne.n	800f4ec <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f4e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f4ea:	e009      	b.n	800f500 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2213      	movs	r2, #19
 800f4f2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f4fc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f4fe:	2300      	movs	r3, #0
}
 800f500:	4618      	mov	r0, r3
 800f502:	3720      	adds	r7, #32
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}
 800f508:	c1100000 	.word	0xc1100000

0800f50c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b08c      	sub	sp, #48	; 0x30
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f516:	f7f6 fce3 	bl	8005ee0 <HAL_GetTick>
 800f51a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2100      	movs	r1, #0
 800f526:	4618      	mov	r0, r3
 800f528:	f003 ff2d 	bl	8013386 <SDMMC_GetResponse>
 800f52c:	4603      	mov	r3, r0
 800f52e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f536:	d102      	bne.n	800f53e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f53c:	e0b0      	b.n	800f6a0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2140      	movs	r1, #64	; 0x40
 800f544:	4618      	mov	r0, r3
 800f546:	f003 ff5d 	bl	8013404 <SDMMC_CmdBlockLength>
 800f54a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f54c:	6a3b      	ldr	r3, [r7, #32]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d005      	beq.n	800f55e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f55a:	6a3b      	ldr	r3, [r7, #32]
 800f55c:	e0a0      	b.n	800f6a0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f566:	041b      	lsls	r3, r3, #16
 800f568:	4619      	mov	r1, r3
 800f56a:	4610      	mov	r0, r2
 800f56c:	f003 ffce 	bl	801350c <SDMMC_CmdAppCommand>
 800f570:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f572:	6a3b      	ldr	r3, [r7, #32]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d005      	beq.n	800f584 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f580:	6a3b      	ldr	r3, [r7, #32]
 800f582:	e08d      	b.n	800f6a0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f584:	f04f 33ff 	mov.w	r3, #4294967295
 800f588:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f58a:	2340      	movs	r3, #64	; 0x40
 800f58c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f58e:	2360      	movs	r3, #96	; 0x60
 800f590:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f592:	2302      	movs	r3, #2
 800f594:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f596:	2300      	movs	r3, #0
 800f598:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f59a:	2301      	movs	r3, #1
 800f59c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f107 0208 	add.w	r2, r7, #8
 800f5a6:	4611      	mov	r1, r2
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f003 feff 	bl	80133ac <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f004 f8b6 	bl	8013724 <SDMMC_CmdStatusRegister>
 800f5b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f5ba:	6a3b      	ldr	r3, [r7, #32]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d02b      	beq.n	800f618 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f5c8:	6a3b      	ldr	r3, [r7, #32]
 800f5ca:	e069      	b.n	800f6a0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d013      	beq.n	800f602 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f5da:	2300      	movs	r3, #0
 800f5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5de:	e00d      	b.n	800f5fc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f003 fe6b 	bl	80132c0 <SDMMC_ReadFIFO>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ee:	601a      	str	r2, [r3, #0]
        pData++;
 800f5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f2:	3304      	adds	r3, #4
 800f5f4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5fe:	2b07      	cmp	r3, #7
 800f600:	d9ee      	bls.n	800f5e0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f602:	f7f6 fc6d 	bl	8005ee0 <HAL_GetTick>
 800f606:	4602      	mov	r2, r0
 800f608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60a:	1ad3      	subs	r3, r2, r3
 800f60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f610:	d102      	bne.n	800f618 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f612:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f616:	e043      	b.n	800f6a0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f61e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f622:	2b00      	cmp	r3, #0
 800f624:	d0d2      	beq.n	800f5cc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f62c:	f003 0308 	and.w	r3, r3, #8
 800f630:	2b00      	cmp	r3, #0
 800f632:	d001      	beq.n	800f638 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f634:	2308      	movs	r3, #8
 800f636:	e033      	b.n	800f6a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f63e:	f003 0302 	and.w	r3, r3, #2
 800f642:	2b00      	cmp	r3, #0
 800f644:	d001      	beq.n	800f64a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f646:	2302      	movs	r3, #2
 800f648:	e02a      	b.n	800f6a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f650:	f003 0320 	and.w	r3, r3, #32
 800f654:	2b00      	cmp	r3, #0
 800f656:	d017      	beq.n	800f688 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f658:	2320      	movs	r3, #32
 800f65a:	e021      	b.n	800f6a0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4618      	mov	r0, r3
 800f662:	f003 fe2d 	bl	80132c0 <SDMMC_ReadFIFO>
 800f666:	4602      	mov	r2, r0
 800f668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66a:	601a      	str	r2, [r3, #0]
    pData++;
 800f66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66e:	3304      	adds	r3, #4
 800f670:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f672:	f7f6 fc35 	bl	8005ee0 <HAL_GetTick>
 800f676:	4602      	mov	r2, r0
 800f678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67a:	1ad3      	subs	r3, r2, r3
 800f67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f680:	d102      	bne.n	800f688 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f682:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f686:	e00b      	b.n	800f6a0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f68e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1e2      	bne.n	800f65c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a03      	ldr	r2, [pc, #12]	; (800f6a8 <SD_SendSDStatus+0x19c>)
 800f69c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f69e:	2300      	movs	r3, #0
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3730      	adds	r7, #48	; 0x30
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	18000f3a 	.word	0x18000f3a

0800f6ac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d102      	bne.n	800f6c2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f6bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f6c0:	e018      	b.n	800f6f4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6ca:	041b      	lsls	r3, r3, #16
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	4610      	mov	r0, r2
 800f6d0:	f004 f805 	bl	80136de <SDMMC_CmdSendStatus>
 800f6d4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d001      	beq.n	800f6e0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	e009      	b.n	800f6f4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f003 fe4d 	bl	8013386 <SDMMC_GetResponse>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f6f2:	2300      	movs	r3, #0
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3710      	adds	r7, #16
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b086      	sub	sp, #24
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f704:	2300      	movs	r3, #0
 800f706:	60fb      	str	r3, [r7, #12]
 800f708:	2300      	movs	r3, #0
 800f70a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	2100      	movs	r1, #0
 800f712:	4618      	mov	r0, r3
 800f714:	f003 fe37 	bl	8013386 <SDMMC_GetResponse>
 800f718:	4603      	mov	r3, r0
 800f71a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f71e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f722:	d102      	bne.n	800f72a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f724:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f728:	e02f      	b.n	800f78a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f72a:	f107 030c 	add.w	r3, r7, #12
 800f72e:	4619      	mov	r1, r3
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 f879 	bl	800f828 <SD_FindSCR>
 800f736:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d001      	beq.n	800f742 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	e023      	b.n	800f78a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d01c      	beq.n	800f786 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f754:	041b      	lsls	r3, r3, #16
 800f756:	4619      	mov	r1, r3
 800f758:	4610      	mov	r0, r2
 800f75a:	f003 fed7 	bl	801350c <SDMMC_CmdAppCommand>
 800f75e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d001      	beq.n	800f76a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	e00f      	b.n	800f78a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2102      	movs	r1, #2
 800f770:	4618      	mov	r0, r3
 800f772:	f003 ff0e 	bl	8013592 <SDMMC_CmdBusWidth>
 800f776:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d001      	beq.n	800f782 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	e003      	b.n	800f78a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f782:	2300      	movs	r3, #0
 800f784:	e001      	b.n	800f78a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f786:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3718      	adds	r7, #24
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}

0800f792 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f792:	b580      	push	{r7, lr}
 800f794:	b086      	sub	sp, #24
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f79a:	2300      	movs	r3, #0
 800f79c:	60fb      	str	r3, [r7, #12]
 800f79e:	2300      	movs	r3, #0
 800f7a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	2100      	movs	r1, #0
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f003 fdec 	bl	8013386 <SDMMC_GetResponse>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f7b8:	d102      	bne.n	800f7c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f7ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f7be:	e02f      	b.n	800f820 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f7c0:	f107 030c 	add.w	r3, r7, #12
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 f82e 	bl	800f828 <SD_FindSCR>
 800f7cc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d001      	beq.n	800f7d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	e023      	b.n	800f820 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d01c      	beq.n	800f81c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681a      	ldr	r2, [r3, #0]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7ea:	041b      	lsls	r3, r3, #16
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	4610      	mov	r0, r2
 800f7f0:	f003 fe8c 	bl	801350c <SDMMC_CmdAppCommand>
 800f7f4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d001      	beq.n	800f800 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	e00f      	b.n	800f820 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2100      	movs	r1, #0
 800f806:	4618      	mov	r0, r3
 800f808:	f003 fec3 	bl	8013592 <SDMMC_CmdBusWidth>
 800f80c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	e003      	b.n	800f820 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f818:	2300      	movs	r3, #0
 800f81a:	e001      	b.n	800f820 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f81c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f820:	4618      	mov	r0, r3
 800f822:	3718      	adds	r7, #24
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b08e      	sub	sp, #56	; 0x38
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f832:	f7f6 fb55 	bl	8005ee0 <HAL_GetTick>
 800f836:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f838:	2300      	movs	r3, #0
 800f83a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f83c:	2300      	movs	r3, #0
 800f83e:	60bb      	str	r3, [r7, #8]
 800f840:	2300      	movs	r3, #0
 800f842:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2108      	movs	r1, #8
 800f84e:	4618      	mov	r0, r3
 800f850:	f003 fdd8 	bl	8013404 <SDMMC_CmdBlockLength>
 800f854:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d001      	beq.n	800f860 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85e:	e0ad      	b.n	800f9bc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f868:	041b      	lsls	r3, r3, #16
 800f86a:	4619      	mov	r1, r3
 800f86c:	4610      	mov	r0, r2
 800f86e:	f003 fe4d 	bl	801350c <SDMMC_CmdAppCommand>
 800f872:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f876:	2b00      	cmp	r3, #0
 800f878:	d001      	beq.n	800f87e <SD_FindSCR+0x56>
  {
    return errorstate;
 800f87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87c:	e09e      	b.n	800f9bc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f87e:	f04f 33ff 	mov.w	r3, #4294967295
 800f882:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f884:	2308      	movs	r3, #8
 800f886:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f888:	2330      	movs	r3, #48	; 0x30
 800f88a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f88c:	2302      	movs	r3, #2
 800f88e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f890:	2300      	movs	r3, #0
 800f892:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f894:	2301      	movs	r3, #1
 800f896:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f107 0210 	add.w	r2, r7, #16
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f003 fd82 	bl	80133ac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f003 fe93 	bl	80135d8 <SDMMC_CmdSendSCR>
 800f8b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d027      	beq.n	800f90a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8bc:	e07e      	b.n	800f9bc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d113      	bne.n	800f8f4 <SD_FindSCR+0xcc>
 800f8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d110      	bne.n	800f8f4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f003 fcf2 	bl	80132c0 <SDMMC_ReadFIFO>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f003 fceb 	bl	80132c0 <SDMMC_ReadFIFO>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	60fb      	str	r3, [r7, #12]
      index++;
 800f8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f8f4:	f7f6 faf4 	bl	8005ee0 <HAL_GetTick>
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fc:	1ad3      	subs	r3, r2, r3
 800f8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f902:	d102      	bne.n	800f90a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f904:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f908:	e058      	b.n	800f9bc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f910:	f240 532a 	movw	r3, #1322	; 0x52a
 800f914:	4013      	ands	r3, r2
 800f916:	2b00      	cmp	r3, #0
 800f918:	d0d1      	beq.n	800f8be <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f920:	f003 0308 	and.w	r3, r3, #8
 800f924:	2b00      	cmp	r3, #0
 800f926:	d005      	beq.n	800f934 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2208      	movs	r2, #8
 800f92e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f930:	2308      	movs	r3, #8
 800f932:	e043      	b.n	800f9bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f93a:	f003 0302 	and.w	r3, r3, #2
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d005      	beq.n	800f94e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	2202      	movs	r2, #2
 800f948:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f94a:	2302      	movs	r3, #2
 800f94c:	e036      	b.n	800f9bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f954:	f003 0320 	and.w	r3, r3, #32
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d005      	beq.n	800f968 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2220      	movs	r2, #32
 800f962:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f964:	2320      	movs	r3, #32
 800f966:	e029      	b.n	800f9bc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4a15      	ldr	r2, [pc, #84]	; (800f9c4 <SD_FindSCR+0x19c>)
 800f96e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	061a      	lsls	r2, r3, #24
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	021b      	lsls	r3, r3, #8
 800f978:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f97c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	0a1b      	lsrs	r3, r3, #8
 800f982:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f986:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	0e1b      	lsrs	r3, r3, #24
 800f98c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f990:	601a      	str	r2, [r3, #0]
    scr++;
 800f992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f994:	3304      	adds	r3, #4
 800f996:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	061a      	lsls	r2, r3, #24
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	021b      	lsls	r3, r3, #8
 800f9a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f9a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	0a1b      	lsrs	r3, r3, #8
 800f9aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f9ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	0e1b      	lsrs	r3, r3, #24
 800f9b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f9ba:	2300      	movs	r3, #0
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3738      	adds	r7, #56	; 0x38
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	18000f3a 	.word	0x18000f3a

0800f9c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d101      	bne.n	800f9da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e049      	b.n	800fa6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d106      	bne.n	800f9f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7f5 ff8c 	bl	800590c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2202      	movs	r2, #2
 800f9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	3304      	adds	r3, #4
 800fa04:	4619      	mov	r1, r3
 800fa06:	4610      	mov	r0, r2
 800fa08:	f000 fd52 	bl	80104b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2201      	movs	r2, #1
 800fa18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2201      	movs	r2, #1
 800fa28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2201      	movs	r2, #1
 800fa38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2201      	movs	r2, #1
 800fa40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2201      	movs	r2, #1
 800fa48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2201      	movs	r2, #1
 800fa58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2201      	movs	r2, #1
 800fa68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa6c:	2300      	movs	r3, #0
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3708      	adds	r7, #8
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
	...

0800fa78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d001      	beq.n	800fa90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	e04f      	b.n	800fb30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2202      	movs	r2, #2
 800fa94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	68da      	ldr	r2, [r3, #12]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	f042 0201 	orr.w	r2, r2, #1
 800faa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	4a23      	ldr	r2, [pc, #140]	; (800fb3c <HAL_TIM_Base_Start_IT+0xc4>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d01d      	beq.n	800faee <HAL_TIM_Base_Start_IT+0x76>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800faba:	d018      	beq.n	800faee <HAL_TIM_Base_Start_IT+0x76>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	4a1f      	ldr	r2, [pc, #124]	; (800fb40 <HAL_TIM_Base_Start_IT+0xc8>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d013      	beq.n	800faee <HAL_TIM_Base_Start_IT+0x76>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4a1e      	ldr	r2, [pc, #120]	; (800fb44 <HAL_TIM_Base_Start_IT+0xcc>)
 800facc:	4293      	cmp	r3, r2
 800face:	d00e      	beq.n	800faee <HAL_TIM_Base_Start_IT+0x76>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a1c      	ldr	r2, [pc, #112]	; (800fb48 <HAL_TIM_Base_Start_IT+0xd0>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d009      	beq.n	800faee <HAL_TIM_Base_Start_IT+0x76>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	4a1b      	ldr	r2, [pc, #108]	; (800fb4c <HAL_TIM_Base_Start_IT+0xd4>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d004      	beq.n	800faee <HAL_TIM_Base_Start_IT+0x76>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4a19      	ldr	r2, [pc, #100]	; (800fb50 <HAL_TIM_Base_Start_IT+0xd8>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d115      	bne.n	800fb1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	689a      	ldr	r2, [r3, #8]
 800faf4:	4b17      	ldr	r3, [pc, #92]	; (800fb54 <HAL_TIM_Base_Start_IT+0xdc>)
 800faf6:	4013      	ands	r3, r2
 800faf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2b06      	cmp	r3, #6
 800fafe:	d015      	beq.n	800fb2c <HAL_TIM_Base_Start_IT+0xb4>
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb06:	d011      	beq.n	800fb2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f042 0201 	orr.w	r2, r2, #1
 800fb16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb18:	e008      	b.n	800fb2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f042 0201 	orr.w	r2, r2, #1
 800fb28:	601a      	str	r2, [r3, #0]
 800fb2a:	e000      	b.n	800fb2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fb2e:	2300      	movs	r3, #0
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3714      	adds	r7, #20
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr
 800fb3c:	40010000 	.word	0x40010000
 800fb40:	40000400 	.word	0x40000400
 800fb44:	40000800 	.word	0x40000800
 800fb48:	40000c00 	.word	0x40000c00
 800fb4c:	40010400 	.word	0x40010400
 800fb50:	40001800 	.word	0x40001800
 800fb54:	00010007 	.word	0x00010007

0800fb58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d101      	bne.n	800fb6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fb66:	2301      	movs	r3, #1
 800fb68:	e049      	b.n	800fbfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d106      	bne.n	800fb84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f7f5 ff20 	bl	80059c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2202      	movs	r2, #2
 800fb88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	3304      	adds	r3, #4
 800fb94:	4619      	mov	r1, r3
 800fb96:	4610      	mov	r0, r2
 800fb98:	f000 fc8a 	bl	80104b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2201      	movs	r2, #1
 800fba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2201      	movs	r2, #1
 800fba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2201      	movs	r2, #1
 800fbb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2201      	movs	r2, #1
 800fbd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2201      	movs	r2, #1
 800fbf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
	...

0800fc08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d109      	bne.n	800fc2c <HAL_TIM_PWM_Start+0x24>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	bf14      	ite	ne
 800fc24:	2301      	movne	r3, #1
 800fc26:	2300      	moveq	r3, #0
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	e03c      	b.n	800fca6 <HAL_TIM_PWM_Start+0x9e>
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	2b04      	cmp	r3, #4
 800fc30:	d109      	bne.n	800fc46 <HAL_TIM_PWM_Start+0x3e>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fc38:	b2db      	uxtb	r3, r3
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	bf14      	ite	ne
 800fc3e:	2301      	movne	r3, #1
 800fc40:	2300      	moveq	r3, #0
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	e02f      	b.n	800fca6 <HAL_TIM_PWM_Start+0x9e>
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	2b08      	cmp	r3, #8
 800fc4a:	d109      	bne.n	800fc60 <HAL_TIM_PWM_Start+0x58>
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	bf14      	ite	ne
 800fc58:	2301      	movne	r3, #1
 800fc5a:	2300      	moveq	r3, #0
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	e022      	b.n	800fca6 <HAL_TIM_PWM_Start+0x9e>
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	2b0c      	cmp	r3, #12
 800fc64:	d109      	bne.n	800fc7a <HAL_TIM_PWM_Start+0x72>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	bf14      	ite	ne
 800fc72:	2301      	movne	r3, #1
 800fc74:	2300      	moveq	r3, #0
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	e015      	b.n	800fca6 <HAL_TIM_PWM_Start+0x9e>
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	2b10      	cmp	r3, #16
 800fc7e:	d109      	bne.n	800fc94 <HAL_TIM_PWM_Start+0x8c>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	2b01      	cmp	r3, #1
 800fc8a:	bf14      	ite	ne
 800fc8c:	2301      	movne	r3, #1
 800fc8e:	2300      	moveq	r3, #0
 800fc90:	b2db      	uxtb	r3, r3
 800fc92:	e008      	b.n	800fca6 <HAL_TIM_PWM_Start+0x9e>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	bf14      	ite	ne
 800fca0:	2301      	movne	r3, #1
 800fca2:	2300      	moveq	r3, #0
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d001      	beq.n	800fcae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fcaa:	2301      	movs	r3, #1
 800fcac:	e09c      	b.n	800fde8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d104      	bne.n	800fcbe <HAL_TIM_PWM_Start+0xb6>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2202      	movs	r2, #2
 800fcb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fcbc:	e023      	b.n	800fd06 <HAL_TIM_PWM_Start+0xfe>
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	2b04      	cmp	r3, #4
 800fcc2:	d104      	bne.n	800fcce <HAL_TIM_PWM_Start+0xc6>
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2202      	movs	r2, #2
 800fcc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fccc:	e01b      	b.n	800fd06 <HAL_TIM_PWM_Start+0xfe>
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	2b08      	cmp	r3, #8
 800fcd2:	d104      	bne.n	800fcde <HAL_TIM_PWM_Start+0xd6>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2202      	movs	r2, #2
 800fcd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fcdc:	e013      	b.n	800fd06 <HAL_TIM_PWM_Start+0xfe>
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	2b0c      	cmp	r3, #12
 800fce2:	d104      	bne.n	800fcee <HAL_TIM_PWM_Start+0xe6>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2202      	movs	r2, #2
 800fce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fcec:	e00b      	b.n	800fd06 <HAL_TIM_PWM_Start+0xfe>
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	2b10      	cmp	r3, #16
 800fcf2:	d104      	bne.n	800fcfe <HAL_TIM_PWM_Start+0xf6>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2202      	movs	r2, #2
 800fcf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fcfc:	e003      	b.n	800fd06 <HAL_TIM_PWM_Start+0xfe>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2202      	movs	r2, #2
 800fd02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	6839      	ldr	r1, [r7, #0]
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f000 ffd4 	bl	8010cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4a35      	ldr	r2, [pc, #212]	; (800fdf0 <HAL_TIM_PWM_Start+0x1e8>)
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	d013      	beq.n	800fd46 <HAL_TIM_PWM_Start+0x13e>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4a34      	ldr	r2, [pc, #208]	; (800fdf4 <HAL_TIM_PWM_Start+0x1ec>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d00e      	beq.n	800fd46 <HAL_TIM_PWM_Start+0x13e>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	4a32      	ldr	r2, [pc, #200]	; (800fdf8 <HAL_TIM_PWM_Start+0x1f0>)
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	d009      	beq.n	800fd46 <HAL_TIM_PWM_Start+0x13e>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	4a31      	ldr	r2, [pc, #196]	; (800fdfc <HAL_TIM_PWM_Start+0x1f4>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d004      	beq.n	800fd46 <HAL_TIM_PWM_Start+0x13e>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4a2f      	ldr	r2, [pc, #188]	; (800fe00 <HAL_TIM_PWM_Start+0x1f8>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d101      	bne.n	800fd4a <HAL_TIM_PWM_Start+0x142>
 800fd46:	2301      	movs	r3, #1
 800fd48:	e000      	b.n	800fd4c <HAL_TIM_PWM_Start+0x144>
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d007      	beq.n	800fd60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a22      	ldr	r2, [pc, #136]	; (800fdf0 <HAL_TIM_PWM_Start+0x1e8>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d01d      	beq.n	800fda6 <HAL_TIM_PWM_Start+0x19e>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd72:	d018      	beq.n	800fda6 <HAL_TIM_PWM_Start+0x19e>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a22      	ldr	r2, [pc, #136]	; (800fe04 <HAL_TIM_PWM_Start+0x1fc>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d013      	beq.n	800fda6 <HAL_TIM_PWM_Start+0x19e>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4a21      	ldr	r2, [pc, #132]	; (800fe08 <HAL_TIM_PWM_Start+0x200>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d00e      	beq.n	800fda6 <HAL_TIM_PWM_Start+0x19e>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4a1f      	ldr	r2, [pc, #124]	; (800fe0c <HAL_TIM_PWM_Start+0x204>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d009      	beq.n	800fda6 <HAL_TIM_PWM_Start+0x19e>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a17      	ldr	r2, [pc, #92]	; (800fdf4 <HAL_TIM_PWM_Start+0x1ec>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d004      	beq.n	800fda6 <HAL_TIM_PWM_Start+0x19e>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4a1b      	ldr	r2, [pc, #108]	; (800fe10 <HAL_TIM_PWM_Start+0x208>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d115      	bne.n	800fdd2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	689a      	ldr	r2, [r3, #8]
 800fdac:	4b19      	ldr	r3, [pc, #100]	; (800fe14 <HAL_TIM_PWM_Start+0x20c>)
 800fdae:	4013      	ands	r3, r2
 800fdb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2b06      	cmp	r3, #6
 800fdb6:	d015      	beq.n	800fde4 <HAL_TIM_PWM_Start+0x1dc>
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdbe:	d011      	beq.n	800fde4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f042 0201 	orr.w	r2, r2, #1
 800fdce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdd0:	e008      	b.n	800fde4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f042 0201 	orr.w	r2, r2, #1
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	e000      	b.n	800fde6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fde4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fde6:	2300      	movs	r3, #0
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3710      	adds	r7, #16
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}
 800fdf0:	40010000 	.word	0x40010000
 800fdf4:	40010400 	.word	0x40010400
 800fdf8:	40014000 	.word	0x40014000
 800fdfc:	40014400 	.word	0x40014400
 800fe00:	40014800 	.word	0x40014800
 800fe04:	40000400 	.word	0x40000400
 800fe08:	40000800 	.word	0x40000800
 800fe0c:	40000c00 	.word	0x40000c00
 800fe10:	40001800 	.word	0x40001800
 800fe14:	00010007 	.word	0x00010007

0800fe18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	691b      	ldr	r3, [r3, #16]
 800fe26:	f003 0302 	and.w	r3, r3, #2
 800fe2a:	2b02      	cmp	r3, #2
 800fe2c:	d122      	bne.n	800fe74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	68db      	ldr	r3, [r3, #12]
 800fe34:	f003 0302 	and.w	r3, r3, #2
 800fe38:	2b02      	cmp	r3, #2
 800fe3a:	d11b      	bne.n	800fe74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f06f 0202 	mvn.w	r2, #2
 800fe44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	699b      	ldr	r3, [r3, #24]
 800fe52:	f003 0303 	and.w	r3, r3, #3
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d003      	beq.n	800fe62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 fb0a 	bl	8010474 <HAL_TIM_IC_CaptureCallback>
 800fe60:	e005      	b.n	800fe6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 fafc 	bl	8010460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 fb0d 	bl	8010488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2200      	movs	r2, #0
 800fe72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	691b      	ldr	r3, [r3, #16]
 800fe7a:	f003 0304 	and.w	r3, r3, #4
 800fe7e:	2b04      	cmp	r3, #4
 800fe80:	d122      	bne.n	800fec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	f003 0304 	and.w	r3, r3, #4
 800fe8c:	2b04      	cmp	r3, #4
 800fe8e:	d11b      	bne.n	800fec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f06f 0204 	mvn.w	r2, #4
 800fe98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2202      	movs	r2, #2
 800fe9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	699b      	ldr	r3, [r3, #24]
 800fea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d003      	beq.n	800feb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 fae0 	bl	8010474 <HAL_TIM_IC_CaptureCallback>
 800feb4:	e005      	b.n	800fec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 fad2 	bl	8010460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f000 fae3 	bl	8010488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2200      	movs	r2, #0
 800fec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	691b      	ldr	r3, [r3, #16]
 800fece:	f003 0308 	and.w	r3, r3, #8
 800fed2:	2b08      	cmp	r3, #8
 800fed4:	d122      	bne.n	800ff1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	f003 0308 	and.w	r3, r3, #8
 800fee0:	2b08      	cmp	r3, #8
 800fee2:	d11b      	bne.n	800ff1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f06f 0208 	mvn.w	r2, #8
 800feec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2204      	movs	r2, #4
 800fef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	69db      	ldr	r3, [r3, #28]
 800fefa:	f003 0303 	and.w	r3, r3, #3
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d003      	beq.n	800ff0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 fab6 	bl	8010474 <HAL_TIM_IC_CaptureCallback>
 800ff08:	e005      	b.n	800ff16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f000 faa8 	bl	8010460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 fab9 	bl	8010488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	691b      	ldr	r3, [r3, #16]
 800ff22:	f003 0310 	and.w	r3, r3, #16
 800ff26:	2b10      	cmp	r3, #16
 800ff28:	d122      	bne.n	800ff70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	f003 0310 	and.w	r3, r3, #16
 800ff34:	2b10      	cmp	r3, #16
 800ff36:	d11b      	bne.n	800ff70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f06f 0210 	mvn.w	r2, #16
 800ff40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2208      	movs	r2, #8
 800ff46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	69db      	ldr	r3, [r3, #28]
 800ff4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d003      	beq.n	800ff5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f000 fa8c 	bl	8010474 <HAL_TIM_IC_CaptureCallback>
 800ff5c:	e005      	b.n	800ff6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f000 fa7e 	bl	8010460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f000 fa8f 	bl	8010488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	f003 0301 	and.w	r3, r3, #1
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d10e      	bne.n	800ff9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	f003 0301 	and.w	r3, r3, #1
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d107      	bne.n	800ff9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f06f 0201 	mvn.w	r2, #1
 800ff94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f7f0 fd6a 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	691b      	ldr	r3, [r3, #16]
 800ffa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffa6:	2b80      	cmp	r3, #128	; 0x80
 800ffa8:	d10e      	bne.n	800ffc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	68db      	ldr	r3, [r3, #12]
 800ffb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffb4:	2b80      	cmp	r3, #128	; 0x80
 800ffb6:	d107      	bne.n	800ffc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ffc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 ffb0 	bl	8010f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	691b      	ldr	r3, [r3, #16]
 800ffce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffd6:	d10e      	bne.n	800fff6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffe2:	2b80      	cmp	r3, #128	; 0x80
 800ffe4:	d107      	bne.n	800fff6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ffee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 ffa3 	bl	8010f3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	691b      	ldr	r3, [r3, #16]
 800fffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010000:	2b40      	cmp	r3, #64	; 0x40
 8010002:	d10e      	bne.n	8010022 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	68db      	ldr	r3, [r3, #12]
 801000a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801000e:	2b40      	cmp	r3, #64	; 0x40
 8010010:	d107      	bne.n	8010022 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801001a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 fa3d 	bl	801049c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	691b      	ldr	r3, [r3, #16]
 8010028:	f003 0320 	and.w	r3, r3, #32
 801002c:	2b20      	cmp	r3, #32
 801002e:	d10e      	bne.n	801004e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	f003 0320 	and.w	r3, r3, #32
 801003a:	2b20      	cmp	r3, #32
 801003c:	d107      	bne.n	801004e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f06f 0220 	mvn.w	r2, #32
 8010046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f000 ff63 	bl	8010f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801004e:	bf00      	nop
 8010050:	3708      	adds	r7, #8
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
	...

08010058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801006a:	2b01      	cmp	r3, #1
 801006c:	d101      	bne.n	8010072 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801006e:	2302      	movs	r3, #2
 8010070:	e0fd      	b.n	801026e <HAL_TIM_PWM_ConfigChannel+0x216>
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2201      	movs	r2, #1
 8010076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2b14      	cmp	r3, #20
 801007e:	f200 80f0 	bhi.w	8010262 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8010082:	a201      	add	r2, pc, #4	; (adr r2, 8010088 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8010084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010088:	080100dd 	.word	0x080100dd
 801008c:	08010263 	.word	0x08010263
 8010090:	08010263 	.word	0x08010263
 8010094:	08010263 	.word	0x08010263
 8010098:	0801011d 	.word	0x0801011d
 801009c:	08010263 	.word	0x08010263
 80100a0:	08010263 	.word	0x08010263
 80100a4:	08010263 	.word	0x08010263
 80100a8:	0801015f 	.word	0x0801015f
 80100ac:	08010263 	.word	0x08010263
 80100b0:	08010263 	.word	0x08010263
 80100b4:	08010263 	.word	0x08010263
 80100b8:	0801019f 	.word	0x0801019f
 80100bc:	08010263 	.word	0x08010263
 80100c0:	08010263 	.word	0x08010263
 80100c4:	08010263 	.word	0x08010263
 80100c8:	080101e1 	.word	0x080101e1
 80100cc:	08010263 	.word	0x08010263
 80100d0:	08010263 	.word	0x08010263
 80100d4:	08010263 	.word	0x08010263
 80100d8:	08010221 	.word	0x08010221
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	68b9      	ldr	r1, [r7, #8]
 80100e2:	4618      	mov	r0, r3
 80100e4:	f000 fa7e 	bl	80105e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	699a      	ldr	r2, [r3, #24]
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	f042 0208 	orr.w	r2, r2, #8
 80100f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	699a      	ldr	r2, [r3, #24]
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f022 0204 	bic.w	r2, r2, #4
 8010106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	6999      	ldr	r1, [r3, #24]
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	691a      	ldr	r2, [r3, #16]
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	430a      	orrs	r2, r1
 8010118:	619a      	str	r2, [r3, #24]
      break;
 801011a:	e0a3      	b.n	8010264 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	68b9      	ldr	r1, [r7, #8]
 8010122:	4618      	mov	r0, r3
 8010124:	f000 faee 	bl	8010704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	699a      	ldr	r2, [r3, #24]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	699a      	ldr	r2, [r3, #24]
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	6999      	ldr	r1, [r3, #24]
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	691b      	ldr	r3, [r3, #16]
 8010152:	021a      	lsls	r2, r3, #8
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	430a      	orrs	r2, r1
 801015a:	619a      	str	r2, [r3, #24]
      break;
 801015c:	e082      	b.n	8010264 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	68b9      	ldr	r1, [r7, #8]
 8010164:	4618      	mov	r0, r3
 8010166:	f000 fb57 	bl	8010818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	69da      	ldr	r2, [r3, #28]
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f042 0208 	orr.w	r2, r2, #8
 8010178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	69da      	ldr	r2, [r3, #28]
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f022 0204 	bic.w	r2, r2, #4
 8010188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	69d9      	ldr	r1, [r3, #28]
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	691a      	ldr	r2, [r3, #16]
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	430a      	orrs	r2, r1
 801019a:	61da      	str	r2, [r3, #28]
      break;
 801019c:	e062      	b.n	8010264 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	68b9      	ldr	r1, [r7, #8]
 80101a4:	4618      	mov	r0, r3
 80101a6:	f000 fbbd 	bl	8010924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	69da      	ldr	r2, [r3, #28]
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80101b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	69da      	ldr	r2, [r3, #28]
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80101c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	69d9      	ldr	r1, [r3, #28]
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	691b      	ldr	r3, [r3, #16]
 80101d4:	021a      	lsls	r2, r3, #8
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	430a      	orrs	r2, r1
 80101dc:	61da      	str	r2, [r3, #28]
      break;
 80101de:	e041      	b.n	8010264 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	68b9      	ldr	r1, [r7, #8]
 80101e6:	4618      	mov	r0, r3
 80101e8:	f000 fc04 	bl	80109f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f042 0208 	orr.w	r2, r2, #8
 80101fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f022 0204 	bic.w	r2, r2, #4
 801020a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	691a      	ldr	r2, [r3, #16]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	430a      	orrs	r2, r1
 801021c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801021e:	e021      	b.n	8010264 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	68b9      	ldr	r1, [r7, #8]
 8010226:	4618      	mov	r0, r3
 8010228:	f000 fc46 	bl	8010ab8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801023a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801024a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	691b      	ldr	r3, [r3, #16]
 8010256:	021a      	lsls	r2, r3, #8
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	430a      	orrs	r2, r1
 801025e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010260:	e000      	b.n	8010264 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8010262:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2200      	movs	r2, #0
 8010268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	3710      	adds	r7, #16
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop

08010278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010288:	2b01      	cmp	r3, #1
 801028a:	d101      	bne.n	8010290 <HAL_TIM_ConfigClockSource+0x18>
 801028c:	2302      	movs	r3, #2
 801028e:	e0db      	b.n	8010448 <HAL_TIM_ConfigClockSource+0x1d0>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2201      	movs	r2, #1
 8010294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2202      	movs	r2, #2
 801029c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	689b      	ldr	r3, [r3, #8]
 80102a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80102a8:	68fa      	ldr	r2, [r7, #12]
 80102aa:	4b69      	ldr	r3, [pc, #420]	; (8010450 <HAL_TIM_ConfigClockSource+0x1d8>)
 80102ac:	4013      	ands	r3, r2
 80102ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80102b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	68fa      	ldr	r2, [r7, #12]
 80102be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	4a63      	ldr	r2, [pc, #396]	; (8010454 <HAL_TIM_ConfigClockSource+0x1dc>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	f000 80a9 	beq.w	801041e <HAL_TIM_ConfigClockSource+0x1a6>
 80102cc:	4a61      	ldr	r2, [pc, #388]	; (8010454 <HAL_TIM_ConfigClockSource+0x1dc>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	f200 80ae 	bhi.w	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 80102d4:	4a60      	ldr	r2, [pc, #384]	; (8010458 <HAL_TIM_ConfigClockSource+0x1e0>)
 80102d6:	4293      	cmp	r3, r2
 80102d8:	f000 80a1 	beq.w	801041e <HAL_TIM_ConfigClockSource+0x1a6>
 80102dc:	4a5e      	ldr	r2, [pc, #376]	; (8010458 <HAL_TIM_ConfigClockSource+0x1e0>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	f200 80a6 	bhi.w	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 80102e4:	4a5d      	ldr	r2, [pc, #372]	; (801045c <HAL_TIM_ConfigClockSource+0x1e4>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	f000 8099 	beq.w	801041e <HAL_TIM_ConfigClockSource+0x1a6>
 80102ec:	4a5b      	ldr	r2, [pc, #364]	; (801045c <HAL_TIM_ConfigClockSource+0x1e4>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	f200 809e 	bhi.w	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 80102f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80102f8:	f000 8091 	beq.w	801041e <HAL_TIM_ConfigClockSource+0x1a6>
 80102fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010300:	f200 8096 	bhi.w	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 8010304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010308:	f000 8089 	beq.w	801041e <HAL_TIM_ConfigClockSource+0x1a6>
 801030c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010310:	f200 808e 	bhi.w	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 8010314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010318:	d03e      	beq.n	8010398 <HAL_TIM_ConfigClockSource+0x120>
 801031a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801031e:	f200 8087 	bhi.w	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 8010322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010326:	f000 8085 	beq.w	8010434 <HAL_TIM_ConfigClockSource+0x1bc>
 801032a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801032e:	d87f      	bhi.n	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 8010330:	2b70      	cmp	r3, #112	; 0x70
 8010332:	d01a      	beq.n	801036a <HAL_TIM_ConfigClockSource+0xf2>
 8010334:	2b70      	cmp	r3, #112	; 0x70
 8010336:	d87b      	bhi.n	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 8010338:	2b60      	cmp	r3, #96	; 0x60
 801033a:	d050      	beq.n	80103de <HAL_TIM_ConfigClockSource+0x166>
 801033c:	2b60      	cmp	r3, #96	; 0x60
 801033e:	d877      	bhi.n	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 8010340:	2b50      	cmp	r3, #80	; 0x50
 8010342:	d03c      	beq.n	80103be <HAL_TIM_ConfigClockSource+0x146>
 8010344:	2b50      	cmp	r3, #80	; 0x50
 8010346:	d873      	bhi.n	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 8010348:	2b40      	cmp	r3, #64	; 0x40
 801034a:	d058      	beq.n	80103fe <HAL_TIM_ConfigClockSource+0x186>
 801034c:	2b40      	cmp	r3, #64	; 0x40
 801034e:	d86f      	bhi.n	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 8010350:	2b30      	cmp	r3, #48	; 0x30
 8010352:	d064      	beq.n	801041e <HAL_TIM_ConfigClockSource+0x1a6>
 8010354:	2b30      	cmp	r3, #48	; 0x30
 8010356:	d86b      	bhi.n	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 8010358:	2b20      	cmp	r3, #32
 801035a:	d060      	beq.n	801041e <HAL_TIM_ConfigClockSource+0x1a6>
 801035c:	2b20      	cmp	r3, #32
 801035e:	d867      	bhi.n	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
 8010360:	2b00      	cmp	r3, #0
 8010362:	d05c      	beq.n	801041e <HAL_TIM_ConfigClockSource+0x1a6>
 8010364:	2b10      	cmp	r3, #16
 8010366:	d05a      	beq.n	801041e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8010368:	e062      	b.n	8010430 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6818      	ldr	r0, [r3, #0]
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	6899      	ldr	r1, [r3, #8]
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	685a      	ldr	r2, [r3, #4]
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	f000 fc7f 	bl	8010c7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801038c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	68fa      	ldr	r2, [r7, #12]
 8010394:	609a      	str	r2, [r3, #8]
      break;
 8010396:	e04e      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6818      	ldr	r0, [r3, #0]
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	6899      	ldr	r1, [r3, #8]
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	685a      	ldr	r2, [r3, #4]
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	f000 fc68 	bl	8010c7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	689a      	ldr	r2, [r3, #8]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80103ba:	609a      	str	r2, [r3, #8]
      break;
 80103bc:	e03b      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6818      	ldr	r0, [r3, #0]
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	6859      	ldr	r1, [r3, #4]
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	68db      	ldr	r3, [r3, #12]
 80103ca:	461a      	mov	r2, r3
 80103cc:	f000 fbd8 	bl	8010b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	2150      	movs	r1, #80	; 0x50
 80103d6:	4618      	mov	r0, r3
 80103d8:	f000 fc32 	bl	8010c40 <TIM_ITRx_SetConfig>
      break;
 80103dc:	e02b      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6818      	ldr	r0, [r3, #0]
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	6859      	ldr	r1, [r3, #4]
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	461a      	mov	r2, r3
 80103ec:	f000 fbf7 	bl	8010bde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2160      	movs	r1, #96	; 0x60
 80103f6:	4618      	mov	r0, r3
 80103f8:	f000 fc22 	bl	8010c40 <TIM_ITRx_SetConfig>
      break;
 80103fc:	e01b      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6818      	ldr	r0, [r3, #0]
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	6859      	ldr	r1, [r3, #4]
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	461a      	mov	r2, r3
 801040c:	f000 fbb8 	bl	8010b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	2140      	movs	r1, #64	; 0x40
 8010416:	4618      	mov	r0, r3
 8010418:	f000 fc12 	bl	8010c40 <TIM_ITRx_SetConfig>
      break;
 801041c:	e00b      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	4619      	mov	r1, r3
 8010428:	4610      	mov	r0, r2
 801042a:	f000 fc09 	bl	8010c40 <TIM_ITRx_SetConfig>
        break;
 801042e:	e002      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8010430:	bf00      	nop
 8010432:	e000      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8010434:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2201      	movs	r2, #1
 801043a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2200      	movs	r2, #0
 8010442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010446:	2300      	movs	r3, #0
}
 8010448:	4618      	mov	r0, r3
 801044a:	3710      	adds	r7, #16
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}
 8010450:	ffceff88 	.word	0xffceff88
 8010454:	00100040 	.word	0x00100040
 8010458:	00100030 	.word	0x00100030
 801045c:	00100020 	.word	0x00100020

08010460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010460:	b480      	push	{r7}
 8010462:	b083      	sub	sp, #12
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010468:	bf00      	nop
 801046a:	370c      	adds	r7, #12
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr

08010474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010474:	b480      	push	{r7}
 8010476:	b083      	sub	sp, #12
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801047c:	bf00      	nop
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr

08010488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010490:	bf00      	nop
 8010492:	370c      	adds	r7, #12
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	4770      	bx	lr

0801049c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80104a4:	bf00      	nop
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b085      	sub	sp, #20
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	4a40      	ldr	r2, [pc, #256]	; (80105c4 <TIM_Base_SetConfig+0x114>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d013      	beq.n	80104f0 <TIM_Base_SetConfig+0x40>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104ce:	d00f      	beq.n	80104f0 <TIM_Base_SetConfig+0x40>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	4a3d      	ldr	r2, [pc, #244]	; (80105c8 <TIM_Base_SetConfig+0x118>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d00b      	beq.n	80104f0 <TIM_Base_SetConfig+0x40>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4a3c      	ldr	r2, [pc, #240]	; (80105cc <TIM_Base_SetConfig+0x11c>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d007      	beq.n	80104f0 <TIM_Base_SetConfig+0x40>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a3b      	ldr	r2, [pc, #236]	; (80105d0 <TIM_Base_SetConfig+0x120>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d003      	beq.n	80104f0 <TIM_Base_SetConfig+0x40>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4a3a      	ldr	r2, [pc, #232]	; (80105d4 <TIM_Base_SetConfig+0x124>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d108      	bne.n	8010502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	4313      	orrs	r3, r2
 8010500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	4a2f      	ldr	r2, [pc, #188]	; (80105c4 <TIM_Base_SetConfig+0x114>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d01f      	beq.n	801054a <TIM_Base_SetConfig+0x9a>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010510:	d01b      	beq.n	801054a <TIM_Base_SetConfig+0x9a>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4a2c      	ldr	r2, [pc, #176]	; (80105c8 <TIM_Base_SetConfig+0x118>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d017      	beq.n	801054a <TIM_Base_SetConfig+0x9a>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4a2b      	ldr	r2, [pc, #172]	; (80105cc <TIM_Base_SetConfig+0x11c>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d013      	beq.n	801054a <TIM_Base_SetConfig+0x9a>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4a2a      	ldr	r2, [pc, #168]	; (80105d0 <TIM_Base_SetConfig+0x120>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d00f      	beq.n	801054a <TIM_Base_SetConfig+0x9a>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4a29      	ldr	r2, [pc, #164]	; (80105d4 <TIM_Base_SetConfig+0x124>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d00b      	beq.n	801054a <TIM_Base_SetConfig+0x9a>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4a28      	ldr	r2, [pc, #160]	; (80105d8 <TIM_Base_SetConfig+0x128>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d007      	beq.n	801054a <TIM_Base_SetConfig+0x9a>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	4a27      	ldr	r2, [pc, #156]	; (80105dc <TIM_Base_SetConfig+0x12c>)
 801053e:	4293      	cmp	r3, r2
 8010540:	d003      	beq.n	801054a <TIM_Base_SetConfig+0x9a>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	4a26      	ldr	r2, [pc, #152]	; (80105e0 <TIM_Base_SetConfig+0x130>)
 8010546:	4293      	cmp	r3, r2
 8010548:	d108      	bne.n	801055c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	68fa      	ldr	r2, [r7, #12]
 8010558:	4313      	orrs	r3, r2
 801055a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	695b      	ldr	r3, [r3, #20]
 8010566:	4313      	orrs	r3, r2
 8010568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	689a      	ldr	r2, [r3, #8]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	4a10      	ldr	r2, [pc, #64]	; (80105c4 <TIM_Base_SetConfig+0x114>)
 8010584:	4293      	cmp	r3, r2
 8010586:	d00f      	beq.n	80105a8 <TIM_Base_SetConfig+0xf8>
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	4a12      	ldr	r2, [pc, #72]	; (80105d4 <TIM_Base_SetConfig+0x124>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d00b      	beq.n	80105a8 <TIM_Base_SetConfig+0xf8>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4a11      	ldr	r2, [pc, #68]	; (80105d8 <TIM_Base_SetConfig+0x128>)
 8010594:	4293      	cmp	r3, r2
 8010596:	d007      	beq.n	80105a8 <TIM_Base_SetConfig+0xf8>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	4a10      	ldr	r2, [pc, #64]	; (80105dc <TIM_Base_SetConfig+0x12c>)
 801059c:	4293      	cmp	r3, r2
 801059e:	d003      	beq.n	80105a8 <TIM_Base_SetConfig+0xf8>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	4a0f      	ldr	r2, [pc, #60]	; (80105e0 <TIM_Base_SetConfig+0x130>)
 80105a4:	4293      	cmp	r3, r2
 80105a6:	d103      	bne.n	80105b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	691a      	ldr	r2, [r3, #16]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2201      	movs	r2, #1
 80105b4:	615a      	str	r2, [r3, #20]
}
 80105b6:	bf00      	nop
 80105b8:	3714      	adds	r7, #20
 80105ba:	46bd      	mov	sp, r7
 80105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c0:	4770      	bx	lr
 80105c2:	bf00      	nop
 80105c4:	40010000 	.word	0x40010000
 80105c8:	40000400 	.word	0x40000400
 80105cc:	40000800 	.word	0x40000800
 80105d0:	40000c00 	.word	0x40000c00
 80105d4:	40010400 	.word	0x40010400
 80105d8:	40014000 	.word	0x40014000
 80105dc:	40014400 	.word	0x40014400
 80105e0:	40014800 	.word	0x40014800

080105e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b087      	sub	sp, #28
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6a1b      	ldr	r3, [r3, #32]
 80105f2:	f023 0201 	bic.w	r2, r3, #1
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6a1b      	ldr	r3, [r3, #32]
 80105fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	699b      	ldr	r3, [r3, #24]
 801060a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801060c:	68fa      	ldr	r2, [r7, #12]
 801060e:	4b37      	ldr	r3, [pc, #220]	; (80106ec <TIM_OC1_SetConfig+0x108>)
 8010610:	4013      	ands	r3, r2
 8010612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f023 0303 	bic.w	r3, r3, #3
 801061a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	4313      	orrs	r3, r2
 8010624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	f023 0302 	bic.w	r3, r3, #2
 801062c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	697a      	ldr	r2, [r7, #20]
 8010634:	4313      	orrs	r3, r2
 8010636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	4a2d      	ldr	r2, [pc, #180]	; (80106f0 <TIM_OC1_SetConfig+0x10c>)
 801063c:	4293      	cmp	r3, r2
 801063e:	d00f      	beq.n	8010660 <TIM_OC1_SetConfig+0x7c>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	4a2c      	ldr	r2, [pc, #176]	; (80106f4 <TIM_OC1_SetConfig+0x110>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d00b      	beq.n	8010660 <TIM_OC1_SetConfig+0x7c>
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	4a2b      	ldr	r2, [pc, #172]	; (80106f8 <TIM_OC1_SetConfig+0x114>)
 801064c:	4293      	cmp	r3, r2
 801064e:	d007      	beq.n	8010660 <TIM_OC1_SetConfig+0x7c>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	4a2a      	ldr	r2, [pc, #168]	; (80106fc <TIM_OC1_SetConfig+0x118>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d003      	beq.n	8010660 <TIM_OC1_SetConfig+0x7c>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	4a29      	ldr	r2, [pc, #164]	; (8010700 <TIM_OC1_SetConfig+0x11c>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d10c      	bne.n	801067a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	f023 0308 	bic.w	r3, r3, #8
 8010666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	697a      	ldr	r2, [r7, #20]
 801066e:	4313      	orrs	r3, r2
 8010670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	f023 0304 	bic.w	r3, r3, #4
 8010678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4a1c      	ldr	r2, [pc, #112]	; (80106f0 <TIM_OC1_SetConfig+0x10c>)
 801067e:	4293      	cmp	r3, r2
 8010680:	d00f      	beq.n	80106a2 <TIM_OC1_SetConfig+0xbe>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4a1b      	ldr	r2, [pc, #108]	; (80106f4 <TIM_OC1_SetConfig+0x110>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d00b      	beq.n	80106a2 <TIM_OC1_SetConfig+0xbe>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	4a1a      	ldr	r2, [pc, #104]	; (80106f8 <TIM_OC1_SetConfig+0x114>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d007      	beq.n	80106a2 <TIM_OC1_SetConfig+0xbe>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4a19      	ldr	r2, [pc, #100]	; (80106fc <TIM_OC1_SetConfig+0x118>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d003      	beq.n	80106a2 <TIM_OC1_SetConfig+0xbe>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4a18      	ldr	r2, [pc, #96]	; (8010700 <TIM_OC1_SetConfig+0x11c>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d111      	bne.n	80106c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80106a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80106b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	695b      	ldr	r3, [r3, #20]
 80106b6:	693a      	ldr	r2, [r7, #16]
 80106b8:	4313      	orrs	r3, r2
 80106ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	699b      	ldr	r3, [r3, #24]
 80106c0:	693a      	ldr	r2, [r7, #16]
 80106c2:	4313      	orrs	r3, r2
 80106c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	693a      	ldr	r2, [r7, #16]
 80106ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	68fa      	ldr	r2, [r7, #12]
 80106d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	685a      	ldr	r2, [r3, #4]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	697a      	ldr	r2, [r7, #20]
 80106de:	621a      	str	r2, [r3, #32]
}
 80106e0:	bf00      	nop
 80106e2:	371c      	adds	r7, #28
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr
 80106ec:	fffeff8f 	.word	0xfffeff8f
 80106f0:	40010000 	.word	0x40010000
 80106f4:	40010400 	.word	0x40010400
 80106f8:	40014000 	.word	0x40014000
 80106fc:	40014400 	.word	0x40014400
 8010700:	40014800 	.word	0x40014800

08010704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010704:	b480      	push	{r7}
 8010706:	b087      	sub	sp, #28
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6a1b      	ldr	r3, [r3, #32]
 8010712:	f023 0210 	bic.w	r2, r3, #16
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6a1b      	ldr	r3, [r3, #32]
 801071e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	699b      	ldr	r3, [r3, #24]
 801072a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801072c:	68fa      	ldr	r2, [r7, #12]
 801072e:	4b34      	ldr	r3, [pc, #208]	; (8010800 <TIM_OC2_SetConfig+0xfc>)
 8010730:	4013      	ands	r3, r2
 8010732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801073a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	021b      	lsls	r3, r3, #8
 8010742:	68fa      	ldr	r2, [r7, #12]
 8010744:	4313      	orrs	r3, r2
 8010746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	f023 0320 	bic.w	r3, r3, #32
 801074e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	011b      	lsls	r3, r3, #4
 8010756:	697a      	ldr	r2, [r7, #20]
 8010758:	4313      	orrs	r3, r2
 801075a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	4a29      	ldr	r2, [pc, #164]	; (8010804 <TIM_OC2_SetConfig+0x100>)
 8010760:	4293      	cmp	r3, r2
 8010762:	d003      	beq.n	801076c <TIM_OC2_SetConfig+0x68>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	4a28      	ldr	r2, [pc, #160]	; (8010808 <TIM_OC2_SetConfig+0x104>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d10d      	bne.n	8010788 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	011b      	lsls	r3, r3, #4
 801077a:	697a      	ldr	r2, [r7, #20]
 801077c:	4313      	orrs	r3, r2
 801077e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	4a1e      	ldr	r2, [pc, #120]	; (8010804 <TIM_OC2_SetConfig+0x100>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d00f      	beq.n	80107b0 <TIM_OC2_SetConfig+0xac>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	4a1d      	ldr	r2, [pc, #116]	; (8010808 <TIM_OC2_SetConfig+0x104>)
 8010794:	4293      	cmp	r3, r2
 8010796:	d00b      	beq.n	80107b0 <TIM_OC2_SetConfig+0xac>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	4a1c      	ldr	r2, [pc, #112]	; (801080c <TIM_OC2_SetConfig+0x108>)
 801079c:	4293      	cmp	r3, r2
 801079e:	d007      	beq.n	80107b0 <TIM_OC2_SetConfig+0xac>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	4a1b      	ldr	r2, [pc, #108]	; (8010810 <TIM_OC2_SetConfig+0x10c>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d003      	beq.n	80107b0 <TIM_OC2_SetConfig+0xac>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	4a1a      	ldr	r2, [pc, #104]	; (8010814 <TIM_OC2_SetConfig+0x110>)
 80107ac:	4293      	cmp	r3, r2
 80107ae:	d113      	bne.n	80107d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80107b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80107be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	695b      	ldr	r3, [r3, #20]
 80107c4:	009b      	lsls	r3, r3, #2
 80107c6:	693a      	ldr	r2, [r7, #16]
 80107c8:	4313      	orrs	r3, r2
 80107ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	699b      	ldr	r3, [r3, #24]
 80107d0:	009b      	lsls	r3, r3, #2
 80107d2:	693a      	ldr	r2, [r7, #16]
 80107d4:	4313      	orrs	r3, r2
 80107d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	693a      	ldr	r2, [r7, #16]
 80107dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	68fa      	ldr	r2, [r7, #12]
 80107e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	685a      	ldr	r2, [r3, #4]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	697a      	ldr	r2, [r7, #20]
 80107f0:	621a      	str	r2, [r3, #32]
}
 80107f2:	bf00      	nop
 80107f4:	371c      	adds	r7, #28
 80107f6:	46bd      	mov	sp, r7
 80107f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fc:	4770      	bx	lr
 80107fe:	bf00      	nop
 8010800:	feff8fff 	.word	0xfeff8fff
 8010804:	40010000 	.word	0x40010000
 8010808:	40010400 	.word	0x40010400
 801080c:	40014000 	.word	0x40014000
 8010810:	40014400 	.word	0x40014400
 8010814:	40014800 	.word	0x40014800

08010818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010818:	b480      	push	{r7}
 801081a:	b087      	sub	sp, #28
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6a1b      	ldr	r3, [r3, #32]
 8010826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6a1b      	ldr	r3, [r3, #32]
 8010832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	69db      	ldr	r3, [r3, #28]
 801083e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f023 0303 	bic.w	r3, r3, #3
 801084e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	4313      	orrs	r3, r2
 8010858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	689b      	ldr	r3, [r3, #8]
 8010866:	021b      	lsls	r3, r3, #8
 8010868:	697a      	ldr	r2, [r7, #20]
 801086a:	4313      	orrs	r3, r2
 801086c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	4a27      	ldr	r2, [pc, #156]	; (8010910 <TIM_OC3_SetConfig+0xf8>)
 8010872:	4293      	cmp	r3, r2
 8010874:	d003      	beq.n	801087e <TIM_OC3_SetConfig+0x66>
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	4a26      	ldr	r2, [pc, #152]	; (8010914 <TIM_OC3_SetConfig+0xfc>)
 801087a:	4293      	cmp	r3, r2
 801087c:	d10d      	bne.n	801089a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	68db      	ldr	r3, [r3, #12]
 801088a:	021b      	lsls	r3, r3, #8
 801088c:	697a      	ldr	r2, [r7, #20]
 801088e:	4313      	orrs	r3, r2
 8010890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4a1c      	ldr	r2, [pc, #112]	; (8010910 <TIM_OC3_SetConfig+0xf8>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d00f      	beq.n	80108c2 <TIM_OC3_SetConfig+0xaa>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	4a1b      	ldr	r2, [pc, #108]	; (8010914 <TIM_OC3_SetConfig+0xfc>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d00b      	beq.n	80108c2 <TIM_OC3_SetConfig+0xaa>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4a1a      	ldr	r2, [pc, #104]	; (8010918 <TIM_OC3_SetConfig+0x100>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d007      	beq.n	80108c2 <TIM_OC3_SetConfig+0xaa>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	4a19      	ldr	r2, [pc, #100]	; (801091c <TIM_OC3_SetConfig+0x104>)
 80108b6:	4293      	cmp	r3, r2
 80108b8:	d003      	beq.n	80108c2 <TIM_OC3_SetConfig+0xaa>
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4a18      	ldr	r2, [pc, #96]	; (8010920 <TIM_OC3_SetConfig+0x108>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d113      	bne.n	80108ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80108c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80108d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	695b      	ldr	r3, [r3, #20]
 80108d6:	011b      	lsls	r3, r3, #4
 80108d8:	693a      	ldr	r2, [r7, #16]
 80108da:	4313      	orrs	r3, r2
 80108dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	699b      	ldr	r3, [r3, #24]
 80108e2:	011b      	lsls	r3, r3, #4
 80108e4:	693a      	ldr	r2, [r7, #16]
 80108e6:	4313      	orrs	r3, r2
 80108e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	693a      	ldr	r2, [r7, #16]
 80108ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	685a      	ldr	r2, [r3, #4]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	697a      	ldr	r2, [r7, #20]
 8010902:	621a      	str	r2, [r3, #32]
}
 8010904:	bf00      	nop
 8010906:	371c      	adds	r7, #28
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr
 8010910:	40010000 	.word	0x40010000
 8010914:	40010400 	.word	0x40010400
 8010918:	40014000 	.word	0x40014000
 801091c:	40014400 	.word	0x40014400
 8010920:	40014800 	.word	0x40014800

08010924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010924:	b480      	push	{r7}
 8010926:	b087      	sub	sp, #28
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6a1b      	ldr	r3, [r3, #32]
 8010932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a1b      	ldr	r3, [r3, #32]
 801093e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	69db      	ldr	r3, [r3, #28]
 801094a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801095a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	021b      	lsls	r3, r3, #8
 8010962:	68fa      	ldr	r2, [r7, #12]
 8010964:	4313      	orrs	r3, r2
 8010966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801096e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	031b      	lsls	r3, r3, #12
 8010976:	693a      	ldr	r2, [r7, #16]
 8010978:	4313      	orrs	r3, r2
 801097a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	4a18      	ldr	r2, [pc, #96]	; (80109e0 <TIM_OC4_SetConfig+0xbc>)
 8010980:	4293      	cmp	r3, r2
 8010982:	d00f      	beq.n	80109a4 <TIM_OC4_SetConfig+0x80>
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	4a17      	ldr	r2, [pc, #92]	; (80109e4 <TIM_OC4_SetConfig+0xc0>)
 8010988:	4293      	cmp	r3, r2
 801098a:	d00b      	beq.n	80109a4 <TIM_OC4_SetConfig+0x80>
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	4a16      	ldr	r2, [pc, #88]	; (80109e8 <TIM_OC4_SetConfig+0xc4>)
 8010990:	4293      	cmp	r3, r2
 8010992:	d007      	beq.n	80109a4 <TIM_OC4_SetConfig+0x80>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	4a15      	ldr	r2, [pc, #84]	; (80109ec <TIM_OC4_SetConfig+0xc8>)
 8010998:	4293      	cmp	r3, r2
 801099a:	d003      	beq.n	80109a4 <TIM_OC4_SetConfig+0x80>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	4a14      	ldr	r2, [pc, #80]	; (80109f0 <TIM_OC4_SetConfig+0xcc>)
 80109a0:	4293      	cmp	r3, r2
 80109a2:	d109      	bne.n	80109b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80109aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	695b      	ldr	r3, [r3, #20]
 80109b0:	019b      	lsls	r3, r3, #6
 80109b2:	697a      	ldr	r2, [r7, #20]
 80109b4:	4313      	orrs	r3, r2
 80109b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	697a      	ldr	r2, [r7, #20]
 80109bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	68fa      	ldr	r2, [r7, #12]
 80109c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	685a      	ldr	r2, [r3, #4]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	693a      	ldr	r2, [r7, #16]
 80109d0:	621a      	str	r2, [r3, #32]
}
 80109d2:	bf00      	nop
 80109d4:	371c      	adds	r7, #28
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr
 80109de:	bf00      	nop
 80109e0:	40010000 	.word	0x40010000
 80109e4:	40010400 	.word	0x40010400
 80109e8:	40014000 	.word	0x40014000
 80109ec:	40014400 	.word	0x40014400
 80109f0:	40014800 	.word	0x40014800

080109f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80109f4:	b480      	push	{r7}
 80109f6:	b087      	sub	sp, #28
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6a1b      	ldr	r3, [r3, #32]
 8010a02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6a1b      	ldr	r3, [r3, #32]
 8010a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	68fa      	ldr	r2, [r7, #12]
 8010a2a:	4313      	orrs	r3, r2
 8010a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010a34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	689b      	ldr	r3, [r3, #8]
 8010a3a:	041b      	lsls	r3, r3, #16
 8010a3c:	693a      	ldr	r2, [r7, #16]
 8010a3e:	4313      	orrs	r3, r2
 8010a40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	4a17      	ldr	r2, [pc, #92]	; (8010aa4 <TIM_OC5_SetConfig+0xb0>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d00f      	beq.n	8010a6a <TIM_OC5_SetConfig+0x76>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4a16      	ldr	r2, [pc, #88]	; (8010aa8 <TIM_OC5_SetConfig+0xb4>)
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	d00b      	beq.n	8010a6a <TIM_OC5_SetConfig+0x76>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4a15      	ldr	r2, [pc, #84]	; (8010aac <TIM_OC5_SetConfig+0xb8>)
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d007      	beq.n	8010a6a <TIM_OC5_SetConfig+0x76>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	4a14      	ldr	r2, [pc, #80]	; (8010ab0 <TIM_OC5_SetConfig+0xbc>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d003      	beq.n	8010a6a <TIM_OC5_SetConfig+0x76>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	4a13      	ldr	r2, [pc, #76]	; (8010ab4 <TIM_OC5_SetConfig+0xc0>)
 8010a66:	4293      	cmp	r3, r2
 8010a68:	d109      	bne.n	8010a7e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010a70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	695b      	ldr	r3, [r3, #20]
 8010a76:	021b      	lsls	r3, r3, #8
 8010a78:	697a      	ldr	r2, [r7, #20]
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	697a      	ldr	r2, [r7, #20]
 8010a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	68fa      	ldr	r2, [r7, #12]
 8010a88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	685a      	ldr	r2, [r3, #4]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	693a      	ldr	r2, [r7, #16]
 8010a96:	621a      	str	r2, [r3, #32]
}
 8010a98:	bf00      	nop
 8010a9a:	371c      	adds	r7, #28
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr
 8010aa4:	40010000 	.word	0x40010000
 8010aa8:	40010400 	.word	0x40010400
 8010aac:	40014000 	.word	0x40014000
 8010ab0:	40014400 	.word	0x40014400
 8010ab4:	40014800 	.word	0x40014800

08010ab8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b087      	sub	sp, #28
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6a1b      	ldr	r3, [r3, #32]
 8010ac6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6a1b      	ldr	r3, [r3, #32]
 8010ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	021b      	lsls	r3, r3, #8
 8010aee:	68fa      	ldr	r2, [r7, #12]
 8010af0:	4313      	orrs	r3, r2
 8010af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	689b      	ldr	r3, [r3, #8]
 8010b00:	051b      	lsls	r3, r3, #20
 8010b02:	693a      	ldr	r2, [r7, #16]
 8010b04:	4313      	orrs	r3, r2
 8010b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	4a18      	ldr	r2, [pc, #96]	; (8010b6c <TIM_OC6_SetConfig+0xb4>)
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d00f      	beq.n	8010b30 <TIM_OC6_SetConfig+0x78>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	4a17      	ldr	r2, [pc, #92]	; (8010b70 <TIM_OC6_SetConfig+0xb8>)
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d00b      	beq.n	8010b30 <TIM_OC6_SetConfig+0x78>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	4a16      	ldr	r2, [pc, #88]	; (8010b74 <TIM_OC6_SetConfig+0xbc>)
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d007      	beq.n	8010b30 <TIM_OC6_SetConfig+0x78>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	4a15      	ldr	r2, [pc, #84]	; (8010b78 <TIM_OC6_SetConfig+0xc0>)
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d003      	beq.n	8010b30 <TIM_OC6_SetConfig+0x78>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	4a14      	ldr	r2, [pc, #80]	; (8010b7c <TIM_OC6_SetConfig+0xc4>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d109      	bne.n	8010b44 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010b36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	695b      	ldr	r3, [r3, #20]
 8010b3c:	029b      	lsls	r3, r3, #10
 8010b3e:	697a      	ldr	r2, [r7, #20]
 8010b40:	4313      	orrs	r3, r2
 8010b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	697a      	ldr	r2, [r7, #20]
 8010b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	685a      	ldr	r2, [r3, #4]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	693a      	ldr	r2, [r7, #16]
 8010b5c:	621a      	str	r2, [r3, #32]
}
 8010b5e:	bf00      	nop
 8010b60:	371c      	adds	r7, #28
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop
 8010b6c:	40010000 	.word	0x40010000
 8010b70:	40010400 	.word	0x40010400
 8010b74:	40014000 	.word	0x40014000
 8010b78:	40014400 	.word	0x40014400
 8010b7c:	40014800 	.word	0x40014800

08010b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b087      	sub	sp, #28
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	6a1b      	ldr	r3, [r3, #32]
 8010b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	6a1b      	ldr	r3, [r3, #32]
 8010b96:	f023 0201 	bic.w	r2, r3, #1
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	699b      	ldr	r3, [r3, #24]
 8010ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	011b      	lsls	r3, r3, #4
 8010bb0:	693a      	ldr	r2, [r7, #16]
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	f023 030a 	bic.w	r3, r3, #10
 8010bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010bbe:	697a      	ldr	r2, [r7, #20]
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	693a      	ldr	r2, [r7, #16]
 8010bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	697a      	ldr	r2, [r7, #20]
 8010bd0:	621a      	str	r2, [r3, #32]
}
 8010bd2:	bf00      	nop
 8010bd4:	371c      	adds	r7, #28
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr

08010bde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010bde:	b480      	push	{r7}
 8010be0:	b087      	sub	sp, #28
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	60f8      	str	r0, [r7, #12]
 8010be6:	60b9      	str	r1, [r7, #8]
 8010be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	6a1b      	ldr	r3, [r3, #32]
 8010bee:	f023 0210 	bic.w	r2, r3, #16
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	699b      	ldr	r3, [r3, #24]
 8010bfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	6a1b      	ldr	r3, [r3, #32]
 8010c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	031b      	lsls	r3, r3, #12
 8010c0e:	697a      	ldr	r2, [r7, #20]
 8010c10:	4313      	orrs	r3, r2
 8010c12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010c1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	011b      	lsls	r3, r3, #4
 8010c20:	693a      	ldr	r2, [r7, #16]
 8010c22:	4313      	orrs	r3, r2
 8010c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	697a      	ldr	r2, [r7, #20]
 8010c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	693a      	ldr	r2, [r7, #16]
 8010c30:	621a      	str	r2, [r3, #32]
}
 8010c32:	bf00      	nop
 8010c34:	371c      	adds	r7, #28
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr
	...

08010c40 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b085      	sub	sp, #20
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	689b      	ldr	r3, [r3, #8]
 8010c4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	4b09      	ldr	r3, [pc, #36]	; (8010c78 <TIM_ITRx_SetConfig+0x38>)
 8010c54:	4013      	ands	r3, r2
 8010c56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010c58:	683a      	ldr	r2, [r7, #0]
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	4313      	orrs	r3, r2
 8010c5e:	f043 0307 	orr.w	r3, r3, #7
 8010c62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	68fa      	ldr	r2, [r7, #12]
 8010c68:	609a      	str	r2, [r3, #8]
}
 8010c6a:	bf00      	nop
 8010c6c:	3714      	adds	r7, #20
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c74:	4770      	bx	lr
 8010c76:	bf00      	nop
 8010c78:	ffcfff8f 	.word	0xffcfff8f

08010c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b087      	sub	sp, #28
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	60b9      	str	r1, [r7, #8]
 8010c86:	607a      	str	r2, [r7, #4]
 8010c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	689b      	ldr	r3, [r3, #8]
 8010c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	021a      	lsls	r2, r3, #8
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	431a      	orrs	r2, r3
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	4313      	orrs	r3, r2
 8010ca4:	697a      	ldr	r2, [r7, #20]
 8010ca6:	4313      	orrs	r3, r2
 8010ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	697a      	ldr	r2, [r7, #20]
 8010cae:	609a      	str	r2, [r3, #8]
}
 8010cb0:	bf00      	nop
 8010cb2:	371c      	adds	r7, #28
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b087      	sub	sp, #28
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	60f8      	str	r0, [r7, #12]
 8010cc4:	60b9      	str	r1, [r7, #8]
 8010cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	f003 031f 	and.w	r3, r3, #31
 8010cce:	2201      	movs	r2, #1
 8010cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8010cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	6a1a      	ldr	r2, [r3, #32]
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	43db      	mvns	r3, r3
 8010cde:	401a      	ands	r2, r3
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	6a1a      	ldr	r2, [r3, #32]
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	f003 031f 	and.w	r3, r3, #31
 8010cee:	6879      	ldr	r1, [r7, #4]
 8010cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8010cf4:	431a      	orrs	r2, r3
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	621a      	str	r2, [r3, #32]
}
 8010cfa:	bf00      	nop
 8010cfc:	371c      	adds	r7, #28
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d04:	4770      	bx	lr
	...

08010d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b085      	sub	sp, #20
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d101      	bne.n	8010d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010d1c:	2302      	movs	r3, #2
 8010d1e:	e068      	b.n	8010df2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2201      	movs	r2, #1
 8010d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2202      	movs	r2, #2
 8010d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	689b      	ldr	r3, [r3, #8]
 8010d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4a2e      	ldr	r2, [pc, #184]	; (8010e00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010d46:	4293      	cmp	r3, r2
 8010d48:	d004      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	4a2d      	ldr	r2, [pc, #180]	; (8010e04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010d50:	4293      	cmp	r3, r2
 8010d52:	d108      	bne.n	8010d66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010d5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	685b      	ldr	r3, [r3, #4]
 8010d60:	68fa      	ldr	r2, [r7, #12]
 8010d62:	4313      	orrs	r3, r2
 8010d64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	4313      	orrs	r3, r2
 8010d76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	68fa      	ldr	r2, [r7, #12]
 8010d7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	4a1e      	ldr	r2, [pc, #120]	; (8010e00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d01d      	beq.n	8010dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d92:	d018      	beq.n	8010dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	4a1b      	ldr	r2, [pc, #108]	; (8010e08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d013      	beq.n	8010dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	4a1a      	ldr	r2, [pc, #104]	; (8010e0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d00e      	beq.n	8010dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	4a18      	ldr	r2, [pc, #96]	; (8010e10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d009      	beq.n	8010dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4a13      	ldr	r2, [pc, #76]	; (8010e04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d004      	beq.n	8010dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4a14      	ldr	r2, [pc, #80]	; (8010e14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d10c      	bne.n	8010de0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	689b      	ldr	r3, [r3, #8]
 8010dd2:	68ba      	ldr	r2, [r7, #8]
 8010dd4:	4313      	orrs	r3, r2
 8010dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	68ba      	ldr	r2, [r7, #8]
 8010dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2201      	movs	r2, #1
 8010de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2200      	movs	r2, #0
 8010dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010df0:	2300      	movs	r3, #0
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3714      	adds	r7, #20
 8010df6:	46bd      	mov	sp, r7
 8010df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfc:	4770      	bx	lr
 8010dfe:	bf00      	nop
 8010e00:	40010000 	.word	0x40010000
 8010e04:	40010400 	.word	0x40010400
 8010e08:	40000400 	.word	0x40000400
 8010e0c:	40000800 	.word	0x40000800
 8010e10:	40000c00 	.word	0x40000c00
 8010e14:	40001800 	.word	0x40001800

08010e18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b085      	sub	sp, #20
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010e22:	2300      	movs	r3, #0
 8010e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e2c:	2b01      	cmp	r3, #1
 8010e2e:	d101      	bne.n	8010e34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010e30:	2302      	movs	r3, #2
 8010e32:	e065      	b.n	8010f00 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2201      	movs	r2, #1
 8010e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	4313      	orrs	r3, r2
 8010e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	689b      	ldr	r3, [r3, #8]
 8010e54:	4313      	orrs	r3, r2
 8010e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	685b      	ldr	r3, [r3, #4]
 8010e62:	4313      	orrs	r3, r2
 8010e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4313      	orrs	r3, r2
 8010e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	691b      	ldr	r3, [r3, #16]
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	695b      	ldr	r3, [r3, #20]
 8010e8c:	4313      	orrs	r3, r2
 8010e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e9a:	4313      	orrs	r3, r2
 8010e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	699b      	ldr	r3, [r3, #24]
 8010ea8:	041b      	lsls	r3, r3, #16
 8010eaa:	4313      	orrs	r3, r2
 8010eac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	4a16      	ldr	r2, [pc, #88]	; (8010f0c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	d004      	beq.n	8010ec2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	4a14      	ldr	r2, [pc, #80]	; (8010f10 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d115      	bne.n	8010eee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ecc:	051b      	lsls	r3, r3, #20
 8010ece:	4313      	orrs	r3, r2
 8010ed0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	69db      	ldr	r3, [r3, #28]
 8010edc:	4313      	orrs	r3, r2
 8010ede:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	6a1b      	ldr	r3, [r3, #32]
 8010eea:	4313      	orrs	r3, r2
 8010eec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	68fa      	ldr	r2, [r7, #12]
 8010ef4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010efe:	2300      	movs	r3, #0
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3714      	adds	r7, #20
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr
 8010f0c:	40010000 	.word	0x40010000
 8010f10:	40010400 	.word	0x40010400

08010f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b083      	sub	sp, #12
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010f1c:	bf00      	nop
 8010f1e:	370c      	adds	r7, #12
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr

08010f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b083      	sub	sp, #12
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010f30:	bf00      	nop
 8010f32:	370c      	adds	r7, #12
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr

08010f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010f44:	bf00      	nop
 8010f46:	370c      	adds	r7, #12
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4e:	4770      	bx	lr

08010f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d101      	bne.n	8010f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	e042      	b.n	8010fe8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d106      	bne.n	8010f7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f7f4 fe43 	bl	8005c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2224      	movs	r2, #36	; 0x24
 8010f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	f022 0201 	bic.w	r2, r2, #1
 8010f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 fc66 	bl	8011864 <UART_SetConfig>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	d101      	bne.n	8010fa2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e022      	b.n	8010fe8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d002      	beq.n	8010fb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f001 f9ba 	bl	8012324 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	685a      	ldr	r2, [r3, #4]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	689a      	ldr	r2, [r3, #8]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	f042 0201 	orr.w	r2, r2, #1
 8010fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f001 fa41 	bl	8012468 <UART_CheckIdleState>
 8010fe6:	4603      	mov	r3, r0
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b08a      	sub	sp, #40	; 0x28
 8010ff4:	af02      	add	r7, sp, #8
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	60b9      	str	r1, [r7, #8]
 8010ffa:	603b      	str	r3, [r7, #0]
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011006:	2b20      	cmp	r3, #32
 8011008:	f040 8083 	bne.w	8011112 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d002      	beq.n	8011018 <HAL_UART_Transmit+0x28>
 8011012:	88fb      	ldrh	r3, [r7, #6]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d101      	bne.n	801101c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8011018:	2301      	movs	r3, #1
 801101a:	e07b      	b.n	8011114 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011022:	2b01      	cmp	r3, #1
 8011024:	d101      	bne.n	801102a <HAL_UART_Transmit+0x3a>
 8011026:	2302      	movs	r3, #2
 8011028:	e074      	b.n	8011114 <HAL_UART_Transmit+0x124>
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2201      	movs	r2, #1
 801102e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2200      	movs	r2, #0
 8011036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2221      	movs	r2, #33	; 0x21
 801103e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011042:	f7f4 ff4d 	bl	8005ee0 <HAL_GetTick>
 8011046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	88fa      	ldrh	r2, [r7, #6]
 801104c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	88fa      	ldrh	r2, [r7, #6]
 8011054:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	689b      	ldr	r3, [r3, #8]
 801105c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011060:	d108      	bne.n	8011074 <HAL_UART_Transmit+0x84>
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	691b      	ldr	r3, [r3, #16]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d104      	bne.n	8011074 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801106a:	2300      	movs	r3, #0
 801106c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	61bb      	str	r3, [r7, #24]
 8011072:	e003      	b.n	801107c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011078:	2300      	movs	r3, #0
 801107a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	2200      	movs	r2, #0
 8011080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8011084:	e02c      	b.n	80110e0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	9300      	str	r3, [sp, #0]
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	2200      	movs	r2, #0
 801108e:	2180      	movs	r1, #128	; 0x80
 8011090:	68f8      	ldr	r0, [r7, #12]
 8011092:	f001 fa34 	bl	80124fe <UART_WaitOnFlagUntilTimeout>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d001      	beq.n	80110a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801109c:	2303      	movs	r3, #3
 801109e:	e039      	b.n	8011114 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80110a0:	69fb      	ldr	r3, [r7, #28]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d10b      	bne.n	80110be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80110a6:	69bb      	ldr	r3, [r7, #24]
 80110a8:	881b      	ldrh	r3, [r3, #0]
 80110aa:	461a      	mov	r2, r3
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80110b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	3302      	adds	r3, #2
 80110ba:	61bb      	str	r3, [r7, #24]
 80110bc:	e007      	b.n	80110ce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80110be:	69fb      	ldr	r3, [r7, #28]
 80110c0:	781a      	ldrb	r2, [r3, #0]
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	3301      	adds	r3, #1
 80110cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	3b01      	subs	r3, #1
 80110d8:	b29a      	uxth	r2, r3
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d1cc      	bne.n	8011086 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	9300      	str	r3, [sp, #0]
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	2200      	movs	r2, #0
 80110f4:	2140      	movs	r1, #64	; 0x40
 80110f6:	68f8      	ldr	r0, [r7, #12]
 80110f8:	f001 fa01 	bl	80124fe <UART_WaitOnFlagUntilTimeout>
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d001      	beq.n	8011106 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8011102:	2303      	movs	r3, #3
 8011104:	e006      	b.n	8011114 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2220      	movs	r2, #32
 801110a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801110e:	2300      	movs	r3, #0
 8011110:	e000      	b.n	8011114 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8011112:	2302      	movs	r3, #2
  }
}
 8011114:	4618      	mov	r0, r3
 8011116:	3720      	adds	r7, #32
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801111c:	b480      	push	{r7}
 801111e:	b085      	sub	sp, #20
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	4613      	mov	r3, r2
 8011128:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011130:	2b20      	cmp	r3, #32
 8011132:	d168      	bne.n	8011206 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d002      	beq.n	8011140 <HAL_UART_Transmit_IT+0x24>
 801113a:	88fb      	ldrh	r3, [r7, #6]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d101      	bne.n	8011144 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8011140:	2301      	movs	r3, #1
 8011142:	e061      	b.n	8011208 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801114a:	2b01      	cmp	r3, #1
 801114c:	d101      	bne.n	8011152 <HAL_UART_Transmit_IT+0x36>
 801114e:	2302      	movs	r3, #2
 8011150:	e05a      	b.n	8011208 <HAL_UART_Transmit_IT+0xec>
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	2201      	movs	r2, #1
 8011156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	68ba      	ldr	r2, [r7, #8]
 801115e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	88fa      	ldrh	r2, [r7, #6]
 8011164:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	88fa      	ldrh	r2, [r7, #6]
 801116c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2200      	movs	r2, #0
 8011174:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2200      	movs	r2, #0
 801117a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2221      	movs	r2, #33	; 0x21
 8011182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801118a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801118e:	d11c      	bne.n	80111ca <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	689b      	ldr	r3, [r3, #8]
 8011194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011198:	d107      	bne.n	80111aa <HAL_UART_Transmit_IT+0x8e>
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	691b      	ldr	r3, [r3, #16]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d103      	bne.n	80111aa <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	4a1b      	ldr	r2, [pc, #108]	; (8011214 <HAL_UART_Transmit_IT+0xf8>)
 80111a6:	675a      	str	r2, [r3, #116]	; 0x74
 80111a8:	e002      	b.n	80111b0 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	4a1a      	ldr	r2, [pc, #104]	; (8011218 <HAL_UART_Transmit_IT+0xfc>)
 80111ae:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	2200      	movs	r2, #0
 80111b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	689a      	ldr	r2, [r3, #8]
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80111c6:	609a      	str	r2, [r3, #8]
 80111c8:	e01b      	b.n	8011202 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	689b      	ldr	r3, [r3, #8]
 80111ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111d2:	d107      	bne.n	80111e4 <HAL_UART_Transmit_IT+0xc8>
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	691b      	ldr	r3, [r3, #16]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d103      	bne.n	80111e4 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	4a0f      	ldr	r2, [pc, #60]	; (801121c <HAL_UART_Transmit_IT+0x100>)
 80111e0:	675a      	str	r2, [r3, #116]	; 0x74
 80111e2:	e002      	b.n	80111ea <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	4a0e      	ldr	r2, [pc, #56]	; (8011220 <HAL_UART_Transmit_IT+0x104>)
 80111e8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2200      	movs	r2, #0
 80111ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	681a      	ldr	r2, [r3, #0]
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011200:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8011202:	2300      	movs	r3, #0
 8011204:	e000      	b.n	8011208 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8011206:	2302      	movs	r3, #2
  }
}
 8011208:	4618      	mov	r0, r3
 801120a:	3714      	adds	r7, #20
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr
 8011214:	08012999 	.word	0x08012999
 8011218:	080128ff 	.word	0x080128ff
 801121c:	08012881 	.word	0x08012881
 8011220:	0801280d 	.word	0x0801280d

08011224 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	60b9      	str	r1, [r7, #8]
 801122e:	4613      	mov	r3, r2
 8011230:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011238:	2b20      	cmp	r3, #32
 801123a:	d131      	bne.n	80112a0 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d002      	beq.n	8011248 <HAL_UART_Receive_IT+0x24>
 8011242:	88fb      	ldrh	r3, [r7, #6]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d101      	bne.n	801124c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8011248:	2301      	movs	r3, #1
 801124a:	e02a      	b.n	80112a2 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011252:	2b01      	cmp	r3, #1
 8011254:	d101      	bne.n	801125a <HAL_UART_Receive_IT+0x36>
 8011256:	2302      	movs	r3, #2
 8011258:	e023      	b.n	80112a2 <HAL_UART_Receive_IT+0x7e>
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2201      	movs	r2, #1
 801125e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2200      	movs	r2, #0
 8011266:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4a0f      	ldr	r2, [pc, #60]	; (80112ac <HAL_UART_Receive_IT+0x88>)
 801126e:	4293      	cmp	r3, r2
 8011270:	d00e      	beq.n	8011290 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801127c:	2b00      	cmp	r3, #0
 801127e:	d007      	beq.n	8011290 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	681a      	ldr	r2, [r3, #0]
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801128e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011290:	88fb      	ldrh	r3, [r7, #6]
 8011292:	461a      	mov	r2, r3
 8011294:	68b9      	ldr	r1, [r7, #8]
 8011296:	68f8      	ldr	r0, [r7, #12]
 8011298:	f001 f9b2 	bl	8012600 <UART_Start_Receive_IT>
 801129c:	4603      	mov	r3, r0
 801129e:	e000      	b.n	80112a2 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80112a0:	2302      	movs	r3, #2
  }
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	3710      	adds	r7, #16
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	58000c00 	.word	0x58000c00

080112b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b088      	sub	sp, #32
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	69db      	ldr	r3, [r3, #28]
 80112be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	689b      	ldr	r3, [r3, #8]
 80112ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80112d0:	69fa      	ldr	r2, [r7, #28]
 80112d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80112d6:	4013      	ands	r3, r2
 80112d8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d118      	bne.n	8011312 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80112e0:	69fb      	ldr	r3, [r7, #28]
 80112e2:	f003 0320 	and.w	r3, r3, #32
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d013      	beq.n	8011312 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80112ea:	69bb      	ldr	r3, [r7, #24]
 80112ec:	f003 0320 	and.w	r3, r3, #32
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d104      	bne.n	80112fe <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d009      	beq.n	8011312 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011302:	2b00      	cmp	r3, #0
 8011304:	f000 8282 	beq.w	801180c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	4798      	blx	r3
      }
      return;
 8011310:	e27c      	b.n	801180c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	2b00      	cmp	r3, #0
 8011316:	f000 80ef 	beq.w	80114f8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801131a:	697a      	ldr	r2, [r7, #20]
 801131c:	4b73      	ldr	r3, [pc, #460]	; (80114ec <HAL_UART_IRQHandler+0x23c>)
 801131e:	4013      	ands	r3, r2
 8011320:	2b00      	cmp	r3, #0
 8011322:	d105      	bne.n	8011330 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011324:	69ba      	ldr	r2, [r7, #24]
 8011326:	4b72      	ldr	r3, [pc, #456]	; (80114f0 <HAL_UART_IRQHandler+0x240>)
 8011328:	4013      	ands	r3, r2
 801132a:	2b00      	cmp	r3, #0
 801132c:	f000 80e4 	beq.w	80114f8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011330:	69fb      	ldr	r3, [r7, #28]
 8011332:	f003 0301 	and.w	r3, r3, #1
 8011336:	2b00      	cmp	r3, #0
 8011338:	d010      	beq.n	801135c <HAL_UART_IRQHandler+0xac>
 801133a:	69bb      	ldr	r3, [r7, #24]
 801133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011340:	2b00      	cmp	r3, #0
 8011342:	d00b      	beq.n	801135c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2201      	movs	r2, #1
 801134a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011352:	f043 0201 	orr.w	r2, r3, #1
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	f003 0302 	and.w	r3, r3, #2
 8011362:	2b00      	cmp	r3, #0
 8011364:	d010      	beq.n	8011388 <HAL_UART_IRQHandler+0xd8>
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	f003 0301 	and.w	r3, r3, #1
 801136c:	2b00      	cmp	r3, #0
 801136e:	d00b      	beq.n	8011388 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2202      	movs	r2, #2
 8011376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801137e:	f043 0204 	orr.w	r2, r3, #4
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011388:	69fb      	ldr	r3, [r7, #28]
 801138a:	f003 0304 	and.w	r3, r3, #4
 801138e:	2b00      	cmp	r3, #0
 8011390:	d010      	beq.n	80113b4 <HAL_UART_IRQHandler+0x104>
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	f003 0301 	and.w	r3, r3, #1
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00b      	beq.n	80113b4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	2204      	movs	r2, #4
 80113a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113aa:	f043 0202 	orr.w	r2, r3, #2
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	f003 0308 	and.w	r3, r3, #8
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d015      	beq.n	80113ea <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80113be:	69bb      	ldr	r3, [r7, #24]
 80113c0:	f003 0320 	and.w	r3, r3, #32
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d104      	bne.n	80113d2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80113c8:	697a      	ldr	r2, [r7, #20]
 80113ca:	4b48      	ldr	r3, [pc, #288]	; (80114ec <HAL_UART_IRQHandler+0x23c>)
 80113cc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00b      	beq.n	80113ea <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2208      	movs	r2, #8
 80113d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113e0:	f043 0208 	orr.w	r2, r3, #8
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80113ea:	69fb      	ldr	r3, [r7, #28]
 80113ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d011      	beq.n	8011418 <HAL_UART_IRQHandler+0x168>
 80113f4:	69bb      	ldr	r3, [r7, #24]
 80113f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d00c      	beq.n	8011418 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801140e:	f043 0220 	orr.w	r2, r3, #32
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801141e:	2b00      	cmp	r3, #0
 8011420:	f000 81f6 	beq.w	8011810 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	f003 0320 	and.w	r3, r3, #32
 801142a:	2b00      	cmp	r3, #0
 801142c:	d011      	beq.n	8011452 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	f003 0320 	and.w	r3, r3, #32
 8011434:	2b00      	cmp	r3, #0
 8011436:	d104      	bne.n	8011442 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801143e:	2b00      	cmp	r3, #0
 8011440:	d007      	beq.n	8011452 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011446:	2b00      	cmp	r3, #0
 8011448:	d003      	beq.n	8011452 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011458:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	689b      	ldr	r3, [r3, #8]
 8011460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011464:	2b40      	cmp	r3, #64	; 0x40
 8011466:	d004      	beq.n	8011472 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801146e:	2b00      	cmp	r3, #0
 8011470:	d031      	beq.n	80114d6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f001 f982 	bl	801277c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	689b      	ldr	r3, [r3, #8]
 801147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011482:	2b40      	cmp	r3, #64	; 0x40
 8011484:	d123      	bne.n	80114ce <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	689a      	ldr	r2, [r3, #8]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011494:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801149a:	2b00      	cmp	r3, #0
 801149c:	d013      	beq.n	80114c6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114a2:	4a14      	ldr	r2, [pc, #80]	; (80114f4 <HAL_UART_IRQHandler+0x244>)
 80114a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7f7 fa48 	bl	8008940 <HAL_DMA_Abort_IT>
 80114b0:	4603      	mov	r3, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d017      	beq.n	80114e6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80114c0:	4610      	mov	r0, r2
 80114c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80114c4:	e00f      	b.n	80114e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f000 f9b6 	bl	8011838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80114cc:	e00b      	b.n	80114e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f000 f9b2 	bl	8011838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80114d4:	e007      	b.n	80114e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f000 f9ae 	bl	8011838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2200      	movs	r2, #0
 80114e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80114e4:	e194      	b.n	8011810 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80114e6:	bf00      	nop
    return;
 80114e8:	e192      	b.n	8011810 <HAL_UART_IRQHandler+0x560>
 80114ea:	bf00      	nop
 80114ec:	10000001 	.word	0x10000001
 80114f0:	04000120 	.word	0x04000120
 80114f4:	080127e1 	.word	0x080127e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	f040 810f 	bne.w	8011720 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011502:	69fb      	ldr	r3, [r7, #28]
 8011504:	f003 0310 	and.w	r3, r3, #16
 8011508:	2b00      	cmp	r3, #0
 801150a:	f000 8109 	beq.w	8011720 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801150e:	69bb      	ldr	r3, [r7, #24]
 8011510:	f003 0310 	and.w	r3, r3, #16
 8011514:	2b00      	cmp	r3, #0
 8011516:	f000 8103 	beq.w	8011720 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2210      	movs	r2, #16
 8011520:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	689b      	ldr	r3, [r3, #8]
 8011528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801152c:	2b40      	cmp	r3, #64	; 0x40
 801152e:	f040 80bb 	bne.w	80116a8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	4a96      	ldr	r2, [pc, #600]	; (8011794 <HAL_UART_IRQHandler+0x4e4>)
 801153a:	4293      	cmp	r3, r2
 801153c:	d059      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4a94      	ldr	r2, [pc, #592]	; (8011798 <HAL_UART_IRQHandler+0x4e8>)
 8011546:	4293      	cmp	r3, r2
 8011548:	d053      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	4a92      	ldr	r2, [pc, #584]	; (801179c <HAL_UART_IRQHandler+0x4ec>)
 8011552:	4293      	cmp	r3, r2
 8011554:	d04d      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4a90      	ldr	r2, [pc, #576]	; (80117a0 <HAL_UART_IRQHandler+0x4f0>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d047      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	4a8e      	ldr	r2, [pc, #568]	; (80117a4 <HAL_UART_IRQHandler+0x4f4>)
 801156a:	4293      	cmp	r3, r2
 801156c:	d041      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	4a8c      	ldr	r2, [pc, #560]	; (80117a8 <HAL_UART_IRQHandler+0x4f8>)
 8011576:	4293      	cmp	r3, r2
 8011578:	d03b      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	4a8a      	ldr	r2, [pc, #552]	; (80117ac <HAL_UART_IRQHandler+0x4fc>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d035      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	4a88      	ldr	r2, [pc, #544]	; (80117b0 <HAL_UART_IRQHandler+0x500>)
 801158e:	4293      	cmp	r3, r2
 8011590:	d02f      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	4a86      	ldr	r2, [pc, #536]	; (80117b4 <HAL_UART_IRQHandler+0x504>)
 801159a:	4293      	cmp	r3, r2
 801159c:	d029      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a84      	ldr	r2, [pc, #528]	; (80117b8 <HAL_UART_IRQHandler+0x508>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d023      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	4a82      	ldr	r2, [pc, #520]	; (80117bc <HAL_UART_IRQHandler+0x50c>)
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d01d      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	4a80      	ldr	r2, [pc, #512]	; (80117c0 <HAL_UART_IRQHandler+0x510>)
 80115be:	4293      	cmp	r3, r2
 80115c0:	d017      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4a7e      	ldr	r2, [pc, #504]	; (80117c4 <HAL_UART_IRQHandler+0x514>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d011      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4a7c      	ldr	r2, [pc, #496]	; (80117c8 <HAL_UART_IRQHandler+0x518>)
 80115d6:	4293      	cmp	r3, r2
 80115d8:	d00b      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	4a7a      	ldr	r2, [pc, #488]	; (80117cc <HAL_UART_IRQHandler+0x51c>)
 80115e2:	4293      	cmp	r3, r2
 80115e4:	d005      	beq.n	80115f2 <HAL_UART_IRQHandler+0x342>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	4a78      	ldr	r2, [pc, #480]	; (80117d0 <HAL_UART_IRQHandler+0x520>)
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d105      	bne.n	80115fe <HAL_UART_IRQHandler+0x34e>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	685b      	ldr	r3, [r3, #4]
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	e004      	b.n	8011608 <HAL_UART_IRQHandler+0x358>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	b29b      	uxth	r3, r3
 8011608:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 801160a:	893b      	ldrh	r3, [r7, #8]
 801160c:	2b00      	cmp	r3, #0
 801160e:	f000 8101 	beq.w	8011814 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011618:	893a      	ldrh	r2, [r7, #8]
 801161a:	429a      	cmp	r2, r3
 801161c:	f080 80fa 	bcs.w	8011814 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	893a      	ldrh	r2, [r7, #8]
 8011624:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801162c:	69db      	ldr	r3, [r3, #28]
 801162e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011632:	d02b      	beq.n	801168c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	681a      	ldr	r2, [r3, #0]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011642:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	689a      	ldr	r2, [r3, #8]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f022 0201 	bic.w	r2, r2, #1
 8011652:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	689a      	ldr	r2, [r3, #8]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011662:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2220      	movs	r2, #32
 8011668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2200      	movs	r2, #0
 8011670:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	f022 0210 	bic.w	r2, r2, #16
 8011680:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011686:	4618      	mov	r0, r3
 8011688:	f7f6 fe3c 	bl	8008304 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011698:	b29b      	uxth	r3, r3
 801169a:	1ad3      	subs	r3, r2, r3
 801169c:	b29b      	uxth	r3, r3
 801169e:	4619      	mov	r1, r3
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f000 f8d3 	bl	801184c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80116a6:	e0b5      	b.n	8011814 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	f000 80a8 	beq.w	8011818 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80116c8:	897b      	ldrh	r3, [r7, #10]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f000 80a4 	beq.w	8011818 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80116de:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	6899      	ldr	r1, [r3, #8]
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	4b3a      	ldr	r3, [pc, #232]	; (80117d4 <HAL_UART_IRQHandler+0x524>)
 80116ec:	400b      	ands	r3, r1
 80116ee:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2220      	movs	r2, #32
 80116f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2200      	movs	r2, #0
 8011702:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	681a      	ldr	r2, [r3, #0]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	f022 0210 	bic.w	r2, r2, #16
 8011712:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011714:	897b      	ldrh	r3, [r7, #10]
 8011716:	4619      	mov	r1, r3
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f000 f897 	bl	801184c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801171e:	e07b      	b.n	8011818 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011720:	69fb      	ldr	r3, [r7, #28]
 8011722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011726:	2b00      	cmp	r3, #0
 8011728:	d00d      	beq.n	8011746 <HAL_UART_IRQHandler+0x496>
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011730:	2b00      	cmp	r3, #0
 8011732:	d008      	beq.n	8011746 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801173c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f001 fc72 	bl	8013028 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011744:	e06b      	b.n	801181e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801174c:	2b00      	cmp	r3, #0
 801174e:	d012      	beq.n	8011776 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011750:	69bb      	ldr	r3, [r7, #24]
 8011752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011756:	2b00      	cmp	r3, #0
 8011758:	d104      	bne.n	8011764 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011760:	2b00      	cmp	r3, #0
 8011762:	d008      	beq.n	8011776 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011768:	2b00      	cmp	r3, #0
 801176a:	d057      	beq.n	801181c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	4798      	blx	r3
    }
    return;
 8011774:	e052      	b.n	801181c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801177c:	2b00      	cmp	r3, #0
 801177e:	d02b      	beq.n	80117d8 <HAL_UART_IRQHandler+0x528>
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011786:	2b00      	cmp	r3, #0
 8011788:	d026      	beq.n	80117d8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f001 f956 	bl	8012a3c <UART_EndTransmit_IT>
    return;
 8011790:	e045      	b.n	801181e <HAL_UART_IRQHandler+0x56e>
 8011792:	bf00      	nop
 8011794:	40020010 	.word	0x40020010
 8011798:	40020028 	.word	0x40020028
 801179c:	40020040 	.word	0x40020040
 80117a0:	40020058 	.word	0x40020058
 80117a4:	40020070 	.word	0x40020070
 80117a8:	40020088 	.word	0x40020088
 80117ac:	400200a0 	.word	0x400200a0
 80117b0:	400200b8 	.word	0x400200b8
 80117b4:	40020410 	.word	0x40020410
 80117b8:	40020428 	.word	0x40020428
 80117bc:	40020440 	.word	0x40020440
 80117c0:	40020458 	.word	0x40020458
 80117c4:	40020470 	.word	0x40020470
 80117c8:	40020488 	.word	0x40020488
 80117cc:	400204a0 	.word	0x400204a0
 80117d0:	400204b8 	.word	0x400204b8
 80117d4:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80117d8:	69fb      	ldr	r3, [r7, #28]
 80117da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d008      	beq.n	80117f4 <HAL_UART_IRQHandler+0x544>
 80117e2:	69bb      	ldr	r3, [r7, #24]
 80117e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d003      	beq.n	80117f4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f001 fc2f 	bl	8013050 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80117f2:	e014      	b.n	801181e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d00f      	beq.n	801181e <HAL_UART_IRQHandler+0x56e>
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	2b00      	cmp	r3, #0
 8011802:	da0c      	bge.n	801181e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f001 fc19 	bl	801303c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801180a:	e008      	b.n	801181e <HAL_UART_IRQHandler+0x56e>
      return;
 801180c:	bf00      	nop
 801180e:	e006      	b.n	801181e <HAL_UART_IRQHandler+0x56e>
    return;
 8011810:	bf00      	nop
 8011812:	e004      	b.n	801181e <HAL_UART_IRQHandler+0x56e>
      return;
 8011814:	bf00      	nop
 8011816:	e002      	b.n	801181e <HAL_UART_IRQHandler+0x56e>
      return;
 8011818:	bf00      	nop
 801181a:	e000      	b.n	801181e <HAL_UART_IRQHandler+0x56e>
    return;
 801181c:	bf00      	nop
  }
}
 801181e:	3720      	adds	r7, #32
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}

08011824 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011824:	b480      	push	{r7}
 8011826:	b083      	sub	sp, #12
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801182c:	bf00      	nop
 801182e:	370c      	adds	r7, #12
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011838:	b480      	push	{r7}
 801183a:	b083      	sub	sp, #12
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011840:	bf00      	nop
 8011842:	370c      	adds	r7, #12
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr

0801184c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801184c:	b480      	push	{r7}
 801184e:	b083      	sub	sp, #12
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	460b      	mov	r3, r1
 8011856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011858:	bf00      	nop
 801185a:	370c      	adds	r7, #12
 801185c:	46bd      	mov	sp, r7
 801185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011862:	4770      	bx	lr

08011864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011864:	b5b0      	push	{r4, r5, r7, lr}
 8011866:	b08e      	sub	sp, #56	; 0x38
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801186c:	2300      	movs	r3, #0
 801186e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	689a      	ldr	r2, [r3, #8]
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	691b      	ldr	r3, [r3, #16]
 801187a:	431a      	orrs	r2, r3
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	695b      	ldr	r3, [r3, #20]
 8011880:	431a      	orrs	r2, r3
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	69db      	ldr	r3, [r3, #28]
 8011886:	4313      	orrs	r3, r2
 8011888:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	4bbf      	ldr	r3, [pc, #764]	; (8011b90 <UART_SetConfig+0x32c>)
 8011892:	4013      	ands	r3, r2
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	6812      	ldr	r2, [r2, #0]
 8011898:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801189a:	430b      	orrs	r3, r1
 801189c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	68da      	ldr	r2, [r3, #12]
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	430a      	orrs	r2, r1
 80118b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	699b      	ldr	r3, [r3, #24]
 80118b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	4ab5      	ldr	r2, [pc, #724]	; (8011b94 <UART_SetConfig+0x330>)
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d004      	beq.n	80118ce <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6a1b      	ldr	r3, [r3, #32]
 80118c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80118ca:	4313      	orrs	r3, r2
 80118cc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	689a      	ldr	r2, [r3, #8]
 80118d4:	4bb0      	ldr	r3, [pc, #704]	; (8011b98 <UART_SetConfig+0x334>)
 80118d6:	4013      	ands	r3, r2
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	6812      	ldr	r2, [r2, #0]
 80118dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80118de:	430b      	orrs	r3, r1
 80118e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118e8:	f023 010f 	bic.w	r1, r3, #15
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	430a      	orrs	r2, r1
 80118f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4aa7      	ldr	r2, [pc, #668]	; (8011b9c <UART_SetConfig+0x338>)
 80118fe:	4293      	cmp	r3, r2
 8011900:	d176      	bne.n	80119f0 <UART_SetConfig+0x18c>
 8011902:	4ba7      	ldr	r3, [pc, #668]	; (8011ba0 <UART_SetConfig+0x33c>)
 8011904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801190a:	2b28      	cmp	r3, #40	; 0x28
 801190c:	d86c      	bhi.n	80119e8 <UART_SetConfig+0x184>
 801190e:	a201      	add	r2, pc, #4	; (adr r2, 8011914 <UART_SetConfig+0xb0>)
 8011910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011914:	080119b9 	.word	0x080119b9
 8011918:	080119e9 	.word	0x080119e9
 801191c:	080119e9 	.word	0x080119e9
 8011920:	080119e9 	.word	0x080119e9
 8011924:	080119e9 	.word	0x080119e9
 8011928:	080119e9 	.word	0x080119e9
 801192c:	080119e9 	.word	0x080119e9
 8011930:	080119e9 	.word	0x080119e9
 8011934:	080119c1 	.word	0x080119c1
 8011938:	080119e9 	.word	0x080119e9
 801193c:	080119e9 	.word	0x080119e9
 8011940:	080119e9 	.word	0x080119e9
 8011944:	080119e9 	.word	0x080119e9
 8011948:	080119e9 	.word	0x080119e9
 801194c:	080119e9 	.word	0x080119e9
 8011950:	080119e9 	.word	0x080119e9
 8011954:	080119c9 	.word	0x080119c9
 8011958:	080119e9 	.word	0x080119e9
 801195c:	080119e9 	.word	0x080119e9
 8011960:	080119e9 	.word	0x080119e9
 8011964:	080119e9 	.word	0x080119e9
 8011968:	080119e9 	.word	0x080119e9
 801196c:	080119e9 	.word	0x080119e9
 8011970:	080119e9 	.word	0x080119e9
 8011974:	080119d1 	.word	0x080119d1
 8011978:	080119e9 	.word	0x080119e9
 801197c:	080119e9 	.word	0x080119e9
 8011980:	080119e9 	.word	0x080119e9
 8011984:	080119e9 	.word	0x080119e9
 8011988:	080119e9 	.word	0x080119e9
 801198c:	080119e9 	.word	0x080119e9
 8011990:	080119e9 	.word	0x080119e9
 8011994:	080119d9 	.word	0x080119d9
 8011998:	080119e9 	.word	0x080119e9
 801199c:	080119e9 	.word	0x080119e9
 80119a0:	080119e9 	.word	0x080119e9
 80119a4:	080119e9 	.word	0x080119e9
 80119a8:	080119e9 	.word	0x080119e9
 80119ac:	080119e9 	.word	0x080119e9
 80119b0:	080119e9 	.word	0x080119e9
 80119b4:	080119e1 	.word	0x080119e1
 80119b8:	2301      	movs	r3, #1
 80119ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80119be:	e222      	b.n	8011e06 <UART_SetConfig+0x5a2>
 80119c0:	2304      	movs	r3, #4
 80119c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80119c6:	e21e      	b.n	8011e06 <UART_SetConfig+0x5a2>
 80119c8:	2308      	movs	r3, #8
 80119ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80119ce:	e21a      	b.n	8011e06 <UART_SetConfig+0x5a2>
 80119d0:	2310      	movs	r3, #16
 80119d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80119d6:	e216      	b.n	8011e06 <UART_SetConfig+0x5a2>
 80119d8:	2320      	movs	r3, #32
 80119da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80119de:	e212      	b.n	8011e06 <UART_SetConfig+0x5a2>
 80119e0:	2340      	movs	r3, #64	; 0x40
 80119e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80119e6:	e20e      	b.n	8011e06 <UART_SetConfig+0x5a2>
 80119e8:	2380      	movs	r3, #128	; 0x80
 80119ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80119ee:	e20a      	b.n	8011e06 <UART_SetConfig+0x5a2>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4a6b      	ldr	r2, [pc, #428]	; (8011ba4 <UART_SetConfig+0x340>)
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d130      	bne.n	8011a5c <UART_SetConfig+0x1f8>
 80119fa:	4b69      	ldr	r3, [pc, #420]	; (8011ba0 <UART_SetConfig+0x33c>)
 80119fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119fe:	f003 0307 	and.w	r3, r3, #7
 8011a02:	2b05      	cmp	r3, #5
 8011a04:	d826      	bhi.n	8011a54 <UART_SetConfig+0x1f0>
 8011a06:	a201      	add	r2, pc, #4	; (adr r2, 8011a0c <UART_SetConfig+0x1a8>)
 8011a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a0c:	08011a25 	.word	0x08011a25
 8011a10:	08011a2d 	.word	0x08011a2d
 8011a14:	08011a35 	.word	0x08011a35
 8011a18:	08011a3d 	.word	0x08011a3d
 8011a1c:	08011a45 	.word	0x08011a45
 8011a20:	08011a4d 	.word	0x08011a4d
 8011a24:	2300      	movs	r3, #0
 8011a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011a2a:	e1ec      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011a2c:	2304      	movs	r3, #4
 8011a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011a32:	e1e8      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011a34:	2308      	movs	r3, #8
 8011a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011a3a:	e1e4      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011a3c:	2310      	movs	r3, #16
 8011a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011a42:	e1e0      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011a44:	2320      	movs	r3, #32
 8011a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011a4a:	e1dc      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011a4c:	2340      	movs	r3, #64	; 0x40
 8011a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011a52:	e1d8      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011a54:	2380      	movs	r3, #128	; 0x80
 8011a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011a5a:	e1d4      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4a51      	ldr	r2, [pc, #324]	; (8011ba8 <UART_SetConfig+0x344>)
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d130      	bne.n	8011ac8 <UART_SetConfig+0x264>
 8011a66:	4b4e      	ldr	r3, [pc, #312]	; (8011ba0 <UART_SetConfig+0x33c>)
 8011a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a6a:	f003 0307 	and.w	r3, r3, #7
 8011a6e:	2b05      	cmp	r3, #5
 8011a70:	d826      	bhi.n	8011ac0 <UART_SetConfig+0x25c>
 8011a72:	a201      	add	r2, pc, #4	; (adr r2, 8011a78 <UART_SetConfig+0x214>)
 8011a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a78:	08011a91 	.word	0x08011a91
 8011a7c:	08011a99 	.word	0x08011a99
 8011a80:	08011aa1 	.word	0x08011aa1
 8011a84:	08011aa9 	.word	0x08011aa9
 8011a88:	08011ab1 	.word	0x08011ab1
 8011a8c:	08011ab9 	.word	0x08011ab9
 8011a90:	2300      	movs	r3, #0
 8011a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011a96:	e1b6      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011a98:	2304      	movs	r3, #4
 8011a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011a9e:	e1b2      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011aa0:	2308      	movs	r3, #8
 8011aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011aa6:	e1ae      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011aa8:	2310      	movs	r3, #16
 8011aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011aae:	e1aa      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011ab0:	2320      	movs	r3, #32
 8011ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011ab6:	e1a6      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011ab8:	2340      	movs	r3, #64	; 0x40
 8011aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011abe:	e1a2      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011ac0:	2380      	movs	r3, #128	; 0x80
 8011ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011ac6:	e19e      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4a37      	ldr	r2, [pc, #220]	; (8011bac <UART_SetConfig+0x348>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d130      	bne.n	8011b34 <UART_SetConfig+0x2d0>
 8011ad2:	4b33      	ldr	r3, [pc, #204]	; (8011ba0 <UART_SetConfig+0x33c>)
 8011ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ad6:	f003 0307 	and.w	r3, r3, #7
 8011ada:	2b05      	cmp	r3, #5
 8011adc:	d826      	bhi.n	8011b2c <UART_SetConfig+0x2c8>
 8011ade:	a201      	add	r2, pc, #4	; (adr r2, 8011ae4 <UART_SetConfig+0x280>)
 8011ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ae4:	08011afd 	.word	0x08011afd
 8011ae8:	08011b05 	.word	0x08011b05
 8011aec:	08011b0d 	.word	0x08011b0d
 8011af0:	08011b15 	.word	0x08011b15
 8011af4:	08011b1d 	.word	0x08011b1d
 8011af8:	08011b25 	.word	0x08011b25
 8011afc:	2300      	movs	r3, #0
 8011afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b02:	e180      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b04:	2304      	movs	r3, #4
 8011b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b0a:	e17c      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b0c:	2308      	movs	r3, #8
 8011b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b12:	e178      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b14:	2310      	movs	r3, #16
 8011b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b1a:	e174      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b1c:	2320      	movs	r3, #32
 8011b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b22:	e170      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b24:	2340      	movs	r3, #64	; 0x40
 8011b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b2a:	e16c      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b2c:	2380      	movs	r3, #128	; 0x80
 8011b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b32:	e168      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4a1d      	ldr	r2, [pc, #116]	; (8011bb0 <UART_SetConfig+0x34c>)
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	d142      	bne.n	8011bc4 <UART_SetConfig+0x360>
 8011b3e:	4b18      	ldr	r3, [pc, #96]	; (8011ba0 <UART_SetConfig+0x33c>)
 8011b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b42:	f003 0307 	and.w	r3, r3, #7
 8011b46:	2b05      	cmp	r3, #5
 8011b48:	d838      	bhi.n	8011bbc <UART_SetConfig+0x358>
 8011b4a:	a201      	add	r2, pc, #4	; (adr r2, 8011b50 <UART_SetConfig+0x2ec>)
 8011b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b50:	08011b69 	.word	0x08011b69
 8011b54:	08011b71 	.word	0x08011b71
 8011b58:	08011b79 	.word	0x08011b79
 8011b5c:	08011b81 	.word	0x08011b81
 8011b60:	08011b89 	.word	0x08011b89
 8011b64:	08011bb5 	.word	0x08011bb5
 8011b68:	2300      	movs	r3, #0
 8011b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b6e:	e14a      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b70:	2304      	movs	r3, #4
 8011b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b76:	e146      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b78:	2308      	movs	r3, #8
 8011b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b7e:	e142      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b80:	2310      	movs	r3, #16
 8011b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b86:	e13e      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b88:	2320      	movs	r3, #32
 8011b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011b8e:	e13a      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011b90:	cfff69f3 	.word	0xcfff69f3
 8011b94:	58000c00 	.word	0x58000c00
 8011b98:	11fff4ff 	.word	0x11fff4ff
 8011b9c:	40011000 	.word	0x40011000
 8011ba0:	58024400 	.word	0x58024400
 8011ba4:	40004400 	.word	0x40004400
 8011ba8:	40004800 	.word	0x40004800
 8011bac:	40004c00 	.word	0x40004c00
 8011bb0:	40005000 	.word	0x40005000
 8011bb4:	2340      	movs	r3, #64	; 0x40
 8011bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011bba:	e124      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011bbc:	2380      	movs	r3, #128	; 0x80
 8011bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011bc2:	e120      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	4acc      	ldr	r2, [pc, #816]	; (8011efc <UART_SetConfig+0x698>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d176      	bne.n	8011cbc <UART_SetConfig+0x458>
 8011bce:	4bcc      	ldr	r3, [pc, #816]	; (8011f00 <UART_SetConfig+0x69c>)
 8011bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011bd6:	2b28      	cmp	r3, #40	; 0x28
 8011bd8:	d86c      	bhi.n	8011cb4 <UART_SetConfig+0x450>
 8011bda:	a201      	add	r2, pc, #4	; (adr r2, 8011be0 <UART_SetConfig+0x37c>)
 8011bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011be0:	08011c85 	.word	0x08011c85
 8011be4:	08011cb5 	.word	0x08011cb5
 8011be8:	08011cb5 	.word	0x08011cb5
 8011bec:	08011cb5 	.word	0x08011cb5
 8011bf0:	08011cb5 	.word	0x08011cb5
 8011bf4:	08011cb5 	.word	0x08011cb5
 8011bf8:	08011cb5 	.word	0x08011cb5
 8011bfc:	08011cb5 	.word	0x08011cb5
 8011c00:	08011c8d 	.word	0x08011c8d
 8011c04:	08011cb5 	.word	0x08011cb5
 8011c08:	08011cb5 	.word	0x08011cb5
 8011c0c:	08011cb5 	.word	0x08011cb5
 8011c10:	08011cb5 	.word	0x08011cb5
 8011c14:	08011cb5 	.word	0x08011cb5
 8011c18:	08011cb5 	.word	0x08011cb5
 8011c1c:	08011cb5 	.word	0x08011cb5
 8011c20:	08011c95 	.word	0x08011c95
 8011c24:	08011cb5 	.word	0x08011cb5
 8011c28:	08011cb5 	.word	0x08011cb5
 8011c2c:	08011cb5 	.word	0x08011cb5
 8011c30:	08011cb5 	.word	0x08011cb5
 8011c34:	08011cb5 	.word	0x08011cb5
 8011c38:	08011cb5 	.word	0x08011cb5
 8011c3c:	08011cb5 	.word	0x08011cb5
 8011c40:	08011c9d 	.word	0x08011c9d
 8011c44:	08011cb5 	.word	0x08011cb5
 8011c48:	08011cb5 	.word	0x08011cb5
 8011c4c:	08011cb5 	.word	0x08011cb5
 8011c50:	08011cb5 	.word	0x08011cb5
 8011c54:	08011cb5 	.word	0x08011cb5
 8011c58:	08011cb5 	.word	0x08011cb5
 8011c5c:	08011cb5 	.word	0x08011cb5
 8011c60:	08011ca5 	.word	0x08011ca5
 8011c64:	08011cb5 	.word	0x08011cb5
 8011c68:	08011cb5 	.word	0x08011cb5
 8011c6c:	08011cb5 	.word	0x08011cb5
 8011c70:	08011cb5 	.word	0x08011cb5
 8011c74:	08011cb5 	.word	0x08011cb5
 8011c78:	08011cb5 	.word	0x08011cb5
 8011c7c:	08011cb5 	.word	0x08011cb5
 8011c80:	08011cad 	.word	0x08011cad
 8011c84:	2301      	movs	r3, #1
 8011c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011c8a:	e0bc      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011c8c:	2304      	movs	r3, #4
 8011c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011c92:	e0b8      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011c94:	2308      	movs	r3, #8
 8011c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011c9a:	e0b4      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011c9c:	2310      	movs	r3, #16
 8011c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011ca2:	e0b0      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011ca4:	2320      	movs	r3, #32
 8011ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011caa:	e0ac      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011cac:	2340      	movs	r3, #64	; 0x40
 8011cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011cb2:	e0a8      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011cb4:	2380      	movs	r3, #128	; 0x80
 8011cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011cba:	e0a4      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	4a90      	ldr	r2, [pc, #576]	; (8011f04 <UART_SetConfig+0x6a0>)
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	d130      	bne.n	8011d28 <UART_SetConfig+0x4c4>
 8011cc6:	4b8e      	ldr	r3, [pc, #568]	; (8011f00 <UART_SetConfig+0x69c>)
 8011cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cca:	f003 0307 	and.w	r3, r3, #7
 8011cce:	2b05      	cmp	r3, #5
 8011cd0:	d826      	bhi.n	8011d20 <UART_SetConfig+0x4bc>
 8011cd2:	a201      	add	r2, pc, #4	; (adr r2, 8011cd8 <UART_SetConfig+0x474>)
 8011cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd8:	08011cf1 	.word	0x08011cf1
 8011cdc:	08011cf9 	.word	0x08011cf9
 8011ce0:	08011d01 	.word	0x08011d01
 8011ce4:	08011d09 	.word	0x08011d09
 8011ce8:	08011d11 	.word	0x08011d11
 8011cec:	08011d19 	.word	0x08011d19
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011cf6:	e086      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011cf8:	2304      	movs	r3, #4
 8011cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011cfe:	e082      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d00:	2308      	movs	r3, #8
 8011d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d06:	e07e      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d08:	2310      	movs	r3, #16
 8011d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d0e:	e07a      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d10:	2320      	movs	r3, #32
 8011d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d16:	e076      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d18:	2340      	movs	r3, #64	; 0x40
 8011d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d1e:	e072      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d20:	2380      	movs	r3, #128	; 0x80
 8011d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d26:	e06e      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4a76      	ldr	r2, [pc, #472]	; (8011f08 <UART_SetConfig+0x6a4>)
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d130      	bne.n	8011d94 <UART_SetConfig+0x530>
 8011d32:	4b73      	ldr	r3, [pc, #460]	; (8011f00 <UART_SetConfig+0x69c>)
 8011d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d36:	f003 0307 	and.w	r3, r3, #7
 8011d3a:	2b05      	cmp	r3, #5
 8011d3c:	d826      	bhi.n	8011d8c <UART_SetConfig+0x528>
 8011d3e:	a201      	add	r2, pc, #4	; (adr r2, 8011d44 <UART_SetConfig+0x4e0>)
 8011d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d44:	08011d5d 	.word	0x08011d5d
 8011d48:	08011d65 	.word	0x08011d65
 8011d4c:	08011d6d 	.word	0x08011d6d
 8011d50:	08011d75 	.word	0x08011d75
 8011d54:	08011d7d 	.word	0x08011d7d
 8011d58:	08011d85 	.word	0x08011d85
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d62:	e050      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d64:	2304      	movs	r3, #4
 8011d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d6a:	e04c      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d6c:	2308      	movs	r3, #8
 8011d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d72:	e048      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d74:	2310      	movs	r3, #16
 8011d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d7a:	e044      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d7c:	2320      	movs	r3, #32
 8011d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d82:	e040      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d84:	2340      	movs	r3, #64	; 0x40
 8011d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d8a:	e03c      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d8c:	2380      	movs	r3, #128	; 0x80
 8011d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011d92:	e038      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	4a5c      	ldr	r2, [pc, #368]	; (8011f0c <UART_SetConfig+0x6a8>)
 8011d9a:	4293      	cmp	r3, r2
 8011d9c:	d130      	bne.n	8011e00 <UART_SetConfig+0x59c>
 8011d9e:	4b58      	ldr	r3, [pc, #352]	; (8011f00 <UART_SetConfig+0x69c>)
 8011da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011da2:	f003 0307 	and.w	r3, r3, #7
 8011da6:	2b05      	cmp	r3, #5
 8011da8:	d826      	bhi.n	8011df8 <UART_SetConfig+0x594>
 8011daa:	a201      	add	r2, pc, #4	; (adr r2, 8011db0 <UART_SetConfig+0x54c>)
 8011dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011db0:	08011dc9 	.word	0x08011dc9
 8011db4:	08011dd1 	.word	0x08011dd1
 8011db8:	08011dd9 	.word	0x08011dd9
 8011dbc:	08011de1 	.word	0x08011de1
 8011dc0:	08011de9 	.word	0x08011de9
 8011dc4:	08011df1 	.word	0x08011df1
 8011dc8:	2302      	movs	r3, #2
 8011dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011dce:	e01a      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011dd0:	2304      	movs	r3, #4
 8011dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011dd6:	e016      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011dd8:	2308      	movs	r3, #8
 8011dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011dde:	e012      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011de0:	2310      	movs	r3, #16
 8011de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011de6:	e00e      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011de8:	2320      	movs	r3, #32
 8011dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011dee:	e00a      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011df0:	2340      	movs	r3, #64	; 0x40
 8011df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011df6:	e006      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011df8:	2380      	movs	r3, #128	; 0x80
 8011dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011dfe:	e002      	b.n	8011e06 <UART_SetConfig+0x5a2>
 8011e00:	2380      	movs	r3, #128	; 0x80
 8011e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	4a40      	ldr	r2, [pc, #256]	; (8011f0c <UART_SetConfig+0x6a8>)
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	f040 80ef 	bne.w	8011ff0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011e12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011e16:	2b20      	cmp	r3, #32
 8011e18:	dc46      	bgt.n	8011ea8 <UART_SetConfig+0x644>
 8011e1a:	2b02      	cmp	r3, #2
 8011e1c:	f2c0 8081 	blt.w	8011f22 <UART_SetConfig+0x6be>
 8011e20:	3b02      	subs	r3, #2
 8011e22:	2b1e      	cmp	r3, #30
 8011e24:	d87d      	bhi.n	8011f22 <UART_SetConfig+0x6be>
 8011e26:	a201      	add	r2, pc, #4	; (adr r2, 8011e2c <UART_SetConfig+0x5c8>)
 8011e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e2c:	08011eaf 	.word	0x08011eaf
 8011e30:	08011f23 	.word	0x08011f23
 8011e34:	08011eb7 	.word	0x08011eb7
 8011e38:	08011f23 	.word	0x08011f23
 8011e3c:	08011f23 	.word	0x08011f23
 8011e40:	08011f23 	.word	0x08011f23
 8011e44:	08011ec7 	.word	0x08011ec7
 8011e48:	08011f23 	.word	0x08011f23
 8011e4c:	08011f23 	.word	0x08011f23
 8011e50:	08011f23 	.word	0x08011f23
 8011e54:	08011f23 	.word	0x08011f23
 8011e58:	08011f23 	.word	0x08011f23
 8011e5c:	08011f23 	.word	0x08011f23
 8011e60:	08011f23 	.word	0x08011f23
 8011e64:	08011ed7 	.word	0x08011ed7
 8011e68:	08011f23 	.word	0x08011f23
 8011e6c:	08011f23 	.word	0x08011f23
 8011e70:	08011f23 	.word	0x08011f23
 8011e74:	08011f23 	.word	0x08011f23
 8011e78:	08011f23 	.word	0x08011f23
 8011e7c:	08011f23 	.word	0x08011f23
 8011e80:	08011f23 	.word	0x08011f23
 8011e84:	08011f23 	.word	0x08011f23
 8011e88:	08011f23 	.word	0x08011f23
 8011e8c:	08011f23 	.word	0x08011f23
 8011e90:	08011f23 	.word	0x08011f23
 8011e94:	08011f23 	.word	0x08011f23
 8011e98:	08011f23 	.word	0x08011f23
 8011e9c:	08011f23 	.word	0x08011f23
 8011ea0:	08011f23 	.word	0x08011f23
 8011ea4:	08011f15 	.word	0x08011f15
 8011ea8:	2b40      	cmp	r3, #64	; 0x40
 8011eaa:	d036      	beq.n	8011f1a <UART_SetConfig+0x6b6>
 8011eac:	e039      	b.n	8011f22 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011eae:	f7fb ff2f 	bl	800dd10 <HAL_RCCEx_GetD3PCLK1Freq>
 8011eb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011eb4:	e03b      	b.n	8011f2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011eb6:	f107 0314 	add.w	r3, r7, #20
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7fb ff3e 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011ec0:	69bb      	ldr	r3, [r7, #24]
 8011ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011ec4:	e033      	b.n	8011f2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ec6:	f107 0308 	add.w	r3, r7, #8
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fc f88a 	bl	800dfe4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011ed4:	e02b      	b.n	8011f2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ed6:	4b0a      	ldr	r3, [pc, #40]	; (8011f00 <UART_SetConfig+0x69c>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f003 0320 	and.w	r3, r3, #32
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d009      	beq.n	8011ef6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011ee2:	4b07      	ldr	r3, [pc, #28]	; (8011f00 <UART_SetConfig+0x69c>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	08db      	lsrs	r3, r3, #3
 8011ee8:	f003 0303 	and.w	r3, r3, #3
 8011eec:	4a08      	ldr	r2, [pc, #32]	; (8011f10 <UART_SetConfig+0x6ac>)
 8011eee:	fa22 f303 	lsr.w	r3, r2, r3
 8011ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011ef4:	e01b      	b.n	8011f2e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8011ef6:	4b06      	ldr	r3, [pc, #24]	; (8011f10 <UART_SetConfig+0x6ac>)
 8011ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011efa:	e018      	b.n	8011f2e <UART_SetConfig+0x6ca>
 8011efc:	40011400 	.word	0x40011400
 8011f00:	58024400 	.word	0x58024400
 8011f04:	40007800 	.word	0x40007800
 8011f08:	40007c00 	.word	0x40007c00
 8011f0c:	58000c00 	.word	0x58000c00
 8011f10:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011f14:	4bc4      	ldr	r3, [pc, #784]	; (8012228 <UART_SetConfig+0x9c4>)
 8011f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011f18:	e009      	b.n	8011f2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011f20:	e005      	b.n	8011f2e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8011f22:	2300      	movs	r3, #0
 8011f24:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8011f26:	2301      	movs	r3, #1
 8011f28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8011f2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	f000 81da 	beq.w	80122ea <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f3a:	4abc      	ldr	r2, [pc, #752]	; (801222c <UART_SetConfig+0x9c8>)
 8011f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f40:	461a      	mov	r2, r3
 8011f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f48:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	685a      	ldr	r2, [r3, #4]
 8011f4e:	4613      	mov	r3, r2
 8011f50:	005b      	lsls	r3, r3, #1
 8011f52:	4413      	add	r3, r2
 8011f54:	6a3a      	ldr	r2, [r7, #32]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d305      	bcc.n	8011f66 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011f60:	6a3a      	ldr	r2, [r7, #32]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d903      	bls.n	8011f6e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8011f66:	2301      	movs	r3, #1
 8011f68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8011f6c:	e1bd      	b.n	80122ea <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f70:	4618      	mov	r0, r3
 8011f72:	f04f 0100 	mov.w	r1, #0
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f7a:	4aac      	ldr	r2, [pc, #688]	; (801222c <UART_SetConfig+0x9c8>)
 8011f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f80:	b29a      	uxth	r2, r3
 8011f82:	f04f 0300 	mov.w	r3, #0
 8011f86:	f7ee fbbf 	bl	8000708 <__aeabi_uldivmod>
 8011f8a:	4602      	mov	r2, r0
 8011f8c:	460b      	mov	r3, r1
 8011f8e:	4610      	mov	r0, r2
 8011f90:	4619      	mov	r1, r3
 8011f92:	f04f 0200 	mov.w	r2, #0
 8011f96:	f04f 0300 	mov.w	r3, #0
 8011f9a:	020b      	lsls	r3, r1, #8
 8011f9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011fa0:	0202      	lsls	r2, r0, #8
 8011fa2:	6879      	ldr	r1, [r7, #4]
 8011fa4:	6849      	ldr	r1, [r1, #4]
 8011fa6:	0849      	lsrs	r1, r1, #1
 8011fa8:	4608      	mov	r0, r1
 8011faa:	f04f 0100 	mov.w	r1, #0
 8011fae:	1814      	adds	r4, r2, r0
 8011fb0:	eb43 0501 	adc.w	r5, r3, r1
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	461a      	mov	r2, r3
 8011fba:	f04f 0300 	mov.w	r3, #0
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	f7ee fba1 	bl	8000708 <__aeabi_uldivmod>
 8011fc6:	4602      	mov	r2, r0
 8011fc8:	460b      	mov	r3, r1
 8011fca:	4613      	mov	r3, r2
 8011fcc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011fd4:	d308      	bcc.n	8011fe8 <UART_SetConfig+0x784>
 8011fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011fdc:	d204      	bcs.n	8011fe8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fe4:	60da      	str	r2, [r3, #12]
 8011fe6:	e180      	b.n	80122ea <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8011fe8:	2301      	movs	r3, #1
 8011fea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8011fee:	e17c      	b.n	80122ea <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	69db      	ldr	r3, [r3, #28]
 8011ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011ff8:	f040 80bf 	bne.w	801217a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8011ffc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012000:	2b20      	cmp	r3, #32
 8012002:	dc49      	bgt.n	8012098 <UART_SetConfig+0x834>
 8012004:	2b00      	cmp	r3, #0
 8012006:	db7c      	blt.n	8012102 <UART_SetConfig+0x89e>
 8012008:	2b20      	cmp	r3, #32
 801200a:	d87a      	bhi.n	8012102 <UART_SetConfig+0x89e>
 801200c:	a201      	add	r2, pc, #4	; (adr r2, 8012014 <UART_SetConfig+0x7b0>)
 801200e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012012:	bf00      	nop
 8012014:	0801209f 	.word	0x0801209f
 8012018:	080120a7 	.word	0x080120a7
 801201c:	08012103 	.word	0x08012103
 8012020:	08012103 	.word	0x08012103
 8012024:	080120af 	.word	0x080120af
 8012028:	08012103 	.word	0x08012103
 801202c:	08012103 	.word	0x08012103
 8012030:	08012103 	.word	0x08012103
 8012034:	080120bf 	.word	0x080120bf
 8012038:	08012103 	.word	0x08012103
 801203c:	08012103 	.word	0x08012103
 8012040:	08012103 	.word	0x08012103
 8012044:	08012103 	.word	0x08012103
 8012048:	08012103 	.word	0x08012103
 801204c:	08012103 	.word	0x08012103
 8012050:	08012103 	.word	0x08012103
 8012054:	080120cf 	.word	0x080120cf
 8012058:	08012103 	.word	0x08012103
 801205c:	08012103 	.word	0x08012103
 8012060:	08012103 	.word	0x08012103
 8012064:	08012103 	.word	0x08012103
 8012068:	08012103 	.word	0x08012103
 801206c:	08012103 	.word	0x08012103
 8012070:	08012103 	.word	0x08012103
 8012074:	08012103 	.word	0x08012103
 8012078:	08012103 	.word	0x08012103
 801207c:	08012103 	.word	0x08012103
 8012080:	08012103 	.word	0x08012103
 8012084:	08012103 	.word	0x08012103
 8012088:	08012103 	.word	0x08012103
 801208c:	08012103 	.word	0x08012103
 8012090:	08012103 	.word	0x08012103
 8012094:	080120f5 	.word	0x080120f5
 8012098:	2b40      	cmp	r3, #64	; 0x40
 801209a:	d02e      	beq.n	80120fa <UART_SetConfig+0x896>
 801209c:	e031      	b.n	8012102 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801209e:	f7fa f9f9 	bl	800c494 <HAL_RCC_GetPCLK1Freq>
 80120a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80120a4:	e033      	b.n	801210e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80120a6:	f7fa fa0b 	bl	800c4c0 <HAL_RCC_GetPCLK2Freq>
 80120aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80120ac:	e02f      	b.n	801210e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80120ae:	f107 0314 	add.w	r3, r7, #20
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7fb fe42 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80120b8:	69bb      	ldr	r3, [r7, #24]
 80120ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80120bc:	e027      	b.n	801210e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80120be:	f107 0308 	add.w	r3, r7, #8
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7fb ff8e 	bl	800dfe4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80120cc:	e01f      	b.n	801210e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80120ce:	4b58      	ldr	r3, [pc, #352]	; (8012230 <UART_SetConfig+0x9cc>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f003 0320 	and.w	r3, r3, #32
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d009      	beq.n	80120ee <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80120da:	4b55      	ldr	r3, [pc, #340]	; (8012230 <UART_SetConfig+0x9cc>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	08db      	lsrs	r3, r3, #3
 80120e0:	f003 0303 	and.w	r3, r3, #3
 80120e4:	4a53      	ldr	r2, [pc, #332]	; (8012234 <UART_SetConfig+0x9d0>)
 80120e6:	fa22 f303 	lsr.w	r3, r2, r3
 80120ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80120ec:	e00f      	b.n	801210e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80120ee:	4b51      	ldr	r3, [pc, #324]	; (8012234 <UART_SetConfig+0x9d0>)
 80120f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80120f2:	e00c      	b.n	801210e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80120f4:	4b4c      	ldr	r3, [pc, #304]	; (8012228 <UART_SetConfig+0x9c4>)
 80120f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80120f8:	e009      	b.n	801210e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80120fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012100:	e005      	b.n	801210e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8012102:	2300      	movs	r3, #0
 8012104:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012106:	2301      	movs	r3, #1
 8012108:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801210c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012110:	2b00      	cmp	r3, #0
 8012112:	f000 80ea 	beq.w	80122ea <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801211a:	4a44      	ldr	r2, [pc, #272]	; (801222c <UART_SetConfig+0x9c8>)
 801211c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012120:	461a      	mov	r2, r3
 8012122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012124:	fbb3 f3f2 	udiv	r3, r3, r2
 8012128:	005a      	lsls	r2, r3, #1
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	685b      	ldr	r3, [r3, #4]
 801212e:	085b      	lsrs	r3, r3, #1
 8012130:	441a      	add	r2, r3
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	685b      	ldr	r3, [r3, #4]
 8012136:	fbb2 f3f3 	udiv	r3, r2, r3
 801213a:	b29b      	uxth	r3, r3
 801213c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012140:	2b0f      	cmp	r3, #15
 8012142:	d916      	bls.n	8012172 <UART_SetConfig+0x90e>
 8012144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801214a:	d212      	bcs.n	8012172 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214e:	b29b      	uxth	r3, r3
 8012150:	f023 030f 	bic.w	r3, r3, #15
 8012154:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012158:	085b      	lsrs	r3, r3, #1
 801215a:	b29b      	uxth	r3, r3
 801215c:	f003 0307 	and.w	r3, r3, #7
 8012160:	b29a      	uxth	r2, r3
 8012162:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012164:	4313      	orrs	r3, r2
 8012166:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801216e:	60da      	str	r2, [r3, #12]
 8012170:	e0bb      	b.n	80122ea <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8012172:	2301      	movs	r3, #1
 8012174:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012178:	e0b7      	b.n	80122ea <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 801217a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801217e:	2b20      	cmp	r3, #32
 8012180:	dc4a      	bgt.n	8012218 <UART_SetConfig+0x9b4>
 8012182:	2b00      	cmp	r3, #0
 8012184:	f2c0 8086 	blt.w	8012294 <UART_SetConfig+0xa30>
 8012188:	2b20      	cmp	r3, #32
 801218a:	f200 8083 	bhi.w	8012294 <UART_SetConfig+0xa30>
 801218e:	a201      	add	r2, pc, #4	; (adr r2, 8012194 <UART_SetConfig+0x930>)
 8012190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012194:	0801221f 	.word	0x0801221f
 8012198:	08012239 	.word	0x08012239
 801219c:	08012295 	.word	0x08012295
 80121a0:	08012295 	.word	0x08012295
 80121a4:	08012241 	.word	0x08012241
 80121a8:	08012295 	.word	0x08012295
 80121ac:	08012295 	.word	0x08012295
 80121b0:	08012295 	.word	0x08012295
 80121b4:	08012251 	.word	0x08012251
 80121b8:	08012295 	.word	0x08012295
 80121bc:	08012295 	.word	0x08012295
 80121c0:	08012295 	.word	0x08012295
 80121c4:	08012295 	.word	0x08012295
 80121c8:	08012295 	.word	0x08012295
 80121cc:	08012295 	.word	0x08012295
 80121d0:	08012295 	.word	0x08012295
 80121d4:	08012261 	.word	0x08012261
 80121d8:	08012295 	.word	0x08012295
 80121dc:	08012295 	.word	0x08012295
 80121e0:	08012295 	.word	0x08012295
 80121e4:	08012295 	.word	0x08012295
 80121e8:	08012295 	.word	0x08012295
 80121ec:	08012295 	.word	0x08012295
 80121f0:	08012295 	.word	0x08012295
 80121f4:	08012295 	.word	0x08012295
 80121f8:	08012295 	.word	0x08012295
 80121fc:	08012295 	.word	0x08012295
 8012200:	08012295 	.word	0x08012295
 8012204:	08012295 	.word	0x08012295
 8012208:	08012295 	.word	0x08012295
 801220c:	08012295 	.word	0x08012295
 8012210:	08012295 	.word	0x08012295
 8012214:	08012287 	.word	0x08012287
 8012218:	2b40      	cmp	r3, #64	; 0x40
 801221a:	d037      	beq.n	801228c <UART_SetConfig+0xa28>
 801221c:	e03a      	b.n	8012294 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801221e:	f7fa f939 	bl	800c494 <HAL_RCC_GetPCLK1Freq>
 8012222:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012224:	e03c      	b.n	80122a0 <UART_SetConfig+0xa3c>
 8012226:	bf00      	nop
 8012228:	003d0900 	.word	0x003d0900
 801222c:	08019290 	.word	0x08019290
 8012230:	58024400 	.word	0x58024400
 8012234:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012238:	f7fa f942 	bl	800c4c0 <HAL_RCC_GetPCLK2Freq>
 801223c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801223e:	e02f      	b.n	80122a0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012240:	f107 0314 	add.w	r3, r7, #20
 8012244:	4618      	mov	r0, r3
 8012246:	f7fb fd79 	bl	800dd3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801224e:	e027      	b.n	80122a0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012250:	f107 0308 	add.w	r3, r7, #8
 8012254:	4618      	mov	r0, r3
 8012256:	f7fb fec5 	bl	800dfe4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801225e:	e01f      	b.n	80122a0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012260:	4b2c      	ldr	r3, [pc, #176]	; (8012314 <UART_SetConfig+0xab0>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	f003 0320 	and.w	r3, r3, #32
 8012268:	2b00      	cmp	r3, #0
 801226a:	d009      	beq.n	8012280 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801226c:	4b29      	ldr	r3, [pc, #164]	; (8012314 <UART_SetConfig+0xab0>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	08db      	lsrs	r3, r3, #3
 8012272:	f003 0303 	and.w	r3, r3, #3
 8012276:	4a28      	ldr	r2, [pc, #160]	; (8012318 <UART_SetConfig+0xab4>)
 8012278:	fa22 f303 	lsr.w	r3, r2, r3
 801227c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801227e:	e00f      	b.n	80122a0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8012280:	4b25      	ldr	r3, [pc, #148]	; (8012318 <UART_SetConfig+0xab4>)
 8012282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012284:	e00c      	b.n	80122a0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012286:	4b25      	ldr	r3, [pc, #148]	; (801231c <UART_SetConfig+0xab8>)
 8012288:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801228a:	e009      	b.n	80122a0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801228c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012290:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012292:	e005      	b.n	80122a0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8012294:	2300      	movs	r3, #0
 8012296:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012298:	2301      	movs	r3, #1
 801229a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801229e:	bf00      	nop
    }

    if (pclk != 0U)
 80122a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d021      	beq.n	80122ea <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122aa:	4a1d      	ldr	r2, [pc, #116]	; (8012320 <UART_SetConfig+0xabc>)
 80122ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122b0:	461a      	mov	r2, r3
 80122b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	085b      	lsrs	r3, r3, #1
 80122be:	441a      	add	r2, r3
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	685b      	ldr	r3, [r3, #4]
 80122c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80122cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ce:	2b0f      	cmp	r3, #15
 80122d0:	d908      	bls.n	80122e4 <UART_SetConfig+0xa80>
 80122d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122d8:	d204      	bcs.n	80122e4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122e0:	60da      	str	r2, [r3, #12]
 80122e2:	e002      	b.n	80122ea <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80122e4:	2301      	movs	r3, #1
 80122e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2201      	movs	r2, #1
 80122ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2201      	movs	r2, #1
 80122f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	2200      	movs	r2, #0
 80122fe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2200      	movs	r2, #0
 8012304:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8012306:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801230a:	4618      	mov	r0, r3
 801230c:	3738      	adds	r7, #56	; 0x38
 801230e:	46bd      	mov	sp, r7
 8012310:	bdb0      	pop	{r4, r5, r7, pc}
 8012312:	bf00      	nop
 8012314:	58024400 	.word	0x58024400
 8012318:	03d09000 	.word	0x03d09000
 801231c:	003d0900 	.word	0x003d0900
 8012320:	08019290 	.word	0x08019290

08012324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012324:	b480      	push	{r7}
 8012326:	b083      	sub	sp, #12
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012330:	f003 0301 	and.w	r3, r3, #1
 8012334:	2b00      	cmp	r3, #0
 8012336:	d00a      	beq.n	801234e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	430a      	orrs	r2, r1
 801234c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012352:	f003 0302 	and.w	r3, r3, #2
 8012356:	2b00      	cmp	r3, #0
 8012358:	d00a      	beq.n	8012370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	685b      	ldr	r3, [r3, #4]
 8012360:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	430a      	orrs	r2, r1
 801236e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012374:	f003 0304 	and.w	r3, r3, #4
 8012378:	2b00      	cmp	r3, #0
 801237a:	d00a      	beq.n	8012392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	430a      	orrs	r2, r1
 8012390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012396:	f003 0308 	and.w	r3, r3, #8
 801239a:	2b00      	cmp	r3, #0
 801239c:	d00a      	beq.n	80123b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	685b      	ldr	r3, [r3, #4]
 80123a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	430a      	orrs	r2, r1
 80123b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123b8:	f003 0310 	and.w	r3, r3, #16
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00a      	beq.n	80123d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	689b      	ldr	r3, [r3, #8]
 80123c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	430a      	orrs	r2, r1
 80123d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123da:	f003 0320 	and.w	r3, r3, #32
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d00a      	beq.n	80123f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	689b      	ldr	r3, [r3, #8]
 80123e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	430a      	orrs	r2, r1
 80123f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012400:	2b00      	cmp	r3, #0
 8012402:	d01a      	beq.n	801243a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	430a      	orrs	r2, r1
 8012418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801241e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012422:	d10a      	bne.n	801243a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	430a      	orrs	r2, r1
 8012438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012442:	2b00      	cmp	r3, #0
 8012444:	d00a      	beq.n	801245c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	430a      	orrs	r2, r1
 801245a:	605a      	str	r2, [r3, #4]
  }
}
 801245c:	bf00      	nop
 801245e:	370c      	adds	r7, #12
 8012460:	46bd      	mov	sp, r7
 8012462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012466:	4770      	bx	lr

08012468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b086      	sub	sp, #24
 801246c:	af02      	add	r7, sp, #8
 801246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012478:	f7f3 fd32 	bl	8005ee0 <HAL_GetTick>
 801247c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	f003 0308 	and.w	r3, r3, #8
 8012488:	2b08      	cmp	r3, #8
 801248a:	d10e      	bne.n	80124aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801248c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012490:	9300      	str	r3, [sp, #0]
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2200      	movs	r2, #0
 8012496:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f000 f82f 	bl	80124fe <UART_WaitOnFlagUntilTimeout>
 80124a0:	4603      	mov	r3, r0
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d001      	beq.n	80124aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80124a6:	2303      	movs	r3, #3
 80124a8:	e025      	b.n	80124f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f003 0304 	and.w	r3, r3, #4
 80124b4:	2b04      	cmp	r3, #4
 80124b6:	d10e      	bne.n	80124d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80124b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80124bc:	9300      	str	r3, [sp, #0]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	2200      	movs	r2, #0
 80124c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f000 f819 	bl	80124fe <UART_WaitOnFlagUntilTimeout>
 80124cc:	4603      	mov	r3, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d001      	beq.n	80124d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80124d2:	2303      	movs	r3, #3
 80124d4:	e00f      	b.n	80124f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2220      	movs	r2, #32
 80124da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	2220      	movs	r2, #32
 80124e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2200      	movs	r2, #0
 80124ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2200      	movs	r2, #0
 80124f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80124f4:	2300      	movs	r3, #0
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3710      	adds	r7, #16
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b084      	sub	sp, #16
 8012502:	af00      	add	r7, sp, #0
 8012504:	60f8      	str	r0, [r7, #12]
 8012506:	60b9      	str	r1, [r7, #8]
 8012508:	603b      	str	r3, [r7, #0]
 801250a:	4613      	mov	r3, r2
 801250c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801250e:	e062      	b.n	80125d6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012510:	69bb      	ldr	r3, [r7, #24]
 8012512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012516:	d05e      	beq.n	80125d6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012518:	f7f3 fce2 	bl	8005ee0 <HAL_GetTick>
 801251c:	4602      	mov	r2, r0
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	1ad3      	subs	r3, r2, r3
 8012522:	69ba      	ldr	r2, [r7, #24]
 8012524:	429a      	cmp	r2, r3
 8012526:	d302      	bcc.n	801252e <UART_WaitOnFlagUntilTimeout+0x30>
 8012528:	69bb      	ldr	r3, [r7, #24]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d11d      	bne.n	801256a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	681a      	ldr	r2, [r3, #0]
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801253c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	689a      	ldr	r2, [r3, #8]
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f022 0201 	bic.w	r2, r2, #1
 801254c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	2220      	movs	r2, #32
 8012552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	2220      	movs	r2, #32
 801255a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2200      	movs	r2, #0
 8012562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8012566:	2303      	movs	r3, #3
 8012568:	e045      	b.n	80125f6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f003 0304 	and.w	r3, r3, #4
 8012574:	2b00      	cmp	r3, #0
 8012576:	d02e      	beq.n	80125d6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	69db      	ldr	r3, [r3, #28]
 801257e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012586:	d126      	bne.n	80125d6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012590:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	681a      	ldr	r2, [r3, #0]
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80125a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	689a      	ldr	r2, [r3, #8]
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	f022 0201 	bic.w	r2, r2, #1
 80125b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2220      	movs	r2, #32
 80125b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	2220      	movs	r2, #32
 80125be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	2220      	movs	r2, #32
 80125c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	2200      	movs	r2, #0
 80125ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80125d2:	2303      	movs	r3, #3
 80125d4:	e00f      	b.n	80125f6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	69da      	ldr	r2, [r3, #28]
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	4013      	ands	r3, r2
 80125e0:	68ba      	ldr	r2, [r7, #8]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	bf0c      	ite	eq
 80125e6:	2301      	moveq	r3, #1
 80125e8:	2300      	movne	r3, #0
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	461a      	mov	r2, r3
 80125ee:	79fb      	ldrb	r3, [r7, #7]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d08d      	beq.n	8012510 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80125f4:	2300      	movs	r3, #0
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3710      	adds	r7, #16
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
	...

08012600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012600:	b480      	push	{r7}
 8012602:	b085      	sub	sp, #20
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	4613      	mov	r3, r2
 801260c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	68ba      	ldr	r2, [r7, #8]
 8012612:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	88fa      	ldrh	r2, [r7, #6]
 8012618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	88fa      	ldrh	r2, [r7, #6]
 8012620:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2200      	movs	r2, #0
 8012628:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	689b      	ldr	r3, [r3, #8]
 801262e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012632:	d10e      	bne.n	8012652 <UART_Start_Receive_IT+0x52>
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	691b      	ldr	r3, [r3, #16]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d105      	bne.n	8012648 <UART_Start_Receive_IT+0x48>
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012642:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012646:	e02d      	b.n	80126a4 <UART_Start_Receive_IT+0xa4>
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	22ff      	movs	r2, #255	; 0xff
 801264c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012650:	e028      	b.n	80126a4 <UART_Start_Receive_IT+0xa4>
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	689b      	ldr	r3, [r3, #8]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d10d      	bne.n	8012676 <UART_Start_Receive_IT+0x76>
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	691b      	ldr	r3, [r3, #16]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d104      	bne.n	801266c <UART_Start_Receive_IT+0x6c>
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	22ff      	movs	r2, #255	; 0xff
 8012666:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801266a:	e01b      	b.n	80126a4 <UART_Start_Receive_IT+0xa4>
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	227f      	movs	r2, #127	; 0x7f
 8012670:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012674:	e016      	b.n	80126a4 <UART_Start_Receive_IT+0xa4>
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	689b      	ldr	r3, [r3, #8]
 801267a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801267e:	d10d      	bne.n	801269c <UART_Start_Receive_IT+0x9c>
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	691b      	ldr	r3, [r3, #16]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d104      	bne.n	8012692 <UART_Start_Receive_IT+0x92>
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	227f      	movs	r2, #127	; 0x7f
 801268c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012690:	e008      	b.n	80126a4 <UART_Start_Receive_IT+0xa4>
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	223f      	movs	r2, #63	; 0x3f
 8012696:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801269a:	e003      	b.n	80126a4 <UART_Start_Receive_IT+0xa4>
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2200      	movs	r2, #0
 80126a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2222      	movs	r2, #34	; 0x22
 80126b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	689a      	ldr	r2, [r3, #8]
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	f042 0201 	orr.w	r2, r2, #1
 80126c2:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80126cc:	d12a      	bne.n	8012724 <UART_Start_Receive_IT+0x124>
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126d4:	88fa      	ldrh	r2, [r7, #6]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d324      	bcc.n	8012724 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	689b      	ldr	r3, [r3, #8]
 80126de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80126e2:	d107      	bne.n	80126f4 <UART_Start_Receive_IT+0xf4>
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	691b      	ldr	r3, [r3, #16]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d103      	bne.n	80126f4 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	4a1f      	ldr	r2, [pc, #124]	; (801276c <UART_Start_Receive_IT+0x16c>)
 80126f0:	671a      	str	r2, [r3, #112]	; 0x70
 80126f2:	e002      	b.n	80126fa <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	4a1e      	ldr	r2, [pc, #120]	; (8012770 <UART_Start_Receive_IT+0x170>)
 80126f8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	2200      	movs	r2, #0
 80126fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012710:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	689a      	ldr	r2, [r3, #8]
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8012720:	609a      	str	r2, [r3, #8]
 8012722:	e01b      	b.n	801275c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	689b      	ldr	r3, [r3, #8]
 8012728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801272c:	d107      	bne.n	801273e <UART_Start_Receive_IT+0x13e>
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	691b      	ldr	r3, [r3, #16]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d103      	bne.n	801273e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	4a0e      	ldr	r2, [pc, #56]	; (8012774 <UART_Start_Receive_IT+0x174>)
 801273a:	671a      	str	r2, [r3, #112]	; 0x70
 801273c:	e002      	b.n	8012744 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	4a0d      	ldr	r2, [pc, #52]	; (8012778 <UART_Start_Receive_IT+0x178>)
 8012742:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2200      	movs	r2, #0
 8012748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	681a      	ldr	r2, [r3, #0]
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 801275a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 801275c:	2300      	movs	r3, #0
}
 801275e:	4618      	mov	r0, r3
 8012760:	3714      	adds	r7, #20
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop
 801276c:	08012e25 	.word	0x08012e25
 8012770:	08012c21 	.word	0x08012c21
 8012774:	08012b49 	.word	0x08012b49
 8012778:	08012a71 	.word	0x08012a71

0801277c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	681a      	ldr	r2, [r3, #0]
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012792:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	6899      	ldr	r1, [r3, #8]
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681a      	ldr	r2, [r3, #0]
 801279e:	4b0f      	ldr	r3, [pc, #60]	; (80127dc <UART_EndRxTransfer+0x60>)
 80127a0:	400b      	ands	r3, r1
 80127a2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d107      	bne.n	80127bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	f022 0210 	bic.w	r2, r2, #16
 80127ba:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2220      	movs	r2, #32
 80127c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2200      	movs	r2, #0
 80127c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	2200      	movs	r2, #0
 80127ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 80127d0:	bf00      	nop
 80127d2:	370c      	adds	r7, #12
 80127d4:	46bd      	mov	sp, r7
 80127d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127da:	4770      	bx	lr
 80127dc:	effffffe 	.word	0xeffffffe

080127e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b084      	sub	sp, #16
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	2200      	movs	r2, #0
 80127f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2200      	movs	r2, #0
 80127fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80127fe:	68f8      	ldr	r0, [r7, #12]
 8012800:	f7ff f81a 	bl	8011838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012804:	bf00      	nop
 8012806:	3710      	adds	r7, #16
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801280c:	b480      	push	{r7}
 801280e:	b083      	sub	sp, #12
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801281a:	2b21      	cmp	r3, #33	; 0x21
 801281c:	d12a      	bne.n	8012874 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012824:	b29b      	uxth	r3, r3
 8012826:	2b00      	cmp	r3, #0
 8012828:	d110      	bne.n	801284c <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	681a      	ldr	r2, [r3, #0]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012838:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	681a      	ldr	r2, [r3, #0]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012848:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801284a:	e013      	b.n	8012874 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012850:	781a      	ldrb	r2, [r3, #0]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801285c:	1c5a      	adds	r2, r3, #1
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012868:	b29b      	uxth	r3, r3
 801286a:	3b01      	subs	r3, #1
 801286c:	b29a      	uxth	r2, r3
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8012874:	bf00      	nop
 8012876:	370c      	adds	r7, #12
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr

08012880 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012880:	b480      	push	{r7}
 8012882:	b085      	sub	sp, #20
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801288e:	2b21      	cmp	r3, #33	; 0x21
 8012890:	d12f      	bne.n	80128f2 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012898:	b29b      	uxth	r3, r3
 801289a:	2b00      	cmp	r3, #0
 801289c:	d110      	bne.n	80128c0 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80128ac:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	681a      	ldr	r2, [r3, #0]
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80128bc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80128be:	e018      	b.n	80128f2 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	881b      	ldrh	r3, [r3, #0]
 80128ca:	461a      	mov	r2, r3
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80128d4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128da:	1c9a      	adds	r2, r3, #2
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	3b01      	subs	r3, #1
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80128f2:	bf00      	nop
 80128f4:	3714      	adds	r7, #20
 80128f6:	46bd      	mov	sp, r7
 80128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fc:	4770      	bx	lr

080128fe <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80128fe:	b480      	push	{r7}
 8012900:	b085      	sub	sp, #20
 8012902:	af00      	add	r7, sp, #0
 8012904:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801290c:	2b21      	cmp	r3, #33	; 0x21
 801290e:	d13d      	bne.n	801298c <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012916:	81fb      	strh	r3, [r7, #14]
 8012918:	e035      	b.n	8012986 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012920:	b29b      	uxth	r3, r3
 8012922:	2b00      	cmp	r3, #0
 8012924:	d111      	bne.n	801294a <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	689a      	ldr	r2, [r3, #8]
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8012934:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012944:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8012946:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8012948:	e020      	b.n	801298c <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	69db      	ldr	r3, [r3, #28]
 8012950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012954:	2b00      	cmp	r3, #0
 8012956:	d013      	beq.n	8012980 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801295c:	781a      	ldrb	r2, [r3, #0]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012968:	1c5a      	adds	r2, r3, #1
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012974:	b29b      	uxth	r3, r3
 8012976:	3b01      	subs	r3, #1
 8012978:	b29a      	uxth	r2, r3
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012980:	89fb      	ldrh	r3, [r7, #14]
 8012982:	3b01      	subs	r3, #1
 8012984:	81fb      	strh	r3, [r7, #14]
 8012986:	89fb      	ldrh	r3, [r7, #14]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d1c6      	bne.n	801291a <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 801298c:	bf00      	nop
 801298e:	3714      	adds	r7, #20
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr

08012998 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012998:	b480      	push	{r7}
 801299a:	b085      	sub	sp, #20
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80129a6:	2b21      	cmp	r3, #33	; 0x21
 80129a8:	d142      	bne.n	8012a30 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80129b0:	81fb      	strh	r3, [r7, #14]
 80129b2:	e03a      	b.n	8012a2a <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80129ba:	b29b      	uxth	r3, r3
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d111      	bne.n	80129e4 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	689a      	ldr	r2, [r3, #8]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80129ce:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	681a      	ldr	r2, [r3, #0]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80129de:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80129e0:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80129e2:	e025      	b.n	8012a30 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	69db      	ldr	r3, [r3, #28]
 80129ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d018      	beq.n	8012a24 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129f6:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	881b      	ldrh	r3, [r3, #0]
 80129fc:	461a      	mov	r2, r3
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012a06:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a0c:	1c9a      	adds	r2, r3, #2
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	3b01      	subs	r3, #1
 8012a1c:	b29a      	uxth	r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012a24:	89fb      	ldrh	r3, [r7, #14]
 8012a26:	3b01      	subs	r3, #1
 8012a28:	81fb      	strh	r3, [r7, #14]
 8012a2a:	89fb      	ldrh	r3, [r7, #14]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d1c1      	bne.n	80129b4 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8012a30:	bf00      	nop
 8012a32:	3714      	adds	r7, #20
 8012a34:	46bd      	mov	sp, r7
 8012a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3a:	4770      	bx	lr

08012a3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	681a      	ldr	r2, [r3, #0]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012a52:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2220      	movs	r2, #32
 8012a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2200      	movs	r2, #0
 8012a60:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f7fe fede 	bl	8011824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012a68:	bf00      	nop
 8012a6a:	3708      	adds	r7, #8
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a7e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a86:	2b22      	cmp	r3, #34	; 0x22
 8012a88:	d152      	bne.n	8012b30 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a90:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012a92:	89bb      	ldrh	r3, [r7, #12]
 8012a94:	b2d9      	uxtb	r1, r3
 8012a96:	89fb      	ldrh	r3, [r7, #14]
 8012a98:	b2da      	uxtb	r2, r3
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a9e:	400a      	ands	r2, r1
 8012aa0:	b2d2      	uxtb	r2, r2
 8012aa2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012aa8:	1c5a      	adds	r2, r3, #1
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ab4:	b29b      	uxth	r3, r3
 8012ab6:	3b01      	subs	r3, #1
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d139      	bne.n	8012b40 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	681a      	ldr	r2, [r3, #0]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012ada:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	689a      	ldr	r2, [r3, #8]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	f022 0201 	bic.w	r2, r2, #1
 8012aea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2220      	movs	r2, #32
 8012af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2200      	movs	r2, #0
 8012af8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d10f      	bne.n	8012b22 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	681a      	ldr	r2, [r3, #0]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	f022 0210 	bic.w	r2, r2, #16
 8012b10:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012b18:	4619      	mov	r1, r3
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f7fe fe96 	bl	801184c <HAL_UARTEx_RxEventCallback>
 8012b20:	e002      	b.n	8012b28 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f7ed fff4 	bl	8000b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012b2e:	e007      	b.n	8012b40 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	699a      	ldr	r2, [r3, #24]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	f042 0208 	orr.w	r2, r2, #8
 8012b3e:	619a      	str	r2, [r3, #24]
}
 8012b40:	bf00      	nop
 8012b42:	3710      	adds	r7, #16
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b56:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b5e:	2b22      	cmp	r3, #34	; 0x22
 8012b60:	d152      	bne.n	8012c08 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b68:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b6e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8012b70:	89ba      	ldrh	r2, [r7, #12]
 8012b72:	89fb      	ldrh	r3, [r7, #14]
 8012b74:	4013      	ands	r3, r2
 8012b76:	b29a      	uxth	r2, r3
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b80:	1c9a      	adds	r2, r3, #2
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b8c:	b29b      	uxth	r3, r3
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	b29a      	uxth	r2, r3
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d139      	bne.n	8012c18 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	681a      	ldr	r2, [r3, #0]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012bb2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	689a      	ldr	r2, [r3, #8]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	f022 0201 	bic.w	r2, r2, #1
 8012bc2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2220      	movs	r2, #32
 8012bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	d10f      	bne.n	8012bfa <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	681a      	ldr	r2, [r3, #0]
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	f022 0210 	bic.w	r2, r2, #16
 8012be8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f7fe fe2a 	bl	801184c <HAL_UARTEx_RxEventCallback>
 8012bf8:	e002      	b.n	8012c00 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7ed ff88 	bl	8000b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	2200      	movs	r2, #0
 8012c04:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012c06:	e007      	b.n	8012c18 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	699a      	ldr	r2, [r3, #24]
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f042 0208 	orr.w	r2, r2, #8
 8012c16:	619a      	str	r2, [r3, #24]
}
 8012c18:	bf00      	nop
 8012c1a:	3710      	adds	r7, #16
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}

08012c20 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b088      	sub	sp, #32
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012c2e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	69db      	ldr	r3, [r3, #28]
 8012c36:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	689b      	ldr	r3, [r3, #8]
 8012c46:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c4e:	2b22      	cmp	r3, #34	; 0x22
 8012c50:	f040 80d8 	bne.w	8012e04 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012c5a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012c5c:	e0a8      	b.n	8012db0 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c64:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012c66:	89bb      	ldrh	r3, [r7, #12]
 8012c68:	b2d9      	uxtb	r1, r3
 8012c6a:	8b7b      	ldrh	r3, [r7, #26]
 8012c6c:	b2da      	uxtb	r2, r3
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c72:	400a      	ands	r2, r1
 8012c74:	b2d2      	uxtb	r2, r2
 8012c76:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c7c:	1c5a      	adds	r2, r3, #1
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012c88:	b29b      	uxth	r3, r3
 8012c8a:	3b01      	subs	r3, #1
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	69db      	ldr	r3, [r3, #28]
 8012c9a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012c9c:	69fb      	ldr	r3, [r7, #28]
 8012c9e:	f003 0307 	and.w	r3, r3, #7
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d04d      	beq.n	8012d42 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	f003 0301 	and.w	r3, r3, #1
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d010      	beq.n	8012cd2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d00b      	beq.n	8012cd2 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	2201      	movs	r2, #1
 8012cc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012cc8:	f043 0201 	orr.w	r2, r3, #1
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012cd2:	69fb      	ldr	r3, [r7, #28]
 8012cd4:	f003 0302 	and.w	r3, r3, #2
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d010      	beq.n	8012cfe <UART_RxISR_8BIT_FIFOEN+0xde>
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	f003 0301 	and.w	r3, r3, #1
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d00b      	beq.n	8012cfe <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	2202      	movs	r2, #2
 8012cec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012cf4:	f043 0204 	orr.w	r2, r3, #4
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	f003 0304 	and.w	r3, r3, #4
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d010      	beq.n	8012d2a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	f003 0301 	and.w	r3, r3, #1
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d00b      	beq.n	8012d2a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	2204      	movs	r2, #4
 8012d18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012d20:	f043 0202 	orr.w	r2, r3, #2
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d006      	beq.n	8012d42 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f7fe fd7f 	bl	8011838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d130      	bne.n	8012db0 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012d5c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	6899      	ldr	r1, [r3, #8]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681a      	ldr	r2, [r3, #0]
 8012d68:	4b2c      	ldr	r3, [pc, #176]	; (8012e1c <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 8012d6a:	400b      	ands	r3, r1
 8012d6c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2220      	movs	r2, #32
 8012d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2200      	movs	r2, #0
 8012d7a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d10f      	bne.n	8012da4 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	681a      	ldr	r2, [r3, #0]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f022 0210 	bic.w	r2, r2, #16
 8012d92:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f7fe fd55 	bl	801184c <HAL_UARTEx_RxEventCallback>
 8012da2:	e002      	b.n	8012daa <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f7ed feb3 	bl	8000b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2200      	movs	r2, #0
 8012dae:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012db0:	89fb      	ldrh	r3, [r7, #14]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d005      	beq.n	8012dc2 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	f003 0320 	and.w	r3, r3, #32
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	f47f af4e 	bne.w	8012c5e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012dc8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012dca:	897b      	ldrh	r3, [r7, #10]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d021      	beq.n	8012e14 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012dd6:	897a      	ldrh	r2, [r7, #10]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d21b      	bcs.n	8012e14 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	689a      	ldr	r2, [r3, #8]
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8012dea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	4a0c      	ldr	r2, [pc, #48]	; (8012e20 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8012df0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	681a      	ldr	r2, [r3, #0]
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	f042 0220 	orr.w	r2, r2, #32
 8012e00:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012e02:	e007      	b.n	8012e14 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	699a      	ldr	r2, [r3, #24]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f042 0208 	orr.w	r2, r2, #8
 8012e12:	619a      	str	r2, [r3, #24]
}
 8012e14:	bf00      	nop
 8012e16:	3720      	adds	r7, #32
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}
 8012e1c:	effffffe 	.word	0xeffffffe
 8012e20:	08012a71 	.word	0x08012a71

08012e24 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b08a      	sub	sp, #40	; 0x28
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012e32:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	69db      	ldr	r3, [r3, #28]
 8012e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	689b      	ldr	r3, [r3, #8]
 8012e4a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012e52:	2b22      	cmp	r3, #34	; 0x22
 8012e54:	f040 80d8 	bne.w	8013008 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012e5e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012e60:	e0a8      	b.n	8012fb4 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e68:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e6e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8012e70:	8aba      	ldrh	r2, [r7, #20]
 8012e72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e74:	4013      	ands	r3, r2
 8012e76:	b29a      	uxth	r2, r3
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e80:	1c9a      	adds	r2, r3, #2
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012e8c:	b29b      	uxth	r3, r3
 8012e8e:	3b01      	subs	r3, #1
 8012e90:	b29a      	uxth	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	69db      	ldr	r3, [r3, #28]
 8012e9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea2:	f003 0307 	and.w	r3, r3, #7
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d04d      	beq.n	8012f46 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eac:	f003 0301 	and.w	r3, r3, #1
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d010      	beq.n	8012ed6 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8012eb4:	69fb      	ldr	r3, [r7, #28]
 8012eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00b      	beq.n	8012ed6 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ecc:	f043 0201 	orr.w	r2, r3, #1
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed8:	f003 0302 	and.w	r3, r3, #2
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d010      	beq.n	8012f02 <UART_RxISR_16BIT_FIFOEN+0xde>
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	f003 0301 	and.w	r3, r3, #1
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d00b      	beq.n	8012f02 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	2202      	movs	r2, #2
 8012ef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ef8:	f043 0204 	orr.w	r2, r3, #4
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f04:	f003 0304 	and.w	r3, r3, #4
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d010      	beq.n	8012f2e <UART_RxISR_16BIT_FIFOEN+0x10a>
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	f003 0301 	and.w	r3, r3, #1
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d00b      	beq.n	8012f2e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	2204      	movs	r2, #4
 8012f1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f24:	f043 0202 	orr.w	r2, r3, #2
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d006      	beq.n	8012f46 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f7fe fc7d 	bl	8011838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2200      	movs	r2, #0
 8012f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f4c:	b29b      	uxth	r3, r3
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d130      	bne.n	8012fb4 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	681a      	ldr	r2, [r3, #0]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012f60:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	6899      	ldr	r1, [r3, #8]
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681a      	ldr	r2, [r3, #0]
 8012f6c:	4b2c      	ldr	r3, [pc, #176]	; (8013020 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 8012f6e:	400b      	ands	r3, r1
 8012f70:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2220      	movs	r2, #32
 8012f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f84:	2b01      	cmp	r3, #1
 8012f86:	d10f      	bne.n	8012fa8 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	681a      	ldr	r2, [r3, #0]
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	f022 0210 	bic.w	r2, r2, #16
 8012f96:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012f9e:	4619      	mov	r1, r3
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f7fe fc53 	bl	801184c <HAL_UARTEx_RxEventCallback>
 8012fa6:	e002      	b.n	8012fae <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f7ed fdb1 	bl	8000b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012fb4:	8afb      	ldrh	r3, [r7, #22]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d005      	beq.n	8012fc6 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8012fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fbc:	f003 0320 	and.w	r3, r3, #32
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	f47f af4e 	bne.w	8012e62 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012fcc:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012fce:	89fb      	ldrh	r3, [r7, #14]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d021      	beq.n	8013018 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012fda:	89fa      	ldrh	r2, [r7, #14]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d21b      	bcs.n	8013018 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	689a      	ldr	r2, [r3, #8]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8012fee:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	4a0c      	ldr	r2, [pc, #48]	; (8013024 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8012ff4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	681a      	ldr	r2, [r3, #0]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	f042 0220 	orr.w	r2, r2, #32
 8013004:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013006:	e007      	b.n	8013018 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	699a      	ldr	r2, [r3, #24]
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	f042 0208 	orr.w	r2, r2, #8
 8013016:	619a      	str	r2, [r3, #24]
}
 8013018:	bf00      	nop
 801301a:	3728      	adds	r7, #40	; 0x28
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}
 8013020:	effffffe 	.word	0xeffffffe
 8013024:	08012b49 	.word	0x08012b49

08013028 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013028:	b480      	push	{r7}
 801302a:	b083      	sub	sp, #12
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013030:	bf00      	nop
 8013032:	370c      	adds	r7, #12
 8013034:	46bd      	mov	sp, r7
 8013036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303a:	4770      	bx	lr

0801303c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801303c:	b480      	push	{r7}
 801303e:	b083      	sub	sp, #12
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013044:	bf00      	nop
 8013046:	370c      	adds	r7, #12
 8013048:	46bd      	mov	sp, r7
 801304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304e:	4770      	bx	lr

08013050 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013050:	b480      	push	{r7}
 8013052:	b083      	sub	sp, #12
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013058:	bf00      	nop
 801305a:	370c      	adds	r7, #12
 801305c:	46bd      	mov	sp, r7
 801305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013062:	4770      	bx	lr

08013064 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013064:	b480      	push	{r7}
 8013066:	b085      	sub	sp, #20
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013072:	2b01      	cmp	r3, #1
 8013074:	d101      	bne.n	801307a <HAL_UARTEx_DisableFifoMode+0x16>
 8013076:	2302      	movs	r3, #2
 8013078:	e027      	b.n	80130ca <HAL_UARTEx_DisableFifoMode+0x66>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2201      	movs	r2, #1
 801307e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2224      	movs	r2, #36	; 0x24
 8013086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	681a      	ldr	r2, [r3, #0]
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	f022 0201 	bic.w	r2, r2, #1
 80130a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80130a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2200      	movs	r2, #0
 80130ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	68fa      	ldr	r2, [r7, #12]
 80130b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2220      	movs	r2, #32
 80130bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2200      	movs	r2, #0
 80130c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80130c8:	2300      	movs	r3, #0
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3714      	adds	r7, #20
 80130ce:	46bd      	mov	sp, r7
 80130d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d4:	4770      	bx	lr

080130d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80130d6:	b580      	push	{r7, lr}
 80130d8:	b084      	sub	sp, #16
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
 80130de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	d101      	bne.n	80130ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80130ea:	2302      	movs	r3, #2
 80130ec:	e02d      	b.n	801314a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2201      	movs	r2, #1
 80130f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2224      	movs	r2, #36	; 0x24
 80130fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	f022 0201 	bic.w	r2, r2, #1
 8013114:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	689b      	ldr	r3, [r3, #8]
 801311c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	683a      	ldr	r2, [r7, #0]
 8013126:	430a      	orrs	r2, r1
 8013128:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f000 f850 	bl	80131d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	68fa      	ldr	r2, [r7, #12]
 8013136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2220      	movs	r2, #32
 801313c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013148:	2300      	movs	r3, #0
}
 801314a:	4618      	mov	r0, r3
 801314c:	3710      	adds	r7, #16
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}

08013152 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013152:	b580      	push	{r7, lr}
 8013154:	b084      	sub	sp, #16
 8013156:	af00      	add	r7, sp, #0
 8013158:	6078      	str	r0, [r7, #4]
 801315a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013162:	2b01      	cmp	r3, #1
 8013164:	d101      	bne.n	801316a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013166:	2302      	movs	r3, #2
 8013168:	e02d      	b.n	80131c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2201      	movs	r2, #1
 801316e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2224      	movs	r2, #36	; 0x24
 8013176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	681a      	ldr	r2, [r3, #0]
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	f022 0201 	bic.w	r2, r2, #1
 8013190:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	689b      	ldr	r3, [r3, #8]
 8013198:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	683a      	ldr	r2, [r7, #0]
 80131a2:	430a      	orrs	r2, r1
 80131a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80131a6:	6878      	ldr	r0, [r7, #4]
 80131a8:	f000 f812 	bl	80131d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	68fa      	ldr	r2, [r7, #12]
 80131b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2220      	movs	r2, #32
 80131b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2200      	movs	r2, #0
 80131c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80131c4:	2300      	movs	r3, #0
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3710      	adds	r7, #16
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
	...

080131d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80131d0:	b480      	push	{r7}
 80131d2:	b085      	sub	sp, #20
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d108      	bne.n	80131f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2201      	movs	r2, #1
 80131e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2201      	movs	r2, #1
 80131ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80131f0:	e031      	b.n	8013256 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80131f2:	2310      	movs	r3, #16
 80131f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80131f6:	2310      	movs	r3, #16
 80131f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	689b      	ldr	r3, [r3, #8]
 8013200:	0e5b      	lsrs	r3, r3, #25
 8013202:	b2db      	uxtb	r3, r3
 8013204:	f003 0307 	and.w	r3, r3, #7
 8013208:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	689b      	ldr	r3, [r3, #8]
 8013210:	0f5b      	lsrs	r3, r3, #29
 8013212:	b2db      	uxtb	r3, r3
 8013214:	f003 0307 	and.w	r3, r3, #7
 8013218:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801321a:	7bbb      	ldrb	r3, [r7, #14]
 801321c:	7b3a      	ldrb	r2, [r7, #12]
 801321e:	4911      	ldr	r1, [pc, #68]	; (8013264 <UARTEx_SetNbDataToProcess+0x94>)
 8013220:	5c8a      	ldrb	r2, [r1, r2]
 8013222:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013226:	7b3a      	ldrb	r2, [r7, #12]
 8013228:	490f      	ldr	r1, [pc, #60]	; (8013268 <UARTEx_SetNbDataToProcess+0x98>)
 801322a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801322c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013230:	b29a      	uxth	r2, r3
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013238:	7bfb      	ldrb	r3, [r7, #15]
 801323a:	7b7a      	ldrb	r2, [r7, #13]
 801323c:	4909      	ldr	r1, [pc, #36]	; (8013264 <UARTEx_SetNbDataToProcess+0x94>)
 801323e:	5c8a      	ldrb	r2, [r1, r2]
 8013240:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013244:	7b7a      	ldrb	r2, [r7, #13]
 8013246:	4908      	ldr	r1, [pc, #32]	; (8013268 <UARTEx_SetNbDataToProcess+0x98>)
 8013248:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801324a:	fb93 f3f2 	sdiv	r3, r3, r2
 801324e:	b29a      	uxth	r2, r3
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013256:	bf00      	nop
 8013258:	3714      	adds	r7, #20
 801325a:	46bd      	mov	sp, r7
 801325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013260:	4770      	bx	lr
 8013262:	bf00      	nop
 8013264:	080192a8 	.word	0x080192a8
 8013268:	080192b0 	.word	0x080192b0

0801326c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801326c:	b084      	sub	sp, #16
 801326e:	b480      	push	{r7}
 8013270:	b085      	sub	sp, #20
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
 8013276:	f107 001c 	add.w	r0, r7, #28
 801327a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801327e:	2300      	movs	r3, #0
 8013280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8013282:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8013284:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8013286:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8013288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801328a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801328e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8013290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8013292:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8013294:	68fa      	ldr	r2, [r7, #12]
 8013296:	4313      	orrs	r3, r2
 8013298:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	685a      	ldr	r2, [r3, #4]
 801329e:	4b07      	ldr	r3, [pc, #28]	; (80132bc <SDMMC_Init+0x50>)
 80132a0:	4013      	ands	r3, r2
 80132a2:	68fa      	ldr	r2, [r7, #12]
 80132a4:	431a      	orrs	r2, r3
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80132aa:	2300      	movs	r3, #0
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3714      	adds	r7, #20
 80132b0:	46bd      	mov	sp, r7
 80132b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b6:	b004      	add	sp, #16
 80132b8:	4770      	bx	lr
 80132ba:	bf00      	nop
 80132bc:	ffc02c00 	.word	0xffc02c00

080132c0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	370c      	adds	r7, #12
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr

080132da <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80132da:	b480      	push	{r7}
 80132dc:	b083      	sub	sp, #12
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f043 0203 	orr.w	r2, r3, #3
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80132ee:	2300      	movs	r3, #0
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	370c      	adds	r7, #12
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr

080132fc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80132fc:	b480      	push	{r7}
 80132fe:	b083      	sub	sp, #12
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	f003 0303 	and.w	r3, r3, #3
}
 801330c:	4618      	mov	r0, r3
 801330e:	370c      	adds	r7, #12
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr

08013318 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013318:	b480      	push	{r7}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013322:	2300      	movs	r3, #0
 8013324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	681a      	ldr	r2, [r3, #0]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013336:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801333c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8013342:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013344:	68fa      	ldr	r2, [r7, #12]
 8013346:	4313      	orrs	r3, r2
 8013348:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	68da      	ldr	r2, [r3, #12]
 801334e:	4b06      	ldr	r3, [pc, #24]	; (8013368 <SDMMC_SendCommand+0x50>)
 8013350:	4013      	ands	r3, r2
 8013352:	68fa      	ldr	r2, [r7, #12]
 8013354:	431a      	orrs	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801335a:	2300      	movs	r3, #0
}
 801335c:	4618      	mov	r0, r3
 801335e:	3714      	adds	r7, #20
 8013360:	46bd      	mov	sp, r7
 8013362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013366:	4770      	bx	lr
 8013368:	fffee0c0 	.word	0xfffee0c0

0801336c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801336c:	b480      	push	{r7}
 801336e:	b083      	sub	sp, #12
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	691b      	ldr	r3, [r3, #16]
 8013378:	b2db      	uxtb	r3, r3
}
 801337a:	4618      	mov	r0, r3
 801337c:	370c      	adds	r7, #12
 801337e:	46bd      	mov	sp, r7
 8013380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013384:	4770      	bx	lr

08013386 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013386:	b480      	push	{r7}
 8013388:	b085      	sub	sp, #20
 801338a:	af00      	add	r7, sp, #0
 801338c:	6078      	str	r0, [r7, #4]
 801338e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	3314      	adds	r3, #20
 8013394:	461a      	mov	r2, r3
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	4413      	add	r3, r2
 801339a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	681b      	ldr	r3, [r3, #0]
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3714      	adds	r7, #20
 80133a4:	46bd      	mov	sp, r7
 80133a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133aa:	4770      	bx	lr

080133ac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80133ac:	b480      	push	{r7}
 80133ae:	b085      	sub	sp, #20
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80133b6:	2300      	movs	r3, #0
 80133b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	685a      	ldr	r2, [r3, #4]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80133d2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80133d8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80133de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80133e0:	68fa      	ldr	r2, [r7, #12]
 80133e2:	4313      	orrs	r3, r2
 80133e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	431a      	orrs	r2, r3
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80133f6:	2300      	movs	r3, #0

}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3714      	adds	r7, #20
 80133fc:	46bd      	mov	sp, r7
 80133fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013402:	4770      	bx	lr

08013404 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b088      	sub	sp, #32
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013412:	2310      	movs	r3, #16
 8013414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013416:	f44f 7380 	mov.w	r3, #256	; 0x100
 801341a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801341c:	2300      	movs	r3, #0
 801341e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013424:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013426:	f107 0308 	add.w	r3, r7, #8
 801342a:	4619      	mov	r1, r3
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f7ff ff73 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013432:	f241 3288 	movw	r2, #5000	; 0x1388
 8013436:	2110      	movs	r1, #16
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f000 f9b7 	bl	80137ac <SDMMC_GetCmdResp1>
 801343e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013440:	69fb      	ldr	r3, [r7, #28]
}
 8013442:	4618      	mov	r0, r3
 8013444:	3720      	adds	r7, #32
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}

0801344a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801344a:	b580      	push	{r7, lr}
 801344c:	b088      	sub	sp, #32
 801344e:	af00      	add	r7, sp, #0
 8013450:	6078      	str	r0, [r7, #4]
 8013452:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013458:	2307      	movs	r3, #7
 801345a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801345c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013462:	2300      	movs	r3, #0
 8013464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801346a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801346c:	f107 0308 	add.w	r3, r7, #8
 8013470:	4619      	mov	r1, r3
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f7ff ff50 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8013478:	f241 3288 	movw	r2, #5000	; 0x1388
 801347c:	2107      	movs	r1, #7
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f000 f994 	bl	80137ac <SDMMC_GetCmdResp1>
 8013484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013486:	69fb      	ldr	r3, [r7, #28]
}
 8013488:	4618      	mov	r0, r3
 801348a:	3720      	adds	r7, #32
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b088      	sub	sp, #32
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013498:	2300      	movs	r3, #0
 801349a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801349c:	2300      	movs	r3, #0
 801349e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80134a0:	2300      	movs	r3, #0
 80134a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80134a4:	2300      	movs	r3, #0
 80134a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80134a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134ae:	f107 0308 	add.w	r3, r7, #8
 80134b2:	4619      	mov	r1, r3
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f7ff ff2f 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f000 fbb8 	bl	8013c30 <SDMMC_GetCmdError>
 80134c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80134c2:	69fb      	ldr	r3, [r7, #28]
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	3720      	adds	r7, #32
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b088      	sub	sp, #32
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80134d4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80134d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80134da:	2308      	movs	r3, #8
 80134dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80134de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80134e4:	2300      	movs	r3, #0
 80134e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80134e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134ee:	f107 0308 	add.w	r3, r7, #8
 80134f2:	4619      	mov	r1, r3
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f7ff ff0f 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f000 fb4a 	bl	8013b94 <SDMMC_GetCmdResp7>
 8013500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013502:	69fb      	ldr	r3, [r7, #28]
}
 8013504:	4618      	mov	r0, r3
 8013506:	3720      	adds	r7, #32
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b088      	sub	sp, #32
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801351a:	2337      	movs	r3, #55	; 0x37
 801351c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801351e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013524:	2300      	movs	r3, #0
 8013526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801352c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801352e:	f107 0308 	add.w	r3, r7, #8
 8013532:	4619      	mov	r1, r3
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7ff feef 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801353a:	f241 3288 	movw	r2, #5000	; 0x1388
 801353e:	2137      	movs	r1, #55	; 0x37
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f000 f933 	bl	80137ac <SDMMC_GetCmdResp1>
 8013546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013548:	69fb      	ldr	r3, [r7, #28]
}
 801354a:	4618      	mov	r0, r3
 801354c:	3720      	adds	r7, #32
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}

08013552 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013552:	b580      	push	{r7, lr}
 8013554:	b088      	sub	sp, #32
 8013556:	af00      	add	r7, sp, #0
 8013558:	6078      	str	r0, [r7, #4]
 801355a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013560:	2329      	movs	r3, #41	; 0x29
 8013562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801356a:	2300      	movs	r3, #0
 801356c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801356e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013572:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013574:	f107 0308 	add.w	r3, r7, #8
 8013578:	4619      	mov	r1, r3
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f7ff fecc 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f000 fa4f 	bl	8013a24 <SDMMC_GetCmdResp3>
 8013586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013588:	69fb      	ldr	r3, [r7, #28]
}
 801358a:	4618      	mov	r0, r3
 801358c:	3720      	adds	r7, #32
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}

08013592 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8013592:	b580      	push	{r7, lr}
 8013594:	b088      	sub	sp, #32
 8013596:	af00      	add	r7, sp, #0
 8013598:	6078      	str	r0, [r7, #4]
 801359a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80135a0:	2306      	movs	r3, #6
 80135a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80135a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80135aa:	2300      	movs	r3, #0
 80135ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80135ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80135b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80135b4:	f107 0308 	add.w	r3, r7, #8
 80135b8:	4619      	mov	r1, r3
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f7ff feac 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80135c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80135c4:	2106      	movs	r1, #6
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f000 f8f0 	bl	80137ac <SDMMC_GetCmdResp1>
 80135cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80135ce:	69fb      	ldr	r3, [r7, #28]
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	3720      	adds	r7, #32
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b088      	sub	sp, #32
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80135e0:	2300      	movs	r3, #0
 80135e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80135e4:	2333      	movs	r3, #51	; 0x33
 80135e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80135e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80135ee:	2300      	movs	r3, #0
 80135f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80135f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80135f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80135f8:	f107 0308 	add.w	r3, r7, #8
 80135fc:	4619      	mov	r1, r3
 80135fe:	6878      	ldr	r0, [r7, #4]
 8013600:	f7ff fe8a 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013604:	f241 3288 	movw	r2, #5000	; 0x1388
 8013608:	2133      	movs	r1, #51	; 0x33
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	f000 f8ce 	bl	80137ac <SDMMC_GetCmdResp1>
 8013610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013612:	69fb      	ldr	r3, [r7, #28]
}
 8013614:	4618      	mov	r0, r3
 8013616:	3720      	adds	r7, #32
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}

0801361c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b088      	sub	sp, #32
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013624:	2300      	movs	r3, #0
 8013626:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013628:	2302      	movs	r3, #2
 801362a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801362c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013632:	2300      	movs	r3, #0
 8013634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801363a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801363c:	f107 0308 	add.w	r3, r7, #8
 8013640:	4619      	mov	r1, r3
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f7ff fe68 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f000 f9a1 	bl	8013990 <SDMMC_GetCmdResp2>
 801364e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013650:	69fb      	ldr	r3, [r7, #28]
}
 8013652:	4618      	mov	r0, r3
 8013654:	3720      	adds	r7, #32
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}

0801365a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801365a:	b580      	push	{r7, lr}
 801365c:	b088      	sub	sp, #32
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
 8013662:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013668:	2309      	movs	r3, #9
 801366a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801366c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013672:	2300      	movs	r3, #0
 8013674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801367a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801367c:	f107 0308 	add.w	r3, r7, #8
 8013680:	4619      	mov	r1, r3
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f7ff fe48 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f000 f981 	bl	8013990 <SDMMC_GetCmdResp2>
 801368e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013690:	69fb      	ldr	r3, [r7, #28]
}
 8013692:	4618      	mov	r0, r3
 8013694:	3720      	adds	r7, #32
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}

0801369a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801369a:	b580      	push	{r7, lr}
 801369c:	b088      	sub	sp, #32
 801369e:	af00      	add	r7, sp, #0
 80136a0:	6078      	str	r0, [r7, #4]
 80136a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80136a4:	2300      	movs	r3, #0
 80136a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80136a8:	2303      	movs	r3, #3
 80136aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80136ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80136b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80136b2:	2300      	movs	r3, #0
 80136b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80136b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80136bc:	f107 0308 	add.w	r3, r7, #8
 80136c0:	4619      	mov	r1, r3
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f7ff fe28 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80136c8:	683a      	ldr	r2, [r7, #0]
 80136ca:	2103      	movs	r1, #3
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f000 f9e9 	bl	8013aa4 <SDMMC_GetCmdResp6>
 80136d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80136d4:	69fb      	ldr	r3, [r7, #28]
}
 80136d6:	4618      	mov	r0, r3
 80136d8:	3720      	adds	r7, #32
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}

080136de <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80136de:	b580      	push	{r7, lr}
 80136e0:	b088      	sub	sp, #32
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	6078      	str	r0, [r7, #4]
 80136e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80136ec:	230d      	movs	r3, #13
 80136ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80136f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80136f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80136f6:	2300      	movs	r3, #0
 80136f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80136fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013700:	f107 0308 	add.w	r3, r7, #8
 8013704:	4619      	mov	r1, r3
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f7ff fe06 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013710:	210d      	movs	r1, #13
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f000 f84a 	bl	80137ac <SDMMC_GetCmdResp1>
 8013718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801371a:	69fb      	ldr	r3, [r7, #28]
}
 801371c:	4618      	mov	r0, r3
 801371e:	3720      	adds	r7, #32
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}

08013724 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b088      	sub	sp, #32
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801372c:	2300      	movs	r3, #0
 801372e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8013730:	230d      	movs	r3, #13
 8013732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801373a:	2300      	movs	r3, #0
 801373c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801373e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013742:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013744:	f107 0308 	add.w	r3, r7, #8
 8013748:	4619      	mov	r1, r3
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f7ff fde4 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8013750:	f241 3288 	movw	r2, #5000	; 0x1388
 8013754:	210d      	movs	r1, #13
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f000 f828 	bl	80137ac <SDMMC_GetCmdResp1>
 801375c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801375e:	69fb      	ldr	r3, [r7, #28]
}
 8013760:	4618      	mov	r0, r3
 8013762:	3720      	adds	r7, #32
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b088      	sub	sp, #32
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8013770:	2300      	movs	r3, #0
 8013772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8013774:	230b      	movs	r3, #11
 8013776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013778:	f44f 7380 	mov.w	r3, #256	; 0x100
 801377c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801377e:	2300      	movs	r3, #0
 8013780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013786:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013788:	f107 0308 	add.w	r3, r7, #8
 801378c:	4619      	mov	r1, r3
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7ff fdc2 	bl	8013318 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8013794:	f241 3288 	movw	r2, #5000	; 0x1388
 8013798:	210b      	movs	r1, #11
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f000 f806 	bl	80137ac <SDMMC_GetCmdResp1>
 80137a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80137a2:	69fb      	ldr	r3, [r7, #28]
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	3720      	adds	r7, #32
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}

080137ac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b088      	sub	sp, #32
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	460b      	mov	r3, r1
 80137b6:	607a      	str	r2, [r7, #4]
 80137b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80137ba:	4b70      	ldr	r3, [pc, #448]	; (801397c <SDMMC_GetCmdResp1+0x1d0>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	4a70      	ldr	r2, [pc, #448]	; (8013980 <SDMMC_GetCmdResp1+0x1d4>)
 80137c0:	fba2 2303 	umull	r2, r3, r2, r3
 80137c4:	0a5a      	lsrs	r2, r3, #9
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	fb02 f303 	mul.w	r3, r2, r3
 80137cc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80137ce:	69fb      	ldr	r3, [r7, #28]
 80137d0:	1e5a      	subs	r2, r3, #1
 80137d2:	61fa      	str	r2, [r7, #28]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d102      	bne.n	80137de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80137d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80137dc:	e0c9      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137e2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80137e4:	69ba      	ldr	r2, [r7, #24]
 80137e6:	4b67      	ldr	r3, [pc, #412]	; (8013984 <SDMMC_GetCmdResp1+0x1d8>)
 80137e8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d0ef      	beq.n	80137ce <SDMMC_GetCmdResp1+0x22>
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d1ea      	bne.n	80137ce <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137fc:	f003 0304 	and.w	r3, r3, #4
 8013800:	2b00      	cmp	r3, #0
 8013802:	d004      	beq.n	801380e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2204      	movs	r2, #4
 8013808:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801380a:	2304      	movs	r3, #4
 801380c:	e0b1      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013812:	f003 0301 	and.w	r3, r3, #1
 8013816:	2b00      	cmp	r3, #0
 8013818:	d004      	beq.n	8013824 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	2201      	movs	r2, #1
 801381e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013820:	2301      	movs	r3, #1
 8013822:	e0a6      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	4a58      	ldr	r2, [pc, #352]	; (8013988 <SDMMC_GetCmdResp1+0x1dc>)
 8013828:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801382a:	68f8      	ldr	r0, [r7, #12]
 801382c:	f7ff fd9e 	bl	801336c <SDMMC_GetCommandResponse>
 8013830:	4603      	mov	r3, r0
 8013832:	461a      	mov	r2, r3
 8013834:	7afb      	ldrb	r3, [r7, #11]
 8013836:	4293      	cmp	r3, r2
 8013838:	d001      	beq.n	801383e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801383a:	2301      	movs	r3, #1
 801383c:	e099      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801383e:	2100      	movs	r1, #0
 8013840:	68f8      	ldr	r0, [r7, #12]
 8013842:	f7ff fda0 	bl	8013386 <SDMMC_GetResponse>
 8013846:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013848:	697a      	ldr	r2, [r7, #20]
 801384a:	4b50      	ldr	r3, [pc, #320]	; (801398c <SDMMC_GetCmdResp1+0x1e0>)
 801384c:	4013      	ands	r3, r2
 801384e:	2b00      	cmp	r3, #0
 8013850:	d101      	bne.n	8013856 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013852:	2300      	movs	r3, #0
 8013854:	e08d      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	2b00      	cmp	r3, #0
 801385a:	da02      	bge.n	8013862 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801385c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013860:	e087      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013868:	2b00      	cmp	r3, #0
 801386a:	d001      	beq.n	8013870 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801386c:	2340      	movs	r3, #64	; 0x40
 801386e:	e080      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013876:	2b00      	cmp	r3, #0
 8013878:	d001      	beq.n	801387e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801387a:	2380      	movs	r3, #128	; 0x80
 801387c:	e079      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013884:	2b00      	cmp	r3, #0
 8013886:	d002      	beq.n	801388e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013888:	f44f 7380 	mov.w	r3, #256	; 0x100
 801388c:	e071      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013894:	2b00      	cmp	r3, #0
 8013896:	d002      	beq.n	801389e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013898:	f44f 7300 	mov.w	r3, #512	; 0x200
 801389c:	e069      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d002      	beq.n	80138ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80138a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138ac:	e061      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d002      	beq.n	80138be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80138b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80138bc:	e059      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d002      	beq.n	80138ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80138c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138cc:	e051      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d002      	beq.n	80138de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80138d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80138dc:	e049      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d002      	beq.n	80138ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80138e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80138ec:	e041      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d002      	beq.n	80138fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80138f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80138fc:	e039      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013904:	2b00      	cmp	r3, #0
 8013906:	d002      	beq.n	801390e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801390c:	e031      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013914:	2b00      	cmp	r3, #0
 8013916:	d002      	beq.n	801391e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013918:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801391c:	e029      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013924:	2b00      	cmp	r3, #0
 8013926:	d002      	beq.n	801392e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013928:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801392c:	e021      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013934:	2b00      	cmp	r3, #0
 8013936:	d002      	beq.n	801393e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013938:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801393c:	e019      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013944:	2b00      	cmp	r3, #0
 8013946:	d002      	beq.n	801394e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013948:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801394c:	e011      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013954:	2b00      	cmp	r3, #0
 8013956:	d002      	beq.n	801395e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013958:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801395c:	e009      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801395e:	697b      	ldr	r3, [r7, #20]
 8013960:	f003 0308 	and.w	r3, r3, #8
 8013964:	2b00      	cmp	r3, #0
 8013966:	d002      	beq.n	801396e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013968:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801396c:	e001      	b.n	8013972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801396e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013972:	4618      	mov	r0, r3
 8013974:	3720      	adds	r7, #32
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	bf00      	nop
 801397c:	24000010 	.word	0x24000010
 8013980:	10624dd3 	.word	0x10624dd3
 8013984:	00200045 	.word	0x00200045
 8013988:	002000c5 	.word	0x002000c5
 801398c:	fdffe008 	.word	0xfdffe008

08013990 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013990:	b480      	push	{r7}
 8013992:	b085      	sub	sp, #20
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013998:	4b1f      	ldr	r3, [pc, #124]	; (8013a18 <SDMMC_GetCmdResp2+0x88>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	4a1f      	ldr	r2, [pc, #124]	; (8013a1c <SDMMC_GetCmdResp2+0x8c>)
 801399e:	fba2 2303 	umull	r2, r3, r2, r3
 80139a2:	0a5b      	lsrs	r3, r3, #9
 80139a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80139a8:	fb02 f303 	mul.w	r3, r2, r3
 80139ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	1e5a      	subs	r2, r3, #1
 80139b2:	60fa      	str	r2, [r7, #12]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d102      	bne.n	80139be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80139b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80139bc:	e026      	b.n	8013a0c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139c2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d0ef      	beq.n	80139ae <SDMMC_GetCmdResp2+0x1e>
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d1ea      	bne.n	80139ae <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139dc:	f003 0304 	and.w	r3, r3, #4
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d004      	beq.n	80139ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2204      	movs	r2, #4
 80139e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80139ea:	2304      	movs	r3, #4
 80139ec:	e00e      	b.n	8013a0c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139f2:	f003 0301 	and.w	r3, r3, #1
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d004      	beq.n	8013a04 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2201      	movs	r2, #1
 80139fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013a00:	2301      	movs	r3, #1
 8013a02:	e003      	b.n	8013a0c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	4a06      	ldr	r2, [pc, #24]	; (8013a20 <SDMMC_GetCmdResp2+0x90>)
 8013a08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013a0a:	2300      	movs	r3, #0
}
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3714      	adds	r7, #20
 8013a10:	46bd      	mov	sp, r7
 8013a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a16:	4770      	bx	lr
 8013a18:	24000010 	.word	0x24000010
 8013a1c:	10624dd3 	.word	0x10624dd3
 8013a20:	002000c5 	.word	0x002000c5

08013a24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013a24:	b480      	push	{r7}
 8013a26:	b085      	sub	sp, #20
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013a2c:	4b1a      	ldr	r3, [pc, #104]	; (8013a98 <SDMMC_GetCmdResp3+0x74>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	4a1a      	ldr	r2, [pc, #104]	; (8013a9c <SDMMC_GetCmdResp3+0x78>)
 8013a32:	fba2 2303 	umull	r2, r3, r2, r3
 8013a36:	0a5b      	lsrs	r3, r3, #9
 8013a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a3c:	fb02 f303 	mul.w	r3, r2, r3
 8013a40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	1e5a      	subs	r2, r3, #1
 8013a46:	60fa      	str	r2, [r7, #12]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d102      	bne.n	8013a52 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013a4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013a50:	e01b      	b.n	8013a8a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a56:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d0ef      	beq.n	8013a42 <SDMMC_GetCmdResp3+0x1e>
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d1ea      	bne.n	8013a42 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a70:	f003 0304 	and.w	r3, r3, #4
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d004      	beq.n	8013a82 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2204      	movs	r2, #4
 8013a7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013a7e:	2304      	movs	r3, #4
 8013a80:	e003      	b.n	8013a8a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	4a06      	ldr	r2, [pc, #24]	; (8013aa0 <SDMMC_GetCmdResp3+0x7c>)
 8013a86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013a88:	2300      	movs	r3, #0
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3714      	adds	r7, #20
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a94:	4770      	bx	lr
 8013a96:	bf00      	nop
 8013a98:	24000010 	.word	0x24000010
 8013a9c:	10624dd3 	.word	0x10624dd3
 8013aa0:	002000c5 	.word	0x002000c5

08013aa4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b088      	sub	sp, #32
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	60f8      	str	r0, [r7, #12]
 8013aac:	460b      	mov	r3, r1
 8013aae:	607a      	str	r2, [r7, #4]
 8013ab0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013ab2:	4b35      	ldr	r3, [pc, #212]	; (8013b88 <SDMMC_GetCmdResp6+0xe4>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	4a35      	ldr	r2, [pc, #212]	; (8013b8c <SDMMC_GetCmdResp6+0xe8>)
 8013ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8013abc:	0a5b      	lsrs	r3, r3, #9
 8013abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ac2:	fb02 f303 	mul.w	r3, r2, r3
 8013ac6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013ac8:	69fb      	ldr	r3, [r7, #28]
 8013aca:	1e5a      	subs	r2, r3, #1
 8013acc:	61fa      	str	r2, [r7, #28]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d102      	bne.n	8013ad8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013ad2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013ad6:	e052      	b.n	8013b7e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013adc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013ade:	69bb      	ldr	r3, [r7, #24]
 8013ae0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d0ef      	beq.n	8013ac8 <SDMMC_GetCmdResp6+0x24>
 8013ae8:	69bb      	ldr	r3, [r7, #24]
 8013aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d1ea      	bne.n	8013ac8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013af6:	f003 0304 	and.w	r3, r3, #4
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d004      	beq.n	8013b08 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	2204      	movs	r2, #4
 8013b02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013b04:	2304      	movs	r3, #4
 8013b06:	e03a      	b.n	8013b7e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b0c:	f003 0301 	and.w	r3, r3, #1
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d004      	beq.n	8013b1e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	2201      	movs	r2, #1
 8013b18:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	e02f      	b.n	8013b7e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013b1e:	68f8      	ldr	r0, [r7, #12]
 8013b20:	f7ff fc24 	bl	801336c <SDMMC_GetCommandResponse>
 8013b24:	4603      	mov	r3, r0
 8013b26:	461a      	mov	r2, r3
 8013b28:	7afb      	ldrb	r3, [r7, #11]
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d001      	beq.n	8013b32 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013b2e:	2301      	movs	r3, #1
 8013b30:	e025      	b.n	8013b7e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	4a16      	ldr	r2, [pc, #88]	; (8013b90 <SDMMC_GetCmdResp6+0xec>)
 8013b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013b38:	2100      	movs	r1, #0
 8013b3a:	68f8      	ldr	r0, [r7, #12]
 8013b3c:	f7ff fc23 	bl	8013386 <SDMMC_GetResponse>
 8013b40:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d106      	bne.n	8013b5a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	0c1b      	lsrs	r3, r3, #16
 8013b50:	b29a      	uxth	r2, r3
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013b56:	2300      	movs	r3, #0
 8013b58:	e011      	b.n	8013b7e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d002      	beq.n	8013b6a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b68:	e009      	b.n	8013b7e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d002      	beq.n	8013b7a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013b78:	e001      	b.n	8013b7e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	3720      	adds	r7, #32
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	bf00      	nop
 8013b88:	24000010 	.word	0x24000010
 8013b8c:	10624dd3 	.word	0x10624dd3
 8013b90:	002000c5 	.word	0x002000c5

08013b94 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013b94:	b480      	push	{r7}
 8013b96:	b085      	sub	sp, #20
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013b9c:	4b22      	ldr	r3, [pc, #136]	; (8013c28 <SDMMC_GetCmdResp7+0x94>)
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	4a22      	ldr	r2, [pc, #136]	; (8013c2c <SDMMC_GetCmdResp7+0x98>)
 8013ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8013ba6:	0a5b      	lsrs	r3, r3, #9
 8013ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8013bac:	fb02 f303 	mul.w	r3, r2, r3
 8013bb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	1e5a      	subs	r2, r3, #1
 8013bb6:	60fa      	str	r2, [r7, #12]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d102      	bne.n	8013bc2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013bc0:	e02c      	b.n	8013c1c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bc6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d0ef      	beq.n	8013bb2 <SDMMC_GetCmdResp7+0x1e>
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d1ea      	bne.n	8013bb2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013be0:	f003 0304 	and.w	r3, r3, #4
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d004      	beq.n	8013bf2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2204      	movs	r2, #4
 8013bec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013bee:	2304      	movs	r3, #4
 8013bf0:	e014      	b.n	8013c1c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bf6:	f003 0301 	and.w	r3, r3, #1
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d004      	beq.n	8013c08 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	2201      	movs	r2, #1
 8013c02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013c04:	2301      	movs	r3, #1
 8013c06:	e009      	b.n	8013c1c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d002      	beq.n	8013c1a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2240      	movs	r2, #64	; 0x40
 8013c18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013c1a:	2300      	movs	r3, #0

}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	3714      	adds	r7, #20
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr
 8013c28:	24000010 	.word	0x24000010
 8013c2c:	10624dd3 	.word	0x10624dd3

08013c30 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013c30:	b480      	push	{r7}
 8013c32:	b085      	sub	sp, #20
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013c38:	4b11      	ldr	r3, [pc, #68]	; (8013c80 <SDMMC_GetCmdError+0x50>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	4a11      	ldr	r2, [pc, #68]	; (8013c84 <SDMMC_GetCmdError+0x54>)
 8013c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8013c42:	0a5b      	lsrs	r3, r3, #9
 8013c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c48:	fb02 f303 	mul.w	r3, r2, r3
 8013c4c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	1e5a      	subs	r2, r3, #1
 8013c52:	60fa      	str	r2, [r7, #12]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d102      	bne.n	8013c5e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013c58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013c5c:	e009      	b.n	8013c72 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d0f1      	beq.n	8013c4e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	4a06      	ldr	r2, [pc, #24]	; (8013c88 <SDMMC_GetCmdError+0x58>)
 8013c6e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013c70:	2300      	movs	r3, #0
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3714      	adds	r7, #20
 8013c76:	46bd      	mov	sp, r7
 8013c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7c:	4770      	bx	lr
 8013c7e:	bf00      	nop
 8013c80:	24000010 	.word	0x24000010
 8013c84:	10624dd3 	.word	0x10624dd3
 8013c88:	002000c5 	.word	0x002000c5

08013c8c <atof>:
 8013c8c:	2100      	movs	r1, #0
 8013c8e:	f001 bcc7 	b.w	8015620 <strtod>

08013c92 <atoi>:
 8013c92:	220a      	movs	r2, #10
 8013c94:	2100      	movs	r1, #0
 8013c96:	f001 bd55 	b.w	8015744 <strtol>
	...

08013c9c <__errno>:
 8013c9c:	4b01      	ldr	r3, [pc, #4]	; (8013ca4 <__errno+0x8>)
 8013c9e:	6818      	ldr	r0, [r3, #0]
 8013ca0:	4770      	bx	lr
 8013ca2:	bf00      	nop
 8013ca4:	24000020 	.word	0x24000020

08013ca8 <__libc_init_array>:
 8013ca8:	b570      	push	{r4, r5, r6, lr}
 8013caa:	4d0d      	ldr	r5, [pc, #52]	; (8013ce0 <__libc_init_array+0x38>)
 8013cac:	4c0d      	ldr	r4, [pc, #52]	; (8013ce4 <__libc_init_array+0x3c>)
 8013cae:	1b64      	subs	r4, r4, r5
 8013cb0:	10a4      	asrs	r4, r4, #2
 8013cb2:	2600      	movs	r6, #0
 8013cb4:	42a6      	cmp	r6, r4
 8013cb6:	d109      	bne.n	8013ccc <__libc_init_array+0x24>
 8013cb8:	4d0b      	ldr	r5, [pc, #44]	; (8013ce8 <__libc_init_array+0x40>)
 8013cba:	4c0c      	ldr	r4, [pc, #48]	; (8013cec <__libc_init_array+0x44>)
 8013cbc:	f005 fa1e 	bl	80190fc <_init>
 8013cc0:	1b64      	subs	r4, r4, r5
 8013cc2:	10a4      	asrs	r4, r4, #2
 8013cc4:	2600      	movs	r6, #0
 8013cc6:	42a6      	cmp	r6, r4
 8013cc8:	d105      	bne.n	8013cd6 <__libc_init_array+0x2e>
 8013cca:	bd70      	pop	{r4, r5, r6, pc}
 8013ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cd0:	4798      	blx	r3
 8013cd2:	3601      	adds	r6, #1
 8013cd4:	e7ee      	b.n	8013cb4 <__libc_init_array+0xc>
 8013cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cda:	4798      	blx	r3
 8013cdc:	3601      	adds	r6, #1
 8013cde:	e7f2      	b.n	8013cc6 <__libc_init_array+0x1e>
 8013ce0:	08019970 	.word	0x08019970
 8013ce4:	08019970 	.word	0x08019970
 8013ce8:	08019970 	.word	0x08019970
 8013cec:	08019974 	.word	0x08019974

08013cf0 <__itoa>:
 8013cf0:	1e93      	subs	r3, r2, #2
 8013cf2:	2b22      	cmp	r3, #34	; 0x22
 8013cf4:	b510      	push	{r4, lr}
 8013cf6:	460c      	mov	r4, r1
 8013cf8:	d904      	bls.n	8013d04 <__itoa+0x14>
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	700b      	strb	r3, [r1, #0]
 8013cfe:	461c      	mov	r4, r3
 8013d00:	4620      	mov	r0, r4
 8013d02:	bd10      	pop	{r4, pc}
 8013d04:	2a0a      	cmp	r2, #10
 8013d06:	d109      	bne.n	8013d1c <__itoa+0x2c>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	da07      	bge.n	8013d1c <__itoa+0x2c>
 8013d0c:	232d      	movs	r3, #45	; 0x2d
 8013d0e:	700b      	strb	r3, [r1, #0]
 8013d10:	4240      	negs	r0, r0
 8013d12:	2101      	movs	r1, #1
 8013d14:	4421      	add	r1, r4
 8013d16:	f001 fd1f 	bl	8015758 <__utoa>
 8013d1a:	e7f1      	b.n	8013d00 <__itoa+0x10>
 8013d1c:	2100      	movs	r1, #0
 8013d1e:	e7f9      	b.n	8013d14 <__itoa+0x24>

08013d20 <itoa>:
 8013d20:	f7ff bfe6 	b.w	8013cf0 <__itoa>

08013d24 <memset>:
 8013d24:	4402      	add	r2, r0
 8013d26:	4603      	mov	r3, r0
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d100      	bne.n	8013d2e <memset+0xa>
 8013d2c:	4770      	bx	lr
 8013d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8013d32:	e7f9      	b.n	8013d28 <memset+0x4>

08013d34 <__cvt>:
 8013d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d36:	ed2d 8b02 	vpush	{d8}
 8013d3a:	eeb0 8b40 	vmov.f64	d8, d0
 8013d3e:	b085      	sub	sp, #20
 8013d40:	4617      	mov	r7, r2
 8013d42:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013d44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013d46:	ee18 2a90 	vmov	r2, s17
 8013d4a:	f025 0520 	bic.w	r5, r5, #32
 8013d4e:	2a00      	cmp	r2, #0
 8013d50:	bfb6      	itet	lt
 8013d52:	222d      	movlt	r2, #45	; 0x2d
 8013d54:	2200      	movge	r2, #0
 8013d56:	eeb1 8b40 	vneglt.f64	d8, d0
 8013d5a:	2d46      	cmp	r5, #70	; 0x46
 8013d5c:	460c      	mov	r4, r1
 8013d5e:	701a      	strb	r2, [r3, #0]
 8013d60:	d004      	beq.n	8013d6c <__cvt+0x38>
 8013d62:	2d45      	cmp	r5, #69	; 0x45
 8013d64:	d100      	bne.n	8013d68 <__cvt+0x34>
 8013d66:	3401      	adds	r4, #1
 8013d68:	2102      	movs	r1, #2
 8013d6a:	e000      	b.n	8013d6e <__cvt+0x3a>
 8013d6c:	2103      	movs	r1, #3
 8013d6e:	ab03      	add	r3, sp, #12
 8013d70:	9301      	str	r3, [sp, #4]
 8013d72:	ab02      	add	r3, sp, #8
 8013d74:	9300      	str	r3, [sp, #0]
 8013d76:	4622      	mov	r2, r4
 8013d78:	4633      	mov	r3, r6
 8013d7a:	eeb0 0b48 	vmov.f64	d0, d8
 8013d7e:	f001 fdbb 	bl	80158f8 <_dtoa_r>
 8013d82:	2d47      	cmp	r5, #71	; 0x47
 8013d84:	d109      	bne.n	8013d9a <__cvt+0x66>
 8013d86:	07fb      	lsls	r3, r7, #31
 8013d88:	d407      	bmi.n	8013d9a <__cvt+0x66>
 8013d8a:	9b03      	ldr	r3, [sp, #12]
 8013d8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d8e:	1a1b      	subs	r3, r3, r0
 8013d90:	6013      	str	r3, [r2, #0]
 8013d92:	b005      	add	sp, #20
 8013d94:	ecbd 8b02 	vpop	{d8}
 8013d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d9a:	2d46      	cmp	r5, #70	; 0x46
 8013d9c:	eb00 0204 	add.w	r2, r0, r4
 8013da0:	d10c      	bne.n	8013dbc <__cvt+0x88>
 8013da2:	7803      	ldrb	r3, [r0, #0]
 8013da4:	2b30      	cmp	r3, #48	; 0x30
 8013da6:	d107      	bne.n	8013db8 <__cvt+0x84>
 8013da8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db0:	bf1c      	itt	ne
 8013db2:	f1c4 0401 	rsbne	r4, r4, #1
 8013db6:	6034      	strne	r4, [r6, #0]
 8013db8:	6833      	ldr	r3, [r6, #0]
 8013dba:	441a      	add	r2, r3
 8013dbc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc4:	bf08      	it	eq
 8013dc6:	9203      	streq	r2, [sp, #12]
 8013dc8:	2130      	movs	r1, #48	; 0x30
 8013dca:	9b03      	ldr	r3, [sp, #12]
 8013dcc:	4293      	cmp	r3, r2
 8013dce:	d2dc      	bcs.n	8013d8a <__cvt+0x56>
 8013dd0:	1c5c      	adds	r4, r3, #1
 8013dd2:	9403      	str	r4, [sp, #12]
 8013dd4:	7019      	strb	r1, [r3, #0]
 8013dd6:	e7f8      	b.n	8013dca <__cvt+0x96>

08013dd8 <__exponent>:
 8013dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013dda:	4603      	mov	r3, r0
 8013ddc:	2900      	cmp	r1, #0
 8013dde:	bfb8      	it	lt
 8013de0:	4249      	neglt	r1, r1
 8013de2:	f803 2b02 	strb.w	r2, [r3], #2
 8013de6:	bfb4      	ite	lt
 8013de8:	222d      	movlt	r2, #45	; 0x2d
 8013dea:	222b      	movge	r2, #43	; 0x2b
 8013dec:	2909      	cmp	r1, #9
 8013dee:	7042      	strb	r2, [r0, #1]
 8013df0:	dd2a      	ble.n	8013e48 <__exponent+0x70>
 8013df2:	f10d 0407 	add.w	r4, sp, #7
 8013df6:	46a4      	mov	ip, r4
 8013df8:	270a      	movs	r7, #10
 8013dfa:	46a6      	mov	lr, r4
 8013dfc:	460a      	mov	r2, r1
 8013dfe:	fb91 f6f7 	sdiv	r6, r1, r7
 8013e02:	fb07 1516 	mls	r5, r7, r6, r1
 8013e06:	3530      	adds	r5, #48	; 0x30
 8013e08:	2a63      	cmp	r2, #99	; 0x63
 8013e0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8013e0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013e12:	4631      	mov	r1, r6
 8013e14:	dcf1      	bgt.n	8013dfa <__exponent+0x22>
 8013e16:	3130      	adds	r1, #48	; 0x30
 8013e18:	f1ae 0502 	sub.w	r5, lr, #2
 8013e1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013e20:	1c44      	adds	r4, r0, #1
 8013e22:	4629      	mov	r1, r5
 8013e24:	4561      	cmp	r1, ip
 8013e26:	d30a      	bcc.n	8013e3e <__exponent+0x66>
 8013e28:	f10d 0209 	add.w	r2, sp, #9
 8013e2c:	eba2 020e 	sub.w	r2, r2, lr
 8013e30:	4565      	cmp	r5, ip
 8013e32:	bf88      	it	hi
 8013e34:	2200      	movhi	r2, #0
 8013e36:	4413      	add	r3, r2
 8013e38:	1a18      	subs	r0, r3, r0
 8013e3a:	b003      	add	sp, #12
 8013e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013e46:	e7ed      	b.n	8013e24 <__exponent+0x4c>
 8013e48:	2330      	movs	r3, #48	; 0x30
 8013e4a:	3130      	adds	r1, #48	; 0x30
 8013e4c:	7083      	strb	r3, [r0, #2]
 8013e4e:	70c1      	strb	r1, [r0, #3]
 8013e50:	1d03      	adds	r3, r0, #4
 8013e52:	e7f1      	b.n	8013e38 <__exponent+0x60>
 8013e54:	0000      	movs	r0, r0
	...

08013e58 <_printf_float>:
 8013e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e5c:	b08b      	sub	sp, #44	; 0x2c
 8013e5e:	460c      	mov	r4, r1
 8013e60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8013e64:	4616      	mov	r6, r2
 8013e66:	461f      	mov	r7, r3
 8013e68:	4605      	mov	r5, r0
 8013e6a:	f002 fe37 	bl	8016adc <_localeconv_r>
 8013e6e:	f8d0 b000 	ldr.w	fp, [r0]
 8013e72:	4658      	mov	r0, fp
 8013e74:	f7ec fa34 	bl	80002e0 <strlen>
 8013e78:	2300      	movs	r3, #0
 8013e7a:	9308      	str	r3, [sp, #32]
 8013e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8013e80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013e84:	6822      	ldr	r2, [r4, #0]
 8013e86:	3307      	adds	r3, #7
 8013e88:	f023 0307 	bic.w	r3, r3, #7
 8013e8c:	f103 0108 	add.w	r1, r3, #8
 8013e90:	f8c8 1000 	str.w	r1, [r8]
 8013e94:	4682      	mov	sl, r0
 8013e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e9a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8013e9e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8014100 <_printf_float+0x2a8>
 8013ea2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8013ea6:	eeb0 6bc0 	vabs.f64	d6, d0
 8013eaa:	eeb4 6b47 	vcmp.f64	d6, d7
 8013eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb2:	dd24      	ble.n	8013efe <_printf_float+0xa6>
 8013eb4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ebc:	d502      	bpl.n	8013ec4 <_printf_float+0x6c>
 8013ebe:	232d      	movs	r3, #45	; 0x2d
 8013ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ec4:	4b90      	ldr	r3, [pc, #576]	; (8014108 <_printf_float+0x2b0>)
 8013ec6:	4891      	ldr	r0, [pc, #580]	; (801410c <_printf_float+0x2b4>)
 8013ec8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013ecc:	bf94      	ite	ls
 8013ece:	4698      	movls	r8, r3
 8013ed0:	4680      	movhi	r8, r0
 8013ed2:	2303      	movs	r3, #3
 8013ed4:	6123      	str	r3, [r4, #16]
 8013ed6:	f022 0204 	bic.w	r2, r2, #4
 8013eda:	2300      	movs	r3, #0
 8013edc:	6022      	str	r2, [r4, #0]
 8013ede:	9304      	str	r3, [sp, #16]
 8013ee0:	9700      	str	r7, [sp, #0]
 8013ee2:	4633      	mov	r3, r6
 8013ee4:	aa09      	add	r2, sp, #36	; 0x24
 8013ee6:	4621      	mov	r1, r4
 8013ee8:	4628      	mov	r0, r5
 8013eea:	f000 f9d3 	bl	8014294 <_printf_common>
 8013eee:	3001      	adds	r0, #1
 8013ef0:	f040 808a 	bne.w	8014008 <_printf_float+0x1b0>
 8013ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ef8:	b00b      	add	sp, #44	; 0x2c
 8013efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013efe:	eeb4 0b40 	vcmp.f64	d0, d0
 8013f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f06:	d709      	bvc.n	8013f1c <_printf_float+0xc4>
 8013f08:	ee10 3a90 	vmov	r3, s1
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	bfbc      	itt	lt
 8013f10:	232d      	movlt	r3, #45	; 0x2d
 8013f12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013f16:	487e      	ldr	r0, [pc, #504]	; (8014110 <_printf_float+0x2b8>)
 8013f18:	4b7e      	ldr	r3, [pc, #504]	; (8014114 <_printf_float+0x2bc>)
 8013f1a:	e7d5      	b.n	8013ec8 <_printf_float+0x70>
 8013f1c:	6863      	ldr	r3, [r4, #4]
 8013f1e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013f22:	9104      	str	r1, [sp, #16]
 8013f24:	1c59      	adds	r1, r3, #1
 8013f26:	d13c      	bne.n	8013fa2 <_printf_float+0x14a>
 8013f28:	2306      	movs	r3, #6
 8013f2a:	6063      	str	r3, [r4, #4]
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	9303      	str	r3, [sp, #12]
 8013f30:	ab08      	add	r3, sp, #32
 8013f32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013f3a:	ab07      	add	r3, sp, #28
 8013f3c:	6861      	ldr	r1, [r4, #4]
 8013f3e:	9300      	str	r3, [sp, #0]
 8013f40:	6022      	str	r2, [r4, #0]
 8013f42:	f10d 031b 	add.w	r3, sp, #27
 8013f46:	4628      	mov	r0, r5
 8013f48:	f7ff fef4 	bl	8013d34 <__cvt>
 8013f4c:	9b04      	ldr	r3, [sp, #16]
 8013f4e:	9907      	ldr	r1, [sp, #28]
 8013f50:	2b47      	cmp	r3, #71	; 0x47
 8013f52:	4680      	mov	r8, r0
 8013f54:	d108      	bne.n	8013f68 <_printf_float+0x110>
 8013f56:	1cc8      	adds	r0, r1, #3
 8013f58:	db02      	blt.n	8013f60 <_printf_float+0x108>
 8013f5a:	6863      	ldr	r3, [r4, #4]
 8013f5c:	4299      	cmp	r1, r3
 8013f5e:	dd41      	ble.n	8013fe4 <_printf_float+0x18c>
 8013f60:	f1a9 0902 	sub.w	r9, r9, #2
 8013f64:	fa5f f989 	uxtb.w	r9, r9
 8013f68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013f6c:	d820      	bhi.n	8013fb0 <_printf_float+0x158>
 8013f6e:	3901      	subs	r1, #1
 8013f70:	464a      	mov	r2, r9
 8013f72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013f76:	9107      	str	r1, [sp, #28]
 8013f78:	f7ff ff2e 	bl	8013dd8 <__exponent>
 8013f7c:	9a08      	ldr	r2, [sp, #32]
 8013f7e:	9004      	str	r0, [sp, #16]
 8013f80:	1813      	adds	r3, r2, r0
 8013f82:	2a01      	cmp	r2, #1
 8013f84:	6123      	str	r3, [r4, #16]
 8013f86:	dc02      	bgt.n	8013f8e <_printf_float+0x136>
 8013f88:	6822      	ldr	r2, [r4, #0]
 8013f8a:	07d2      	lsls	r2, r2, #31
 8013f8c:	d501      	bpl.n	8013f92 <_printf_float+0x13a>
 8013f8e:	3301      	adds	r3, #1
 8013f90:	6123      	str	r3, [r4, #16]
 8013f92:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d0a2      	beq.n	8013ee0 <_printf_float+0x88>
 8013f9a:	232d      	movs	r3, #45	; 0x2d
 8013f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fa0:	e79e      	b.n	8013ee0 <_printf_float+0x88>
 8013fa2:	9904      	ldr	r1, [sp, #16]
 8013fa4:	2947      	cmp	r1, #71	; 0x47
 8013fa6:	d1c1      	bne.n	8013f2c <_printf_float+0xd4>
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d1bf      	bne.n	8013f2c <_printf_float+0xd4>
 8013fac:	2301      	movs	r3, #1
 8013fae:	e7bc      	b.n	8013f2a <_printf_float+0xd2>
 8013fb0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013fb4:	d118      	bne.n	8013fe8 <_printf_float+0x190>
 8013fb6:	2900      	cmp	r1, #0
 8013fb8:	6863      	ldr	r3, [r4, #4]
 8013fba:	dd0b      	ble.n	8013fd4 <_printf_float+0x17c>
 8013fbc:	6121      	str	r1, [r4, #16]
 8013fbe:	b913      	cbnz	r3, 8013fc6 <_printf_float+0x16e>
 8013fc0:	6822      	ldr	r2, [r4, #0]
 8013fc2:	07d0      	lsls	r0, r2, #31
 8013fc4:	d502      	bpl.n	8013fcc <_printf_float+0x174>
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	440b      	add	r3, r1
 8013fca:	6123      	str	r3, [r4, #16]
 8013fcc:	2300      	movs	r3, #0
 8013fce:	65a1      	str	r1, [r4, #88]	; 0x58
 8013fd0:	9304      	str	r3, [sp, #16]
 8013fd2:	e7de      	b.n	8013f92 <_printf_float+0x13a>
 8013fd4:	b913      	cbnz	r3, 8013fdc <_printf_float+0x184>
 8013fd6:	6822      	ldr	r2, [r4, #0]
 8013fd8:	07d2      	lsls	r2, r2, #31
 8013fda:	d501      	bpl.n	8013fe0 <_printf_float+0x188>
 8013fdc:	3302      	adds	r3, #2
 8013fde:	e7f4      	b.n	8013fca <_printf_float+0x172>
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	e7f2      	b.n	8013fca <_printf_float+0x172>
 8013fe4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013fe8:	9b08      	ldr	r3, [sp, #32]
 8013fea:	4299      	cmp	r1, r3
 8013fec:	db05      	blt.n	8013ffa <_printf_float+0x1a2>
 8013fee:	6823      	ldr	r3, [r4, #0]
 8013ff0:	6121      	str	r1, [r4, #16]
 8013ff2:	07d8      	lsls	r0, r3, #31
 8013ff4:	d5ea      	bpl.n	8013fcc <_printf_float+0x174>
 8013ff6:	1c4b      	adds	r3, r1, #1
 8013ff8:	e7e7      	b.n	8013fca <_printf_float+0x172>
 8013ffa:	2900      	cmp	r1, #0
 8013ffc:	bfd4      	ite	le
 8013ffe:	f1c1 0202 	rsble	r2, r1, #2
 8014002:	2201      	movgt	r2, #1
 8014004:	4413      	add	r3, r2
 8014006:	e7e0      	b.n	8013fca <_printf_float+0x172>
 8014008:	6823      	ldr	r3, [r4, #0]
 801400a:	055a      	lsls	r2, r3, #21
 801400c:	d407      	bmi.n	801401e <_printf_float+0x1c6>
 801400e:	6923      	ldr	r3, [r4, #16]
 8014010:	4642      	mov	r2, r8
 8014012:	4631      	mov	r1, r6
 8014014:	4628      	mov	r0, r5
 8014016:	47b8      	blx	r7
 8014018:	3001      	adds	r0, #1
 801401a:	d12a      	bne.n	8014072 <_printf_float+0x21a>
 801401c:	e76a      	b.n	8013ef4 <_printf_float+0x9c>
 801401e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014022:	f240 80e2 	bls.w	80141ea <_printf_float+0x392>
 8014026:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801402a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014032:	d133      	bne.n	801409c <_printf_float+0x244>
 8014034:	4a38      	ldr	r2, [pc, #224]	; (8014118 <_printf_float+0x2c0>)
 8014036:	2301      	movs	r3, #1
 8014038:	4631      	mov	r1, r6
 801403a:	4628      	mov	r0, r5
 801403c:	47b8      	blx	r7
 801403e:	3001      	adds	r0, #1
 8014040:	f43f af58 	beq.w	8013ef4 <_printf_float+0x9c>
 8014044:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014048:	429a      	cmp	r2, r3
 801404a:	db02      	blt.n	8014052 <_printf_float+0x1fa>
 801404c:	6823      	ldr	r3, [r4, #0]
 801404e:	07d8      	lsls	r0, r3, #31
 8014050:	d50f      	bpl.n	8014072 <_printf_float+0x21a>
 8014052:	4653      	mov	r3, sl
 8014054:	465a      	mov	r2, fp
 8014056:	4631      	mov	r1, r6
 8014058:	4628      	mov	r0, r5
 801405a:	47b8      	blx	r7
 801405c:	3001      	adds	r0, #1
 801405e:	f43f af49 	beq.w	8013ef4 <_printf_float+0x9c>
 8014062:	f04f 0800 	mov.w	r8, #0
 8014066:	f104 091a 	add.w	r9, r4, #26
 801406a:	9b08      	ldr	r3, [sp, #32]
 801406c:	3b01      	subs	r3, #1
 801406e:	4543      	cmp	r3, r8
 8014070:	dc09      	bgt.n	8014086 <_printf_float+0x22e>
 8014072:	6823      	ldr	r3, [r4, #0]
 8014074:	079b      	lsls	r3, r3, #30
 8014076:	f100 8108 	bmi.w	801428a <_printf_float+0x432>
 801407a:	68e0      	ldr	r0, [r4, #12]
 801407c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801407e:	4298      	cmp	r0, r3
 8014080:	bfb8      	it	lt
 8014082:	4618      	movlt	r0, r3
 8014084:	e738      	b.n	8013ef8 <_printf_float+0xa0>
 8014086:	2301      	movs	r3, #1
 8014088:	464a      	mov	r2, r9
 801408a:	4631      	mov	r1, r6
 801408c:	4628      	mov	r0, r5
 801408e:	47b8      	blx	r7
 8014090:	3001      	adds	r0, #1
 8014092:	f43f af2f 	beq.w	8013ef4 <_printf_float+0x9c>
 8014096:	f108 0801 	add.w	r8, r8, #1
 801409a:	e7e6      	b.n	801406a <_printf_float+0x212>
 801409c:	9b07      	ldr	r3, [sp, #28]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	dc3c      	bgt.n	801411c <_printf_float+0x2c4>
 80140a2:	4a1d      	ldr	r2, [pc, #116]	; (8014118 <_printf_float+0x2c0>)
 80140a4:	2301      	movs	r3, #1
 80140a6:	4631      	mov	r1, r6
 80140a8:	4628      	mov	r0, r5
 80140aa:	47b8      	blx	r7
 80140ac:	3001      	adds	r0, #1
 80140ae:	f43f af21 	beq.w	8013ef4 <_printf_float+0x9c>
 80140b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80140b6:	4313      	orrs	r3, r2
 80140b8:	d102      	bne.n	80140c0 <_printf_float+0x268>
 80140ba:	6823      	ldr	r3, [r4, #0]
 80140bc:	07d9      	lsls	r1, r3, #31
 80140be:	d5d8      	bpl.n	8014072 <_printf_float+0x21a>
 80140c0:	4653      	mov	r3, sl
 80140c2:	465a      	mov	r2, fp
 80140c4:	4631      	mov	r1, r6
 80140c6:	4628      	mov	r0, r5
 80140c8:	47b8      	blx	r7
 80140ca:	3001      	adds	r0, #1
 80140cc:	f43f af12 	beq.w	8013ef4 <_printf_float+0x9c>
 80140d0:	f04f 0900 	mov.w	r9, #0
 80140d4:	f104 0a1a 	add.w	sl, r4, #26
 80140d8:	9b07      	ldr	r3, [sp, #28]
 80140da:	425b      	negs	r3, r3
 80140dc:	454b      	cmp	r3, r9
 80140de:	dc01      	bgt.n	80140e4 <_printf_float+0x28c>
 80140e0:	9b08      	ldr	r3, [sp, #32]
 80140e2:	e795      	b.n	8014010 <_printf_float+0x1b8>
 80140e4:	2301      	movs	r3, #1
 80140e6:	4652      	mov	r2, sl
 80140e8:	4631      	mov	r1, r6
 80140ea:	4628      	mov	r0, r5
 80140ec:	47b8      	blx	r7
 80140ee:	3001      	adds	r0, #1
 80140f0:	f43f af00 	beq.w	8013ef4 <_printf_float+0x9c>
 80140f4:	f109 0901 	add.w	r9, r9, #1
 80140f8:	e7ee      	b.n	80140d8 <_printf_float+0x280>
 80140fa:	bf00      	nop
 80140fc:	f3af 8000 	nop.w
 8014100:	ffffffff 	.word	0xffffffff
 8014104:	7fefffff 	.word	0x7fefffff
 8014108:	080192bc 	.word	0x080192bc
 801410c:	080192c0 	.word	0x080192c0
 8014110:	080192c8 	.word	0x080192c8
 8014114:	080192c4 	.word	0x080192c4
 8014118:	080192cc 	.word	0x080192cc
 801411c:	9a08      	ldr	r2, [sp, #32]
 801411e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014120:	429a      	cmp	r2, r3
 8014122:	bfa8      	it	ge
 8014124:	461a      	movge	r2, r3
 8014126:	2a00      	cmp	r2, #0
 8014128:	4691      	mov	r9, r2
 801412a:	dc38      	bgt.n	801419e <_printf_float+0x346>
 801412c:	2300      	movs	r3, #0
 801412e:	9305      	str	r3, [sp, #20]
 8014130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014134:	f104 021a 	add.w	r2, r4, #26
 8014138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801413a:	9905      	ldr	r1, [sp, #20]
 801413c:	9304      	str	r3, [sp, #16]
 801413e:	eba3 0309 	sub.w	r3, r3, r9
 8014142:	428b      	cmp	r3, r1
 8014144:	dc33      	bgt.n	80141ae <_printf_float+0x356>
 8014146:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801414a:	429a      	cmp	r2, r3
 801414c:	db3c      	blt.n	80141c8 <_printf_float+0x370>
 801414e:	6823      	ldr	r3, [r4, #0]
 8014150:	07da      	lsls	r2, r3, #31
 8014152:	d439      	bmi.n	80141c8 <_printf_float+0x370>
 8014154:	9a08      	ldr	r2, [sp, #32]
 8014156:	9b04      	ldr	r3, [sp, #16]
 8014158:	9907      	ldr	r1, [sp, #28]
 801415a:	1ad3      	subs	r3, r2, r3
 801415c:	eba2 0901 	sub.w	r9, r2, r1
 8014160:	4599      	cmp	r9, r3
 8014162:	bfa8      	it	ge
 8014164:	4699      	movge	r9, r3
 8014166:	f1b9 0f00 	cmp.w	r9, #0
 801416a:	dc35      	bgt.n	80141d8 <_printf_float+0x380>
 801416c:	f04f 0800 	mov.w	r8, #0
 8014170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014174:	f104 0a1a 	add.w	sl, r4, #26
 8014178:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801417c:	1a9b      	subs	r3, r3, r2
 801417e:	eba3 0309 	sub.w	r3, r3, r9
 8014182:	4543      	cmp	r3, r8
 8014184:	f77f af75 	ble.w	8014072 <_printf_float+0x21a>
 8014188:	2301      	movs	r3, #1
 801418a:	4652      	mov	r2, sl
 801418c:	4631      	mov	r1, r6
 801418e:	4628      	mov	r0, r5
 8014190:	47b8      	blx	r7
 8014192:	3001      	adds	r0, #1
 8014194:	f43f aeae 	beq.w	8013ef4 <_printf_float+0x9c>
 8014198:	f108 0801 	add.w	r8, r8, #1
 801419c:	e7ec      	b.n	8014178 <_printf_float+0x320>
 801419e:	4613      	mov	r3, r2
 80141a0:	4631      	mov	r1, r6
 80141a2:	4642      	mov	r2, r8
 80141a4:	4628      	mov	r0, r5
 80141a6:	47b8      	blx	r7
 80141a8:	3001      	adds	r0, #1
 80141aa:	d1bf      	bne.n	801412c <_printf_float+0x2d4>
 80141ac:	e6a2      	b.n	8013ef4 <_printf_float+0x9c>
 80141ae:	2301      	movs	r3, #1
 80141b0:	4631      	mov	r1, r6
 80141b2:	4628      	mov	r0, r5
 80141b4:	9204      	str	r2, [sp, #16]
 80141b6:	47b8      	blx	r7
 80141b8:	3001      	adds	r0, #1
 80141ba:	f43f ae9b 	beq.w	8013ef4 <_printf_float+0x9c>
 80141be:	9b05      	ldr	r3, [sp, #20]
 80141c0:	9a04      	ldr	r2, [sp, #16]
 80141c2:	3301      	adds	r3, #1
 80141c4:	9305      	str	r3, [sp, #20]
 80141c6:	e7b7      	b.n	8014138 <_printf_float+0x2e0>
 80141c8:	4653      	mov	r3, sl
 80141ca:	465a      	mov	r2, fp
 80141cc:	4631      	mov	r1, r6
 80141ce:	4628      	mov	r0, r5
 80141d0:	47b8      	blx	r7
 80141d2:	3001      	adds	r0, #1
 80141d4:	d1be      	bne.n	8014154 <_printf_float+0x2fc>
 80141d6:	e68d      	b.n	8013ef4 <_printf_float+0x9c>
 80141d8:	9a04      	ldr	r2, [sp, #16]
 80141da:	464b      	mov	r3, r9
 80141dc:	4442      	add	r2, r8
 80141de:	4631      	mov	r1, r6
 80141e0:	4628      	mov	r0, r5
 80141e2:	47b8      	blx	r7
 80141e4:	3001      	adds	r0, #1
 80141e6:	d1c1      	bne.n	801416c <_printf_float+0x314>
 80141e8:	e684      	b.n	8013ef4 <_printf_float+0x9c>
 80141ea:	9a08      	ldr	r2, [sp, #32]
 80141ec:	2a01      	cmp	r2, #1
 80141ee:	dc01      	bgt.n	80141f4 <_printf_float+0x39c>
 80141f0:	07db      	lsls	r3, r3, #31
 80141f2:	d537      	bpl.n	8014264 <_printf_float+0x40c>
 80141f4:	2301      	movs	r3, #1
 80141f6:	4642      	mov	r2, r8
 80141f8:	4631      	mov	r1, r6
 80141fa:	4628      	mov	r0, r5
 80141fc:	47b8      	blx	r7
 80141fe:	3001      	adds	r0, #1
 8014200:	f43f ae78 	beq.w	8013ef4 <_printf_float+0x9c>
 8014204:	4653      	mov	r3, sl
 8014206:	465a      	mov	r2, fp
 8014208:	4631      	mov	r1, r6
 801420a:	4628      	mov	r0, r5
 801420c:	47b8      	blx	r7
 801420e:	3001      	adds	r0, #1
 8014210:	f43f ae70 	beq.w	8013ef4 <_printf_float+0x9c>
 8014214:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014218:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014220:	d01b      	beq.n	801425a <_printf_float+0x402>
 8014222:	9b08      	ldr	r3, [sp, #32]
 8014224:	f108 0201 	add.w	r2, r8, #1
 8014228:	3b01      	subs	r3, #1
 801422a:	4631      	mov	r1, r6
 801422c:	4628      	mov	r0, r5
 801422e:	47b8      	blx	r7
 8014230:	3001      	adds	r0, #1
 8014232:	d10e      	bne.n	8014252 <_printf_float+0x3fa>
 8014234:	e65e      	b.n	8013ef4 <_printf_float+0x9c>
 8014236:	2301      	movs	r3, #1
 8014238:	464a      	mov	r2, r9
 801423a:	4631      	mov	r1, r6
 801423c:	4628      	mov	r0, r5
 801423e:	47b8      	blx	r7
 8014240:	3001      	adds	r0, #1
 8014242:	f43f ae57 	beq.w	8013ef4 <_printf_float+0x9c>
 8014246:	f108 0801 	add.w	r8, r8, #1
 801424a:	9b08      	ldr	r3, [sp, #32]
 801424c:	3b01      	subs	r3, #1
 801424e:	4543      	cmp	r3, r8
 8014250:	dcf1      	bgt.n	8014236 <_printf_float+0x3de>
 8014252:	9b04      	ldr	r3, [sp, #16]
 8014254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014258:	e6db      	b.n	8014012 <_printf_float+0x1ba>
 801425a:	f04f 0800 	mov.w	r8, #0
 801425e:	f104 091a 	add.w	r9, r4, #26
 8014262:	e7f2      	b.n	801424a <_printf_float+0x3f2>
 8014264:	2301      	movs	r3, #1
 8014266:	4642      	mov	r2, r8
 8014268:	e7df      	b.n	801422a <_printf_float+0x3d2>
 801426a:	2301      	movs	r3, #1
 801426c:	464a      	mov	r2, r9
 801426e:	4631      	mov	r1, r6
 8014270:	4628      	mov	r0, r5
 8014272:	47b8      	blx	r7
 8014274:	3001      	adds	r0, #1
 8014276:	f43f ae3d 	beq.w	8013ef4 <_printf_float+0x9c>
 801427a:	f108 0801 	add.w	r8, r8, #1
 801427e:	68e3      	ldr	r3, [r4, #12]
 8014280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014282:	1a5b      	subs	r3, r3, r1
 8014284:	4543      	cmp	r3, r8
 8014286:	dcf0      	bgt.n	801426a <_printf_float+0x412>
 8014288:	e6f7      	b.n	801407a <_printf_float+0x222>
 801428a:	f04f 0800 	mov.w	r8, #0
 801428e:	f104 0919 	add.w	r9, r4, #25
 8014292:	e7f4      	b.n	801427e <_printf_float+0x426>

08014294 <_printf_common>:
 8014294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014298:	4616      	mov	r6, r2
 801429a:	4699      	mov	r9, r3
 801429c:	688a      	ldr	r2, [r1, #8]
 801429e:	690b      	ldr	r3, [r1, #16]
 80142a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80142a4:	4293      	cmp	r3, r2
 80142a6:	bfb8      	it	lt
 80142a8:	4613      	movlt	r3, r2
 80142aa:	6033      	str	r3, [r6, #0]
 80142ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80142b0:	4607      	mov	r7, r0
 80142b2:	460c      	mov	r4, r1
 80142b4:	b10a      	cbz	r2, 80142ba <_printf_common+0x26>
 80142b6:	3301      	adds	r3, #1
 80142b8:	6033      	str	r3, [r6, #0]
 80142ba:	6823      	ldr	r3, [r4, #0]
 80142bc:	0699      	lsls	r1, r3, #26
 80142be:	bf42      	ittt	mi
 80142c0:	6833      	ldrmi	r3, [r6, #0]
 80142c2:	3302      	addmi	r3, #2
 80142c4:	6033      	strmi	r3, [r6, #0]
 80142c6:	6825      	ldr	r5, [r4, #0]
 80142c8:	f015 0506 	ands.w	r5, r5, #6
 80142cc:	d106      	bne.n	80142dc <_printf_common+0x48>
 80142ce:	f104 0a19 	add.w	sl, r4, #25
 80142d2:	68e3      	ldr	r3, [r4, #12]
 80142d4:	6832      	ldr	r2, [r6, #0]
 80142d6:	1a9b      	subs	r3, r3, r2
 80142d8:	42ab      	cmp	r3, r5
 80142da:	dc26      	bgt.n	801432a <_printf_common+0x96>
 80142dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80142e0:	1e13      	subs	r3, r2, #0
 80142e2:	6822      	ldr	r2, [r4, #0]
 80142e4:	bf18      	it	ne
 80142e6:	2301      	movne	r3, #1
 80142e8:	0692      	lsls	r2, r2, #26
 80142ea:	d42b      	bmi.n	8014344 <_printf_common+0xb0>
 80142ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80142f0:	4649      	mov	r1, r9
 80142f2:	4638      	mov	r0, r7
 80142f4:	47c0      	blx	r8
 80142f6:	3001      	adds	r0, #1
 80142f8:	d01e      	beq.n	8014338 <_printf_common+0xa4>
 80142fa:	6823      	ldr	r3, [r4, #0]
 80142fc:	68e5      	ldr	r5, [r4, #12]
 80142fe:	6832      	ldr	r2, [r6, #0]
 8014300:	f003 0306 	and.w	r3, r3, #6
 8014304:	2b04      	cmp	r3, #4
 8014306:	bf08      	it	eq
 8014308:	1aad      	subeq	r5, r5, r2
 801430a:	68a3      	ldr	r3, [r4, #8]
 801430c:	6922      	ldr	r2, [r4, #16]
 801430e:	bf0c      	ite	eq
 8014310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014314:	2500      	movne	r5, #0
 8014316:	4293      	cmp	r3, r2
 8014318:	bfc4      	itt	gt
 801431a:	1a9b      	subgt	r3, r3, r2
 801431c:	18ed      	addgt	r5, r5, r3
 801431e:	2600      	movs	r6, #0
 8014320:	341a      	adds	r4, #26
 8014322:	42b5      	cmp	r5, r6
 8014324:	d11a      	bne.n	801435c <_printf_common+0xc8>
 8014326:	2000      	movs	r0, #0
 8014328:	e008      	b.n	801433c <_printf_common+0xa8>
 801432a:	2301      	movs	r3, #1
 801432c:	4652      	mov	r2, sl
 801432e:	4649      	mov	r1, r9
 8014330:	4638      	mov	r0, r7
 8014332:	47c0      	blx	r8
 8014334:	3001      	adds	r0, #1
 8014336:	d103      	bne.n	8014340 <_printf_common+0xac>
 8014338:	f04f 30ff 	mov.w	r0, #4294967295
 801433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014340:	3501      	adds	r5, #1
 8014342:	e7c6      	b.n	80142d2 <_printf_common+0x3e>
 8014344:	18e1      	adds	r1, r4, r3
 8014346:	1c5a      	adds	r2, r3, #1
 8014348:	2030      	movs	r0, #48	; 0x30
 801434a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801434e:	4422      	add	r2, r4
 8014350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014358:	3302      	adds	r3, #2
 801435a:	e7c7      	b.n	80142ec <_printf_common+0x58>
 801435c:	2301      	movs	r3, #1
 801435e:	4622      	mov	r2, r4
 8014360:	4649      	mov	r1, r9
 8014362:	4638      	mov	r0, r7
 8014364:	47c0      	blx	r8
 8014366:	3001      	adds	r0, #1
 8014368:	d0e6      	beq.n	8014338 <_printf_common+0xa4>
 801436a:	3601      	adds	r6, #1
 801436c:	e7d9      	b.n	8014322 <_printf_common+0x8e>
	...

08014370 <_printf_i>:
 8014370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014374:	460c      	mov	r4, r1
 8014376:	4691      	mov	r9, r2
 8014378:	7e27      	ldrb	r7, [r4, #24]
 801437a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801437c:	2f78      	cmp	r7, #120	; 0x78
 801437e:	4680      	mov	r8, r0
 8014380:	469a      	mov	sl, r3
 8014382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014386:	d807      	bhi.n	8014398 <_printf_i+0x28>
 8014388:	2f62      	cmp	r7, #98	; 0x62
 801438a:	d80a      	bhi.n	80143a2 <_printf_i+0x32>
 801438c:	2f00      	cmp	r7, #0
 801438e:	f000 80d8 	beq.w	8014542 <_printf_i+0x1d2>
 8014392:	2f58      	cmp	r7, #88	; 0x58
 8014394:	f000 80a3 	beq.w	80144de <_printf_i+0x16e>
 8014398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801439c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80143a0:	e03a      	b.n	8014418 <_printf_i+0xa8>
 80143a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80143a6:	2b15      	cmp	r3, #21
 80143a8:	d8f6      	bhi.n	8014398 <_printf_i+0x28>
 80143aa:	a001      	add	r0, pc, #4	; (adr r0, 80143b0 <_printf_i+0x40>)
 80143ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80143b0:	08014409 	.word	0x08014409
 80143b4:	0801441d 	.word	0x0801441d
 80143b8:	08014399 	.word	0x08014399
 80143bc:	08014399 	.word	0x08014399
 80143c0:	08014399 	.word	0x08014399
 80143c4:	08014399 	.word	0x08014399
 80143c8:	0801441d 	.word	0x0801441d
 80143cc:	08014399 	.word	0x08014399
 80143d0:	08014399 	.word	0x08014399
 80143d4:	08014399 	.word	0x08014399
 80143d8:	08014399 	.word	0x08014399
 80143dc:	08014529 	.word	0x08014529
 80143e0:	0801444d 	.word	0x0801444d
 80143e4:	0801450b 	.word	0x0801450b
 80143e8:	08014399 	.word	0x08014399
 80143ec:	08014399 	.word	0x08014399
 80143f0:	0801454b 	.word	0x0801454b
 80143f4:	08014399 	.word	0x08014399
 80143f8:	0801444d 	.word	0x0801444d
 80143fc:	08014399 	.word	0x08014399
 8014400:	08014399 	.word	0x08014399
 8014404:	08014513 	.word	0x08014513
 8014408:	680b      	ldr	r3, [r1, #0]
 801440a:	1d1a      	adds	r2, r3, #4
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	600a      	str	r2, [r1, #0]
 8014410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014418:	2301      	movs	r3, #1
 801441a:	e0a3      	b.n	8014564 <_printf_i+0x1f4>
 801441c:	6825      	ldr	r5, [r4, #0]
 801441e:	6808      	ldr	r0, [r1, #0]
 8014420:	062e      	lsls	r6, r5, #24
 8014422:	f100 0304 	add.w	r3, r0, #4
 8014426:	d50a      	bpl.n	801443e <_printf_i+0xce>
 8014428:	6805      	ldr	r5, [r0, #0]
 801442a:	600b      	str	r3, [r1, #0]
 801442c:	2d00      	cmp	r5, #0
 801442e:	da03      	bge.n	8014438 <_printf_i+0xc8>
 8014430:	232d      	movs	r3, #45	; 0x2d
 8014432:	426d      	negs	r5, r5
 8014434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014438:	485e      	ldr	r0, [pc, #376]	; (80145b4 <_printf_i+0x244>)
 801443a:	230a      	movs	r3, #10
 801443c:	e019      	b.n	8014472 <_printf_i+0x102>
 801443e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014442:	6805      	ldr	r5, [r0, #0]
 8014444:	600b      	str	r3, [r1, #0]
 8014446:	bf18      	it	ne
 8014448:	b22d      	sxthne	r5, r5
 801444a:	e7ef      	b.n	801442c <_printf_i+0xbc>
 801444c:	680b      	ldr	r3, [r1, #0]
 801444e:	6825      	ldr	r5, [r4, #0]
 8014450:	1d18      	adds	r0, r3, #4
 8014452:	6008      	str	r0, [r1, #0]
 8014454:	0628      	lsls	r0, r5, #24
 8014456:	d501      	bpl.n	801445c <_printf_i+0xec>
 8014458:	681d      	ldr	r5, [r3, #0]
 801445a:	e002      	b.n	8014462 <_printf_i+0xf2>
 801445c:	0669      	lsls	r1, r5, #25
 801445e:	d5fb      	bpl.n	8014458 <_printf_i+0xe8>
 8014460:	881d      	ldrh	r5, [r3, #0]
 8014462:	4854      	ldr	r0, [pc, #336]	; (80145b4 <_printf_i+0x244>)
 8014464:	2f6f      	cmp	r7, #111	; 0x6f
 8014466:	bf0c      	ite	eq
 8014468:	2308      	moveq	r3, #8
 801446a:	230a      	movne	r3, #10
 801446c:	2100      	movs	r1, #0
 801446e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014472:	6866      	ldr	r6, [r4, #4]
 8014474:	60a6      	str	r6, [r4, #8]
 8014476:	2e00      	cmp	r6, #0
 8014478:	bfa2      	ittt	ge
 801447a:	6821      	ldrge	r1, [r4, #0]
 801447c:	f021 0104 	bicge.w	r1, r1, #4
 8014480:	6021      	strge	r1, [r4, #0]
 8014482:	b90d      	cbnz	r5, 8014488 <_printf_i+0x118>
 8014484:	2e00      	cmp	r6, #0
 8014486:	d04d      	beq.n	8014524 <_printf_i+0x1b4>
 8014488:	4616      	mov	r6, r2
 801448a:	fbb5 f1f3 	udiv	r1, r5, r3
 801448e:	fb03 5711 	mls	r7, r3, r1, r5
 8014492:	5dc7      	ldrb	r7, [r0, r7]
 8014494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014498:	462f      	mov	r7, r5
 801449a:	42bb      	cmp	r3, r7
 801449c:	460d      	mov	r5, r1
 801449e:	d9f4      	bls.n	801448a <_printf_i+0x11a>
 80144a0:	2b08      	cmp	r3, #8
 80144a2:	d10b      	bne.n	80144bc <_printf_i+0x14c>
 80144a4:	6823      	ldr	r3, [r4, #0]
 80144a6:	07df      	lsls	r7, r3, #31
 80144a8:	d508      	bpl.n	80144bc <_printf_i+0x14c>
 80144aa:	6923      	ldr	r3, [r4, #16]
 80144ac:	6861      	ldr	r1, [r4, #4]
 80144ae:	4299      	cmp	r1, r3
 80144b0:	bfde      	ittt	le
 80144b2:	2330      	movle	r3, #48	; 0x30
 80144b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80144b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80144bc:	1b92      	subs	r2, r2, r6
 80144be:	6122      	str	r2, [r4, #16]
 80144c0:	f8cd a000 	str.w	sl, [sp]
 80144c4:	464b      	mov	r3, r9
 80144c6:	aa03      	add	r2, sp, #12
 80144c8:	4621      	mov	r1, r4
 80144ca:	4640      	mov	r0, r8
 80144cc:	f7ff fee2 	bl	8014294 <_printf_common>
 80144d0:	3001      	adds	r0, #1
 80144d2:	d14c      	bne.n	801456e <_printf_i+0x1fe>
 80144d4:	f04f 30ff 	mov.w	r0, #4294967295
 80144d8:	b004      	add	sp, #16
 80144da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144de:	4835      	ldr	r0, [pc, #212]	; (80145b4 <_printf_i+0x244>)
 80144e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80144e4:	6823      	ldr	r3, [r4, #0]
 80144e6:	680e      	ldr	r6, [r1, #0]
 80144e8:	061f      	lsls	r7, r3, #24
 80144ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80144ee:	600e      	str	r6, [r1, #0]
 80144f0:	d514      	bpl.n	801451c <_printf_i+0x1ac>
 80144f2:	07d9      	lsls	r1, r3, #31
 80144f4:	bf44      	itt	mi
 80144f6:	f043 0320 	orrmi.w	r3, r3, #32
 80144fa:	6023      	strmi	r3, [r4, #0]
 80144fc:	b91d      	cbnz	r5, 8014506 <_printf_i+0x196>
 80144fe:	6823      	ldr	r3, [r4, #0]
 8014500:	f023 0320 	bic.w	r3, r3, #32
 8014504:	6023      	str	r3, [r4, #0]
 8014506:	2310      	movs	r3, #16
 8014508:	e7b0      	b.n	801446c <_printf_i+0xfc>
 801450a:	6823      	ldr	r3, [r4, #0]
 801450c:	f043 0320 	orr.w	r3, r3, #32
 8014510:	6023      	str	r3, [r4, #0]
 8014512:	2378      	movs	r3, #120	; 0x78
 8014514:	4828      	ldr	r0, [pc, #160]	; (80145b8 <_printf_i+0x248>)
 8014516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801451a:	e7e3      	b.n	80144e4 <_printf_i+0x174>
 801451c:	065e      	lsls	r6, r3, #25
 801451e:	bf48      	it	mi
 8014520:	b2ad      	uxthmi	r5, r5
 8014522:	e7e6      	b.n	80144f2 <_printf_i+0x182>
 8014524:	4616      	mov	r6, r2
 8014526:	e7bb      	b.n	80144a0 <_printf_i+0x130>
 8014528:	680b      	ldr	r3, [r1, #0]
 801452a:	6826      	ldr	r6, [r4, #0]
 801452c:	6960      	ldr	r0, [r4, #20]
 801452e:	1d1d      	adds	r5, r3, #4
 8014530:	600d      	str	r5, [r1, #0]
 8014532:	0635      	lsls	r5, r6, #24
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	d501      	bpl.n	801453c <_printf_i+0x1cc>
 8014538:	6018      	str	r0, [r3, #0]
 801453a:	e002      	b.n	8014542 <_printf_i+0x1d2>
 801453c:	0671      	lsls	r1, r6, #25
 801453e:	d5fb      	bpl.n	8014538 <_printf_i+0x1c8>
 8014540:	8018      	strh	r0, [r3, #0]
 8014542:	2300      	movs	r3, #0
 8014544:	6123      	str	r3, [r4, #16]
 8014546:	4616      	mov	r6, r2
 8014548:	e7ba      	b.n	80144c0 <_printf_i+0x150>
 801454a:	680b      	ldr	r3, [r1, #0]
 801454c:	1d1a      	adds	r2, r3, #4
 801454e:	600a      	str	r2, [r1, #0]
 8014550:	681e      	ldr	r6, [r3, #0]
 8014552:	6862      	ldr	r2, [r4, #4]
 8014554:	2100      	movs	r1, #0
 8014556:	4630      	mov	r0, r6
 8014558:	f7eb feca 	bl	80002f0 <memchr>
 801455c:	b108      	cbz	r0, 8014562 <_printf_i+0x1f2>
 801455e:	1b80      	subs	r0, r0, r6
 8014560:	6060      	str	r0, [r4, #4]
 8014562:	6863      	ldr	r3, [r4, #4]
 8014564:	6123      	str	r3, [r4, #16]
 8014566:	2300      	movs	r3, #0
 8014568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801456c:	e7a8      	b.n	80144c0 <_printf_i+0x150>
 801456e:	6923      	ldr	r3, [r4, #16]
 8014570:	4632      	mov	r2, r6
 8014572:	4649      	mov	r1, r9
 8014574:	4640      	mov	r0, r8
 8014576:	47d0      	blx	sl
 8014578:	3001      	adds	r0, #1
 801457a:	d0ab      	beq.n	80144d4 <_printf_i+0x164>
 801457c:	6823      	ldr	r3, [r4, #0]
 801457e:	079b      	lsls	r3, r3, #30
 8014580:	d413      	bmi.n	80145aa <_printf_i+0x23a>
 8014582:	68e0      	ldr	r0, [r4, #12]
 8014584:	9b03      	ldr	r3, [sp, #12]
 8014586:	4298      	cmp	r0, r3
 8014588:	bfb8      	it	lt
 801458a:	4618      	movlt	r0, r3
 801458c:	e7a4      	b.n	80144d8 <_printf_i+0x168>
 801458e:	2301      	movs	r3, #1
 8014590:	4632      	mov	r2, r6
 8014592:	4649      	mov	r1, r9
 8014594:	4640      	mov	r0, r8
 8014596:	47d0      	blx	sl
 8014598:	3001      	adds	r0, #1
 801459a:	d09b      	beq.n	80144d4 <_printf_i+0x164>
 801459c:	3501      	adds	r5, #1
 801459e:	68e3      	ldr	r3, [r4, #12]
 80145a0:	9903      	ldr	r1, [sp, #12]
 80145a2:	1a5b      	subs	r3, r3, r1
 80145a4:	42ab      	cmp	r3, r5
 80145a6:	dcf2      	bgt.n	801458e <_printf_i+0x21e>
 80145a8:	e7eb      	b.n	8014582 <_printf_i+0x212>
 80145aa:	2500      	movs	r5, #0
 80145ac:	f104 0619 	add.w	r6, r4, #25
 80145b0:	e7f5      	b.n	801459e <_printf_i+0x22e>
 80145b2:	bf00      	nop
 80145b4:	080192ce 	.word	0x080192ce
 80145b8:	080192df 	.word	0x080192df

080145bc <_scanf_float>:
 80145bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c0:	b087      	sub	sp, #28
 80145c2:	4617      	mov	r7, r2
 80145c4:	9303      	str	r3, [sp, #12]
 80145c6:	688b      	ldr	r3, [r1, #8]
 80145c8:	1e5a      	subs	r2, r3, #1
 80145ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80145ce:	bf83      	ittte	hi
 80145d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80145d4:	195b      	addhi	r3, r3, r5
 80145d6:	9302      	strhi	r3, [sp, #8]
 80145d8:	2300      	movls	r3, #0
 80145da:	bf86      	itte	hi
 80145dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80145e0:	608b      	strhi	r3, [r1, #8]
 80145e2:	9302      	strls	r3, [sp, #8]
 80145e4:	680b      	ldr	r3, [r1, #0]
 80145e6:	468b      	mov	fp, r1
 80145e8:	2500      	movs	r5, #0
 80145ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80145ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80145f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80145f6:	4680      	mov	r8, r0
 80145f8:	460c      	mov	r4, r1
 80145fa:	465e      	mov	r6, fp
 80145fc:	46aa      	mov	sl, r5
 80145fe:	46a9      	mov	r9, r5
 8014600:	9501      	str	r5, [sp, #4]
 8014602:	68a2      	ldr	r2, [r4, #8]
 8014604:	b152      	cbz	r2, 801461c <_scanf_float+0x60>
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	781b      	ldrb	r3, [r3, #0]
 801460a:	2b4e      	cmp	r3, #78	; 0x4e
 801460c:	d864      	bhi.n	80146d8 <_scanf_float+0x11c>
 801460e:	2b40      	cmp	r3, #64	; 0x40
 8014610:	d83c      	bhi.n	801468c <_scanf_float+0xd0>
 8014612:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014616:	b2c8      	uxtb	r0, r1
 8014618:	280e      	cmp	r0, #14
 801461a:	d93a      	bls.n	8014692 <_scanf_float+0xd6>
 801461c:	f1b9 0f00 	cmp.w	r9, #0
 8014620:	d003      	beq.n	801462a <_scanf_float+0x6e>
 8014622:	6823      	ldr	r3, [r4, #0]
 8014624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014628:	6023      	str	r3, [r4, #0]
 801462a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801462e:	f1ba 0f01 	cmp.w	sl, #1
 8014632:	f200 8113 	bhi.w	801485c <_scanf_float+0x2a0>
 8014636:	455e      	cmp	r6, fp
 8014638:	f200 8105 	bhi.w	8014846 <_scanf_float+0x28a>
 801463c:	2501      	movs	r5, #1
 801463e:	4628      	mov	r0, r5
 8014640:	b007      	add	sp, #28
 8014642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014646:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801464a:	2a0d      	cmp	r2, #13
 801464c:	d8e6      	bhi.n	801461c <_scanf_float+0x60>
 801464e:	a101      	add	r1, pc, #4	; (adr r1, 8014654 <_scanf_float+0x98>)
 8014650:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014654:	08014793 	.word	0x08014793
 8014658:	0801461d 	.word	0x0801461d
 801465c:	0801461d 	.word	0x0801461d
 8014660:	0801461d 	.word	0x0801461d
 8014664:	080147f3 	.word	0x080147f3
 8014668:	080147cb 	.word	0x080147cb
 801466c:	0801461d 	.word	0x0801461d
 8014670:	0801461d 	.word	0x0801461d
 8014674:	080147a1 	.word	0x080147a1
 8014678:	0801461d 	.word	0x0801461d
 801467c:	0801461d 	.word	0x0801461d
 8014680:	0801461d 	.word	0x0801461d
 8014684:	0801461d 	.word	0x0801461d
 8014688:	08014759 	.word	0x08014759
 801468c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014690:	e7db      	b.n	801464a <_scanf_float+0x8e>
 8014692:	290e      	cmp	r1, #14
 8014694:	d8c2      	bhi.n	801461c <_scanf_float+0x60>
 8014696:	a001      	add	r0, pc, #4	; (adr r0, 801469c <_scanf_float+0xe0>)
 8014698:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801469c:	0801474b 	.word	0x0801474b
 80146a0:	0801461d 	.word	0x0801461d
 80146a4:	0801474b 	.word	0x0801474b
 80146a8:	080147df 	.word	0x080147df
 80146ac:	0801461d 	.word	0x0801461d
 80146b0:	080146f9 	.word	0x080146f9
 80146b4:	08014735 	.word	0x08014735
 80146b8:	08014735 	.word	0x08014735
 80146bc:	08014735 	.word	0x08014735
 80146c0:	08014735 	.word	0x08014735
 80146c4:	08014735 	.word	0x08014735
 80146c8:	08014735 	.word	0x08014735
 80146cc:	08014735 	.word	0x08014735
 80146d0:	08014735 	.word	0x08014735
 80146d4:	08014735 	.word	0x08014735
 80146d8:	2b6e      	cmp	r3, #110	; 0x6e
 80146da:	d809      	bhi.n	80146f0 <_scanf_float+0x134>
 80146dc:	2b60      	cmp	r3, #96	; 0x60
 80146de:	d8b2      	bhi.n	8014646 <_scanf_float+0x8a>
 80146e0:	2b54      	cmp	r3, #84	; 0x54
 80146e2:	d077      	beq.n	80147d4 <_scanf_float+0x218>
 80146e4:	2b59      	cmp	r3, #89	; 0x59
 80146e6:	d199      	bne.n	801461c <_scanf_float+0x60>
 80146e8:	2d07      	cmp	r5, #7
 80146ea:	d197      	bne.n	801461c <_scanf_float+0x60>
 80146ec:	2508      	movs	r5, #8
 80146ee:	e029      	b.n	8014744 <_scanf_float+0x188>
 80146f0:	2b74      	cmp	r3, #116	; 0x74
 80146f2:	d06f      	beq.n	80147d4 <_scanf_float+0x218>
 80146f4:	2b79      	cmp	r3, #121	; 0x79
 80146f6:	e7f6      	b.n	80146e6 <_scanf_float+0x12a>
 80146f8:	6821      	ldr	r1, [r4, #0]
 80146fa:	05c8      	lsls	r0, r1, #23
 80146fc:	d51a      	bpl.n	8014734 <_scanf_float+0x178>
 80146fe:	9b02      	ldr	r3, [sp, #8]
 8014700:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014704:	6021      	str	r1, [r4, #0]
 8014706:	f109 0901 	add.w	r9, r9, #1
 801470a:	b11b      	cbz	r3, 8014714 <_scanf_float+0x158>
 801470c:	3b01      	subs	r3, #1
 801470e:	3201      	adds	r2, #1
 8014710:	9302      	str	r3, [sp, #8]
 8014712:	60a2      	str	r2, [r4, #8]
 8014714:	68a3      	ldr	r3, [r4, #8]
 8014716:	3b01      	subs	r3, #1
 8014718:	60a3      	str	r3, [r4, #8]
 801471a:	6923      	ldr	r3, [r4, #16]
 801471c:	3301      	adds	r3, #1
 801471e:	6123      	str	r3, [r4, #16]
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	3b01      	subs	r3, #1
 8014724:	2b00      	cmp	r3, #0
 8014726:	607b      	str	r3, [r7, #4]
 8014728:	f340 8084 	ble.w	8014834 <_scanf_float+0x278>
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	3301      	adds	r3, #1
 8014730:	603b      	str	r3, [r7, #0]
 8014732:	e766      	b.n	8014602 <_scanf_float+0x46>
 8014734:	eb1a 0f05 	cmn.w	sl, r5
 8014738:	f47f af70 	bne.w	801461c <_scanf_float+0x60>
 801473c:	6822      	ldr	r2, [r4, #0]
 801473e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014742:	6022      	str	r2, [r4, #0]
 8014744:	f806 3b01 	strb.w	r3, [r6], #1
 8014748:	e7e4      	b.n	8014714 <_scanf_float+0x158>
 801474a:	6822      	ldr	r2, [r4, #0]
 801474c:	0610      	lsls	r0, r2, #24
 801474e:	f57f af65 	bpl.w	801461c <_scanf_float+0x60>
 8014752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014756:	e7f4      	b.n	8014742 <_scanf_float+0x186>
 8014758:	f1ba 0f00 	cmp.w	sl, #0
 801475c:	d10e      	bne.n	801477c <_scanf_float+0x1c0>
 801475e:	f1b9 0f00 	cmp.w	r9, #0
 8014762:	d10e      	bne.n	8014782 <_scanf_float+0x1c6>
 8014764:	6822      	ldr	r2, [r4, #0]
 8014766:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801476a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801476e:	d108      	bne.n	8014782 <_scanf_float+0x1c6>
 8014770:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014774:	6022      	str	r2, [r4, #0]
 8014776:	f04f 0a01 	mov.w	sl, #1
 801477a:	e7e3      	b.n	8014744 <_scanf_float+0x188>
 801477c:	f1ba 0f02 	cmp.w	sl, #2
 8014780:	d055      	beq.n	801482e <_scanf_float+0x272>
 8014782:	2d01      	cmp	r5, #1
 8014784:	d002      	beq.n	801478c <_scanf_float+0x1d0>
 8014786:	2d04      	cmp	r5, #4
 8014788:	f47f af48 	bne.w	801461c <_scanf_float+0x60>
 801478c:	3501      	adds	r5, #1
 801478e:	b2ed      	uxtb	r5, r5
 8014790:	e7d8      	b.n	8014744 <_scanf_float+0x188>
 8014792:	f1ba 0f01 	cmp.w	sl, #1
 8014796:	f47f af41 	bne.w	801461c <_scanf_float+0x60>
 801479a:	f04f 0a02 	mov.w	sl, #2
 801479e:	e7d1      	b.n	8014744 <_scanf_float+0x188>
 80147a0:	b97d      	cbnz	r5, 80147c2 <_scanf_float+0x206>
 80147a2:	f1b9 0f00 	cmp.w	r9, #0
 80147a6:	f47f af3c 	bne.w	8014622 <_scanf_float+0x66>
 80147aa:	6822      	ldr	r2, [r4, #0]
 80147ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80147b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80147b4:	f47f af39 	bne.w	801462a <_scanf_float+0x6e>
 80147b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80147bc:	6022      	str	r2, [r4, #0]
 80147be:	2501      	movs	r5, #1
 80147c0:	e7c0      	b.n	8014744 <_scanf_float+0x188>
 80147c2:	2d03      	cmp	r5, #3
 80147c4:	d0e2      	beq.n	801478c <_scanf_float+0x1d0>
 80147c6:	2d05      	cmp	r5, #5
 80147c8:	e7de      	b.n	8014788 <_scanf_float+0x1cc>
 80147ca:	2d02      	cmp	r5, #2
 80147cc:	f47f af26 	bne.w	801461c <_scanf_float+0x60>
 80147d0:	2503      	movs	r5, #3
 80147d2:	e7b7      	b.n	8014744 <_scanf_float+0x188>
 80147d4:	2d06      	cmp	r5, #6
 80147d6:	f47f af21 	bne.w	801461c <_scanf_float+0x60>
 80147da:	2507      	movs	r5, #7
 80147dc:	e7b2      	b.n	8014744 <_scanf_float+0x188>
 80147de:	6822      	ldr	r2, [r4, #0]
 80147e0:	0591      	lsls	r1, r2, #22
 80147e2:	f57f af1b 	bpl.w	801461c <_scanf_float+0x60>
 80147e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80147ea:	6022      	str	r2, [r4, #0]
 80147ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80147f0:	e7a8      	b.n	8014744 <_scanf_float+0x188>
 80147f2:	6822      	ldr	r2, [r4, #0]
 80147f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80147f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80147fc:	d006      	beq.n	801480c <_scanf_float+0x250>
 80147fe:	0550      	lsls	r0, r2, #21
 8014800:	f57f af0c 	bpl.w	801461c <_scanf_float+0x60>
 8014804:	f1b9 0f00 	cmp.w	r9, #0
 8014808:	f43f af0f 	beq.w	801462a <_scanf_float+0x6e>
 801480c:	0591      	lsls	r1, r2, #22
 801480e:	bf58      	it	pl
 8014810:	9901      	ldrpl	r1, [sp, #4]
 8014812:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014816:	bf58      	it	pl
 8014818:	eba9 0101 	subpl.w	r1, r9, r1
 801481c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014820:	bf58      	it	pl
 8014822:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014826:	6022      	str	r2, [r4, #0]
 8014828:	f04f 0900 	mov.w	r9, #0
 801482c:	e78a      	b.n	8014744 <_scanf_float+0x188>
 801482e:	f04f 0a03 	mov.w	sl, #3
 8014832:	e787      	b.n	8014744 <_scanf_float+0x188>
 8014834:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014838:	4639      	mov	r1, r7
 801483a:	4640      	mov	r0, r8
 801483c:	4798      	blx	r3
 801483e:	2800      	cmp	r0, #0
 8014840:	f43f aedf 	beq.w	8014602 <_scanf_float+0x46>
 8014844:	e6ea      	b.n	801461c <_scanf_float+0x60>
 8014846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801484a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801484e:	463a      	mov	r2, r7
 8014850:	4640      	mov	r0, r8
 8014852:	4798      	blx	r3
 8014854:	6923      	ldr	r3, [r4, #16]
 8014856:	3b01      	subs	r3, #1
 8014858:	6123      	str	r3, [r4, #16]
 801485a:	e6ec      	b.n	8014636 <_scanf_float+0x7a>
 801485c:	1e6b      	subs	r3, r5, #1
 801485e:	2b06      	cmp	r3, #6
 8014860:	d825      	bhi.n	80148ae <_scanf_float+0x2f2>
 8014862:	2d02      	cmp	r5, #2
 8014864:	d836      	bhi.n	80148d4 <_scanf_float+0x318>
 8014866:	455e      	cmp	r6, fp
 8014868:	f67f aee8 	bls.w	801463c <_scanf_float+0x80>
 801486c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014870:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014874:	463a      	mov	r2, r7
 8014876:	4640      	mov	r0, r8
 8014878:	4798      	blx	r3
 801487a:	6923      	ldr	r3, [r4, #16]
 801487c:	3b01      	subs	r3, #1
 801487e:	6123      	str	r3, [r4, #16]
 8014880:	e7f1      	b.n	8014866 <_scanf_float+0x2aa>
 8014882:	9802      	ldr	r0, [sp, #8]
 8014884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014888:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801488c:	9002      	str	r0, [sp, #8]
 801488e:	463a      	mov	r2, r7
 8014890:	4640      	mov	r0, r8
 8014892:	4798      	blx	r3
 8014894:	6923      	ldr	r3, [r4, #16]
 8014896:	3b01      	subs	r3, #1
 8014898:	6123      	str	r3, [r4, #16]
 801489a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801489e:	fa5f fa8a 	uxtb.w	sl, sl
 80148a2:	f1ba 0f02 	cmp.w	sl, #2
 80148a6:	d1ec      	bne.n	8014882 <_scanf_float+0x2c6>
 80148a8:	3d03      	subs	r5, #3
 80148aa:	b2ed      	uxtb	r5, r5
 80148ac:	1b76      	subs	r6, r6, r5
 80148ae:	6823      	ldr	r3, [r4, #0]
 80148b0:	05da      	lsls	r2, r3, #23
 80148b2:	d52f      	bpl.n	8014914 <_scanf_float+0x358>
 80148b4:	055b      	lsls	r3, r3, #21
 80148b6:	d510      	bpl.n	80148da <_scanf_float+0x31e>
 80148b8:	455e      	cmp	r6, fp
 80148ba:	f67f aebf 	bls.w	801463c <_scanf_float+0x80>
 80148be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80148c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80148c6:	463a      	mov	r2, r7
 80148c8:	4640      	mov	r0, r8
 80148ca:	4798      	blx	r3
 80148cc:	6923      	ldr	r3, [r4, #16]
 80148ce:	3b01      	subs	r3, #1
 80148d0:	6123      	str	r3, [r4, #16]
 80148d2:	e7f1      	b.n	80148b8 <_scanf_float+0x2fc>
 80148d4:	46aa      	mov	sl, r5
 80148d6:	9602      	str	r6, [sp, #8]
 80148d8:	e7df      	b.n	801489a <_scanf_float+0x2de>
 80148da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80148de:	6923      	ldr	r3, [r4, #16]
 80148e0:	2965      	cmp	r1, #101	; 0x65
 80148e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80148e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80148ea:	6123      	str	r3, [r4, #16]
 80148ec:	d00c      	beq.n	8014908 <_scanf_float+0x34c>
 80148ee:	2945      	cmp	r1, #69	; 0x45
 80148f0:	d00a      	beq.n	8014908 <_scanf_float+0x34c>
 80148f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80148f6:	463a      	mov	r2, r7
 80148f8:	4640      	mov	r0, r8
 80148fa:	4798      	blx	r3
 80148fc:	6923      	ldr	r3, [r4, #16]
 80148fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014902:	3b01      	subs	r3, #1
 8014904:	1eb5      	subs	r5, r6, #2
 8014906:	6123      	str	r3, [r4, #16]
 8014908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801490c:	463a      	mov	r2, r7
 801490e:	4640      	mov	r0, r8
 8014910:	4798      	blx	r3
 8014912:	462e      	mov	r6, r5
 8014914:	6825      	ldr	r5, [r4, #0]
 8014916:	f015 0510 	ands.w	r5, r5, #16
 801491a:	d14d      	bne.n	80149b8 <_scanf_float+0x3fc>
 801491c:	7035      	strb	r5, [r6, #0]
 801491e:	6823      	ldr	r3, [r4, #0]
 8014920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014928:	d11a      	bne.n	8014960 <_scanf_float+0x3a4>
 801492a:	9b01      	ldr	r3, [sp, #4]
 801492c:	454b      	cmp	r3, r9
 801492e:	eba3 0209 	sub.w	r2, r3, r9
 8014932:	d122      	bne.n	801497a <_scanf_float+0x3be>
 8014934:	2200      	movs	r2, #0
 8014936:	4659      	mov	r1, fp
 8014938:	4640      	mov	r0, r8
 801493a:	f000 fe6b 	bl	8015614 <_strtod_r>
 801493e:	9b03      	ldr	r3, [sp, #12]
 8014940:	6821      	ldr	r1, [r4, #0]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	f011 0f02 	tst.w	r1, #2
 8014948:	f103 0204 	add.w	r2, r3, #4
 801494c:	d020      	beq.n	8014990 <_scanf_float+0x3d4>
 801494e:	9903      	ldr	r1, [sp, #12]
 8014950:	600a      	str	r2, [r1, #0]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	ed83 0b00 	vstr	d0, [r3]
 8014958:	68e3      	ldr	r3, [r4, #12]
 801495a:	3301      	adds	r3, #1
 801495c:	60e3      	str	r3, [r4, #12]
 801495e:	e66e      	b.n	801463e <_scanf_float+0x82>
 8014960:	9b04      	ldr	r3, [sp, #16]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d0e6      	beq.n	8014934 <_scanf_float+0x378>
 8014966:	9905      	ldr	r1, [sp, #20]
 8014968:	230a      	movs	r3, #10
 801496a:	462a      	mov	r2, r5
 801496c:	3101      	adds	r1, #1
 801496e:	4640      	mov	r0, r8
 8014970:	f000 fee6 	bl	8015740 <_strtol_r>
 8014974:	9b04      	ldr	r3, [sp, #16]
 8014976:	9e05      	ldr	r6, [sp, #20]
 8014978:	1ac2      	subs	r2, r0, r3
 801497a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801497e:	429e      	cmp	r6, r3
 8014980:	bf28      	it	cs
 8014982:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014986:	490d      	ldr	r1, [pc, #52]	; (80149bc <_scanf_float+0x400>)
 8014988:	4630      	mov	r0, r6
 801498a:	f000 f821 	bl	80149d0 <siprintf>
 801498e:	e7d1      	b.n	8014934 <_scanf_float+0x378>
 8014990:	f011 0f04 	tst.w	r1, #4
 8014994:	9903      	ldr	r1, [sp, #12]
 8014996:	600a      	str	r2, [r1, #0]
 8014998:	d1db      	bne.n	8014952 <_scanf_float+0x396>
 801499a:	eeb4 0b40 	vcmp.f64	d0, d0
 801499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a2:	681e      	ldr	r6, [r3, #0]
 80149a4:	d705      	bvc.n	80149b2 <_scanf_float+0x3f6>
 80149a6:	4806      	ldr	r0, [pc, #24]	; (80149c0 <_scanf_float+0x404>)
 80149a8:	f000 f80c 	bl	80149c4 <nanf>
 80149ac:	ed86 0a00 	vstr	s0, [r6]
 80149b0:	e7d2      	b.n	8014958 <_scanf_float+0x39c>
 80149b2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80149b6:	e7f9      	b.n	80149ac <_scanf_float+0x3f0>
 80149b8:	2500      	movs	r5, #0
 80149ba:	e640      	b.n	801463e <_scanf_float+0x82>
 80149bc:	080192f0 	.word	0x080192f0
 80149c0:	08019728 	.word	0x08019728

080149c4 <nanf>:
 80149c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80149cc <nanf+0x8>
 80149c8:	4770      	bx	lr
 80149ca:	bf00      	nop
 80149cc:	7fc00000 	.word	0x7fc00000

080149d0 <siprintf>:
 80149d0:	b40e      	push	{r1, r2, r3}
 80149d2:	b500      	push	{lr}
 80149d4:	b09c      	sub	sp, #112	; 0x70
 80149d6:	ab1d      	add	r3, sp, #116	; 0x74
 80149d8:	9002      	str	r0, [sp, #8]
 80149da:	9006      	str	r0, [sp, #24]
 80149dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80149e0:	4809      	ldr	r0, [pc, #36]	; (8014a08 <siprintf+0x38>)
 80149e2:	9107      	str	r1, [sp, #28]
 80149e4:	9104      	str	r1, [sp, #16]
 80149e6:	4909      	ldr	r1, [pc, #36]	; (8014a0c <siprintf+0x3c>)
 80149e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80149ec:	9105      	str	r1, [sp, #20]
 80149ee:	6800      	ldr	r0, [r0, #0]
 80149f0:	9301      	str	r3, [sp, #4]
 80149f2:	a902      	add	r1, sp, #8
 80149f4:	f002 fe70 	bl	80176d8 <_svfiprintf_r>
 80149f8:	9b02      	ldr	r3, [sp, #8]
 80149fa:	2200      	movs	r2, #0
 80149fc:	701a      	strb	r2, [r3, #0]
 80149fe:	b01c      	add	sp, #112	; 0x70
 8014a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a04:	b003      	add	sp, #12
 8014a06:	4770      	bx	lr
 8014a08:	24000020 	.word	0x24000020
 8014a0c:	ffff0208 	.word	0xffff0208

08014a10 <strcat>:
 8014a10:	b510      	push	{r4, lr}
 8014a12:	4602      	mov	r2, r0
 8014a14:	7814      	ldrb	r4, [r2, #0]
 8014a16:	4613      	mov	r3, r2
 8014a18:	3201      	adds	r2, #1
 8014a1a:	2c00      	cmp	r4, #0
 8014a1c:	d1fa      	bne.n	8014a14 <strcat+0x4>
 8014a1e:	3b01      	subs	r3, #1
 8014a20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a28:	2a00      	cmp	r2, #0
 8014a2a:	d1f9      	bne.n	8014a20 <strcat+0x10>
 8014a2c:	bd10      	pop	{r4, pc}

08014a2e <sulp>:
 8014a2e:	b570      	push	{r4, r5, r6, lr}
 8014a30:	4604      	mov	r4, r0
 8014a32:	460d      	mov	r5, r1
 8014a34:	4616      	mov	r6, r2
 8014a36:	ec45 4b10 	vmov	d0, r4, r5
 8014a3a:	f002 fbe7 	bl	801720c <__ulp>
 8014a3e:	b17e      	cbz	r6, 8014a60 <sulp+0x32>
 8014a40:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014a44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	dd09      	ble.n	8014a60 <sulp+0x32>
 8014a4c:	051b      	lsls	r3, r3, #20
 8014a4e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8014a52:	2000      	movs	r0, #0
 8014a54:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8014a58:	ec41 0b17 	vmov	d7, r0, r1
 8014a5c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014a60:	bd70      	pop	{r4, r5, r6, pc}
 8014a62:	0000      	movs	r0, r0
 8014a64:	0000      	movs	r0, r0
	...

08014a68 <_strtod_l>:
 8014a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a6c:	ed2d 8b0c 	vpush	{d8-d13}
 8014a70:	b09d      	sub	sp, #116	; 0x74
 8014a72:	461f      	mov	r7, r3
 8014a74:	2300      	movs	r3, #0
 8014a76:	9318      	str	r3, [sp, #96]	; 0x60
 8014a78:	4ba6      	ldr	r3, [pc, #664]	; (8014d14 <_strtod_l+0x2ac>)
 8014a7a:	9213      	str	r2, [sp, #76]	; 0x4c
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	9308      	str	r3, [sp, #32]
 8014a80:	4604      	mov	r4, r0
 8014a82:	4618      	mov	r0, r3
 8014a84:	468a      	mov	sl, r1
 8014a86:	f7eb fc2b 	bl	80002e0 <strlen>
 8014a8a:	f04f 0800 	mov.w	r8, #0
 8014a8e:	4605      	mov	r5, r0
 8014a90:	f04f 0900 	mov.w	r9, #0
 8014a94:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8014a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a9a:	781a      	ldrb	r2, [r3, #0]
 8014a9c:	2a2b      	cmp	r2, #43	; 0x2b
 8014a9e:	d04d      	beq.n	8014b3c <_strtod_l+0xd4>
 8014aa0:	d83a      	bhi.n	8014b18 <_strtod_l+0xb0>
 8014aa2:	2a0d      	cmp	r2, #13
 8014aa4:	d833      	bhi.n	8014b0e <_strtod_l+0xa6>
 8014aa6:	2a08      	cmp	r2, #8
 8014aa8:	d833      	bhi.n	8014b12 <_strtod_l+0xaa>
 8014aaa:	2a00      	cmp	r2, #0
 8014aac:	d03d      	beq.n	8014b2a <_strtod_l+0xc2>
 8014aae:	2300      	movs	r3, #0
 8014ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ab2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014ab4:	7833      	ldrb	r3, [r6, #0]
 8014ab6:	2b30      	cmp	r3, #48	; 0x30
 8014ab8:	f040 80b6 	bne.w	8014c28 <_strtod_l+0x1c0>
 8014abc:	7873      	ldrb	r3, [r6, #1]
 8014abe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014ac2:	2b58      	cmp	r3, #88	; 0x58
 8014ac4:	d16d      	bne.n	8014ba2 <_strtod_l+0x13a>
 8014ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ac8:	9301      	str	r3, [sp, #4]
 8014aca:	ab18      	add	r3, sp, #96	; 0x60
 8014acc:	9702      	str	r7, [sp, #8]
 8014ace:	9300      	str	r3, [sp, #0]
 8014ad0:	4a91      	ldr	r2, [pc, #580]	; (8014d18 <_strtod_l+0x2b0>)
 8014ad2:	ab19      	add	r3, sp, #100	; 0x64
 8014ad4:	a917      	add	r1, sp, #92	; 0x5c
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	f001 fcf8 	bl	80164cc <__gethex>
 8014adc:	f010 0507 	ands.w	r5, r0, #7
 8014ae0:	4607      	mov	r7, r0
 8014ae2:	d005      	beq.n	8014af0 <_strtod_l+0x88>
 8014ae4:	2d06      	cmp	r5, #6
 8014ae6:	d12b      	bne.n	8014b40 <_strtod_l+0xd8>
 8014ae8:	3601      	adds	r6, #1
 8014aea:	2300      	movs	r3, #0
 8014aec:	9617      	str	r6, [sp, #92]	; 0x5c
 8014aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8014af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	f040 856e 	bne.w	80155d4 <_strtod_l+0xb6c>
 8014af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014afa:	b1e3      	cbz	r3, 8014b36 <_strtod_l+0xce>
 8014afc:	ec49 8b17 	vmov	d7, r8, r9
 8014b00:	eeb1 0b47 	vneg.f64	d0, d7
 8014b04:	b01d      	add	sp, #116	; 0x74
 8014b06:	ecbd 8b0c 	vpop	{d8-d13}
 8014b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b0e:	2a20      	cmp	r2, #32
 8014b10:	d1cd      	bne.n	8014aae <_strtod_l+0x46>
 8014b12:	3301      	adds	r3, #1
 8014b14:	9317      	str	r3, [sp, #92]	; 0x5c
 8014b16:	e7bf      	b.n	8014a98 <_strtod_l+0x30>
 8014b18:	2a2d      	cmp	r2, #45	; 0x2d
 8014b1a:	d1c8      	bne.n	8014aae <_strtod_l+0x46>
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8014b20:	1c5a      	adds	r2, r3, #1
 8014b22:	9217      	str	r2, [sp, #92]	; 0x5c
 8014b24:	785b      	ldrb	r3, [r3, #1]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d1c3      	bne.n	8014ab2 <_strtod_l+0x4a>
 8014b2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b2c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	f040 854d 	bne.w	80155d0 <_strtod_l+0xb68>
 8014b36:	ec49 8b10 	vmov	d0, r8, r9
 8014b3a:	e7e3      	b.n	8014b04 <_strtod_l+0x9c>
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	e7ee      	b.n	8014b1e <_strtod_l+0xb6>
 8014b40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014b42:	b13a      	cbz	r2, 8014b54 <_strtod_l+0xec>
 8014b44:	2135      	movs	r1, #53	; 0x35
 8014b46:	a81a      	add	r0, sp, #104	; 0x68
 8014b48:	f002 fc6c 	bl	8017424 <__copybits>
 8014b4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b4e:	4620      	mov	r0, r4
 8014b50:	f002 f830 	bl	8016bb4 <_Bfree>
 8014b54:	3d01      	subs	r5, #1
 8014b56:	2d05      	cmp	r5, #5
 8014b58:	d807      	bhi.n	8014b6a <_strtod_l+0x102>
 8014b5a:	e8df f005 	tbb	[pc, r5]
 8014b5e:	0b0e      	.short	0x0b0e
 8014b60:	030e1d18 	.word	0x030e1d18
 8014b64:	f04f 0900 	mov.w	r9, #0
 8014b68:	46c8      	mov	r8, r9
 8014b6a:	073b      	lsls	r3, r7, #28
 8014b6c:	d5c0      	bpl.n	8014af0 <_strtod_l+0x88>
 8014b6e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8014b72:	e7bd      	b.n	8014af0 <_strtod_l+0x88>
 8014b74:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8014b78:	e7f7      	b.n	8014b6a <_strtod_l+0x102>
 8014b7a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8014b7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014b80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014b84:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014b88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014b8c:	e7ed      	b.n	8014b6a <_strtod_l+0x102>
 8014b8e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8014d1c <_strtod_l+0x2b4>
 8014b92:	f04f 0800 	mov.w	r8, #0
 8014b96:	e7e8      	b.n	8014b6a <_strtod_l+0x102>
 8014b98:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014b9c:	f04f 38ff 	mov.w	r8, #4294967295
 8014ba0:	e7e3      	b.n	8014b6a <_strtod_l+0x102>
 8014ba2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ba4:	1c5a      	adds	r2, r3, #1
 8014ba6:	9217      	str	r2, [sp, #92]	; 0x5c
 8014ba8:	785b      	ldrb	r3, [r3, #1]
 8014baa:	2b30      	cmp	r3, #48	; 0x30
 8014bac:	d0f9      	beq.n	8014ba2 <_strtod_l+0x13a>
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d09e      	beq.n	8014af0 <_strtod_l+0x88>
 8014bb2:	2301      	movs	r3, #1
 8014bb4:	9306      	str	r3, [sp, #24]
 8014bb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014bb8:	930c      	str	r3, [sp, #48]	; 0x30
 8014bba:	2300      	movs	r3, #0
 8014bbc:	9304      	str	r3, [sp, #16]
 8014bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8014bc0:	461e      	mov	r6, r3
 8014bc2:	220a      	movs	r2, #10
 8014bc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014bc6:	f890 b000 	ldrb.w	fp, [r0]
 8014bca:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8014bce:	b2d9      	uxtb	r1, r3
 8014bd0:	2909      	cmp	r1, #9
 8014bd2:	d92b      	bls.n	8014c2c <_strtod_l+0x1c4>
 8014bd4:	9908      	ldr	r1, [sp, #32]
 8014bd6:	462a      	mov	r2, r5
 8014bd8:	f002 fe96 	bl	8017908 <strncmp>
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	d035      	beq.n	8014c4c <_strtod_l+0x1e4>
 8014be0:	2000      	movs	r0, #0
 8014be2:	465a      	mov	r2, fp
 8014be4:	4633      	mov	r3, r6
 8014be6:	4683      	mov	fp, r0
 8014be8:	4601      	mov	r1, r0
 8014bea:	2a65      	cmp	r2, #101	; 0x65
 8014bec:	d001      	beq.n	8014bf2 <_strtod_l+0x18a>
 8014bee:	2a45      	cmp	r2, #69	; 0x45
 8014bf0:	d118      	bne.n	8014c24 <_strtod_l+0x1bc>
 8014bf2:	b91b      	cbnz	r3, 8014bfc <_strtod_l+0x194>
 8014bf4:	9b06      	ldr	r3, [sp, #24]
 8014bf6:	4303      	orrs	r3, r0
 8014bf8:	d097      	beq.n	8014b2a <_strtod_l+0xc2>
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8014c00:	f10a 0201 	add.w	r2, sl, #1
 8014c04:	9217      	str	r2, [sp, #92]	; 0x5c
 8014c06:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8014c0a:	2a2b      	cmp	r2, #43	; 0x2b
 8014c0c:	d077      	beq.n	8014cfe <_strtod_l+0x296>
 8014c0e:	2a2d      	cmp	r2, #45	; 0x2d
 8014c10:	d07d      	beq.n	8014d0e <_strtod_l+0x2a6>
 8014c12:	f04f 0e00 	mov.w	lr, #0
 8014c16:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8014c1a:	2d09      	cmp	r5, #9
 8014c1c:	f240 8084 	bls.w	8014d28 <_strtod_l+0x2c0>
 8014c20:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8014c24:	2500      	movs	r5, #0
 8014c26:	e09f      	b.n	8014d68 <_strtod_l+0x300>
 8014c28:	2300      	movs	r3, #0
 8014c2a:	e7c3      	b.n	8014bb4 <_strtod_l+0x14c>
 8014c2c:	2e08      	cmp	r6, #8
 8014c2e:	bfd5      	itete	le
 8014c30:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8014c32:	9904      	ldrgt	r1, [sp, #16]
 8014c34:	fb02 3301 	mlale	r3, r2, r1, r3
 8014c38:	fb02 3301 	mlagt	r3, r2, r1, r3
 8014c3c:	f100 0001 	add.w	r0, r0, #1
 8014c40:	bfd4      	ite	le
 8014c42:	930a      	strle	r3, [sp, #40]	; 0x28
 8014c44:	9304      	strgt	r3, [sp, #16]
 8014c46:	3601      	adds	r6, #1
 8014c48:	9017      	str	r0, [sp, #92]	; 0x5c
 8014c4a:	e7bb      	b.n	8014bc4 <_strtod_l+0x15c>
 8014c4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c4e:	195a      	adds	r2, r3, r5
 8014c50:	9217      	str	r2, [sp, #92]	; 0x5c
 8014c52:	5d5a      	ldrb	r2, [r3, r5]
 8014c54:	b3ae      	cbz	r6, 8014cc2 <_strtod_l+0x25a>
 8014c56:	4683      	mov	fp, r0
 8014c58:	4633      	mov	r3, r6
 8014c5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014c5e:	2909      	cmp	r1, #9
 8014c60:	d912      	bls.n	8014c88 <_strtod_l+0x220>
 8014c62:	2101      	movs	r1, #1
 8014c64:	e7c1      	b.n	8014bea <_strtod_l+0x182>
 8014c66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c68:	1c5a      	adds	r2, r3, #1
 8014c6a:	9217      	str	r2, [sp, #92]	; 0x5c
 8014c6c:	785a      	ldrb	r2, [r3, #1]
 8014c6e:	3001      	adds	r0, #1
 8014c70:	2a30      	cmp	r2, #48	; 0x30
 8014c72:	d0f8      	beq.n	8014c66 <_strtod_l+0x1fe>
 8014c74:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014c78:	2b08      	cmp	r3, #8
 8014c7a:	f200 84b0 	bhi.w	80155de <_strtod_l+0xb76>
 8014c7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c80:	930c      	str	r3, [sp, #48]	; 0x30
 8014c82:	4683      	mov	fp, r0
 8014c84:	2000      	movs	r0, #0
 8014c86:	4603      	mov	r3, r0
 8014c88:	3a30      	subs	r2, #48	; 0x30
 8014c8a:	f100 0101 	add.w	r1, r0, #1
 8014c8e:	d012      	beq.n	8014cb6 <_strtod_l+0x24e>
 8014c90:	448b      	add	fp, r1
 8014c92:	eb00 0c03 	add.w	ip, r0, r3
 8014c96:	4619      	mov	r1, r3
 8014c98:	250a      	movs	r5, #10
 8014c9a:	4561      	cmp	r1, ip
 8014c9c:	d113      	bne.n	8014cc6 <_strtod_l+0x25e>
 8014c9e:	1819      	adds	r1, r3, r0
 8014ca0:	2908      	cmp	r1, #8
 8014ca2:	f103 0301 	add.w	r3, r3, #1
 8014ca6:	4403      	add	r3, r0
 8014ca8:	dc1d      	bgt.n	8014ce6 <_strtod_l+0x27e>
 8014caa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014cac:	210a      	movs	r1, #10
 8014cae:	fb01 2200 	mla	r2, r1, r0, r2
 8014cb2:	920a      	str	r2, [sp, #40]	; 0x28
 8014cb4:	2100      	movs	r1, #0
 8014cb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014cb8:	1c50      	adds	r0, r2, #1
 8014cba:	9017      	str	r0, [sp, #92]	; 0x5c
 8014cbc:	7852      	ldrb	r2, [r2, #1]
 8014cbe:	4608      	mov	r0, r1
 8014cc0:	e7cb      	b.n	8014c5a <_strtod_l+0x1f2>
 8014cc2:	4630      	mov	r0, r6
 8014cc4:	e7d4      	b.n	8014c70 <_strtod_l+0x208>
 8014cc6:	2908      	cmp	r1, #8
 8014cc8:	dc04      	bgt.n	8014cd4 <_strtod_l+0x26c>
 8014cca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014ccc:	436f      	muls	r7, r5
 8014cce:	970a      	str	r7, [sp, #40]	; 0x28
 8014cd0:	3101      	adds	r1, #1
 8014cd2:	e7e2      	b.n	8014c9a <_strtod_l+0x232>
 8014cd4:	f101 0e01 	add.w	lr, r1, #1
 8014cd8:	f1be 0f10 	cmp.w	lr, #16
 8014cdc:	bfde      	ittt	le
 8014cde:	9f04      	ldrle	r7, [sp, #16]
 8014ce0:	436f      	mulle	r7, r5
 8014ce2:	9704      	strle	r7, [sp, #16]
 8014ce4:	e7f4      	b.n	8014cd0 <_strtod_l+0x268>
 8014ce6:	2b10      	cmp	r3, #16
 8014ce8:	bfdf      	itttt	le
 8014cea:	9804      	ldrle	r0, [sp, #16]
 8014cec:	210a      	movle	r1, #10
 8014cee:	fb01 2200 	mlale	r2, r1, r0, r2
 8014cf2:	9204      	strle	r2, [sp, #16]
 8014cf4:	e7de      	b.n	8014cb4 <_strtod_l+0x24c>
 8014cf6:	f04f 0b00 	mov.w	fp, #0
 8014cfa:	2101      	movs	r1, #1
 8014cfc:	e77a      	b.n	8014bf4 <_strtod_l+0x18c>
 8014cfe:	f04f 0e00 	mov.w	lr, #0
 8014d02:	f10a 0202 	add.w	r2, sl, #2
 8014d06:	9217      	str	r2, [sp, #92]	; 0x5c
 8014d08:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8014d0c:	e783      	b.n	8014c16 <_strtod_l+0x1ae>
 8014d0e:	f04f 0e01 	mov.w	lr, #1
 8014d12:	e7f6      	b.n	8014d02 <_strtod_l+0x29a>
 8014d14:	0801956c 	.word	0x0801956c
 8014d18:	080192f8 	.word	0x080192f8
 8014d1c:	7ff00000 	.word	0x7ff00000
 8014d20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014d22:	1c55      	adds	r5, r2, #1
 8014d24:	9517      	str	r5, [sp, #92]	; 0x5c
 8014d26:	7852      	ldrb	r2, [r2, #1]
 8014d28:	2a30      	cmp	r2, #48	; 0x30
 8014d2a:	d0f9      	beq.n	8014d20 <_strtod_l+0x2b8>
 8014d2c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8014d30:	2d08      	cmp	r5, #8
 8014d32:	f63f af77 	bhi.w	8014c24 <_strtod_l+0x1bc>
 8014d36:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8014d3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014d3c:	9208      	str	r2, [sp, #32]
 8014d3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014d40:	1c55      	adds	r5, r2, #1
 8014d42:	9517      	str	r5, [sp, #92]	; 0x5c
 8014d44:	7852      	ldrb	r2, [r2, #1]
 8014d46:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8014d4a:	2f09      	cmp	r7, #9
 8014d4c:	d937      	bls.n	8014dbe <_strtod_l+0x356>
 8014d4e:	9f08      	ldr	r7, [sp, #32]
 8014d50:	1bed      	subs	r5, r5, r7
 8014d52:	2d08      	cmp	r5, #8
 8014d54:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8014d58:	dc02      	bgt.n	8014d60 <_strtod_l+0x2f8>
 8014d5a:	4565      	cmp	r5, ip
 8014d5c:	bfa8      	it	ge
 8014d5e:	4665      	movge	r5, ip
 8014d60:	f1be 0f00 	cmp.w	lr, #0
 8014d64:	d000      	beq.n	8014d68 <_strtod_l+0x300>
 8014d66:	426d      	negs	r5, r5
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d14f      	bne.n	8014e0c <_strtod_l+0x3a4>
 8014d6c:	9b06      	ldr	r3, [sp, #24]
 8014d6e:	4303      	orrs	r3, r0
 8014d70:	f47f aebe 	bne.w	8014af0 <_strtod_l+0x88>
 8014d74:	2900      	cmp	r1, #0
 8014d76:	f47f aed8 	bne.w	8014b2a <_strtod_l+0xc2>
 8014d7a:	2a69      	cmp	r2, #105	; 0x69
 8014d7c:	d027      	beq.n	8014dce <_strtod_l+0x366>
 8014d7e:	dc24      	bgt.n	8014dca <_strtod_l+0x362>
 8014d80:	2a49      	cmp	r2, #73	; 0x49
 8014d82:	d024      	beq.n	8014dce <_strtod_l+0x366>
 8014d84:	2a4e      	cmp	r2, #78	; 0x4e
 8014d86:	f47f aed0 	bne.w	8014b2a <_strtod_l+0xc2>
 8014d8a:	499b      	ldr	r1, [pc, #620]	; (8014ff8 <_strtod_l+0x590>)
 8014d8c:	a817      	add	r0, sp, #92	; 0x5c
 8014d8e:	f001 fdf5 	bl	801697c <__match>
 8014d92:	2800      	cmp	r0, #0
 8014d94:	f43f aec9 	beq.w	8014b2a <_strtod_l+0xc2>
 8014d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014d9a:	781b      	ldrb	r3, [r3, #0]
 8014d9c:	2b28      	cmp	r3, #40	; 0x28
 8014d9e:	d12d      	bne.n	8014dfc <_strtod_l+0x394>
 8014da0:	4996      	ldr	r1, [pc, #600]	; (8014ffc <_strtod_l+0x594>)
 8014da2:	aa1a      	add	r2, sp, #104	; 0x68
 8014da4:	a817      	add	r0, sp, #92	; 0x5c
 8014da6:	f001 fdfd 	bl	80169a4 <__hexnan>
 8014daa:	2805      	cmp	r0, #5
 8014dac:	d126      	bne.n	8014dfc <_strtod_l+0x394>
 8014dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014db0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8014db4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014db8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014dbc:	e698      	b.n	8014af0 <_strtod_l+0x88>
 8014dbe:	250a      	movs	r5, #10
 8014dc0:	fb05 250c 	mla	r5, r5, ip, r2
 8014dc4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8014dc8:	e7b9      	b.n	8014d3e <_strtod_l+0x2d6>
 8014dca:	2a6e      	cmp	r2, #110	; 0x6e
 8014dcc:	e7db      	b.n	8014d86 <_strtod_l+0x31e>
 8014dce:	498c      	ldr	r1, [pc, #560]	; (8015000 <_strtod_l+0x598>)
 8014dd0:	a817      	add	r0, sp, #92	; 0x5c
 8014dd2:	f001 fdd3 	bl	801697c <__match>
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	f43f aea7 	beq.w	8014b2a <_strtod_l+0xc2>
 8014ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014dde:	4989      	ldr	r1, [pc, #548]	; (8015004 <_strtod_l+0x59c>)
 8014de0:	3b01      	subs	r3, #1
 8014de2:	a817      	add	r0, sp, #92	; 0x5c
 8014de4:	9317      	str	r3, [sp, #92]	; 0x5c
 8014de6:	f001 fdc9 	bl	801697c <__match>
 8014dea:	b910      	cbnz	r0, 8014df2 <_strtod_l+0x38a>
 8014dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014dee:	3301      	adds	r3, #1
 8014df0:	9317      	str	r3, [sp, #92]	; 0x5c
 8014df2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8015018 <_strtod_l+0x5b0>
 8014df6:	f04f 0800 	mov.w	r8, #0
 8014dfa:	e679      	b.n	8014af0 <_strtod_l+0x88>
 8014dfc:	4882      	ldr	r0, [pc, #520]	; (8015008 <_strtod_l+0x5a0>)
 8014dfe:	f002 fd6b 	bl	80178d8 <nan>
 8014e02:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014e06:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014e0a:	e671      	b.n	8014af0 <_strtod_l+0x88>
 8014e0c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8014e10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014e14:	eba5 020b 	sub.w	r2, r5, fp
 8014e18:	2e00      	cmp	r6, #0
 8014e1a:	bf08      	it	eq
 8014e1c:	461e      	moveq	r6, r3
 8014e1e:	2b10      	cmp	r3, #16
 8014e20:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014e24:	9206      	str	r2, [sp, #24]
 8014e26:	461a      	mov	r2, r3
 8014e28:	bfa8      	it	ge
 8014e2a:	2210      	movge	r2, #16
 8014e2c:	2b09      	cmp	r3, #9
 8014e2e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8014e32:	dd0e      	ble.n	8014e52 <_strtod_l+0x3ea>
 8014e34:	4975      	ldr	r1, [pc, #468]	; (801500c <_strtod_l+0x5a4>)
 8014e36:	eddd 7a04 	vldr	s15, [sp, #16]
 8014e3a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014e3e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8014e42:	ed9d 5b08 	vldr	d5, [sp, #32]
 8014e46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014e4a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014e4e:	ec59 8b17 	vmov	r8, r9, d7
 8014e52:	2b0f      	cmp	r3, #15
 8014e54:	dc37      	bgt.n	8014ec6 <_strtod_l+0x45e>
 8014e56:	9906      	ldr	r1, [sp, #24]
 8014e58:	2900      	cmp	r1, #0
 8014e5a:	f43f ae49 	beq.w	8014af0 <_strtod_l+0x88>
 8014e5e:	dd23      	ble.n	8014ea8 <_strtod_l+0x440>
 8014e60:	2916      	cmp	r1, #22
 8014e62:	dc0b      	bgt.n	8014e7c <_strtod_l+0x414>
 8014e64:	4b69      	ldr	r3, [pc, #420]	; (801500c <_strtod_l+0x5a4>)
 8014e66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8014e6a:	ed93 7b00 	vldr	d7, [r3]
 8014e6e:	ec49 8b16 	vmov	d6, r8, r9
 8014e72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014e76:	ec59 8b17 	vmov	r8, r9, d7
 8014e7a:	e639      	b.n	8014af0 <_strtod_l+0x88>
 8014e7c:	9806      	ldr	r0, [sp, #24]
 8014e7e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8014e82:	4281      	cmp	r1, r0
 8014e84:	db1f      	blt.n	8014ec6 <_strtod_l+0x45e>
 8014e86:	4a61      	ldr	r2, [pc, #388]	; (801500c <_strtod_l+0x5a4>)
 8014e88:	f1c3 030f 	rsb	r3, r3, #15
 8014e8c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8014e90:	ed91 7b00 	vldr	d7, [r1]
 8014e94:	ec49 8b16 	vmov	d6, r8, r9
 8014e98:	1ac3      	subs	r3, r0, r3
 8014e9a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014e9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ea2:	ed92 6b00 	vldr	d6, [r2]
 8014ea6:	e7e4      	b.n	8014e72 <_strtod_l+0x40a>
 8014ea8:	9906      	ldr	r1, [sp, #24]
 8014eaa:	3116      	adds	r1, #22
 8014eac:	db0b      	blt.n	8014ec6 <_strtod_l+0x45e>
 8014eae:	4b57      	ldr	r3, [pc, #348]	; (801500c <_strtod_l+0x5a4>)
 8014eb0:	ebab 0505 	sub.w	r5, fp, r5
 8014eb4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014eb8:	ed95 7b00 	vldr	d7, [r5]
 8014ebc:	ec49 8b16 	vmov	d6, r8, r9
 8014ec0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014ec4:	e7d7      	b.n	8014e76 <_strtod_l+0x40e>
 8014ec6:	9906      	ldr	r1, [sp, #24]
 8014ec8:	1a9a      	subs	r2, r3, r2
 8014eca:	440a      	add	r2, r1
 8014ecc:	2a00      	cmp	r2, #0
 8014ece:	dd74      	ble.n	8014fba <_strtod_l+0x552>
 8014ed0:	f012 000f 	ands.w	r0, r2, #15
 8014ed4:	d00a      	beq.n	8014eec <_strtod_l+0x484>
 8014ed6:	494d      	ldr	r1, [pc, #308]	; (801500c <_strtod_l+0x5a4>)
 8014ed8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014edc:	ed91 7b00 	vldr	d7, [r1]
 8014ee0:	ec49 8b16 	vmov	d6, r8, r9
 8014ee4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ee8:	ec59 8b17 	vmov	r8, r9, d7
 8014eec:	f032 020f 	bics.w	r2, r2, #15
 8014ef0:	d04f      	beq.n	8014f92 <_strtod_l+0x52a>
 8014ef2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8014ef6:	dd22      	ble.n	8014f3e <_strtod_l+0x4d6>
 8014ef8:	2500      	movs	r5, #0
 8014efa:	462e      	mov	r6, r5
 8014efc:	950a      	str	r5, [sp, #40]	; 0x28
 8014efe:	462f      	mov	r7, r5
 8014f00:	2322      	movs	r3, #34	; 0x22
 8014f02:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8015018 <_strtod_l+0x5b0>
 8014f06:	6023      	str	r3, [r4, #0]
 8014f08:	f04f 0800 	mov.w	r8, #0
 8014f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	f43f adee 	beq.w	8014af0 <_strtod_l+0x88>
 8014f14:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014f16:	4620      	mov	r0, r4
 8014f18:	f001 fe4c 	bl	8016bb4 <_Bfree>
 8014f1c:	4639      	mov	r1, r7
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f001 fe48 	bl	8016bb4 <_Bfree>
 8014f24:	4631      	mov	r1, r6
 8014f26:	4620      	mov	r0, r4
 8014f28:	f001 fe44 	bl	8016bb4 <_Bfree>
 8014f2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f001 fe40 	bl	8016bb4 <_Bfree>
 8014f34:	4629      	mov	r1, r5
 8014f36:	4620      	mov	r0, r4
 8014f38:	f001 fe3c 	bl	8016bb4 <_Bfree>
 8014f3c:	e5d8      	b.n	8014af0 <_strtod_l+0x88>
 8014f3e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8014f42:	2000      	movs	r0, #0
 8014f44:	4f32      	ldr	r7, [pc, #200]	; (8015010 <_strtod_l+0x5a8>)
 8014f46:	1112      	asrs	r2, r2, #4
 8014f48:	4601      	mov	r1, r0
 8014f4a:	2a01      	cmp	r2, #1
 8014f4c:	dc24      	bgt.n	8014f98 <_strtod_l+0x530>
 8014f4e:	b108      	cbz	r0, 8014f54 <_strtod_l+0x4ec>
 8014f50:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014f54:	4a2e      	ldr	r2, [pc, #184]	; (8015010 <_strtod_l+0x5a8>)
 8014f56:	482f      	ldr	r0, [pc, #188]	; (8015014 <_strtod_l+0x5ac>)
 8014f58:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8014f5c:	ed91 7b00 	vldr	d7, [r1]
 8014f60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014f64:	ec49 8b16 	vmov	d6, r8, r9
 8014f68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014f6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014f70:	9905      	ldr	r1, [sp, #20]
 8014f72:	4a29      	ldr	r2, [pc, #164]	; (8015018 <_strtod_l+0x5b0>)
 8014f74:	400a      	ands	r2, r1
 8014f76:	4282      	cmp	r2, r0
 8014f78:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014f7c:	d8bc      	bhi.n	8014ef8 <_strtod_l+0x490>
 8014f7e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8014f82:	4282      	cmp	r2, r0
 8014f84:	bf86      	itte	hi
 8014f86:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801501c <_strtod_l+0x5b4>
 8014f8a:	f04f 38ff 	movhi.w	r8, #4294967295
 8014f8e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8014f92:	2200      	movs	r2, #0
 8014f94:	9204      	str	r2, [sp, #16]
 8014f96:	e07f      	b.n	8015098 <_strtod_l+0x630>
 8014f98:	f012 0f01 	tst.w	r2, #1
 8014f9c:	d00a      	beq.n	8014fb4 <_strtod_l+0x54c>
 8014f9e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8014fa2:	ed90 7b00 	vldr	d7, [r0]
 8014fa6:	ed9d 6b04 	vldr	d6, [sp, #16]
 8014faa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014fae:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014fb2:	2001      	movs	r0, #1
 8014fb4:	3101      	adds	r1, #1
 8014fb6:	1052      	asrs	r2, r2, #1
 8014fb8:	e7c7      	b.n	8014f4a <_strtod_l+0x4e2>
 8014fba:	d0ea      	beq.n	8014f92 <_strtod_l+0x52a>
 8014fbc:	4252      	negs	r2, r2
 8014fbe:	f012 000f 	ands.w	r0, r2, #15
 8014fc2:	d00a      	beq.n	8014fda <_strtod_l+0x572>
 8014fc4:	4911      	ldr	r1, [pc, #68]	; (801500c <_strtod_l+0x5a4>)
 8014fc6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014fca:	ed91 7b00 	vldr	d7, [r1]
 8014fce:	ec49 8b16 	vmov	d6, r8, r9
 8014fd2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014fd6:	ec59 8b17 	vmov	r8, r9, d7
 8014fda:	1112      	asrs	r2, r2, #4
 8014fdc:	d0d9      	beq.n	8014f92 <_strtod_l+0x52a>
 8014fde:	2a1f      	cmp	r2, #31
 8014fe0:	dd1e      	ble.n	8015020 <_strtod_l+0x5b8>
 8014fe2:	2500      	movs	r5, #0
 8014fe4:	462e      	mov	r6, r5
 8014fe6:	950a      	str	r5, [sp, #40]	; 0x28
 8014fe8:	462f      	mov	r7, r5
 8014fea:	2322      	movs	r3, #34	; 0x22
 8014fec:	f04f 0800 	mov.w	r8, #0
 8014ff0:	f04f 0900 	mov.w	r9, #0
 8014ff4:	6023      	str	r3, [r4, #0]
 8014ff6:	e789      	b.n	8014f0c <_strtod_l+0x4a4>
 8014ff8:	080192c9 	.word	0x080192c9
 8014ffc:	0801930c 	.word	0x0801930c
 8015000:	080192c1 	.word	0x080192c1
 8015004:	08019471 	.word	0x08019471
 8015008:	08019728 	.word	0x08019728
 801500c:	08019608 	.word	0x08019608
 8015010:	080195e0 	.word	0x080195e0
 8015014:	7ca00000 	.word	0x7ca00000
 8015018:	7ff00000 	.word	0x7ff00000
 801501c:	7fefffff 	.word	0x7fefffff
 8015020:	f012 0110 	ands.w	r1, r2, #16
 8015024:	bf18      	it	ne
 8015026:	216a      	movne	r1, #106	; 0x6a
 8015028:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801502c:	9104      	str	r1, [sp, #16]
 801502e:	49c0      	ldr	r1, [pc, #768]	; (8015330 <_strtod_l+0x8c8>)
 8015030:	2000      	movs	r0, #0
 8015032:	07d7      	lsls	r7, r2, #31
 8015034:	d508      	bpl.n	8015048 <_strtod_l+0x5e0>
 8015036:	ed9d 6b08 	vldr	d6, [sp, #32]
 801503a:	ed91 7b00 	vldr	d7, [r1]
 801503e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015042:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015046:	2001      	movs	r0, #1
 8015048:	1052      	asrs	r2, r2, #1
 801504a:	f101 0108 	add.w	r1, r1, #8
 801504e:	d1f0      	bne.n	8015032 <_strtod_l+0x5ca>
 8015050:	b108      	cbz	r0, 8015056 <_strtod_l+0x5ee>
 8015052:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8015056:	9a04      	ldr	r2, [sp, #16]
 8015058:	b1ba      	cbz	r2, 801508a <_strtod_l+0x622>
 801505a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801505e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8015062:	2a00      	cmp	r2, #0
 8015064:	4649      	mov	r1, r9
 8015066:	dd10      	ble.n	801508a <_strtod_l+0x622>
 8015068:	2a1f      	cmp	r2, #31
 801506a:	f340 8132 	ble.w	80152d2 <_strtod_l+0x86a>
 801506e:	2a34      	cmp	r2, #52	; 0x34
 8015070:	bfde      	ittt	le
 8015072:	3a20      	suble	r2, #32
 8015074:	f04f 30ff 	movle.w	r0, #4294967295
 8015078:	fa00 f202 	lslle.w	r2, r0, r2
 801507c:	f04f 0800 	mov.w	r8, #0
 8015080:	bfcc      	ite	gt
 8015082:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015086:	ea02 0901 	andle.w	r9, r2, r1
 801508a:	ec49 8b17 	vmov	d7, r8, r9
 801508e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015096:	d0a4      	beq.n	8014fe2 <_strtod_l+0x57a>
 8015098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801509a:	9200      	str	r2, [sp, #0]
 801509c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801509e:	4632      	mov	r2, r6
 80150a0:	4620      	mov	r0, r4
 80150a2:	f001 fdf3 	bl	8016c8c <__s2b>
 80150a6:	900a      	str	r0, [sp, #40]	; 0x28
 80150a8:	2800      	cmp	r0, #0
 80150aa:	f43f af25 	beq.w	8014ef8 <_strtod_l+0x490>
 80150ae:	9b06      	ldr	r3, [sp, #24]
 80150b0:	ebab 0505 	sub.w	r5, fp, r5
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	bfb4      	ite	lt
 80150b8:	462b      	movlt	r3, r5
 80150ba:	2300      	movge	r3, #0
 80150bc:	930c      	str	r3, [sp, #48]	; 0x30
 80150be:	9b06      	ldr	r3, [sp, #24]
 80150c0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8015318 <_strtod_l+0x8b0>
 80150c4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8015320 <_strtod_l+0x8b8>
 80150c8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8015328 <_strtod_l+0x8c0>
 80150cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80150d0:	2500      	movs	r5, #0
 80150d2:	9312      	str	r3, [sp, #72]	; 0x48
 80150d4:	462e      	mov	r6, r5
 80150d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150d8:	4620      	mov	r0, r4
 80150da:	6859      	ldr	r1, [r3, #4]
 80150dc:	f001 fd2a 	bl	8016b34 <_Balloc>
 80150e0:	4607      	mov	r7, r0
 80150e2:	2800      	cmp	r0, #0
 80150e4:	f43f af0c 	beq.w	8014f00 <_strtod_l+0x498>
 80150e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ea:	691a      	ldr	r2, [r3, #16]
 80150ec:	3202      	adds	r2, #2
 80150ee:	f103 010c 	add.w	r1, r3, #12
 80150f2:	0092      	lsls	r2, r2, #2
 80150f4:	300c      	adds	r0, #12
 80150f6:	f001 fd0f 	bl	8016b18 <memcpy>
 80150fa:	ec49 8b10 	vmov	d0, r8, r9
 80150fe:	aa1a      	add	r2, sp, #104	; 0x68
 8015100:	a919      	add	r1, sp, #100	; 0x64
 8015102:	4620      	mov	r0, r4
 8015104:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8015108:	f002 f8fc 	bl	8017304 <__d2b>
 801510c:	9018      	str	r0, [sp, #96]	; 0x60
 801510e:	2800      	cmp	r0, #0
 8015110:	f43f aef6 	beq.w	8014f00 <_strtod_l+0x498>
 8015114:	2101      	movs	r1, #1
 8015116:	4620      	mov	r0, r4
 8015118:	f001 fe52 	bl	8016dc0 <__i2b>
 801511c:	4606      	mov	r6, r0
 801511e:	2800      	cmp	r0, #0
 8015120:	f43f aeee 	beq.w	8014f00 <_strtod_l+0x498>
 8015124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015126:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015128:	2b00      	cmp	r3, #0
 801512a:	bfab      	itete	ge
 801512c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801512e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8015130:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8015134:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8015138:	bfac      	ite	ge
 801513a:	eb03 0b02 	addge.w	fp, r3, r2
 801513e:	eba2 0a03 	sublt.w	sl, r2, r3
 8015142:	9a04      	ldr	r2, [sp, #16]
 8015144:	1a9b      	subs	r3, r3, r2
 8015146:	440b      	add	r3, r1
 8015148:	4a7a      	ldr	r2, [pc, #488]	; (8015334 <_strtod_l+0x8cc>)
 801514a:	3b01      	subs	r3, #1
 801514c:	4293      	cmp	r3, r2
 801514e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8015152:	f280 80d1 	bge.w	80152f8 <_strtod_l+0x890>
 8015156:	1ad2      	subs	r2, r2, r3
 8015158:	2a1f      	cmp	r2, #31
 801515a:	eba1 0102 	sub.w	r1, r1, r2
 801515e:	f04f 0001 	mov.w	r0, #1
 8015162:	f300 80bd 	bgt.w	80152e0 <_strtod_l+0x878>
 8015166:	fa00 f302 	lsl.w	r3, r0, r2
 801516a:	930e      	str	r3, [sp, #56]	; 0x38
 801516c:	2300      	movs	r3, #0
 801516e:	930d      	str	r3, [sp, #52]	; 0x34
 8015170:	eb0b 0301 	add.w	r3, fp, r1
 8015174:	9a04      	ldr	r2, [sp, #16]
 8015176:	459b      	cmp	fp, r3
 8015178:	448a      	add	sl, r1
 801517a:	4492      	add	sl, r2
 801517c:	465a      	mov	r2, fp
 801517e:	bfa8      	it	ge
 8015180:	461a      	movge	r2, r3
 8015182:	4552      	cmp	r2, sl
 8015184:	bfa8      	it	ge
 8015186:	4652      	movge	r2, sl
 8015188:	2a00      	cmp	r2, #0
 801518a:	bfc2      	ittt	gt
 801518c:	1a9b      	subgt	r3, r3, r2
 801518e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8015192:	ebab 0b02 	subgt.w	fp, fp, r2
 8015196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015198:	2a00      	cmp	r2, #0
 801519a:	dd18      	ble.n	80151ce <_strtod_l+0x766>
 801519c:	4631      	mov	r1, r6
 801519e:	4620      	mov	r0, r4
 80151a0:	9315      	str	r3, [sp, #84]	; 0x54
 80151a2:	f001 fec9 	bl	8016f38 <__pow5mult>
 80151a6:	4606      	mov	r6, r0
 80151a8:	2800      	cmp	r0, #0
 80151aa:	f43f aea9 	beq.w	8014f00 <_strtod_l+0x498>
 80151ae:	4601      	mov	r1, r0
 80151b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80151b2:	4620      	mov	r0, r4
 80151b4:	f001 fe1a 	bl	8016dec <__multiply>
 80151b8:	9014      	str	r0, [sp, #80]	; 0x50
 80151ba:	2800      	cmp	r0, #0
 80151bc:	f43f aea0 	beq.w	8014f00 <_strtod_l+0x498>
 80151c0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80151c2:	4620      	mov	r0, r4
 80151c4:	f001 fcf6 	bl	8016bb4 <_Bfree>
 80151c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80151ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80151cc:	9218      	str	r2, [sp, #96]	; 0x60
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	f300 8097 	bgt.w	8015302 <_strtod_l+0x89a>
 80151d4:	9b06      	ldr	r3, [sp, #24]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	dd08      	ble.n	80151ec <_strtod_l+0x784>
 80151da:	4639      	mov	r1, r7
 80151dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151de:	4620      	mov	r0, r4
 80151e0:	f001 feaa 	bl	8016f38 <__pow5mult>
 80151e4:	4607      	mov	r7, r0
 80151e6:	2800      	cmp	r0, #0
 80151e8:	f43f ae8a 	beq.w	8014f00 <_strtod_l+0x498>
 80151ec:	f1ba 0f00 	cmp.w	sl, #0
 80151f0:	dd08      	ble.n	8015204 <_strtod_l+0x79c>
 80151f2:	4639      	mov	r1, r7
 80151f4:	4652      	mov	r2, sl
 80151f6:	4620      	mov	r0, r4
 80151f8:	f001 fef8 	bl	8016fec <__lshift>
 80151fc:	4607      	mov	r7, r0
 80151fe:	2800      	cmp	r0, #0
 8015200:	f43f ae7e 	beq.w	8014f00 <_strtod_l+0x498>
 8015204:	f1bb 0f00 	cmp.w	fp, #0
 8015208:	dd08      	ble.n	801521c <_strtod_l+0x7b4>
 801520a:	4631      	mov	r1, r6
 801520c:	465a      	mov	r2, fp
 801520e:	4620      	mov	r0, r4
 8015210:	f001 feec 	bl	8016fec <__lshift>
 8015214:	4606      	mov	r6, r0
 8015216:	2800      	cmp	r0, #0
 8015218:	f43f ae72 	beq.w	8014f00 <_strtod_l+0x498>
 801521c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801521e:	463a      	mov	r2, r7
 8015220:	4620      	mov	r0, r4
 8015222:	f001 ff6b 	bl	80170fc <__mdiff>
 8015226:	4605      	mov	r5, r0
 8015228:	2800      	cmp	r0, #0
 801522a:	f43f ae69 	beq.w	8014f00 <_strtod_l+0x498>
 801522e:	2300      	movs	r3, #0
 8015230:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8015234:	60c3      	str	r3, [r0, #12]
 8015236:	4631      	mov	r1, r6
 8015238:	f001 ff44 	bl	80170c4 <__mcmp>
 801523c:	2800      	cmp	r0, #0
 801523e:	da7f      	bge.n	8015340 <_strtod_l+0x8d8>
 8015240:	ea5a 0308 	orrs.w	r3, sl, r8
 8015244:	f040 80a5 	bne.w	8015392 <_strtod_l+0x92a>
 8015248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801524c:	2b00      	cmp	r3, #0
 801524e:	f040 80a0 	bne.w	8015392 <_strtod_l+0x92a>
 8015252:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015256:	0d1b      	lsrs	r3, r3, #20
 8015258:	051b      	lsls	r3, r3, #20
 801525a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801525e:	f240 8098 	bls.w	8015392 <_strtod_l+0x92a>
 8015262:	696b      	ldr	r3, [r5, #20]
 8015264:	b91b      	cbnz	r3, 801526e <_strtod_l+0x806>
 8015266:	692b      	ldr	r3, [r5, #16]
 8015268:	2b01      	cmp	r3, #1
 801526a:	f340 8092 	ble.w	8015392 <_strtod_l+0x92a>
 801526e:	4629      	mov	r1, r5
 8015270:	2201      	movs	r2, #1
 8015272:	4620      	mov	r0, r4
 8015274:	f001 feba 	bl	8016fec <__lshift>
 8015278:	4631      	mov	r1, r6
 801527a:	4605      	mov	r5, r0
 801527c:	f001 ff22 	bl	80170c4 <__mcmp>
 8015280:	2800      	cmp	r0, #0
 8015282:	f340 8086 	ble.w	8015392 <_strtod_l+0x92a>
 8015286:	9904      	ldr	r1, [sp, #16]
 8015288:	4a2b      	ldr	r2, [pc, #172]	; (8015338 <_strtod_l+0x8d0>)
 801528a:	464b      	mov	r3, r9
 801528c:	2900      	cmp	r1, #0
 801528e:	f000 80a1 	beq.w	80153d4 <_strtod_l+0x96c>
 8015292:	ea02 0109 	and.w	r1, r2, r9
 8015296:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801529a:	f300 809b 	bgt.w	80153d4 <_strtod_l+0x96c>
 801529e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80152a2:	f77f aea2 	ble.w	8014fea <_strtod_l+0x582>
 80152a6:	4a25      	ldr	r2, [pc, #148]	; (801533c <_strtod_l+0x8d4>)
 80152a8:	2300      	movs	r3, #0
 80152aa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80152ae:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 80152b2:	ec49 8b17 	vmov	d7, r8, r9
 80152b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80152ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80152be:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80152c2:	4313      	orrs	r3, r2
 80152c4:	bf08      	it	eq
 80152c6:	2322      	moveq	r3, #34	; 0x22
 80152c8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80152cc:	bf08      	it	eq
 80152ce:	6023      	streq	r3, [r4, #0]
 80152d0:	e620      	b.n	8014f14 <_strtod_l+0x4ac>
 80152d2:	f04f 31ff 	mov.w	r1, #4294967295
 80152d6:	fa01 f202 	lsl.w	r2, r1, r2
 80152da:	ea02 0808 	and.w	r8, r2, r8
 80152de:	e6d4      	b.n	801508a <_strtod_l+0x622>
 80152e0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80152e4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80152e8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80152ec:	33e2      	adds	r3, #226	; 0xe2
 80152ee:	fa00 f303 	lsl.w	r3, r0, r3
 80152f2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80152f6:	e73b      	b.n	8015170 <_strtod_l+0x708>
 80152f8:	2000      	movs	r0, #0
 80152fa:	2301      	movs	r3, #1
 80152fc:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8015300:	e736      	b.n	8015170 <_strtod_l+0x708>
 8015302:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015304:	461a      	mov	r2, r3
 8015306:	4620      	mov	r0, r4
 8015308:	f001 fe70 	bl	8016fec <__lshift>
 801530c:	9018      	str	r0, [sp, #96]	; 0x60
 801530e:	2800      	cmp	r0, #0
 8015310:	f47f af60 	bne.w	80151d4 <_strtod_l+0x76c>
 8015314:	e5f4      	b.n	8014f00 <_strtod_l+0x498>
 8015316:	bf00      	nop
 8015318:	94a03595 	.word	0x94a03595
 801531c:	3fcfffff 	.word	0x3fcfffff
 8015320:	94a03595 	.word	0x94a03595
 8015324:	3fdfffff 	.word	0x3fdfffff
 8015328:	35afe535 	.word	0x35afe535
 801532c:	3fe00000 	.word	0x3fe00000
 8015330:	08019320 	.word	0x08019320
 8015334:	fffffc02 	.word	0xfffffc02
 8015338:	7ff00000 	.word	0x7ff00000
 801533c:	39500000 	.word	0x39500000
 8015340:	46cb      	mov	fp, r9
 8015342:	d165      	bne.n	8015410 <_strtod_l+0x9a8>
 8015344:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015348:	f1ba 0f00 	cmp.w	sl, #0
 801534c:	d02a      	beq.n	80153a4 <_strtod_l+0x93c>
 801534e:	4aaa      	ldr	r2, [pc, #680]	; (80155f8 <_strtod_l+0xb90>)
 8015350:	4293      	cmp	r3, r2
 8015352:	d12b      	bne.n	80153ac <_strtod_l+0x944>
 8015354:	9b04      	ldr	r3, [sp, #16]
 8015356:	4641      	mov	r1, r8
 8015358:	b1fb      	cbz	r3, 801539a <_strtod_l+0x932>
 801535a:	4aa8      	ldr	r2, [pc, #672]	; (80155fc <_strtod_l+0xb94>)
 801535c:	ea09 0202 	and.w	r2, r9, r2
 8015360:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015364:	f04f 30ff 	mov.w	r0, #4294967295
 8015368:	d81a      	bhi.n	80153a0 <_strtod_l+0x938>
 801536a:	0d12      	lsrs	r2, r2, #20
 801536c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015370:	fa00 f303 	lsl.w	r3, r0, r3
 8015374:	4299      	cmp	r1, r3
 8015376:	d119      	bne.n	80153ac <_strtod_l+0x944>
 8015378:	4ba1      	ldr	r3, [pc, #644]	; (8015600 <_strtod_l+0xb98>)
 801537a:	459b      	cmp	fp, r3
 801537c:	d102      	bne.n	8015384 <_strtod_l+0x91c>
 801537e:	3101      	adds	r1, #1
 8015380:	f43f adbe 	beq.w	8014f00 <_strtod_l+0x498>
 8015384:	4b9d      	ldr	r3, [pc, #628]	; (80155fc <_strtod_l+0xb94>)
 8015386:	ea0b 0303 	and.w	r3, fp, r3
 801538a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801538e:	f04f 0800 	mov.w	r8, #0
 8015392:	9b04      	ldr	r3, [sp, #16]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d186      	bne.n	80152a6 <_strtod_l+0x83e>
 8015398:	e5bc      	b.n	8014f14 <_strtod_l+0x4ac>
 801539a:	f04f 33ff 	mov.w	r3, #4294967295
 801539e:	e7e9      	b.n	8015374 <_strtod_l+0x90c>
 80153a0:	4603      	mov	r3, r0
 80153a2:	e7e7      	b.n	8015374 <_strtod_l+0x90c>
 80153a4:	ea53 0308 	orrs.w	r3, r3, r8
 80153a8:	f43f af6d 	beq.w	8015286 <_strtod_l+0x81e>
 80153ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153ae:	b1db      	cbz	r3, 80153e8 <_strtod_l+0x980>
 80153b0:	ea13 0f0b 	tst.w	r3, fp
 80153b4:	d0ed      	beq.n	8015392 <_strtod_l+0x92a>
 80153b6:	9a04      	ldr	r2, [sp, #16]
 80153b8:	4640      	mov	r0, r8
 80153ba:	4649      	mov	r1, r9
 80153bc:	f1ba 0f00 	cmp.w	sl, #0
 80153c0:	d016      	beq.n	80153f0 <_strtod_l+0x988>
 80153c2:	f7ff fb34 	bl	8014a2e <sulp>
 80153c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80153ca:	ee37 7b00 	vadd.f64	d7, d7, d0
 80153ce:	ec59 8b17 	vmov	r8, r9, d7
 80153d2:	e7de      	b.n	8015392 <_strtod_l+0x92a>
 80153d4:	4013      	ands	r3, r2
 80153d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80153da:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80153de:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80153e2:	f04f 38ff 	mov.w	r8, #4294967295
 80153e6:	e7d4      	b.n	8015392 <_strtod_l+0x92a>
 80153e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153ea:	ea13 0f08 	tst.w	r3, r8
 80153ee:	e7e1      	b.n	80153b4 <_strtod_l+0x94c>
 80153f0:	f7ff fb1d 	bl	8014a2e <sulp>
 80153f4:	ed9d 7b08 	vldr	d7, [sp, #32]
 80153f8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80153fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015400:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015408:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801540c:	d1c1      	bne.n	8015392 <_strtod_l+0x92a>
 801540e:	e5ec      	b.n	8014fea <_strtod_l+0x582>
 8015410:	4631      	mov	r1, r6
 8015412:	4628      	mov	r0, r5
 8015414:	f001 ffd2 	bl	80173bc <__ratio>
 8015418:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801541c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015424:	d867      	bhi.n	80154f6 <_strtod_l+0xa8e>
 8015426:	f1ba 0f00 	cmp.w	sl, #0
 801542a:	d044      	beq.n	80154b6 <_strtod_l+0xa4e>
 801542c:	4b75      	ldr	r3, [pc, #468]	; (8015604 <_strtod_l+0xb9c>)
 801542e:	2200      	movs	r2, #0
 8015430:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8015434:	4971      	ldr	r1, [pc, #452]	; (80155fc <_strtod_l+0xb94>)
 8015436:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8015610 <_strtod_l+0xba8>
 801543a:	ea0b 0001 	and.w	r0, fp, r1
 801543e:	4560      	cmp	r0, ip
 8015440:	900d      	str	r0, [sp, #52]	; 0x34
 8015442:	f040 808b 	bne.w	801555c <_strtod_l+0xaf4>
 8015446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801544a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801544e:	ec49 8b10 	vmov	d0, r8, r9
 8015452:	ec43 2b1c 	vmov	d12, r2, r3
 8015456:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801545a:	f001 fed7 	bl	801720c <__ulp>
 801545e:	ec49 8b1d 	vmov	d13, r8, r9
 8015462:	eeac db00 	vfma.f64	d13, d12, d0
 8015466:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801546a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801546c:	4963      	ldr	r1, [pc, #396]	; (80155fc <_strtod_l+0xb94>)
 801546e:	4a66      	ldr	r2, [pc, #408]	; (8015608 <_strtod_l+0xba0>)
 8015470:	4019      	ands	r1, r3
 8015472:	4291      	cmp	r1, r2
 8015474:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8015478:	d947      	bls.n	801550a <_strtod_l+0xaa2>
 801547a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801547c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015480:	4293      	cmp	r3, r2
 8015482:	d103      	bne.n	801548c <_strtod_l+0xa24>
 8015484:	9b08      	ldr	r3, [sp, #32]
 8015486:	3301      	adds	r3, #1
 8015488:	f43f ad3a 	beq.w	8014f00 <_strtod_l+0x498>
 801548c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8015600 <_strtod_l+0xb98>
 8015490:	f04f 38ff 	mov.w	r8, #4294967295
 8015494:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015496:	4620      	mov	r0, r4
 8015498:	f001 fb8c 	bl	8016bb4 <_Bfree>
 801549c:	4639      	mov	r1, r7
 801549e:	4620      	mov	r0, r4
 80154a0:	f001 fb88 	bl	8016bb4 <_Bfree>
 80154a4:	4631      	mov	r1, r6
 80154a6:	4620      	mov	r0, r4
 80154a8:	f001 fb84 	bl	8016bb4 <_Bfree>
 80154ac:	4629      	mov	r1, r5
 80154ae:	4620      	mov	r0, r4
 80154b0:	f001 fb80 	bl	8016bb4 <_Bfree>
 80154b4:	e60f      	b.n	80150d6 <_strtod_l+0x66e>
 80154b6:	f1b8 0f00 	cmp.w	r8, #0
 80154ba:	d112      	bne.n	80154e2 <_strtod_l+0xa7a>
 80154bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80154c0:	b9b3      	cbnz	r3, 80154f0 <_strtod_l+0xa88>
 80154c2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80154c6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80154ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80154d2:	d401      	bmi.n	80154d8 <_strtod_l+0xa70>
 80154d4:	ee20 8b08 	vmul.f64	d8, d0, d8
 80154d8:	eeb1 7b48 	vneg.f64	d7, d8
 80154dc:	ec53 2b17 	vmov	r2, r3, d7
 80154e0:	e7a8      	b.n	8015434 <_strtod_l+0x9cc>
 80154e2:	f1b8 0f01 	cmp.w	r8, #1
 80154e6:	d103      	bne.n	80154f0 <_strtod_l+0xa88>
 80154e8:	f1b9 0f00 	cmp.w	r9, #0
 80154ec:	f43f ad7d 	beq.w	8014fea <_strtod_l+0x582>
 80154f0:	4b46      	ldr	r3, [pc, #280]	; (801560c <_strtod_l+0xba4>)
 80154f2:	2200      	movs	r2, #0
 80154f4:	e79c      	b.n	8015430 <_strtod_l+0x9c8>
 80154f6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80154fa:	ee20 8b08 	vmul.f64	d8, d0, d8
 80154fe:	f1ba 0f00 	cmp.w	sl, #0
 8015502:	d0e9      	beq.n	80154d8 <_strtod_l+0xa70>
 8015504:	ec53 2b18 	vmov	r2, r3, d8
 8015508:	e794      	b.n	8015434 <_strtod_l+0x9cc>
 801550a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801550e:	9b04      	ldr	r3, [sp, #16]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d1bf      	bne.n	8015494 <_strtod_l+0xa2c>
 8015514:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015518:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801551a:	0d1b      	lsrs	r3, r3, #20
 801551c:	051b      	lsls	r3, r3, #20
 801551e:	429a      	cmp	r2, r3
 8015520:	d1b8      	bne.n	8015494 <_strtod_l+0xa2c>
 8015522:	ec51 0b18 	vmov	r0, r1, d8
 8015526:	f7eb f907 	bl	8000738 <__aeabi_d2lz>
 801552a:	f7eb f8bf 	bl	80006ac <__aeabi_l2d>
 801552e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015532:	ec41 0b17 	vmov	d7, r0, r1
 8015536:	ea43 0308 	orr.w	r3, r3, r8
 801553a:	ea53 030a 	orrs.w	r3, r3, sl
 801553e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8015542:	d03e      	beq.n	80155c2 <_strtod_l+0xb5a>
 8015544:	eeb4 8bca 	vcmpe.f64	d8, d10
 8015548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801554c:	f53f ace2 	bmi.w	8014f14 <_strtod_l+0x4ac>
 8015550:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8015554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015558:	dd9c      	ble.n	8015494 <_strtod_l+0xa2c>
 801555a:	e4db      	b.n	8014f14 <_strtod_l+0x4ac>
 801555c:	9904      	ldr	r1, [sp, #16]
 801555e:	b301      	cbz	r1, 80155a2 <_strtod_l+0xb3a>
 8015560:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015562:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8015566:	d81c      	bhi.n	80155a2 <_strtod_l+0xb3a>
 8015568:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80155f0 <_strtod_l+0xb88>
 801556c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015574:	d811      	bhi.n	801559a <_strtod_l+0xb32>
 8015576:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801557a:	ee18 3a10 	vmov	r3, s16
 801557e:	2b01      	cmp	r3, #1
 8015580:	bf38      	it	cc
 8015582:	2301      	movcc	r3, #1
 8015584:	ee08 3a10 	vmov	s16, r3
 8015588:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801558c:	f1ba 0f00 	cmp.w	sl, #0
 8015590:	d114      	bne.n	80155bc <_strtod_l+0xb54>
 8015592:	eeb1 7b48 	vneg.f64	d7, d8
 8015596:	ec53 2b17 	vmov	r2, r3, d7
 801559a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801559c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80155a0:	1a0b      	subs	r3, r1, r0
 80155a2:	ed9d 0b08 	vldr	d0, [sp, #32]
 80155a6:	ec43 2b1c 	vmov	d12, r2, r3
 80155aa:	f001 fe2f 	bl	801720c <__ulp>
 80155ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 80155b2:	eeac 7b00 	vfma.f64	d7, d12, d0
 80155b6:	ec59 8b17 	vmov	r8, r9, d7
 80155ba:	e7a8      	b.n	801550e <_strtod_l+0xaa6>
 80155bc:	ec53 2b18 	vmov	r2, r3, d8
 80155c0:	e7eb      	b.n	801559a <_strtod_l+0xb32>
 80155c2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80155c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ca:	f57f af63 	bpl.w	8015494 <_strtod_l+0xa2c>
 80155ce:	e4a1      	b.n	8014f14 <_strtod_l+0x4ac>
 80155d0:	2300      	movs	r3, #0
 80155d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80155d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80155d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80155d8:	6013      	str	r3, [r2, #0]
 80155da:	f7ff ba8d 	b.w	8014af8 <_strtod_l+0x90>
 80155de:	2a65      	cmp	r2, #101	; 0x65
 80155e0:	f43f ab89 	beq.w	8014cf6 <_strtod_l+0x28e>
 80155e4:	2a45      	cmp	r2, #69	; 0x45
 80155e6:	f43f ab86 	beq.w	8014cf6 <_strtod_l+0x28e>
 80155ea:	2101      	movs	r1, #1
 80155ec:	f7ff bbbe 	b.w	8014d6c <_strtod_l+0x304>
 80155f0:	ffc00000 	.word	0xffc00000
 80155f4:	41dfffff 	.word	0x41dfffff
 80155f8:	000fffff 	.word	0x000fffff
 80155fc:	7ff00000 	.word	0x7ff00000
 8015600:	7fefffff 	.word	0x7fefffff
 8015604:	3ff00000 	.word	0x3ff00000
 8015608:	7c9fffff 	.word	0x7c9fffff
 801560c:	bff00000 	.word	0xbff00000
 8015610:	7fe00000 	.word	0x7fe00000

08015614 <_strtod_r>:
 8015614:	4b01      	ldr	r3, [pc, #4]	; (801561c <_strtod_r+0x8>)
 8015616:	f7ff ba27 	b.w	8014a68 <_strtod_l>
 801561a:	bf00      	nop
 801561c:	24000088 	.word	0x24000088

08015620 <strtod>:
 8015620:	460a      	mov	r2, r1
 8015622:	4601      	mov	r1, r0
 8015624:	4802      	ldr	r0, [pc, #8]	; (8015630 <strtod+0x10>)
 8015626:	4b03      	ldr	r3, [pc, #12]	; (8015634 <strtod+0x14>)
 8015628:	6800      	ldr	r0, [r0, #0]
 801562a:	f7ff ba1d 	b.w	8014a68 <_strtod_l>
 801562e:	bf00      	nop
 8015630:	24000020 	.word	0x24000020
 8015634:	24000088 	.word	0x24000088

08015638 <_strtol_l.isra.0>:
 8015638:	2b01      	cmp	r3, #1
 801563a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801563e:	d001      	beq.n	8015644 <_strtol_l.isra.0+0xc>
 8015640:	2b24      	cmp	r3, #36	; 0x24
 8015642:	d906      	bls.n	8015652 <_strtol_l.isra.0+0x1a>
 8015644:	f7fe fb2a 	bl	8013c9c <__errno>
 8015648:	2316      	movs	r3, #22
 801564a:	6003      	str	r3, [r0, #0]
 801564c:	2000      	movs	r0, #0
 801564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015652:	4f3a      	ldr	r7, [pc, #232]	; (801573c <_strtol_l.isra.0+0x104>)
 8015654:	468e      	mov	lr, r1
 8015656:	4676      	mov	r6, lr
 8015658:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801565c:	5de5      	ldrb	r5, [r4, r7]
 801565e:	f015 0508 	ands.w	r5, r5, #8
 8015662:	d1f8      	bne.n	8015656 <_strtol_l.isra.0+0x1e>
 8015664:	2c2d      	cmp	r4, #45	; 0x2d
 8015666:	d134      	bne.n	80156d2 <_strtol_l.isra.0+0x9a>
 8015668:	f89e 4000 	ldrb.w	r4, [lr]
 801566c:	f04f 0801 	mov.w	r8, #1
 8015670:	f106 0e02 	add.w	lr, r6, #2
 8015674:	2b00      	cmp	r3, #0
 8015676:	d05c      	beq.n	8015732 <_strtol_l.isra.0+0xfa>
 8015678:	2b10      	cmp	r3, #16
 801567a:	d10c      	bne.n	8015696 <_strtol_l.isra.0+0x5e>
 801567c:	2c30      	cmp	r4, #48	; 0x30
 801567e:	d10a      	bne.n	8015696 <_strtol_l.isra.0+0x5e>
 8015680:	f89e 4000 	ldrb.w	r4, [lr]
 8015684:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015688:	2c58      	cmp	r4, #88	; 0x58
 801568a:	d14d      	bne.n	8015728 <_strtol_l.isra.0+0xf0>
 801568c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015690:	2310      	movs	r3, #16
 8015692:	f10e 0e02 	add.w	lr, lr, #2
 8015696:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801569a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801569e:	2600      	movs	r6, #0
 80156a0:	fbbc f9f3 	udiv	r9, ip, r3
 80156a4:	4635      	mov	r5, r6
 80156a6:	fb03 ca19 	mls	sl, r3, r9, ip
 80156aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80156ae:	2f09      	cmp	r7, #9
 80156b0:	d818      	bhi.n	80156e4 <_strtol_l.isra.0+0xac>
 80156b2:	463c      	mov	r4, r7
 80156b4:	42a3      	cmp	r3, r4
 80156b6:	dd24      	ble.n	8015702 <_strtol_l.isra.0+0xca>
 80156b8:	2e00      	cmp	r6, #0
 80156ba:	db1f      	blt.n	80156fc <_strtol_l.isra.0+0xc4>
 80156bc:	45a9      	cmp	r9, r5
 80156be:	d31d      	bcc.n	80156fc <_strtol_l.isra.0+0xc4>
 80156c0:	d101      	bne.n	80156c6 <_strtol_l.isra.0+0x8e>
 80156c2:	45a2      	cmp	sl, r4
 80156c4:	db1a      	blt.n	80156fc <_strtol_l.isra.0+0xc4>
 80156c6:	fb05 4503 	mla	r5, r5, r3, r4
 80156ca:	2601      	movs	r6, #1
 80156cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80156d0:	e7eb      	b.n	80156aa <_strtol_l.isra.0+0x72>
 80156d2:	2c2b      	cmp	r4, #43	; 0x2b
 80156d4:	bf08      	it	eq
 80156d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80156da:	46a8      	mov	r8, r5
 80156dc:	bf08      	it	eq
 80156de:	f106 0e02 	addeq.w	lr, r6, #2
 80156e2:	e7c7      	b.n	8015674 <_strtol_l.isra.0+0x3c>
 80156e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80156e8:	2f19      	cmp	r7, #25
 80156ea:	d801      	bhi.n	80156f0 <_strtol_l.isra.0+0xb8>
 80156ec:	3c37      	subs	r4, #55	; 0x37
 80156ee:	e7e1      	b.n	80156b4 <_strtol_l.isra.0+0x7c>
 80156f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80156f4:	2f19      	cmp	r7, #25
 80156f6:	d804      	bhi.n	8015702 <_strtol_l.isra.0+0xca>
 80156f8:	3c57      	subs	r4, #87	; 0x57
 80156fa:	e7db      	b.n	80156b4 <_strtol_l.isra.0+0x7c>
 80156fc:	f04f 36ff 	mov.w	r6, #4294967295
 8015700:	e7e4      	b.n	80156cc <_strtol_l.isra.0+0x94>
 8015702:	2e00      	cmp	r6, #0
 8015704:	da05      	bge.n	8015712 <_strtol_l.isra.0+0xda>
 8015706:	2322      	movs	r3, #34	; 0x22
 8015708:	6003      	str	r3, [r0, #0]
 801570a:	4665      	mov	r5, ip
 801570c:	b942      	cbnz	r2, 8015720 <_strtol_l.isra.0+0xe8>
 801570e:	4628      	mov	r0, r5
 8015710:	e79d      	b.n	801564e <_strtol_l.isra.0+0x16>
 8015712:	f1b8 0f00 	cmp.w	r8, #0
 8015716:	d000      	beq.n	801571a <_strtol_l.isra.0+0xe2>
 8015718:	426d      	negs	r5, r5
 801571a:	2a00      	cmp	r2, #0
 801571c:	d0f7      	beq.n	801570e <_strtol_l.isra.0+0xd6>
 801571e:	b10e      	cbz	r6, 8015724 <_strtol_l.isra.0+0xec>
 8015720:	f10e 31ff 	add.w	r1, lr, #4294967295
 8015724:	6011      	str	r1, [r2, #0]
 8015726:	e7f2      	b.n	801570e <_strtol_l.isra.0+0xd6>
 8015728:	2430      	movs	r4, #48	; 0x30
 801572a:	2b00      	cmp	r3, #0
 801572c:	d1b3      	bne.n	8015696 <_strtol_l.isra.0+0x5e>
 801572e:	2308      	movs	r3, #8
 8015730:	e7b1      	b.n	8015696 <_strtol_l.isra.0+0x5e>
 8015732:	2c30      	cmp	r4, #48	; 0x30
 8015734:	d0a4      	beq.n	8015680 <_strtol_l.isra.0+0x48>
 8015736:	230a      	movs	r3, #10
 8015738:	e7ad      	b.n	8015696 <_strtol_l.isra.0+0x5e>
 801573a:	bf00      	nop
 801573c:	0801936e 	.word	0x0801936e

08015740 <_strtol_r>:
 8015740:	f7ff bf7a 	b.w	8015638 <_strtol_l.isra.0>

08015744 <strtol>:
 8015744:	4613      	mov	r3, r2
 8015746:	460a      	mov	r2, r1
 8015748:	4601      	mov	r1, r0
 801574a:	4802      	ldr	r0, [pc, #8]	; (8015754 <strtol+0x10>)
 801574c:	6800      	ldr	r0, [r0, #0]
 801574e:	f7ff bf73 	b.w	8015638 <_strtol_l.isra.0>
 8015752:	bf00      	nop
 8015754:	24000020 	.word	0x24000020

08015758 <__utoa>:
 8015758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801575a:	4c1f      	ldr	r4, [pc, #124]	; (80157d8 <__utoa+0x80>)
 801575c:	b08b      	sub	sp, #44	; 0x2c
 801575e:	4605      	mov	r5, r0
 8015760:	460b      	mov	r3, r1
 8015762:	466e      	mov	r6, sp
 8015764:	f104 0c20 	add.w	ip, r4, #32
 8015768:	6820      	ldr	r0, [r4, #0]
 801576a:	6861      	ldr	r1, [r4, #4]
 801576c:	4637      	mov	r7, r6
 801576e:	c703      	stmia	r7!, {r0, r1}
 8015770:	3408      	adds	r4, #8
 8015772:	4564      	cmp	r4, ip
 8015774:	463e      	mov	r6, r7
 8015776:	d1f7      	bne.n	8015768 <__utoa+0x10>
 8015778:	7921      	ldrb	r1, [r4, #4]
 801577a:	7139      	strb	r1, [r7, #4]
 801577c:	1e91      	subs	r1, r2, #2
 801577e:	6820      	ldr	r0, [r4, #0]
 8015780:	6038      	str	r0, [r7, #0]
 8015782:	2922      	cmp	r1, #34	; 0x22
 8015784:	f04f 0100 	mov.w	r1, #0
 8015788:	d904      	bls.n	8015794 <__utoa+0x3c>
 801578a:	7019      	strb	r1, [r3, #0]
 801578c:	460b      	mov	r3, r1
 801578e:	4618      	mov	r0, r3
 8015790:	b00b      	add	sp, #44	; 0x2c
 8015792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015794:	1e58      	subs	r0, r3, #1
 8015796:	4684      	mov	ip, r0
 8015798:	fbb5 f7f2 	udiv	r7, r5, r2
 801579c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80157a0:	fb02 5617 	mls	r6, r2, r7, r5
 80157a4:	4476      	add	r6, lr
 80157a6:	460c      	mov	r4, r1
 80157a8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80157ac:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80157b0:	462e      	mov	r6, r5
 80157b2:	42b2      	cmp	r2, r6
 80157b4:	f101 0101 	add.w	r1, r1, #1
 80157b8:	463d      	mov	r5, r7
 80157ba:	d9ed      	bls.n	8015798 <__utoa+0x40>
 80157bc:	2200      	movs	r2, #0
 80157be:	545a      	strb	r2, [r3, r1]
 80157c0:	1919      	adds	r1, r3, r4
 80157c2:	1aa5      	subs	r5, r4, r2
 80157c4:	42aa      	cmp	r2, r5
 80157c6:	dae2      	bge.n	801578e <__utoa+0x36>
 80157c8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80157cc:	780e      	ldrb	r6, [r1, #0]
 80157ce:	7006      	strb	r6, [r0, #0]
 80157d0:	3201      	adds	r2, #1
 80157d2:	f801 5901 	strb.w	r5, [r1], #-1
 80157d6:	e7f4      	b.n	80157c2 <__utoa+0x6a>
 80157d8:	08019348 	.word	0x08019348

080157dc <quorem>:
 80157dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e0:	6903      	ldr	r3, [r0, #16]
 80157e2:	690c      	ldr	r4, [r1, #16]
 80157e4:	42a3      	cmp	r3, r4
 80157e6:	4607      	mov	r7, r0
 80157e8:	f2c0 8081 	blt.w	80158ee <quorem+0x112>
 80157ec:	3c01      	subs	r4, #1
 80157ee:	f101 0814 	add.w	r8, r1, #20
 80157f2:	f100 0514 	add.w	r5, r0, #20
 80157f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80157fa:	9301      	str	r3, [sp, #4]
 80157fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015800:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015804:	3301      	adds	r3, #1
 8015806:	429a      	cmp	r2, r3
 8015808:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801580c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015810:	fbb2 f6f3 	udiv	r6, r2, r3
 8015814:	d331      	bcc.n	801587a <quorem+0x9e>
 8015816:	f04f 0e00 	mov.w	lr, #0
 801581a:	4640      	mov	r0, r8
 801581c:	46ac      	mov	ip, r5
 801581e:	46f2      	mov	sl, lr
 8015820:	f850 2b04 	ldr.w	r2, [r0], #4
 8015824:	b293      	uxth	r3, r2
 8015826:	fb06 e303 	mla	r3, r6, r3, lr
 801582a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801582e:	b29b      	uxth	r3, r3
 8015830:	ebaa 0303 	sub.w	r3, sl, r3
 8015834:	0c12      	lsrs	r2, r2, #16
 8015836:	f8dc a000 	ldr.w	sl, [ip]
 801583a:	fb06 e202 	mla	r2, r6, r2, lr
 801583e:	fa13 f38a 	uxtah	r3, r3, sl
 8015842:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015846:	fa1f fa82 	uxth.w	sl, r2
 801584a:	f8dc 2000 	ldr.w	r2, [ip]
 801584e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8015852:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015856:	b29b      	uxth	r3, r3
 8015858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801585c:	4581      	cmp	r9, r0
 801585e:	f84c 3b04 	str.w	r3, [ip], #4
 8015862:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015866:	d2db      	bcs.n	8015820 <quorem+0x44>
 8015868:	f855 300b 	ldr.w	r3, [r5, fp]
 801586c:	b92b      	cbnz	r3, 801587a <quorem+0x9e>
 801586e:	9b01      	ldr	r3, [sp, #4]
 8015870:	3b04      	subs	r3, #4
 8015872:	429d      	cmp	r5, r3
 8015874:	461a      	mov	r2, r3
 8015876:	d32e      	bcc.n	80158d6 <quorem+0xfa>
 8015878:	613c      	str	r4, [r7, #16]
 801587a:	4638      	mov	r0, r7
 801587c:	f001 fc22 	bl	80170c4 <__mcmp>
 8015880:	2800      	cmp	r0, #0
 8015882:	db24      	blt.n	80158ce <quorem+0xf2>
 8015884:	3601      	adds	r6, #1
 8015886:	4628      	mov	r0, r5
 8015888:	f04f 0c00 	mov.w	ip, #0
 801588c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015890:	f8d0 e000 	ldr.w	lr, [r0]
 8015894:	b293      	uxth	r3, r2
 8015896:	ebac 0303 	sub.w	r3, ip, r3
 801589a:	0c12      	lsrs	r2, r2, #16
 801589c:	fa13 f38e 	uxtah	r3, r3, lr
 80158a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80158a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80158a8:	b29b      	uxth	r3, r3
 80158aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80158ae:	45c1      	cmp	r9, r8
 80158b0:	f840 3b04 	str.w	r3, [r0], #4
 80158b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80158b8:	d2e8      	bcs.n	801588c <quorem+0xb0>
 80158ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80158be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80158c2:	b922      	cbnz	r2, 80158ce <quorem+0xf2>
 80158c4:	3b04      	subs	r3, #4
 80158c6:	429d      	cmp	r5, r3
 80158c8:	461a      	mov	r2, r3
 80158ca:	d30a      	bcc.n	80158e2 <quorem+0x106>
 80158cc:	613c      	str	r4, [r7, #16]
 80158ce:	4630      	mov	r0, r6
 80158d0:	b003      	add	sp, #12
 80158d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158d6:	6812      	ldr	r2, [r2, #0]
 80158d8:	3b04      	subs	r3, #4
 80158da:	2a00      	cmp	r2, #0
 80158dc:	d1cc      	bne.n	8015878 <quorem+0x9c>
 80158de:	3c01      	subs	r4, #1
 80158e0:	e7c7      	b.n	8015872 <quorem+0x96>
 80158e2:	6812      	ldr	r2, [r2, #0]
 80158e4:	3b04      	subs	r3, #4
 80158e6:	2a00      	cmp	r2, #0
 80158e8:	d1f0      	bne.n	80158cc <quorem+0xf0>
 80158ea:	3c01      	subs	r4, #1
 80158ec:	e7eb      	b.n	80158c6 <quorem+0xea>
 80158ee:	2000      	movs	r0, #0
 80158f0:	e7ee      	b.n	80158d0 <quorem+0xf4>
 80158f2:	0000      	movs	r0, r0
 80158f4:	0000      	movs	r0, r0
	...

080158f8 <_dtoa_r>:
 80158f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158fc:	ec59 8b10 	vmov	r8, r9, d0
 8015900:	b095      	sub	sp, #84	; 0x54
 8015902:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015904:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8015906:	9107      	str	r1, [sp, #28]
 8015908:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801590c:	4606      	mov	r6, r0
 801590e:	9209      	str	r2, [sp, #36]	; 0x24
 8015910:	9310      	str	r3, [sp, #64]	; 0x40
 8015912:	b975      	cbnz	r5, 8015932 <_dtoa_r+0x3a>
 8015914:	2010      	movs	r0, #16
 8015916:	f001 f8e5 	bl	8016ae4 <malloc>
 801591a:	4602      	mov	r2, r0
 801591c:	6270      	str	r0, [r6, #36]	; 0x24
 801591e:	b920      	cbnz	r0, 801592a <_dtoa_r+0x32>
 8015920:	4bab      	ldr	r3, [pc, #684]	; (8015bd0 <_dtoa_r+0x2d8>)
 8015922:	21ea      	movs	r1, #234	; 0xea
 8015924:	48ab      	ldr	r0, [pc, #684]	; (8015bd4 <_dtoa_r+0x2dc>)
 8015926:	f002 f80f 	bl	8017948 <__assert_func>
 801592a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801592e:	6005      	str	r5, [r0, #0]
 8015930:	60c5      	str	r5, [r0, #12]
 8015932:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015934:	6819      	ldr	r1, [r3, #0]
 8015936:	b151      	cbz	r1, 801594e <_dtoa_r+0x56>
 8015938:	685a      	ldr	r2, [r3, #4]
 801593a:	604a      	str	r2, [r1, #4]
 801593c:	2301      	movs	r3, #1
 801593e:	4093      	lsls	r3, r2
 8015940:	608b      	str	r3, [r1, #8]
 8015942:	4630      	mov	r0, r6
 8015944:	f001 f936 	bl	8016bb4 <_Bfree>
 8015948:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801594a:	2200      	movs	r2, #0
 801594c:	601a      	str	r2, [r3, #0]
 801594e:	f1b9 0300 	subs.w	r3, r9, #0
 8015952:	bfbb      	ittet	lt
 8015954:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015958:	9303      	strlt	r3, [sp, #12]
 801595a:	2300      	movge	r3, #0
 801595c:	2201      	movlt	r2, #1
 801595e:	bfac      	ite	ge
 8015960:	6023      	strge	r3, [r4, #0]
 8015962:	6022      	strlt	r2, [r4, #0]
 8015964:	4b9c      	ldr	r3, [pc, #624]	; (8015bd8 <_dtoa_r+0x2e0>)
 8015966:	9c03      	ldr	r4, [sp, #12]
 8015968:	43a3      	bics	r3, r4
 801596a:	d11a      	bne.n	80159a2 <_dtoa_r+0xaa>
 801596c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801596e:	f242 730f 	movw	r3, #9999	; 0x270f
 8015972:	6013      	str	r3, [r2, #0]
 8015974:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015978:	ea53 0308 	orrs.w	r3, r3, r8
 801597c:	f000 8512 	beq.w	80163a4 <_dtoa_r+0xaac>
 8015980:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015982:	b953      	cbnz	r3, 801599a <_dtoa_r+0xa2>
 8015984:	4b95      	ldr	r3, [pc, #596]	; (8015bdc <_dtoa_r+0x2e4>)
 8015986:	e01f      	b.n	80159c8 <_dtoa_r+0xd0>
 8015988:	4b95      	ldr	r3, [pc, #596]	; (8015be0 <_dtoa_r+0x2e8>)
 801598a:	9300      	str	r3, [sp, #0]
 801598c:	3308      	adds	r3, #8
 801598e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015990:	6013      	str	r3, [r2, #0]
 8015992:	9800      	ldr	r0, [sp, #0]
 8015994:	b015      	add	sp, #84	; 0x54
 8015996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801599a:	4b90      	ldr	r3, [pc, #576]	; (8015bdc <_dtoa_r+0x2e4>)
 801599c:	9300      	str	r3, [sp, #0]
 801599e:	3303      	adds	r3, #3
 80159a0:	e7f5      	b.n	801598e <_dtoa_r+0x96>
 80159a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80159a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80159aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80159b2:	d10b      	bne.n	80159cc <_dtoa_r+0xd4>
 80159b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80159b6:	2301      	movs	r3, #1
 80159b8:	6013      	str	r3, [r2, #0]
 80159ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80159bc:	2b00      	cmp	r3, #0
 80159be:	f000 84ee 	beq.w	801639e <_dtoa_r+0xaa6>
 80159c2:	4888      	ldr	r0, [pc, #544]	; (8015be4 <_dtoa_r+0x2ec>)
 80159c4:	6018      	str	r0, [r3, #0]
 80159c6:	1e43      	subs	r3, r0, #1
 80159c8:	9300      	str	r3, [sp, #0]
 80159ca:	e7e2      	b.n	8015992 <_dtoa_r+0x9a>
 80159cc:	a913      	add	r1, sp, #76	; 0x4c
 80159ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80159d2:	aa12      	add	r2, sp, #72	; 0x48
 80159d4:	4630      	mov	r0, r6
 80159d6:	f001 fc95 	bl	8017304 <__d2b>
 80159da:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80159de:	4605      	mov	r5, r0
 80159e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80159e2:	2900      	cmp	r1, #0
 80159e4:	d047      	beq.n	8015a76 <_dtoa_r+0x17e>
 80159e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80159e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80159ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80159f0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80159f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80159f8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80159fc:	2400      	movs	r4, #0
 80159fe:	ec43 2b16 	vmov	d6, r2, r3
 8015a02:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8015a06:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8015bb8 <_dtoa_r+0x2c0>
 8015a0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8015a0e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8015bc0 <_dtoa_r+0x2c8>
 8015a12:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015a16:	eeb0 7b46 	vmov.f64	d7, d6
 8015a1a:	ee06 1a90 	vmov	s13, r1
 8015a1e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8015a22:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015bc8 <_dtoa_r+0x2d0>
 8015a26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015a2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8015a2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a36:	ee16 ba90 	vmov	fp, s13
 8015a3a:	9411      	str	r4, [sp, #68]	; 0x44
 8015a3c:	d508      	bpl.n	8015a50 <_dtoa_r+0x158>
 8015a3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015a42:	eeb4 6b47 	vcmp.f64	d6, d7
 8015a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a4a:	bf18      	it	ne
 8015a4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8015a50:	f1bb 0f16 	cmp.w	fp, #22
 8015a54:	d832      	bhi.n	8015abc <_dtoa_r+0x1c4>
 8015a56:	4b64      	ldr	r3, [pc, #400]	; (8015be8 <_dtoa_r+0x2f0>)
 8015a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015a5c:	ed93 7b00 	vldr	d7, [r3]
 8015a60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8015a64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a6c:	d501      	bpl.n	8015a72 <_dtoa_r+0x17a>
 8015a6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015a72:	2300      	movs	r3, #0
 8015a74:	e023      	b.n	8015abe <_dtoa_r+0x1c6>
 8015a76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015a78:	4401      	add	r1, r0
 8015a7a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8015a7e:	2b20      	cmp	r3, #32
 8015a80:	bfc3      	ittte	gt
 8015a82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015a86:	fa04 f303 	lslgt.w	r3, r4, r3
 8015a8a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8015a8e:	f1c3 0320 	rsble	r3, r3, #32
 8015a92:	bfc6      	itte	gt
 8015a94:	fa28 f804 	lsrgt.w	r8, r8, r4
 8015a98:	ea43 0308 	orrgt.w	r3, r3, r8
 8015a9c:	fa08 f303 	lslle.w	r3, r8, r3
 8015aa0:	ee07 3a90 	vmov	s15, r3
 8015aa4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015aa8:	3901      	subs	r1, #1
 8015aaa:	ed8d 7b00 	vstr	d7, [sp]
 8015aae:	9c01      	ldr	r4, [sp, #4]
 8015ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ab4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8015ab8:	2401      	movs	r4, #1
 8015aba:	e7a0      	b.n	80159fe <_dtoa_r+0x106>
 8015abc:	2301      	movs	r3, #1
 8015abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ac0:	1a43      	subs	r3, r0, r1
 8015ac2:	1e5a      	subs	r2, r3, #1
 8015ac4:	bf45      	ittet	mi
 8015ac6:	f1c3 0301 	rsbmi	r3, r3, #1
 8015aca:	9305      	strmi	r3, [sp, #20]
 8015acc:	2300      	movpl	r3, #0
 8015ace:	2300      	movmi	r3, #0
 8015ad0:	9206      	str	r2, [sp, #24]
 8015ad2:	bf54      	ite	pl
 8015ad4:	9305      	strpl	r3, [sp, #20]
 8015ad6:	9306      	strmi	r3, [sp, #24]
 8015ad8:	f1bb 0f00 	cmp.w	fp, #0
 8015adc:	db18      	blt.n	8015b10 <_dtoa_r+0x218>
 8015ade:	9b06      	ldr	r3, [sp, #24]
 8015ae0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8015ae4:	445b      	add	r3, fp
 8015ae6:	9306      	str	r3, [sp, #24]
 8015ae8:	2300      	movs	r3, #0
 8015aea:	9a07      	ldr	r2, [sp, #28]
 8015aec:	2a09      	cmp	r2, #9
 8015aee:	d849      	bhi.n	8015b84 <_dtoa_r+0x28c>
 8015af0:	2a05      	cmp	r2, #5
 8015af2:	bfc4      	itt	gt
 8015af4:	3a04      	subgt	r2, #4
 8015af6:	9207      	strgt	r2, [sp, #28]
 8015af8:	9a07      	ldr	r2, [sp, #28]
 8015afa:	f1a2 0202 	sub.w	r2, r2, #2
 8015afe:	bfcc      	ite	gt
 8015b00:	2400      	movgt	r4, #0
 8015b02:	2401      	movle	r4, #1
 8015b04:	2a03      	cmp	r2, #3
 8015b06:	d848      	bhi.n	8015b9a <_dtoa_r+0x2a2>
 8015b08:	e8df f002 	tbb	[pc, r2]
 8015b0c:	3a2c2e0b 	.word	0x3a2c2e0b
 8015b10:	9b05      	ldr	r3, [sp, #20]
 8015b12:	2200      	movs	r2, #0
 8015b14:	eba3 030b 	sub.w	r3, r3, fp
 8015b18:	9305      	str	r3, [sp, #20]
 8015b1a:	920e      	str	r2, [sp, #56]	; 0x38
 8015b1c:	f1cb 0300 	rsb	r3, fp, #0
 8015b20:	e7e3      	b.n	8015aea <_dtoa_r+0x1f2>
 8015b22:	2200      	movs	r2, #0
 8015b24:	9208      	str	r2, [sp, #32]
 8015b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b28:	2a00      	cmp	r2, #0
 8015b2a:	dc39      	bgt.n	8015ba0 <_dtoa_r+0x2a8>
 8015b2c:	f04f 0a01 	mov.w	sl, #1
 8015b30:	46d1      	mov	r9, sl
 8015b32:	4652      	mov	r2, sl
 8015b34:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015b38:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8015b3a:	2100      	movs	r1, #0
 8015b3c:	6079      	str	r1, [r7, #4]
 8015b3e:	2004      	movs	r0, #4
 8015b40:	f100 0c14 	add.w	ip, r0, #20
 8015b44:	4594      	cmp	ip, r2
 8015b46:	6879      	ldr	r1, [r7, #4]
 8015b48:	d92f      	bls.n	8015baa <_dtoa_r+0x2b2>
 8015b4a:	4630      	mov	r0, r6
 8015b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8015b4e:	f000 fff1 	bl	8016b34 <_Balloc>
 8015b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b54:	9000      	str	r0, [sp, #0]
 8015b56:	4602      	mov	r2, r0
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	d149      	bne.n	8015bf0 <_dtoa_r+0x2f8>
 8015b5c:	4b23      	ldr	r3, [pc, #140]	; (8015bec <_dtoa_r+0x2f4>)
 8015b5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015b62:	e6df      	b.n	8015924 <_dtoa_r+0x2c>
 8015b64:	2201      	movs	r2, #1
 8015b66:	e7dd      	b.n	8015b24 <_dtoa_r+0x22c>
 8015b68:	2200      	movs	r2, #0
 8015b6a:	9208      	str	r2, [sp, #32]
 8015b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b6e:	eb0b 0a02 	add.w	sl, fp, r2
 8015b72:	f10a 0901 	add.w	r9, sl, #1
 8015b76:	464a      	mov	r2, r9
 8015b78:	2a01      	cmp	r2, #1
 8015b7a:	bfb8      	it	lt
 8015b7c:	2201      	movlt	r2, #1
 8015b7e:	e7db      	b.n	8015b38 <_dtoa_r+0x240>
 8015b80:	2201      	movs	r2, #1
 8015b82:	e7f2      	b.n	8015b6a <_dtoa_r+0x272>
 8015b84:	2401      	movs	r4, #1
 8015b86:	2200      	movs	r2, #0
 8015b88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8015b8c:	f04f 3aff 	mov.w	sl, #4294967295
 8015b90:	2100      	movs	r1, #0
 8015b92:	46d1      	mov	r9, sl
 8015b94:	2212      	movs	r2, #18
 8015b96:	9109      	str	r1, [sp, #36]	; 0x24
 8015b98:	e7ce      	b.n	8015b38 <_dtoa_r+0x240>
 8015b9a:	2201      	movs	r2, #1
 8015b9c:	9208      	str	r2, [sp, #32]
 8015b9e:	e7f5      	b.n	8015b8c <_dtoa_r+0x294>
 8015ba0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8015ba4:	46d1      	mov	r9, sl
 8015ba6:	4652      	mov	r2, sl
 8015ba8:	e7c6      	b.n	8015b38 <_dtoa_r+0x240>
 8015baa:	3101      	adds	r1, #1
 8015bac:	6079      	str	r1, [r7, #4]
 8015bae:	0040      	lsls	r0, r0, #1
 8015bb0:	e7c6      	b.n	8015b40 <_dtoa_r+0x248>
 8015bb2:	bf00      	nop
 8015bb4:	f3af 8000 	nop.w
 8015bb8:	636f4361 	.word	0x636f4361
 8015bbc:	3fd287a7 	.word	0x3fd287a7
 8015bc0:	8b60c8b3 	.word	0x8b60c8b3
 8015bc4:	3fc68a28 	.word	0x3fc68a28
 8015bc8:	509f79fb 	.word	0x509f79fb
 8015bcc:	3fd34413 	.word	0x3fd34413
 8015bd0:	0801947b 	.word	0x0801947b
 8015bd4:	08019492 	.word	0x08019492
 8015bd8:	7ff00000 	.word	0x7ff00000
 8015bdc:	08019477 	.word	0x08019477
 8015be0:	0801946e 	.word	0x0801946e
 8015be4:	080192cd 	.word	0x080192cd
 8015be8:	08019608 	.word	0x08019608
 8015bec:	080194f1 	.word	0x080194f1
 8015bf0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8015bf2:	9900      	ldr	r1, [sp, #0]
 8015bf4:	6011      	str	r1, [r2, #0]
 8015bf6:	f1b9 0f0e 	cmp.w	r9, #14
 8015bfa:	d872      	bhi.n	8015ce2 <_dtoa_r+0x3ea>
 8015bfc:	2c00      	cmp	r4, #0
 8015bfe:	d070      	beq.n	8015ce2 <_dtoa_r+0x3ea>
 8015c00:	f1bb 0f00 	cmp.w	fp, #0
 8015c04:	f340 80a6 	ble.w	8015d54 <_dtoa_r+0x45c>
 8015c08:	49ca      	ldr	r1, [pc, #808]	; (8015f34 <_dtoa_r+0x63c>)
 8015c0a:	f00b 020f 	and.w	r2, fp, #15
 8015c0e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8015c12:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015c16:	ed92 7b00 	vldr	d7, [r2]
 8015c1a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8015c1e:	f000 808d 	beq.w	8015d3c <_dtoa_r+0x444>
 8015c22:	4ac5      	ldr	r2, [pc, #788]	; (8015f38 <_dtoa_r+0x640>)
 8015c24:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8015c28:	ed92 6b08 	vldr	d6, [r2, #32]
 8015c2c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8015c30:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015c34:	f001 010f 	and.w	r1, r1, #15
 8015c38:	2203      	movs	r2, #3
 8015c3a:	48bf      	ldr	r0, [pc, #764]	; (8015f38 <_dtoa_r+0x640>)
 8015c3c:	2900      	cmp	r1, #0
 8015c3e:	d17f      	bne.n	8015d40 <_dtoa_r+0x448>
 8015c40:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015c44:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015c4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015c4e:	2900      	cmp	r1, #0
 8015c50:	f000 80b2 	beq.w	8015db8 <_dtoa_r+0x4c0>
 8015c54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c64:	f140 80a8 	bpl.w	8015db8 <_dtoa_r+0x4c0>
 8015c68:	f1b9 0f00 	cmp.w	r9, #0
 8015c6c:	f000 80a4 	beq.w	8015db8 <_dtoa_r+0x4c0>
 8015c70:	f1ba 0f00 	cmp.w	sl, #0
 8015c74:	dd31      	ble.n	8015cda <_dtoa_r+0x3e2>
 8015c76:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015c7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015c7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015c82:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015c86:	3201      	adds	r2, #1
 8015c88:	4650      	mov	r0, sl
 8015c8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015c8e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015c92:	ee07 2a90 	vmov	s15, r2
 8015c96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015c9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015c9e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8015ca2:	9c03      	ldr	r4, [sp, #12]
 8015ca4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015ca8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8015cac:	2800      	cmp	r0, #0
 8015cae:	f040 8086 	bne.w	8015dbe <_dtoa_r+0x4c6>
 8015cb2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015cb6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015cba:	ec42 1b17 	vmov	d7, r1, r2
 8015cbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cc6:	f300 8272 	bgt.w	80161ae <_dtoa_r+0x8b6>
 8015cca:	eeb1 7b47 	vneg.f64	d7, d7
 8015cce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cd6:	f100 8267 	bmi.w	80161a8 <_dtoa_r+0x8b0>
 8015cda:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8015cde:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015ce2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015ce4:	2a00      	cmp	r2, #0
 8015ce6:	f2c0 8129 	blt.w	8015f3c <_dtoa_r+0x644>
 8015cea:	f1bb 0f0e 	cmp.w	fp, #14
 8015cee:	f300 8125 	bgt.w	8015f3c <_dtoa_r+0x644>
 8015cf2:	4b90      	ldr	r3, [pc, #576]	; (8015f34 <_dtoa_r+0x63c>)
 8015cf4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015cf8:	ed93 6b00 	vldr	d6, [r3]
 8015cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	f280 80c3 	bge.w	8015e8a <_dtoa_r+0x592>
 8015d04:	f1b9 0f00 	cmp.w	r9, #0
 8015d08:	f300 80bf 	bgt.w	8015e8a <_dtoa_r+0x592>
 8015d0c:	f040 824c 	bne.w	80161a8 <_dtoa_r+0x8b0>
 8015d10:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015d14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015d18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015d1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d24:	464c      	mov	r4, r9
 8015d26:	464f      	mov	r7, r9
 8015d28:	f280 8222 	bge.w	8016170 <_dtoa_r+0x878>
 8015d2c:	f8dd 8000 	ldr.w	r8, [sp]
 8015d30:	2331      	movs	r3, #49	; 0x31
 8015d32:	f808 3b01 	strb.w	r3, [r8], #1
 8015d36:	f10b 0b01 	add.w	fp, fp, #1
 8015d3a:	e21e      	b.n	801617a <_dtoa_r+0x882>
 8015d3c:	2202      	movs	r2, #2
 8015d3e:	e77c      	b.n	8015c3a <_dtoa_r+0x342>
 8015d40:	07cc      	lsls	r4, r1, #31
 8015d42:	d504      	bpl.n	8015d4e <_dtoa_r+0x456>
 8015d44:	ed90 6b00 	vldr	d6, [r0]
 8015d48:	3201      	adds	r2, #1
 8015d4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d4e:	1049      	asrs	r1, r1, #1
 8015d50:	3008      	adds	r0, #8
 8015d52:	e773      	b.n	8015c3c <_dtoa_r+0x344>
 8015d54:	d02e      	beq.n	8015db4 <_dtoa_r+0x4bc>
 8015d56:	f1cb 0100 	rsb	r1, fp, #0
 8015d5a:	4a76      	ldr	r2, [pc, #472]	; (8015f34 <_dtoa_r+0x63c>)
 8015d5c:	f001 000f 	and.w	r0, r1, #15
 8015d60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015d64:	ed92 7b00 	vldr	d7, [r2]
 8015d68:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8015d6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015d70:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015d74:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8015d78:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8015d7c:	486e      	ldr	r0, [pc, #440]	; (8015f38 <_dtoa_r+0x640>)
 8015d7e:	1109      	asrs	r1, r1, #4
 8015d80:	2400      	movs	r4, #0
 8015d82:	2202      	movs	r2, #2
 8015d84:	b939      	cbnz	r1, 8015d96 <_dtoa_r+0x49e>
 8015d86:	2c00      	cmp	r4, #0
 8015d88:	f43f af60 	beq.w	8015c4c <_dtoa_r+0x354>
 8015d8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d94:	e75a      	b.n	8015c4c <_dtoa_r+0x354>
 8015d96:	07cf      	lsls	r7, r1, #31
 8015d98:	d509      	bpl.n	8015dae <_dtoa_r+0x4b6>
 8015d9a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8015d9e:	ed90 7b00 	vldr	d7, [r0]
 8015da2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015da6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015daa:	3201      	adds	r2, #1
 8015dac:	2401      	movs	r4, #1
 8015dae:	1049      	asrs	r1, r1, #1
 8015db0:	3008      	adds	r0, #8
 8015db2:	e7e7      	b.n	8015d84 <_dtoa_r+0x48c>
 8015db4:	2202      	movs	r2, #2
 8015db6:	e749      	b.n	8015c4c <_dtoa_r+0x354>
 8015db8:	465f      	mov	r7, fp
 8015dba:	4648      	mov	r0, r9
 8015dbc:	e765      	b.n	8015c8a <_dtoa_r+0x392>
 8015dbe:	ec42 1b17 	vmov	d7, r1, r2
 8015dc2:	4a5c      	ldr	r2, [pc, #368]	; (8015f34 <_dtoa_r+0x63c>)
 8015dc4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015dc8:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015dcc:	9a00      	ldr	r2, [sp, #0]
 8015dce:	1814      	adds	r4, r2, r0
 8015dd0:	9a08      	ldr	r2, [sp, #32]
 8015dd2:	b352      	cbz	r2, 8015e2a <_dtoa_r+0x532>
 8015dd4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015dd8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015ddc:	f8dd 8000 	ldr.w	r8, [sp]
 8015de0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015de4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015de8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015dec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015df0:	ee14 2a90 	vmov	r2, s9
 8015df4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015df8:	3230      	adds	r2, #48	; 0x30
 8015dfa:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015dfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e06:	f808 2b01 	strb.w	r2, [r8], #1
 8015e0a:	d439      	bmi.n	8015e80 <_dtoa_r+0x588>
 8015e0c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015e10:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e18:	d472      	bmi.n	8015f00 <_dtoa_r+0x608>
 8015e1a:	45a0      	cmp	r8, r4
 8015e1c:	f43f af5d 	beq.w	8015cda <_dtoa_r+0x3e2>
 8015e20:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015e24:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015e28:	e7e0      	b.n	8015dec <_dtoa_r+0x4f4>
 8015e2a:	f8dd 8000 	ldr.w	r8, [sp]
 8015e2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015e32:	4621      	mov	r1, r4
 8015e34:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015e38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015e3c:	ee14 2a90 	vmov	r2, s9
 8015e40:	3230      	adds	r2, #48	; 0x30
 8015e42:	f808 2b01 	strb.w	r2, [r8], #1
 8015e46:	45a0      	cmp	r8, r4
 8015e48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015e4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015e50:	d118      	bne.n	8015e84 <_dtoa_r+0x58c>
 8015e52:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015e56:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015e5a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e62:	dc4d      	bgt.n	8015f00 <_dtoa_r+0x608>
 8015e64:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015e68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e70:	f57f af33 	bpl.w	8015cda <_dtoa_r+0x3e2>
 8015e74:	4688      	mov	r8, r1
 8015e76:	3901      	subs	r1, #1
 8015e78:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015e7c:	2b30      	cmp	r3, #48	; 0x30
 8015e7e:	d0f9      	beq.n	8015e74 <_dtoa_r+0x57c>
 8015e80:	46bb      	mov	fp, r7
 8015e82:	e02a      	b.n	8015eda <_dtoa_r+0x5e2>
 8015e84:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015e88:	e7d6      	b.n	8015e38 <_dtoa_r+0x540>
 8015e8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015e8e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015e92:	f8dd 8000 	ldr.w	r8, [sp]
 8015e96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015e9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015e9e:	ee15 3a10 	vmov	r3, s10
 8015ea2:	3330      	adds	r3, #48	; 0x30
 8015ea4:	f808 3b01 	strb.w	r3, [r8], #1
 8015ea8:	9b00      	ldr	r3, [sp, #0]
 8015eaa:	eba8 0303 	sub.w	r3, r8, r3
 8015eae:	4599      	cmp	r9, r3
 8015eb0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015eb4:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015eb8:	d133      	bne.n	8015f22 <_dtoa_r+0x62a>
 8015eba:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015ebe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ec6:	dc1a      	bgt.n	8015efe <_dtoa_r+0x606>
 8015ec8:	eeb4 7b46 	vcmp.f64	d7, d6
 8015ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed0:	d103      	bne.n	8015eda <_dtoa_r+0x5e2>
 8015ed2:	ee15 3a10 	vmov	r3, s10
 8015ed6:	07d9      	lsls	r1, r3, #31
 8015ed8:	d411      	bmi.n	8015efe <_dtoa_r+0x606>
 8015eda:	4629      	mov	r1, r5
 8015edc:	4630      	mov	r0, r6
 8015ede:	f000 fe69 	bl	8016bb4 <_Bfree>
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015ee6:	f888 3000 	strb.w	r3, [r8]
 8015eea:	f10b 0301 	add.w	r3, fp, #1
 8015eee:	6013      	str	r3, [r2, #0]
 8015ef0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	f43f ad4d 	beq.w	8015992 <_dtoa_r+0x9a>
 8015ef8:	f8c3 8000 	str.w	r8, [r3]
 8015efc:	e549      	b.n	8015992 <_dtoa_r+0x9a>
 8015efe:	465f      	mov	r7, fp
 8015f00:	4643      	mov	r3, r8
 8015f02:	4698      	mov	r8, r3
 8015f04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015f08:	2a39      	cmp	r2, #57	; 0x39
 8015f0a:	d106      	bne.n	8015f1a <_dtoa_r+0x622>
 8015f0c:	9a00      	ldr	r2, [sp, #0]
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	d1f7      	bne.n	8015f02 <_dtoa_r+0x60a>
 8015f12:	9900      	ldr	r1, [sp, #0]
 8015f14:	2230      	movs	r2, #48	; 0x30
 8015f16:	3701      	adds	r7, #1
 8015f18:	700a      	strb	r2, [r1, #0]
 8015f1a:	781a      	ldrb	r2, [r3, #0]
 8015f1c:	3201      	adds	r2, #1
 8015f1e:	701a      	strb	r2, [r3, #0]
 8015f20:	e7ae      	b.n	8015e80 <_dtoa_r+0x588>
 8015f22:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015f26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f2e:	d1b2      	bne.n	8015e96 <_dtoa_r+0x59e>
 8015f30:	e7d3      	b.n	8015eda <_dtoa_r+0x5e2>
 8015f32:	bf00      	nop
 8015f34:	08019608 	.word	0x08019608
 8015f38:	080195e0 	.word	0x080195e0
 8015f3c:	9908      	ldr	r1, [sp, #32]
 8015f3e:	2900      	cmp	r1, #0
 8015f40:	f000 80d1 	beq.w	80160e6 <_dtoa_r+0x7ee>
 8015f44:	9907      	ldr	r1, [sp, #28]
 8015f46:	2901      	cmp	r1, #1
 8015f48:	f300 80b4 	bgt.w	80160b4 <_dtoa_r+0x7bc>
 8015f4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015f4e:	2900      	cmp	r1, #0
 8015f50:	f000 80ac 	beq.w	80160ac <_dtoa_r+0x7b4>
 8015f54:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015f58:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015f5c:	461c      	mov	r4, r3
 8015f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8015f60:	9b05      	ldr	r3, [sp, #20]
 8015f62:	4413      	add	r3, r2
 8015f64:	9305      	str	r3, [sp, #20]
 8015f66:	9b06      	ldr	r3, [sp, #24]
 8015f68:	2101      	movs	r1, #1
 8015f6a:	4413      	add	r3, r2
 8015f6c:	4630      	mov	r0, r6
 8015f6e:	9306      	str	r3, [sp, #24]
 8015f70:	f000 ff26 	bl	8016dc0 <__i2b>
 8015f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f76:	4607      	mov	r7, r0
 8015f78:	f1b8 0f00 	cmp.w	r8, #0
 8015f7c:	dd0d      	ble.n	8015f9a <_dtoa_r+0x6a2>
 8015f7e:	9a06      	ldr	r2, [sp, #24]
 8015f80:	2a00      	cmp	r2, #0
 8015f82:	dd0a      	ble.n	8015f9a <_dtoa_r+0x6a2>
 8015f84:	4542      	cmp	r2, r8
 8015f86:	9905      	ldr	r1, [sp, #20]
 8015f88:	bfa8      	it	ge
 8015f8a:	4642      	movge	r2, r8
 8015f8c:	1a89      	subs	r1, r1, r2
 8015f8e:	9105      	str	r1, [sp, #20]
 8015f90:	9906      	ldr	r1, [sp, #24]
 8015f92:	eba8 0802 	sub.w	r8, r8, r2
 8015f96:	1a8a      	subs	r2, r1, r2
 8015f98:	9206      	str	r2, [sp, #24]
 8015f9a:	b303      	cbz	r3, 8015fde <_dtoa_r+0x6e6>
 8015f9c:	9a08      	ldr	r2, [sp, #32]
 8015f9e:	2a00      	cmp	r2, #0
 8015fa0:	f000 80a6 	beq.w	80160f0 <_dtoa_r+0x7f8>
 8015fa4:	2c00      	cmp	r4, #0
 8015fa6:	dd13      	ble.n	8015fd0 <_dtoa_r+0x6d8>
 8015fa8:	4639      	mov	r1, r7
 8015faa:	4622      	mov	r2, r4
 8015fac:	4630      	mov	r0, r6
 8015fae:	930c      	str	r3, [sp, #48]	; 0x30
 8015fb0:	f000 ffc2 	bl	8016f38 <__pow5mult>
 8015fb4:	462a      	mov	r2, r5
 8015fb6:	4601      	mov	r1, r0
 8015fb8:	4607      	mov	r7, r0
 8015fba:	4630      	mov	r0, r6
 8015fbc:	f000 ff16 	bl	8016dec <__multiply>
 8015fc0:	4629      	mov	r1, r5
 8015fc2:	900a      	str	r0, [sp, #40]	; 0x28
 8015fc4:	4630      	mov	r0, r6
 8015fc6:	f000 fdf5 	bl	8016bb4 <_Bfree>
 8015fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fce:	4615      	mov	r5, r2
 8015fd0:	1b1a      	subs	r2, r3, r4
 8015fd2:	d004      	beq.n	8015fde <_dtoa_r+0x6e6>
 8015fd4:	4629      	mov	r1, r5
 8015fd6:	4630      	mov	r0, r6
 8015fd8:	f000 ffae 	bl	8016f38 <__pow5mult>
 8015fdc:	4605      	mov	r5, r0
 8015fde:	2101      	movs	r1, #1
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	f000 feed 	bl	8016dc0 <__i2b>
 8015fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	4604      	mov	r4, r0
 8015fec:	f340 8082 	ble.w	80160f4 <_dtoa_r+0x7fc>
 8015ff0:	461a      	mov	r2, r3
 8015ff2:	4601      	mov	r1, r0
 8015ff4:	4630      	mov	r0, r6
 8015ff6:	f000 ff9f 	bl	8016f38 <__pow5mult>
 8015ffa:	9b07      	ldr	r3, [sp, #28]
 8015ffc:	2b01      	cmp	r3, #1
 8015ffe:	4604      	mov	r4, r0
 8016000:	dd7b      	ble.n	80160fa <_dtoa_r+0x802>
 8016002:	2300      	movs	r3, #0
 8016004:	930a      	str	r3, [sp, #40]	; 0x28
 8016006:	6922      	ldr	r2, [r4, #16]
 8016008:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801600c:	6910      	ldr	r0, [r2, #16]
 801600e:	f000 fe87 	bl	8016d20 <__hi0bits>
 8016012:	f1c0 0020 	rsb	r0, r0, #32
 8016016:	9b06      	ldr	r3, [sp, #24]
 8016018:	4418      	add	r0, r3
 801601a:	f010 001f 	ands.w	r0, r0, #31
 801601e:	f000 808d 	beq.w	801613c <_dtoa_r+0x844>
 8016022:	f1c0 0220 	rsb	r2, r0, #32
 8016026:	2a04      	cmp	r2, #4
 8016028:	f340 8086 	ble.w	8016138 <_dtoa_r+0x840>
 801602c:	f1c0 001c 	rsb	r0, r0, #28
 8016030:	9b05      	ldr	r3, [sp, #20]
 8016032:	4403      	add	r3, r0
 8016034:	9305      	str	r3, [sp, #20]
 8016036:	9b06      	ldr	r3, [sp, #24]
 8016038:	4403      	add	r3, r0
 801603a:	4480      	add	r8, r0
 801603c:	9306      	str	r3, [sp, #24]
 801603e:	9b05      	ldr	r3, [sp, #20]
 8016040:	2b00      	cmp	r3, #0
 8016042:	dd05      	ble.n	8016050 <_dtoa_r+0x758>
 8016044:	4629      	mov	r1, r5
 8016046:	461a      	mov	r2, r3
 8016048:	4630      	mov	r0, r6
 801604a:	f000 ffcf 	bl	8016fec <__lshift>
 801604e:	4605      	mov	r5, r0
 8016050:	9b06      	ldr	r3, [sp, #24]
 8016052:	2b00      	cmp	r3, #0
 8016054:	dd05      	ble.n	8016062 <_dtoa_r+0x76a>
 8016056:	4621      	mov	r1, r4
 8016058:	461a      	mov	r2, r3
 801605a:	4630      	mov	r0, r6
 801605c:	f000 ffc6 	bl	8016fec <__lshift>
 8016060:	4604      	mov	r4, r0
 8016062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016064:	2b00      	cmp	r3, #0
 8016066:	d06b      	beq.n	8016140 <_dtoa_r+0x848>
 8016068:	4621      	mov	r1, r4
 801606a:	4628      	mov	r0, r5
 801606c:	f001 f82a 	bl	80170c4 <__mcmp>
 8016070:	2800      	cmp	r0, #0
 8016072:	da65      	bge.n	8016140 <_dtoa_r+0x848>
 8016074:	2300      	movs	r3, #0
 8016076:	4629      	mov	r1, r5
 8016078:	220a      	movs	r2, #10
 801607a:	4630      	mov	r0, r6
 801607c:	f000 fdbc 	bl	8016bf8 <__multadd>
 8016080:	9b08      	ldr	r3, [sp, #32]
 8016082:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016086:	4605      	mov	r5, r0
 8016088:	2b00      	cmp	r3, #0
 801608a:	f000 8192 	beq.w	80163b2 <_dtoa_r+0xaba>
 801608e:	4639      	mov	r1, r7
 8016090:	2300      	movs	r3, #0
 8016092:	220a      	movs	r2, #10
 8016094:	4630      	mov	r0, r6
 8016096:	f000 fdaf 	bl	8016bf8 <__multadd>
 801609a:	f1ba 0f00 	cmp.w	sl, #0
 801609e:	4607      	mov	r7, r0
 80160a0:	f300 808e 	bgt.w	80161c0 <_dtoa_r+0x8c8>
 80160a4:	9b07      	ldr	r3, [sp, #28]
 80160a6:	2b02      	cmp	r3, #2
 80160a8:	dc51      	bgt.n	801614e <_dtoa_r+0x856>
 80160aa:	e089      	b.n	80161c0 <_dtoa_r+0x8c8>
 80160ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80160ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80160b2:	e751      	b.n	8015f58 <_dtoa_r+0x660>
 80160b4:	f109 34ff 	add.w	r4, r9, #4294967295
 80160b8:	42a3      	cmp	r3, r4
 80160ba:	bfbf      	itttt	lt
 80160bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80160be:	1ae3      	sublt	r3, r4, r3
 80160c0:	18d2      	addlt	r2, r2, r3
 80160c2:	4613      	movlt	r3, r2
 80160c4:	bfb7      	itett	lt
 80160c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80160c8:	1b1c      	subge	r4, r3, r4
 80160ca:	4623      	movlt	r3, r4
 80160cc:	2400      	movlt	r4, #0
 80160ce:	f1b9 0f00 	cmp.w	r9, #0
 80160d2:	bfb5      	itete	lt
 80160d4:	9a05      	ldrlt	r2, [sp, #20]
 80160d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80160da:	eba2 0809 	sublt.w	r8, r2, r9
 80160de:	464a      	movge	r2, r9
 80160e0:	bfb8      	it	lt
 80160e2:	2200      	movlt	r2, #0
 80160e4:	e73b      	b.n	8015f5e <_dtoa_r+0x666>
 80160e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80160ea:	9f08      	ldr	r7, [sp, #32]
 80160ec:	461c      	mov	r4, r3
 80160ee:	e743      	b.n	8015f78 <_dtoa_r+0x680>
 80160f0:	461a      	mov	r2, r3
 80160f2:	e76f      	b.n	8015fd4 <_dtoa_r+0x6dc>
 80160f4:	9b07      	ldr	r3, [sp, #28]
 80160f6:	2b01      	cmp	r3, #1
 80160f8:	dc18      	bgt.n	801612c <_dtoa_r+0x834>
 80160fa:	9b02      	ldr	r3, [sp, #8]
 80160fc:	b9b3      	cbnz	r3, 801612c <_dtoa_r+0x834>
 80160fe:	9b03      	ldr	r3, [sp, #12]
 8016100:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8016104:	b9a2      	cbnz	r2, 8016130 <_dtoa_r+0x838>
 8016106:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801610a:	0d12      	lsrs	r2, r2, #20
 801610c:	0512      	lsls	r2, r2, #20
 801610e:	b18a      	cbz	r2, 8016134 <_dtoa_r+0x83c>
 8016110:	9b05      	ldr	r3, [sp, #20]
 8016112:	3301      	adds	r3, #1
 8016114:	9305      	str	r3, [sp, #20]
 8016116:	9b06      	ldr	r3, [sp, #24]
 8016118:	3301      	adds	r3, #1
 801611a:	9306      	str	r3, [sp, #24]
 801611c:	2301      	movs	r3, #1
 801611e:	930a      	str	r3, [sp, #40]	; 0x28
 8016120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016122:	2b00      	cmp	r3, #0
 8016124:	f47f af6f 	bne.w	8016006 <_dtoa_r+0x70e>
 8016128:	2001      	movs	r0, #1
 801612a:	e774      	b.n	8016016 <_dtoa_r+0x71e>
 801612c:	2300      	movs	r3, #0
 801612e:	e7f6      	b.n	801611e <_dtoa_r+0x826>
 8016130:	9b02      	ldr	r3, [sp, #8]
 8016132:	e7f4      	b.n	801611e <_dtoa_r+0x826>
 8016134:	920a      	str	r2, [sp, #40]	; 0x28
 8016136:	e7f3      	b.n	8016120 <_dtoa_r+0x828>
 8016138:	d081      	beq.n	801603e <_dtoa_r+0x746>
 801613a:	4610      	mov	r0, r2
 801613c:	301c      	adds	r0, #28
 801613e:	e777      	b.n	8016030 <_dtoa_r+0x738>
 8016140:	f1b9 0f00 	cmp.w	r9, #0
 8016144:	dc37      	bgt.n	80161b6 <_dtoa_r+0x8be>
 8016146:	9b07      	ldr	r3, [sp, #28]
 8016148:	2b02      	cmp	r3, #2
 801614a:	dd34      	ble.n	80161b6 <_dtoa_r+0x8be>
 801614c:	46ca      	mov	sl, r9
 801614e:	f1ba 0f00 	cmp.w	sl, #0
 8016152:	d10d      	bne.n	8016170 <_dtoa_r+0x878>
 8016154:	4621      	mov	r1, r4
 8016156:	4653      	mov	r3, sl
 8016158:	2205      	movs	r2, #5
 801615a:	4630      	mov	r0, r6
 801615c:	f000 fd4c 	bl	8016bf8 <__multadd>
 8016160:	4601      	mov	r1, r0
 8016162:	4604      	mov	r4, r0
 8016164:	4628      	mov	r0, r5
 8016166:	f000 ffad 	bl	80170c4 <__mcmp>
 801616a:	2800      	cmp	r0, #0
 801616c:	f73f adde 	bgt.w	8015d2c <_dtoa_r+0x434>
 8016170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016172:	f8dd 8000 	ldr.w	r8, [sp]
 8016176:	ea6f 0b03 	mvn.w	fp, r3
 801617a:	f04f 0900 	mov.w	r9, #0
 801617e:	4621      	mov	r1, r4
 8016180:	4630      	mov	r0, r6
 8016182:	f000 fd17 	bl	8016bb4 <_Bfree>
 8016186:	2f00      	cmp	r7, #0
 8016188:	f43f aea7 	beq.w	8015eda <_dtoa_r+0x5e2>
 801618c:	f1b9 0f00 	cmp.w	r9, #0
 8016190:	d005      	beq.n	801619e <_dtoa_r+0x8a6>
 8016192:	45b9      	cmp	r9, r7
 8016194:	d003      	beq.n	801619e <_dtoa_r+0x8a6>
 8016196:	4649      	mov	r1, r9
 8016198:	4630      	mov	r0, r6
 801619a:	f000 fd0b 	bl	8016bb4 <_Bfree>
 801619e:	4639      	mov	r1, r7
 80161a0:	4630      	mov	r0, r6
 80161a2:	f000 fd07 	bl	8016bb4 <_Bfree>
 80161a6:	e698      	b.n	8015eda <_dtoa_r+0x5e2>
 80161a8:	2400      	movs	r4, #0
 80161aa:	4627      	mov	r7, r4
 80161ac:	e7e0      	b.n	8016170 <_dtoa_r+0x878>
 80161ae:	46bb      	mov	fp, r7
 80161b0:	4604      	mov	r4, r0
 80161b2:	4607      	mov	r7, r0
 80161b4:	e5ba      	b.n	8015d2c <_dtoa_r+0x434>
 80161b6:	9b08      	ldr	r3, [sp, #32]
 80161b8:	46ca      	mov	sl, r9
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	f000 8100 	beq.w	80163c0 <_dtoa_r+0xac8>
 80161c0:	f1b8 0f00 	cmp.w	r8, #0
 80161c4:	dd05      	ble.n	80161d2 <_dtoa_r+0x8da>
 80161c6:	4639      	mov	r1, r7
 80161c8:	4642      	mov	r2, r8
 80161ca:	4630      	mov	r0, r6
 80161cc:	f000 ff0e 	bl	8016fec <__lshift>
 80161d0:	4607      	mov	r7, r0
 80161d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d05d      	beq.n	8016294 <_dtoa_r+0x99c>
 80161d8:	6879      	ldr	r1, [r7, #4]
 80161da:	4630      	mov	r0, r6
 80161dc:	f000 fcaa 	bl	8016b34 <_Balloc>
 80161e0:	4680      	mov	r8, r0
 80161e2:	b928      	cbnz	r0, 80161f0 <_dtoa_r+0x8f8>
 80161e4:	4b82      	ldr	r3, [pc, #520]	; (80163f0 <_dtoa_r+0xaf8>)
 80161e6:	4602      	mov	r2, r0
 80161e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80161ec:	f7ff bb9a 	b.w	8015924 <_dtoa_r+0x2c>
 80161f0:	693a      	ldr	r2, [r7, #16]
 80161f2:	3202      	adds	r2, #2
 80161f4:	0092      	lsls	r2, r2, #2
 80161f6:	f107 010c 	add.w	r1, r7, #12
 80161fa:	300c      	adds	r0, #12
 80161fc:	f000 fc8c 	bl	8016b18 <memcpy>
 8016200:	2201      	movs	r2, #1
 8016202:	4641      	mov	r1, r8
 8016204:	4630      	mov	r0, r6
 8016206:	f000 fef1 	bl	8016fec <__lshift>
 801620a:	9b00      	ldr	r3, [sp, #0]
 801620c:	3301      	adds	r3, #1
 801620e:	9305      	str	r3, [sp, #20]
 8016210:	9b00      	ldr	r3, [sp, #0]
 8016212:	4453      	add	r3, sl
 8016214:	9309      	str	r3, [sp, #36]	; 0x24
 8016216:	9b02      	ldr	r3, [sp, #8]
 8016218:	f003 0301 	and.w	r3, r3, #1
 801621c:	46b9      	mov	r9, r7
 801621e:	9308      	str	r3, [sp, #32]
 8016220:	4607      	mov	r7, r0
 8016222:	9b05      	ldr	r3, [sp, #20]
 8016224:	4621      	mov	r1, r4
 8016226:	3b01      	subs	r3, #1
 8016228:	4628      	mov	r0, r5
 801622a:	9302      	str	r3, [sp, #8]
 801622c:	f7ff fad6 	bl	80157dc <quorem>
 8016230:	4603      	mov	r3, r0
 8016232:	3330      	adds	r3, #48	; 0x30
 8016234:	9006      	str	r0, [sp, #24]
 8016236:	4649      	mov	r1, r9
 8016238:	4628      	mov	r0, r5
 801623a:	930a      	str	r3, [sp, #40]	; 0x28
 801623c:	f000 ff42 	bl	80170c4 <__mcmp>
 8016240:	463a      	mov	r2, r7
 8016242:	4682      	mov	sl, r0
 8016244:	4621      	mov	r1, r4
 8016246:	4630      	mov	r0, r6
 8016248:	f000 ff58 	bl	80170fc <__mdiff>
 801624c:	68c2      	ldr	r2, [r0, #12]
 801624e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016250:	4680      	mov	r8, r0
 8016252:	bb0a      	cbnz	r2, 8016298 <_dtoa_r+0x9a0>
 8016254:	4601      	mov	r1, r0
 8016256:	4628      	mov	r0, r5
 8016258:	f000 ff34 	bl	80170c4 <__mcmp>
 801625c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801625e:	4602      	mov	r2, r0
 8016260:	4641      	mov	r1, r8
 8016262:	4630      	mov	r0, r6
 8016264:	920e      	str	r2, [sp, #56]	; 0x38
 8016266:	930a      	str	r3, [sp, #40]	; 0x28
 8016268:	f000 fca4 	bl	8016bb4 <_Bfree>
 801626c:	9b07      	ldr	r3, [sp, #28]
 801626e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016270:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016274:	ea43 0102 	orr.w	r1, r3, r2
 8016278:	9b08      	ldr	r3, [sp, #32]
 801627a:	430b      	orrs	r3, r1
 801627c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801627e:	d10d      	bne.n	801629c <_dtoa_r+0x9a4>
 8016280:	2b39      	cmp	r3, #57	; 0x39
 8016282:	d029      	beq.n	80162d8 <_dtoa_r+0x9e0>
 8016284:	f1ba 0f00 	cmp.w	sl, #0
 8016288:	dd01      	ble.n	801628e <_dtoa_r+0x996>
 801628a:	9b06      	ldr	r3, [sp, #24]
 801628c:	3331      	adds	r3, #49	; 0x31
 801628e:	9a02      	ldr	r2, [sp, #8]
 8016290:	7013      	strb	r3, [r2, #0]
 8016292:	e774      	b.n	801617e <_dtoa_r+0x886>
 8016294:	4638      	mov	r0, r7
 8016296:	e7b8      	b.n	801620a <_dtoa_r+0x912>
 8016298:	2201      	movs	r2, #1
 801629a:	e7e1      	b.n	8016260 <_dtoa_r+0x968>
 801629c:	f1ba 0f00 	cmp.w	sl, #0
 80162a0:	db06      	blt.n	80162b0 <_dtoa_r+0x9b8>
 80162a2:	9907      	ldr	r1, [sp, #28]
 80162a4:	ea41 0a0a 	orr.w	sl, r1, sl
 80162a8:	9908      	ldr	r1, [sp, #32]
 80162aa:	ea5a 0101 	orrs.w	r1, sl, r1
 80162ae:	d120      	bne.n	80162f2 <_dtoa_r+0x9fa>
 80162b0:	2a00      	cmp	r2, #0
 80162b2:	ddec      	ble.n	801628e <_dtoa_r+0x996>
 80162b4:	4629      	mov	r1, r5
 80162b6:	2201      	movs	r2, #1
 80162b8:	4630      	mov	r0, r6
 80162ba:	9305      	str	r3, [sp, #20]
 80162bc:	f000 fe96 	bl	8016fec <__lshift>
 80162c0:	4621      	mov	r1, r4
 80162c2:	4605      	mov	r5, r0
 80162c4:	f000 fefe 	bl	80170c4 <__mcmp>
 80162c8:	2800      	cmp	r0, #0
 80162ca:	9b05      	ldr	r3, [sp, #20]
 80162cc:	dc02      	bgt.n	80162d4 <_dtoa_r+0x9dc>
 80162ce:	d1de      	bne.n	801628e <_dtoa_r+0x996>
 80162d0:	07da      	lsls	r2, r3, #31
 80162d2:	d5dc      	bpl.n	801628e <_dtoa_r+0x996>
 80162d4:	2b39      	cmp	r3, #57	; 0x39
 80162d6:	d1d8      	bne.n	801628a <_dtoa_r+0x992>
 80162d8:	9a02      	ldr	r2, [sp, #8]
 80162da:	2339      	movs	r3, #57	; 0x39
 80162dc:	7013      	strb	r3, [r2, #0]
 80162de:	4643      	mov	r3, r8
 80162e0:	4698      	mov	r8, r3
 80162e2:	3b01      	subs	r3, #1
 80162e4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80162e8:	2a39      	cmp	r2, #57	; 0x39
 80162ea:	d051      	beq.n	8016390 <_dtoa_r+0xa98>
 80162ec:	3201      	adds	r2, #1
 80162ee:	701a      	strb	r2, [r3, #0]
 80162f0:	e745      	b.n	801617e <_dtoa_r+0x886>
 80162f2:	2a00      	cmp	r2, #0
 80162f4:	dd03      	ble.n	80162fe <_dtoa_r+0xa06>
 80162f6:	2b39      	cmp	r3, #57	; 0x39
 80162f8:	d0ee      	beq.n	80162d8 <_dtoa_r+0x9e0>
 80162fa:	3301      	adds	r3, #1
 80162fc:	e7c7      	b.n	801628e <_dtoa_r+0x996>
 80162fe:	9a05      	ldr	r2, [sp, #20]
 8016300:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016302:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016306:	428a      	cmp	r2, r1
 8016308:	d02b      	beq.n	8016362 <_dtoa_r+0xa6a>
 801630a:	4629      	mov	r1, r5
 801630c:	2300      	movs	r3, #0
 801630e:	220a      	movs	r2, #10
 8016310:	4630      	mov	r0, r6
 8016312:	f000 fc71 	bl	8016bf8 <__multadd>
 8016316:	45b9      	cmp	r9, r7
 8016318:	4605      	mov	r5, r0
 801631a:	f04f 0300 	mov.w	r3, #0
 801631e:	f04f 020a 	mov.w	r2, #10
 8016322:	4649      	mov	r1, r9
 8016324:	4630      	mov	r0, r6
 8016326:	d107      	bne.n	8016338 <_dtoa_r+0xa40>
 8016328:	f000 fc66 	bl	8016bf8 <__multadd>
 801632c:	4681      	mov	r9, r0
 801632e:	4607      	mov	r7, r0
 8016330:	9b05      	ldr	r3, [sp, #20]
 8016332:	3301      	adds	r3, #1
 8016334:	9305      	str	r3, [sp, #20]
 8016336:	e774      	b.n	8016222 <_dtoa_r+0x92a>
 8016338:	f000 fc5e 	bl	8016bf8 <__multadd>
 801633c:	4639      	mov	r1, r7
 801633e:	4681      	mov	r9, r0
 8016340:	2300      	movs	r3, #0
 8016342:	220a      	movs	r2, #10
 8016344:	4630      	mov	r0, r6
 8016346:	f000 fc57 	bl	8016bf8 <__multadd>
 801634a:	4607      	mov	r7, r0
 801634c:	e7f0      	b.n	8016330 <_dtoa_r+0xa38>
 801634e:	f1ba 0f00 	cmp.w	sl, #0
 8016352:	9a00      	ldr	r2, [sp, #0]
 8016354:	bfcc      	ite	gt
 8016356:	46d0      	movgt	r8, sl
 8016358:	f04f 0801 	movle.w	r8, #1
 801635c:	4490      	add	r8, r2
 801635e:	f04f 0900 	mov.w	r9, #0
 8016362:	4629      	mov	r1, r5
 8016364:	2201      	movs	r2, #1
 8016366:	4630      	mov	r0, r6
 8016368:	9302      	str	r3, [sp, #8]
 801636a:	f000 fe3f 	bl	8016fec <__lshift>
 801636e:	4621      	mov	r1, r4
 8016370:	4605      	mov	r5, r0
 8016372:	f000 fea7 	bl	80170c4 <__mcmp>
 8016376:	2800      	cmp	r0, #0
 8016378:	dcb1      	bgt.n	80162de <_dtoa_r+0x9e6>
 801637a:	d102      	bne.n	8016382 <_dtoa_r+0xa8a>
 801637c:	9b02      	ldr	r3, [sp, #8]
 801637e:	07db      	lsls	r3, r3, #31
 8016380:	d4ad      	bmi.n	80162de <_dtoa_r+0x9e6>
 8016382:	4643      	mov	r3, r8
 8016384:	4698      	mov	r8, r3
 8016386:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801638a:	2a30      	cmp	r2, #48	; 0x30
 801638c:	d0fa      	beq.n	8016384 <_dtoa_r+0xa8c>
 801638e:	e6f6      	b.n	801617e <_dtoa_r+0x886>
 8016390:	9a00      	ldr	r2, [sp, #0]
 8016392:	429a      	cmp	r2, r3
 8016394:	d1a4      	bne.n	80162e0 <_dtoa_r+0x9e8>
 8016396:	f10b 0b01 	add.w	fp, fp, #1
 801639a:	2331      	movs	r3, #49	; 0x31
 801639c:	e778      	b.n	8016290 <_dtoa_r+0x998>
 801639e:	4b15      	ldr	r3, [pc, #84]	; (80163f4 <_dtoa_r+0xafc>)
 80163a0:	f7ff bb12 	b.w	80159c8 <_dtoa_r+0xd0>
 80163a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	f47f aaee 	bne.w	8015988 <_dtoa_r+0x90>
 80163ac:	4b12      	ldr	r3, [pc, #72]	; (80163f8 <_dtoa_r+0xb00>)
 80163ae:	f7ff bb0b 	b.w	80159c8 <_dtoa_r+0xd0>
 80163b2:	f1ba 0f00 	cmp.w	sl, #0
 80163b6:	dc03      	bgt.n	80163c0 <_dtoa_r+0xac8>
 80163b8:	9b07      	ldr	r3, [sp, #28]
 80163ba:	2b02      	cmp	r3, #2
 80163bc:	f73f aec7 	bgt.w	801614e <_dtoa_r+0x856>
 80163c0:	f8dd 8000 	ldr.w	r8, [sp]
 80163c4:	4621      	mov	r1, r4
 80163c6:	4628      	mov	r0, r5
 80163c8:	f7ff fa08 	bl	80157dc <quorem>
 80163cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80163d0:	f808 3b01 	strb.w	r3, [r8], #1
 80163d4:	9a00      	ldr	r2, [sp, #0]
 80163d6:	eba8 0202 	sub.w	r2, r8, r2
 80163da:	4592      	cmp	sl, r2
 80163dc:	ddb7      	ble.n	801634e <_dtoa_r+0xa56>
 80163de:	4629      	mov	r1, r5
 80163e0:	2300      	movs	r3, #0
 80163e2:	220a      	movs	r2, #10
 80163e4:	4630      	mov	r0, r6
 80163e6:	f000 fc07 	bl	8016bf8 <__multadd>
 80163ea:	4605      	mov	r5, r0
 80163ec:	e7ea      	b.n	80163c4 <_dtoa_r+0xacc>
 80163ee:	bf00      	nop
 80163f0:	080194f1 	.word	0x080194f1
 80163f4:	080192cc 	.word	0x080192cc
 80163f8:	0801946e 	.word	0x0801946e

080163fc <rshift>:
 80163fc:	6903      	ldr	r3, [r0, #16]
 80163fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016406:	ea4f 1261 	mov.w	r2, r1, asr #5
 801640a:	f100 0414 	add.w	r4, r0, #20
 801640e:	dd45      	ble.n	801649c <rshift+0xa0>
 8016410:	f011 011f 	ands.w	r1, r1, #31
 8016414:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016418:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801641c:	d10c      	bne.n	8016438 <rshift+0x3c>
 801641e:	f100 0710 	add.w	r7, r0, #16
 8016422:	4629      	mov	r1, r5
 8016424:	42b1      	cmp	r1, r6
 8016426:	d334      	bcc.n	8016492 <rshift+0x96>
 8016428:	1a9b      	subs	r3, r3, r2
 801642a:	009b      	lsls	r3, r3, #2
 801642c:	1eea      	subs	r2, r5, #3
 801642e:	4296      	cmp	r6, r2
 8016430:	bf38      	it	cc
 8016432:	2300      	movcc	r3, #0
 8016434:	4423      	add	r3, r4
 8016436:	e015      	b.n	8016464 <rshift+0x68>
 8016438:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801643c:	f1c1 0820 	rsb	r8, r1, #32
 8016440:	40cf      	lsrs	r7, r1
 8016442:	f105 0e04 	add.w	lr, r5, #4
 8016446:	46a1      	mov	r9, r4
 8016448:	4576      	cmp	r6, lr
 801644a:	46f4      	mov	ip, lr
 801644c:	d815      	bhi.n	801647a <rshift+0x7e>
 801644e:	1a9b      	subs	r3, r3, r2
 8016450:	009a      	lsls	r2, r3, #2
 8016452:	3a04      	subs	r2, #4
 8016454:	3501      	adds	r5, #1
 8016456:	42ae      	cmp	r6, r5
 8016458:	bf38      	it	cc
 801645a:	2200      	movcc	r2, #0
 801645c:	18a3      	adds	r3, r4, r2
 801645e:	50a7      	str	r7, [r4, r2]
 8016460:	b107      	cbz	r7, 8016464 <rshift+0x68>
 8016462:	3304      	adds	r3, #4
 8016464:	1b1a      	subs	r2, r3, r4
 8016466:	42a3      	cmp	r3, r4
 8016468:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801646c:	bf08      	it	eq
 801646e:	2300      	moveq	r3, #0
 8016470:	6102      	str	r2, [r0, #16]
 8016472:	bf08      	it	eq
 8016474:	6143      	streq	r3, [r0, #20]
 8016476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801647a:	f8dc c000 	ldr.w	ip, [ip]
 801647e:	fa0c fc08 	lsl.w	ip, ip, r8
 8016482:	ea4c 0707 	orr.w	r7, ip, r7
 8016486:	f849 7b04 	str.w	r7, [r9], #4
 801648a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801648e:	40cf      	lsrs	r7, r1
 8016490:	e7da      	b.n	8016448 <rshift+0x4c>
 8016492:	f851 cb04 	ldr.w	ip, [r1], #4
 8016496:	f847 cf04 	str.w	ip, [r7, #4]!
 801649a:	e7c3      	b.n	8016424 <rshift+0x28>
 801649c:	4623      	mov	r3, r4
 801649e:	e7e1      	b.n	8016464 <rshift+0x68>

080164a0 <__hexdig_fun>:
 80164a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80164a4:	2b09      	cmp	r3, #9
 80164a6:	d802      	bhi.n	80164ae <__hexdig_fun+0xe>
 80164a8:	3820      	subs	r0, #32
 80164aa:	b2c0      	uxtb	r0, r0
 80164ac:	4770      	bx	lr
 80164ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80164b2:	2b05      	cmp	r3, #5
 80164b4:	d801      	bhi.n	80164ba <__hexdig_fun+0x1a>
 80164b6:	3847      	subs	r0, #71	; 0x47
 80164b8:	e7f7      	b.n	80164aa <__hexdig_fun+0xa>
 80164ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80164be:	2b05      	cmp	r3, #5
 80164c0:	d801      	bhi.n	80164c6 <__hexdig_fun+0x26>
 80164c2:	3827      	subs	r0, #39	; 0x27
 80164c4:	e7f1      	b.n	80164aa <__hexdig_fun+0xa>
 80164c6:	2000      	movs	r0, #0
 80164c8:	4770      	bx	lr
	...

080164cc <__gethex>:
 80164cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164d0:	ed2d 8b02 	vpush	{d8}
 80164d4:	b089      	sub	sp, #36	; 0x24
 80164d6:	ee08 0a10 	vmov	s16, r0
 80164da:	9304      	str	r3, [sp, #16]
 80164dc:	4bbc      	ldr	r3, [pc, #752]	; (80167d0 <__gethex+0x304>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	9301      	str	r3, [sp, #4]
 80164e2:	4618      	mov	r0, r3
 80164e4:	468b      	mov	fp, r1
 80164e6:	4690      	mov	r8, r2
 80164e8:	f7e9 fefa 	bl	80002e0 <strlen>
 80164ec:	9b01      	ldr	r3, [sp, #4]
 80164ee:	f8db 2000 	ldr.w	r2, [fp]
 80164f2:	4403      	add	r3, r0
 80164f4:	4682      	mov	sl, r0
 80164f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80164fa:	9305      	str	r3, [sp, #20]
 80164fc:	1c93      	adds	r3, r2, #2
 80164fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016502:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016506:	32fe      	adds	r2, #254	; 0xfe
 8016508:	18d1      	adds	r1, r2, r3
 801650a:	461f      	mov	r7, r3
 801650c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016510:	9100      	str	r1, [sp, #0]
 8016512:	2830      	cmp	r0, #48	; 0x30
 8016514:	d0f8      	beq.n	8016508 <__gethex+0x3c>
 8016516:	f7ff ffc3 	bl	80164a0 <__hexdig_fun>
 801651a:	4604      	mov	r4, r0
 801651c:	2800      	cmp	r0, #0
 801651e:	d13a      	bne.n	8016596 <__gethex+0xca>
 8016520:	9901      	ldr	r1, [sp, #4]
 8016522:	4652      	mov	r2, sl
 8016524:	4638      	mov	r0, r7
 8016526:	f001 f9ef 	bl	8017908 <strncmp>
 801652a:	4605      	mov	r5, r0
 801652c:	2800      	cmp	r0, #0
 801652e:	d168      	bne.n	8016602 <__gethex+0x136>
 8016530:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016534:	eb07 060a 	add.w	r6, r7, sl
 8016538:	f7ff ffb2 	bl	80164a0 <__hexdig_fun>
 801653c:	2800      	cmp	r0, #0
 801653e:	d062      	beq.n	8016606 <__gethex+0x13a>
 8016540:	4633      	mov	r3, r6
 8016542:	7818      	ldrb	r0, [r3, #0]
 8016544:	2830      	cmp	r0, #48	; 0x30
 8016546:	461f      	mov	r7, r3
 8016548:	f103 0301 	add.w	r3, r3, #1
 801654c:	d0f9      	beq.n	8016542 <__gethex+0x76>
 801654e:	f7ff ffa7 	bl	80164a0 <__hexdig_fun>
 8016552:	2301      	movs	r3, #1
 8016554:	fab0 f480 	clz	r4, r0
 8016558:	0964      	lsrs	r4, r4, #5
 801655a:	4635      	mov	r5, r6
 801655c:	9300      	str	r3, [sp, #0]
 801655e:	463a      	mov	r2, r7
 8016560:	4616      	mov	r6, r2
 8016562:	3201      	adds	r2, #1
 8016564:	7830      	ldrb	r0, [r6, #0]
 8016566:	f7ff ff9b 	bl	80164a0 <__hexdig_fun>
 801656a:	2800      	cmp	r0, #0
 801656c:	d1f8      	bne.n	8016560 <__gethex+0x94>
 801656e:	9901      	ldr	r1, [sp, #4]
 8016570:	4652      	mov	r2, sl
 8016572:	4630      	mov	r0, r6
 8016574:	f001 f9c8 	bl	8017908 <strncmp>
 8016578:	b980      	cbnz	r0, 801659c <__gethex+0xd0>
 801657a:	b94d      	cbnz	r5, 8016590 <__gethex+0xc4>
 801657c:	eb06 050a 	add.w	r5, r6, sl
 8016580:	462a      	mov	r2, r5
 8016582:	4616      	mov	r6, r2
 8016584:	3201      	adds	r2, #1
 8016586:	7830      	ldrb	r0, [r6, #0]
 8016588:	f7ff ff8a 	bl	80164a0 <__hexdig_fun>
 801658c:	2800      	cmp	r0, #0
 801658e:	d1f8      	bne.n	8016582 <__gethex+0xb6>
 8016590:	1bad      	subs	r5, r5, r6
 8016592:	00ad      	lsls	r5, r5, #2
 8016594:	e004      	b.n	80165a0 <__gethex+0xd4>
 8016596:	2400      	movs	r4, #0
 8016598:	4625      	mov	r5, r4
 801659a:	e7e0      	b.n	801655e <__gethex+0x92>
 801659c:	2d00      	cmp	r5, #0
 801659e:	d1f7      	bne.n	8016590 <__gethex+0xc4>
 80165a0:	7833      	ldrb	r3, [r6, #0]
 80165a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80165a6:	2b50      	cmp	r3, #80	; 0x50
 80165a8:	d13b      	bne.n	8016622 <__gethex+0x156>
 80165aa:	7873      	ldrb	r3, [r6, #1]
 80165ac:	2b2b      	cmp	r3, #43	; 0x2b
 80165ae:	d02c      	beq.n	801660a <__gethex+0x13e>
 80165b0:	2b2d      	cmp	r3, #45	; 0x2d
 80165b2:	d02e      	beq.n	8016612 <__gethex+0x146>
 80165b4:	1c71      	adds	r1, r6, #1
 80165b6:	f04f 0900 	mov.w	r9, #0
 80165ba:	7808      	ldrb	r0, [r1, #0]
 80165bc:	f7ff ff70 	bl	80164a0 <__hexdig_fun>
 80165c0:	1e43      	subs	r3, r0, #1
 80165c2:	b2db      	uxtb	r3, r3
 80165c4:	2b18      	cmp	r3, #24
 80165c6:	d82c      	bhi.n	8016622 <__gethex+0x156>
 80165c8:	f1a0 0210 	sub.w	r2, r0, #16
 80165cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80165d0:	f7ff ff66 	bl	80164a0 <__hexdig_fun>
 80165d4:	1e43      	subs	r3, r0, #1
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	2b18      	cmp	r3, #24
 80165da:	d91d      	bls.n	8016618 <__gethex+0x14c>
 80165dc:	f1b9 0f00 	cmp.w	r9, #0
 80165e0:	d000      	beq.n	80165e4 <__gethex+0x118>
 80165e2:	4252      	negs	r2, r2
 80165e4:	4415      	add	r5, r2
 80165e6:	f8cb 1000 	str.w	r1, [fp]
 80165ea:	b1e4      	cbz	r4, 8016626 <__gethex+0x15a>
 80165ec:	9b00      	ldr	r3, [sp, #0]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	bf14      	ite	ne
 80165f2:	2700      	movne	r7, #0
 80165f4:	2706      	moveq	r7, #6
 80165f6:	4638      	mov	r0, r7
 80165f8:	b009      	add	sp, #36	; 0x24
 80165fa:	ecbd 8b02 	vpop	{d8}
 80165fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016602:	463e      	mov	r6, r7
 8016604:	4625      	mov	r5, r4
 8016606:	2401      	movs	r4, #1
 8016608:	e7ca      	b.n	80165a0 <__gethex+0xd4>
 801660a:	f04f 0900 	mov.w	r9, #0
 801660e:	1cb1      	adds	r1, r6, #2
 8016610:	e7d3      	b.n	80165ba <__gethex+0xee>
 8016612:	f04f 0901 	mov.w	r9, #1
 8016616:	e7fa      	b.n	801660e <__gethex+0x142>
 8016618:	230a      	movs	r3, #10
 801661a:	fb03 0202 	mla	r2, r3, r2, r0
 801661e:	3a10      	subs	r2, #16
 8016620:	e7d4      	b.n	80165cc <__gethex+0x100>
 8016622:	4631      	mov	r1, r6
 8016624:	e7df      	b.n	80165e6 <__gethex+0x11a>
 8016626:	1bf3      	subs	r3, r6, r7
 8016628:	3b01      	subs	r3, #1
 801662a:	4621      	mov	r1, r4
 801662c:	2b07      	cmp	r3, #7
 801662e:	dc0b      	bgt.n	8016648 <__gethex+0x17c>
 8016630:	ee18 0a10 	vmov	r0, s16
 8016634:	f000 fa7e 	bl	8016b34 <_Balloc>
 8016638:	4604      	mov	r4, r0
 801663a:	b940      	cbnz	r0, 801664e <__gethex+0x182>
 801663c:	4b65      	ldr	r3, [pc, #404]	; (80167d4 <__gethex+0x308>)
 801663e:	4602      	mov	r2, r0
 8016640:	21de      	movs	r1, #222	; 0xde
 8016642:	4865      	ldr	r0, [pc, #404]	; (80167d8 <__gethex+0x30c>)
 8016644:	f001 f980 	bl	8017948 <__assert_func>
 8016648:	3101      	adds	r1, #1
 801664a:	105b      	asrs	r3, r3, #1
 801664c:	e7ee      	b.n	801662c <__gethex+0x160>
 801664e:	f100 0914 	add.w	r9, r0, #20
 8016652:	f04f 0b00 	mov.w	fp, #0
 8016656:	f1ca 0301 	rsb	r3, sl, #1
 801665a:	f8cd 9008 	str.w	r9, [sp, #8]
 801665e:	f8cd b000 	str.w	fp, [sp]
 8016662:	9306      	str	r3, [sp, #24]
 8016664:	42b7      	cmp	r7, r6
 8016666:	d340      	bcc.n	80166ea <__gethex+0x21e>
 8016668:	9802      	ldr	r0, [sp, #8]
 801666a:	9b00      	ldr	r3, [sp, #0]
 801666c:	f840 3b04 	str.w	r3, [r0], #4
 8016670:	eba0 0009 	sub.w	r0, r0, r9
 8016674:	1080      	asrs	r0, r0, #2
 8016676:	0146      	lsls	r6, r0, #5
 8016678:	6120      	str	r0, [r4, #16]
 801667a:	4618      	mov	r0, r3
 801667c:	f000 fb50 	bl	8016d20 <__hi0bits>
 8016680:	1a30      	subs	r0, r6, r0
 8016682:	f8d8 6000 	ldr.w	r6, [r8]
 8016686:	42b0      	cmp	r0, r6
 8016688:	dd63      	ble.n	8016752 <__gethex+0x286>
 801668a:	1b87      	subs	r7, r0, r6
 801668c:	4639      	mov	r1, r7
 801668e:	4620      	mov	r0, r4
 8016690:	f000 feeb 	bl	801746a <__any_on>
 8016694:	4682      	mov	sl, r0
 8016696:	b1a8      	cbz	r0, 80166c4 <__gethex+0x1f8>
 8016698:	1e7b      	subs	r3, r7, #1
 801669a:	1159      	asrs	r1, r3, #5
 801669c:	f003 021f 	and.w	r2, r3, #31
 80166a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80166a4:	f04f 0a01 	mov.w	sl, #1
 80166a8:	fa0a f202 	lsl.w	r2, sl, r2
 80166ac:	420a      	tst	r2, r1
 80166ae:	d009      	beq.n	80166c4 <__gethex+0x1f8>
 80166b0:	4553      	cmp	r3, sl
 80166b2:	dd05      	ble.n	80166c0 <__gethex+0x1f4>
 80166b4:	1eb9      	subs	r1, r7, #2
 80166b6:	4620      	mov	r0, r4
 80166b8:	f000 fed7 	bl	801746a <__any_on>
 80166bc:	2800      	cmp	r0, #0
 80166be:	d145      	bne.n	801674c <__gethex+0x280>
 80166c0:	f04f 0a02 	mov.w	sl, #2
 80166c4:	4639      	mov	r1, r7
 80166c6:	4620      	mov	r0, r4
 80166c8:	f7ff fe98 	bl	80163fc <rshift>
 80166cc:	443d      	add	r5, r7
 80166ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80166d2:	42ab      	cmp	r3, r5
 80166d4:	da4c      	bge.n	8016770 <__gethex+0x2a4>
 80166d6:	ee18 0a10 	vmov	r0, s16
 80166da:	4621      	mov	r1, r4
 80166dc:	f000 fa6a 	bl	8016bb4 <_Bfree>
 80166e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80166e2:	2300      	movs	r3, #0
 80166e4:	6013      	str	r3, [r2, #0]
 80166e6:	27a3      	movs	r7, #163	; 0xa3
 80166e8:	e785      	b.n	80165f6 <__gethex+0x12a>
 80166ea:	1e73      	subs	r3, r6, #1
 80166ec:	9a05      	ldr	r2, [sp, #20]
 80166ee:	9303      	str	r3, [sp, #12]
 80166f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80166f4:	4293      	cmp	r3, r2
 80166f6:	d019      	beq.n	801672c <__gethex+0x260>
 80166f8:	f1bb 0f20 	cmp.w	fp, #32
 80166fc:	d107      	bne.n	801670e <__gethex+0x242>
 80166fe:	9b02      	ldr	r3, [sp, #8]
 8016700:	9a00      	ldr	r2, [sp, #0]
 8016702:	f843 2b04 	str.w	r2, [r3], #4
 8016706:	9302      	str	r3, [sp, #8]
 8016708:	2300      	movs	r3, #0
 801670a:	9300      	str	r3, [sp, #0]
 801670c:	469b      	mov	fp, r3
 801670e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016712:	f7ff fec5 	bl	80164a0 <__hexdig_fun>
 8016716:	9b00      	ldr	r3, [sp, #0]
 8016718:	f000 000f 	and.w	r0, r0, #15
 801671c:	fa00 f00b 	lsl.w	r0, r0, fp
 8016720:	4303      	orrs	r3, r0
 8016722:	9300      	str	r3, [sp, #0]
 8016724:	f10b 0b04 	add.w	fp, fp, #4
 8016728:	9b03      	ldr	r3, [sp, #12]
 801672a:	e00d      	b.n	8016748 <__gethex+0x27c>
 801672c:	9b03      	ldr	r3, [sp, #12]
 801672e:	9a06      	ldr	r2, [sp, #24]
 8016730:	4413      	add	r3, r2
 8016732:	42bb      	cmp	r3, r7
 8016734:	d3e0      	bcc.n	80166f8 <__gethex+0x22c>
 8016736:	4618      	mov	r0, r3
 8016738:	9901      	ldr	r1, [sp, #4]
 801673a:	9307      	str	r3, [sp, #28]
 801673c:	4652      	mov	r2, sl
 801673e:	f001 f8e3 	bl	8017908 <strncmp>
 8016742:	9b07      	ldr	r3, [sp, #28]
 8016744:	2800      	cmp	r0, #0
 8016746:	d1d7      	bne.n	80166f8 <__gethex+0x22c>
 8016748:	461e      	mov	r6, r3
 801674a:	e78b      	b.n	8016664 <__gethex+0x198>
 801674c:	f04f 0a03 	mov.w	sl, #3
 8016750:	e7b8      	b.n	80166c4 <__gethex+0x1f8>
 8016752:	da0a      	bge.n	801676a <__gethex+0x29e>
 8016754:	1a37      	subs	r7, r6, r0
 8016756:	4621      	mov	r1, r4
 8016758:	ee18 0a10 	vmov	r0, s16
 801675c:	463a      	mov	r2, r7
 801675e:	f000 fc45 	bl	8016fec <__lshift>
 8016762:	1bed      	subs	r5, r5, r7
 8016764:	4604      	mov	r4, r0
 8016766:	f100 0914 	add.w	r9, r0, #20
 801676a:	f04f 0a00 	mov.w	sl, #0
 801676e:	e7ae      	b.n	80166ce <__gethex+0x202>
 8016770:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016774:	42a8      	cmp	r0, r5
 8016776:	dd72      	ble.n	801685e <__gethex+0x392>
 8016778:	1b45      	subs	r5, r0, r5
 801677a:	42ae      	cmp	r6, r5
 801677c:	dc36      	bgt.n	80167ec <__gethex+0x320>
 801677e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016782:	2b02      	cmp	r3, #2
 8016784:	d02a      	beq.n	80167dc <__gethex+0x310>
 8016786:	2b03      	cmp	r3, #3
 8016788:	d02c      	beq.n	80167e4 <__gethex+0x318>
 801678a:	2b01      	cmp	r3, #1
 801678c:	d115      	bne.n	80167ba <__gethex+0x2ee>
 801678e:	42ae      	cmp	r6, r5
 8016790:	d113      	bne.n	80167ba <__gethex+0x2ee>
 8016792:	2e01      	cmp	r6, #1
 8016794:	d10b      	bne.n	80167ae <__gethex+0x2e2>
 8016796:	9a04      	ldr	r2, [sp, #16]
 8016798:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801679c:	6013      	str	r3, [r2, #0]
 801679e:	2301      	movs	r3, #1
 80167a0:	6123      	str	r3, [r4, #16]
 80167a2:	f8c9 3000 	str.w	r3, [r9]
 80167a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80167a8:	2762      	movs	r7, #98	; 0x62
 80167aa:	601c      	str	r4, [r3, #0]
 80167ac:	e723      	b.n	80165f6 <__gethex+0x12a>
 80167ae:	1e71      	subs	r1, r6, #1
 80167b0:	4620      	mov	r0, r4
 80167b2:	f000 fe5a 	bl	801746a <__any_on>
 80167b6:	2800      	cmp	r0, #0
 80167b8:	d1ed      	bne.n	8016796 <__gethex+0x2ca>
 80167ba:	ee18 0a10 	vmov	r0, s16
 80167be:	4621      	mov	r1, r4
 80167c0:	f000 f9f8 	bl	8016bb4 <_Bfree>
 80167c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80167c6:	2300      	movs	r3, #0
 80167c8:	6013      	str	r3, [r2, #0]
 80167ca:	2750      	movs	r7, #80	; 0x50
 80167cc:	e713      	b.n	80165f6 <__gethex+0x12a>
 80167ce:	bf00      	nop
 80167d0:	0801956c 	.word	0x0801956c
 80167d4:	080194f1 	.word	0x080194f1
 80167d8:	08019502 	.word	0x08019502
 80167dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d1eb      	bne.n	80167ba <__gethex+0x2ee>
 80167e2:	e7d8      	b.n	8016796 <__gethex+0x2ca>
 80167e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d1d5      	bne.n	8016796 <__gethex+0x2ca>
 80167ea:	e7e6      	b.n	80167ba <__gethex+0x2ee>
 80167ec:	1e6f      	subs	r7, r5, #1
 80167ee:	f1ba 0f00 	cmp.w	sl, #0
 80167f2:	d131      	bne.n	8016858 <__gethex+0x38c>
 80167f4:	b127      	cbz	r7, 8016800 <__gethex+0x334>
 80167f6:	4639      	mov	r1, r7
 80167f8:	4620      	mov	r0, r4
 80167fa:	f000 fe36 	bl	801746a <__any_on>
 80167fe:	4682      	mov	sl, r0
 8016800:	117b      	asrs	r3, r7, #5
 8016802:	2101      	movs	r1, #1
 8016804:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016808:	f007 071f 	and.w	r7, r7, #31
 801680c:	fa01 f707 	lsl.w	r7, r1, r7
 8016810:	421f      	tst	r7, r3
 8016812:	4629      	mov	r1, r5
 8016814:	4620      	mov	r0, r4
 8016816:	bf18      	it	ne
 8016818:	f04a 0a02 	orrne.w	sl, sl, #2
 801681c:	1b76      	subs	r6, r6, r5
 801681e:	f7ff fded 	bl	80163fc <rshift>
 8016822:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016826:	2702      	movs	r7, #2
 8016828:	f1ba 0f00 	cmp.w	sl, #0
 801682c:	d048      	beq.n	80168c0 <__gethex+0x3f4>
 801682e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016832:	2b02      	cmp	r3, #2
 8016834:	d015      	beq.n	8016862 <__gethex+0x396>
 8016836:	2b03      	cmp	r3, #3
 8016838:	d017      	beq.n	801686a <__gethex+0x39e>
 801683a:	2b01      	cmp	r3, #1
 801683c:	d109      	bne.n	8016852 <__gethex+0x386>
 801683e:	f01a 0f02 	tst.w	sl, #2
 8016842:	d006      	beq.n	8016852 <__gethex+0x386>
 8016844:	f8d9 0000 	ldr.w	r0, [r9]
 8016848:	ea4a 0a00 	orr.w	sl, sl, r0
 801684c:	f01a 0f01 	tst.w	sl, #1
 8016850:	d10e      	bne.n	8016870 <__gethex+0x3a4>
 8016852:	f047 0710 	orr.w	r7, r7, #16
 8016856:	e033      	b.n	80168c0 <__gethex+0x3f4>
 8016858:	f04f 0a01 	mov.w	sl, #1
 801685c:	e7d0      	b.n	8016800 <__gethex+0x334>
 801685e:	2701      	movs	r7, #1
 8016860:	e7e2      	b.n	8016828 <__gethex+0x35c>
 8016862:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016864:	f1c3 0301 	rsb	r3, r3, #1
 8016868:	9315      	str	r3, [sp, #84]	; 0x54
 801686a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801686c:	2b00      	cmp	r3, #0
 801686e:	d0f0      	beq.n	8016852 <__gethex+0x386>
 8016870:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016874:	f104 0314 	add.w	r3, r4, #20
 8016878:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801687c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016880:	f04f 0c00 	mov.w	ip, #0
 8016884:	4618      	mov	r0, r3
 8016886:	f853 2b04 	ldr.w	r2, [r3], #4
 801688a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801688e:	d01c      	beq.n	80168ca <__gethex+0x3fe>
 8016890:	3201      	adds	r2, #1
 8016892:	6002      	str	r2, [r0, #0]
 8016894:	2f02      	cmp	r7, #2
 8016896:	f104 0314 	add.w	r3, r4, #20
 801689a:	d13f      	bne.n	801691c <__gethex+0x450>
 801689c:	f8d8 2000 	ldr.w	r2, [r8]
 80168a0:	3a01      	subs	r2, #1
 80168a2:	42b2      	cmp	r2, r6
 80168a4:	d10a      	bne.n	80168bc <__gethex+0x3f0>
 80168a6:	1171      	asrs	r1, r6, #5
 80168a8:	2201      	movs	r2, #1
 80168aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80168ae:	f006 061f 	and.w	r6, r6, #31
 80168b2:	fa02 f606 	lsl.w	r6, r2, r6
 80168b6:	421e      	tst	r6, r3
 80168b8:	bf18      	it	ne
 80168ba:	4617      	movne	r7, r2
 80168bc:	f047 0720 	orr.w	r7, r7, #32
 80168c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80168c2:	601c      	str	r4, [r3, #0]
 80168c4:	9b04      	ldr	r3, [sp, #16]
 80168c6:	601d      	str	r5, [r3, #0]
 80168c8:	e695      	b.n	80165f6 <__gethex+0x12a>
 80168ca:	4299      	cmp	r1, r3
 80168cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80168d0:	d8d8      	bhi.n	8016884 <__gethex+0x3b8>
 80168d2:	68a3      	ldr	r3, [r4, #8]
 80168d4:	459b      	cmp	fp, r3
 80168d6:	db19      	blt.n	801690c <__gethex+0x440>
 80168d8:	6861      	ldr	r1, [r4, #4]
 80168da:	ee18 0a10 	vmov	r0, s16
 80168de:	3101      	adds	r1, #1
 80168e0:	f000 f928 	bl	8016b34 <_Balloc>
 80168e4:	4681      	mov	r9, r0
 80168e6:	b918      	cbnz	r0, 80168f0 <__gethex+0x424>
 80168e8:	4b1a      	ldr	r3, [pc, #104]	; (8016954 <__gethex+0x488>)
 80168ea:	4602      	mov	r2, r0
 80168ec:	2184      	movs	r1, #132	; 0x84
 80168ee:	e6a8      	b.n	8016642 <__gethex+0x176>
 80168f0:	6922      	ldr	r2, [r4, #16]
 80168f2:	3202      	adds	r2, #2
 80168f4:	f104 010c 	add.w	r1, r4, #12
 80168f8:	0092      	lsls	r2, r2, #2
 80168fa:	300c      	adds	r0, #12
 80168fc:	f000 f90c 	bl	8016b18 <memcpy>
 8016900:	4621      	mov	r1, r4
 8016902:	ee18 0a10 	vmov	r0, s16
 8016906:	f000 f955 	bl	8016bb4 <_Bfree>
 801690a:	464c      	mov	r4, r9
 801690c:	6923      	ldr	r3, [r4, #16]
 801690e:	1c5a      	adds	r2, r3, #1
 8016910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016914:	6122      	str	r2, [r4, #16]
 8016916:	2201      	movs	r2, #1
 8016918:	615a      	str	r2, [r3, #20]
 801691a:	e7bb      	b.n	8016894 <__gethex+0x3c8>
 801691c:	6922      	ldr	r2, [r4, #16]
 801691e:	455a      	cmp	r2, fp
 8016920:	dd0b      	ble.n	801693a <__gethex+0x46e>
 8016922:	2101      	movs	r1, #1
 8016924:	4620      	mov	r0, r4
 8016926:	f7ff fd69 	bl	80163fc <rshift>
 801692a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801692e:	3501      	adds	r5, #1
 8016930:	42ab      	cmp	r3, r5
 8016932:	f6ff aed0 	blt.w	80166d6 <__gethex+0x20a>
 8016936:	2701      	movs	r7, #1
 8016938:	e7c0      	b.n	80168bc <__gethex+0x3f0>
 801693a:	f016 061f 	ands.w	r6, r6, #31
 801693e:	d0fa      	beq.n	8016936 <__gethex+0x46a>
 8016940:	449a      	add	sl, r3
 8016942:	f1c6 0620 	rsb	r6, r6, #32
 8016946:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801694a:	f000 f9e9 	bl	8016d20 <__hi0bits>
 801694e:	42b0      	cmp	r0, r6
 8016950:	dbe7      	blt.n	8016922 <__gethex+0x456>
 8016952:	e7f0      	b.n	8016936 <__gethex+0x46a>
 8016954:	080194f1 	.word	0x080194f1

08016958 <L_shift>:
 8016958:	f1c2 0208 	rsb	r2, r2, #8
 801695c:	0092      	lsls	r2, r2, #2
 801695e:	b570      	push	{r4, r5, r6, lr}
 8016960:	f1c2 0620 	rsb	r6, r2, #32
 8016964:	6843      	ldr	r3, [r0, #4]
 8016966:	6804      	ldr	r4, [r0, #0]
 8016968:	fa03 f506 	lsl.w	r5, r3, r6
 801696c:	432c      	orrs	r4, r5
 801696e:	40d3      	lsrs	r3, r2
 8016970:	6004      	str	r4, [r0, #0]
 8016972:	f840 3f04 	str.w	r3, [r0, #4]!
 8016976:	4288      	cmp	r0, r1
 8016978:	d3f4      	bcc.n	8016964 <L_shift+0xc>
 801697a:	bd70      	pop	{r4, r5, r6, pc}

0801697c <__match>:
 801697c:	b530      	push	{r4, r5, lr}
 801697e:	6803      	ldr	r3, [r0, #0]
 8016980:	3301      	adds	r3, #1
 8016982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016986:	b914      	cbnz	r4, 801698e <__match+0x12>
 8016988:	6003      	str	r3, [r0, #0]
 801698a:	2001      	movs	r0, #1
 801698c:	bd30      	pop	{r4, r5, pc}
 801698e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016992:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016996:	2d19      	cmp	r5, #25
 8016998:	bf98      	it	ls
 801699a:	3220      	addls	r2, #32
 801699c:	42a2      	cmp	r2, r4
 801699e:	d0f0      	beq.n	8016982 <__match+0x6>
 80169a0:	2000      	movs	r0, #0
 80169a2:	e7f3      	b.n	801698c <__match+0x10>

080169a4 <__hexnan>:
 80169a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a8:	680b      	ldr	r3, [r1, #0]
 80169aa:	6801      	ldr	r1, [r0, #0]
 80169ac:	115e      	asrs	r6, r3, #5
 80169ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80169b2:	f013 031f 	ands.w	r3, r3, #31
 80169b6:	b087      	sub	sp, #28
 80169b8:	bf18      	it	ne
 80169ba:	3604      	addne	r6, #4
 80169bc:	2500      	movs	r5, #0
 80169be:	1f37      	subs	r7, r6, #4
 80169c0:	4682      	mov	sl, r0
 80169c2:	4690      	mov	r8, r2
 80169c4:	9301      	str	r3, [sp, #4]
 80169c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80169ca:	46b9      	mov	r9, r7
 80169cc:	463c      	mov	r4, r7
 80169ce:	9502      	str	r5, [sp, #8]
 80169d0:	46ab      	mov	fp, r5
 80169d2:	784a      	ldrb	r2, [r1, #1]
 80169d4:	1c4b      	adds	r3, r1, #1
 80169d6:	9303      	str	r3, [sp, #12]
 80169d8:	b342      	cbz	r2, 8016a2c <__hexnan+0x88>
 80169da:	4610      	mov	r0, r2
 80169dc:	9105      	str	r1, [sp, #20]
 80169de:	9204      	str	r2, [sp, #16]
 80169e0:	f7ff fd5e 	bl	80164a0 <__hexdig_fun>
 80169e4:	2800      	cmp	r0, #0
 80169e6:	d14f      	bne.n	8016a88 <__hexnan+0xe4>
 80169e8:	9a04      	ldr	r2, [sp, #16]
 80169ea:	9905      	ldr	r1, [sp, #20]
 80169ec:	2a20      	cmp	r2, #32
 80169ee:	d818      	bhi.n	8016a22 <__hexnan+0x7e>
 80169f0:	9b02      	ldr	r3, [sp, #8]
 80169f2:	459b      	cmp	fp, r3
 80169f4:	dd13      	ble.n	8016a1e <__hexnan+0x7a>
 80169f6:	454c      	cmp	r4, r9
 80169f8:	d206      	bcs.n	8016a08 <__hexnan+0x64>
 80169fa:	2d07      	cmp	r5, #7
 80169fc:	dc04      	bgt.n	8016a08 <__hexnan+0x64>
 80169fe:	462a      	mov	r2, r5
 8016a00:	4649      	mov	r1, r9
 8016a02:	4620      	mov	r0, r4
 8016a04:	f7ff ffa8 	bl	8016958 <L_shift>
 8016a08:	4544      	cmp	r4, r8
 8016a0a:	d950      	bls.n	8016aae <__hexnan+0x10a>
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	f1a4 0904 	sub.w	r9, r4, #4
 8016a12:	f844 3c04 	str.w	r3, [r4, #-4]
 8016a16:	f8cd b008 	str.w	fp, [sp, #8]
 8016a1a:	464c      	mov	r4, r9
 8016a1c:	461d      	mov	r5, r3
 8016a1e:	9903      	ldr	r1, [sp, #12]
 8016a20:	e7d7      	b.n	80169d2 <__hexnan+0x2e>
 8016a22:	2a29      	cmp	r2, #41	; 0x29
 8016a24:	d156      	bne.n	8016ad4 <__hexnan+0x130>
 8016a26:	3102      	adds	r1, #2
 8016a28:	f8ca 1000 	str.w	r1, [sl]
 8016a2c:	f1bb 0f00 	cmp.w	fp, #0
 8016a30:	d050      	beq.n	8016ad4 <__hexnan+0x130>
 8016a32:	454c      	cmp	r4, r9
 8016a34:	d206      	bcs.n	8016a44 <__hexnan+0xa0>
 8016a36:	2d07      	cmp	r5, #7
 8016a38:	dc04      	bgt.n	8016a44 <__hexnan+0xa0>
 8016a3a:	462a      	mov	r2, r5
 8016a3c:	4649      	mov	r1, r9
 8016a3e:	4620      	mov	r0, r4
 8016a40:	f7ff ff8a 	bl	8016958 <L_shift>
 8016a44:	4544      	cmp	r4, r8
 8016a46:	d934      	bls.n	8016ab2 <__hexnan+0x10e>
 8016a48:	f1a8 0204 	sub.w	r2, r8, #4
 8016a4c:	4623      	mov	r3, r4
 8016a4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8016a52:	f842 1f04 	str.w	r1, [r2, #4]!
 8016a56:	429f      	cmp	r7, r3
 8016a58:	d2f9      	bcs.n	8016a4e <__hexnan+0xaa>
 8016a5a:	1b3b      	subs	r3, r7, r4
 8016a5c:	f023 0303 	bic.w	r3, r3, #3
 8016a60:	3304      	adds	r3, #4
 8016a62:	3401      	adds	r4, #1
 8016a64:	3e03      	subs	r6, #3
 8016a66:	42b4      	cmp	r4, r6
 8016a68:	bf88      	it	hi
 8016a6a:	2304      	movhi	r3, #4
 8016a6c:	4443      	add	r3, r8
 8016a6e:	2200      	movs	r2, #0
 8016a70:	f843 2b04 	str.w	r2, [r3], #4
 8016a74:	429f      	cmp	r7, r3
 8016a76:	d2fb      	bcs.n	8016a70 <__hexnan+0xcc>
 8016a78:	683b      	ldr	r3, [r7, #0]
 8016a7a:	b91b      	cbnz	r3, 8016a84 <__hexnan+0xe0>
 8016a7c:	4547      	cmp	r7, r8
 8016a7e:	d127      	bne.n	8016ad0 <__hexnan+0x12c>
 8016a80:	2301      	movs	r3, #1
 8016a82:	603b      	str	r3, [r7, #0]
 8016a84:	2005      	movs	r0, #5
 8016a86:	e026      	b.n	8016ad6 <__hexnan+0x132>
 8016a88:	3501      	adds	r5, #1
 8016a8a:	2d08      	cmp	r5, #8
 8016a8c:	f10b 0b01 	add.w	fp, fp, #1
 8016a90:	dd06      	ble.n	8016aa0 <__hexnan+0xfc>
 8016a92:	4544      	cmp	r4, r8
 8016a94:	d9c3      	bls.n	8016a1e <__hexnan+0x7a>
 8016a96:	2300      	movs	r3, #0
 8016a98:	f844 3c04 	str.w	r3, [r4, #-4]
 8016a9c:	2501      	movs	r5, #1
 8016a9e:	3c04      	subs	r4, #4
 8016aa0:	6822      	ldr	r2, [r4, #0]
 8016aa2:	f000 000f 	and.w	r0, r0, #15
 8016aa6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016aaa:	6022      	str	r2, [r4, #0]
 8016aac:	e7b7      	b.n	8016a1e <__hexnan+0x7a>
 8016aae:	2508      	movs	r5, #8
 8016ab0:	e7b5      	b.n	8016a1e <__hexnan+0x7a>
 8016ab2:	9b01      	ldr	r3, [sp, #4]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d0df      	beq.n	8016a78 <__hexnan+0xd4>
 8016ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8016abc:	f1c3 0320 	rsb	r3, r3, #32
 8016ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8016ac4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016ac8:	401a      	ands	r2, r3
 8016aca:	f846 2c04 	str.w	r2, [r6, #-4]
 8016ace:	e7d3      	b.n	8016a78 <__hexnan+0xd4>
 8016ad0:	3f04      	subs	r7, #4
 8016ad2:	e7d1      	b.n	8016a78 <__hexnan+0xd4>
 8016ad4:	2004      	movs	r0, #4
 8016ad6:	b007      	add	sp, #28
 8016ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016adc <_localeconv_r>:
 8016adc:	4800      	ldr	r0, [pc, #0]	; (8016ae0 <_localeconv_r+0x4>)
 8016ade:	4770      	bx	lr
 8016ae0:	24000178 	.word	0x24000178

08016ae4 <malloc>:
 8016ae4:	4b02      	ldr	r3, [pc, #8]	; (8016af0 <malloc+0xc>)
 8016ae6:	4601      	mov	r1, r0
 8016ae8:	6818      	ldr	r0, [r3, #0]
 8016aea:	f000 bd3f 	b.w	801756c <_malloc_r>
 8016aee:	bf00      	nop
 8016af0:	24000020 	.word	0x24000020

08016af4 <__ascii_mbtowc>:
 8016af4:	b082      	sub	sp, #8
 8016af6:	b901      	cbnz	r1, 8016afa <__ascii_mbtowc+0x6>
 8016af8:	a901      	add	r1, sp, #4
 8016afa:	b142      	cbz	r2, 8016b0e <__ascii_mbtowc+0x1a>
 8016afc:	b14b      	cbz	r3, 8016b12 <__ascii_mbtowc+0x1e>
 8016afe:	7813      	ldrb	r3, [r2, #0]
 8016b00:	600b      	str	r3, [r1, #0]
 8016b02:	7812      	ldrb	r2, [r2, #0]
 8016b04:	1e10      	subs	r0, r2, #0
 8016b06:	bf18      	it	ne
 8016b08:	2001      	movne	r0, #1
 8016b0a:	b002      	add	sp, #8
 8016b0c:	4770      	bx	lr
 8016b0e:	4610      	mov	r0, r2
 8016b10:	e7fb      	b.n	8016b0a <__ascii_mbtowc+0x16>
 8016b12:	f06f 0001 	mvn.w	r0, #1
 8016b16:	e7f8      	b.n	8016b0a <__ascii_mbtowc+0x16>

08016b18 <memcpy>:
 8016b18:	440a      	add	r2, r1
 8016b1a:	4291      	cmp	r1, r2
 8016b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016b20:	d100      	bne.n	8016b24 <memcpy+0xc>
 8016b22:	4770      	bx	lr
 8016b24:	b510      	push	{r4, lr}
 8016b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b2e:	4291      	cmp	r1, r2
 8016b30:	d1f9      	bne.n	8016b26 <memcpy+0xe>
 8016b32:	bd10      	pop	{r4, pc}

08016b34 <_Balloc>:
 8016b34:	b570      	push	{r4, r5, r6, lr}
 8016b36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016b38:	4604      	mov	r4, r0
 8016b3a:	460d      	mov	r5, r1
 8016b3c:	b976      	cbnz	r6, 8016b5c <_Balloc+0x28>
 8016b3e:	2010      	movs	r0, #16
 8016b40:	f7ff ffd0 	bl	8016ae4 <malloc>
 8016b44:	4602      	mov	r2, r0
 8016b46:	6260      	str	r0, [r4, #36]	; 0x24
 8016b48:	b920      	cbnz	r0, 8016b54 <_Balloc+0x20>
 8016b4a:	4b18      	ldr	r3, [pc, #96]	; (8016bac <_Balloc+0x78>)
 8016b4c:	4818      	ldr	r0, [pc, #96]	; (8016bb0 <_Balloc+0x7c>)
 8016b4e:	2166      	movs	r1, #102	; 0x66
 8016b50:	f000 fefa 	bl	8017948 <__assert_func>
 8016b54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016b58:	6006      	str	r6, [r0, #0]
 8016b5a:	60c6      	str	r6, [r0, #12]
 8016b5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016b5e:	68f3      	ldr	r3, [r6, #12]
 8016b60:	b183      	cbz	r3, 8016b84 <_Balloc+0x50>
 8016b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b64:	68db      	ldr	r3, [r3, #12]
 8016b66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016b6a:	b9b8      	cbnz	r0, 8016b9c <_Balloc+0x68>
 8016b6c:	2101      	movs	r1, #1
 8016b6e:	fa01 f605 	lsl.w	r6, r1, r5
 8016b72:	1d72      	adds	r2, r6, #5
 8016b74:	0092      	lsls	r2, r2, #2
 8016b76:	4620      	mov	r0, r4
 8016b78:	f000 fc98 	bl	80174ac <_calloc_r>
 8016b7c:	b160      	cbz	r0, 8016b98 <_Balloc+0x64>
 8016b7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016b82:	e00e      	b.n	8016ba2 <_Balloc+0x6e>
 8016b84:	2221      	movs	r2, #33	; 0x21
 8016b86:	2104      	movs	r1, #4
 8016b88:	4620      	mov	r0, r4
 8016b8a:	f000 fc8f 	bl	80174ac <_calloc_r>
 8016b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b90:	60f0      	str	r0, [r6, #12]
 8016b92:	68db      	ldr	r3, [r3, #12]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d1e4      	bne.n	8016b62 <_Balloc+0x2e>
 8016b98:	2000      	movs	r0, #0
 8016b9a:	bd70      	pop	{r4, r5, r6, pc}
 8016b9c:	6802      	ldr	r2, [r0, #0]
 8016b9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016ba8:	e7f7      	b.n	8016b9a <_Balloc+0x66>
 8016baa:	bf00      	nop
 8016bac:	0801947b 	.word	0x0801947b
 8016bb0:	08019580 	.word	0x08019580

08016bb4 <_Bfree>:
 8016bb4:	b570      	push	{r4, r5, r6, lr}
 8016bb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016bb8:	4605      	mov	r5, r0
 8016bba:	460c      	mov	r4, r1
 8016bbc:	b976      	cbnz	r6, 8016bdc <_Bfree+0x28>
 8016bbe:	2010      	movs	r0, #16
 8016bc0:	f7ff ff90 	bl	8016ae4 <malloc>
 8016bc4:	4602      	mov	r2, r0
 8016bc6:	6268      	str	r0, [r5, #36]	; 0x24
 8016bc8:	b920      	cbnz	r0, 8016bd4 <_Bfree+0x20>
 8016bca:	4b09      	ldr	r3, [pc, #36]	; (8016bf0 <_Bfree+0x3c>)
 8016bcc:	4809      	ldr	r0, [pc, #36]	; (8016bf4 <_Bfree+0x40>)
 8016bce:	218a      	movs	r1, #138	; 0x8a
 8016bd0:	f000 feba 	bl	8017948 <__assert_func>
 8016bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016bd8:	6006      	str	r6, [r0, #0]
 8016bda:	60c6      	str	r6, [r0, #12]
 8016bdc:	b13c      	cbz	r4, 8016bee <_Bfree+0x3a>
 8016bde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016be0:	6862      	ldr	r2, [r4, #4]
 8016be2:	68db      	ldr	r3, [r3, #12]
 8016be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016be8:	6021      	str	r1, [r4, #0]
 8016bea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016bee:	bd70      	pop	{r4, r5, r6, pc}
 8016bf0:	0801947b 	.word	0x0801947b
 8016bf4:	08019580 	.word	0x08019580

08016bf8 <__multadd>:
 8016bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bfc:	690e      	ldr	r6, [r1, #16]
 8016bfe:	4607      	mov	r7, r0
 8016c00:	4698      	mov	r8, r3
 8016c02:	460c      	mov	r4, r1
 8016c04:	f101 0014 	add.w	r0, r1, #20
 8016c08:	2300      	movs	r3, #0
 8016c0a:	6805      	ldr	r5, [r0, #0]
 8016c0c:	b2a9      	uxth	r1, r5
 8016c0e:	fb02 8101 	mla	r1, r2, r1, r8
 8016c12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8016c16:	0c2d      	lsrs	r5, r5, #16
 8016c18:	fb02 c505 	mla	r5, r2, r5, ip
 8016c1c:	b289      	uxth	r1, r1
 8016c1e:	3301      	adds	r3, #1
 8016c20:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016c24:	429e      	cmp	r6, r3
 8016c26:	f840 1b04 	str.w	r1, [r0], #4
 8016c2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8016c2e:	dcec      	bgt.n	8016c0a <__multadd+0x12>
 8016c30:	f1b8 0f00 	cmp.w	r8, #0
 8016c34:	d022      	beq.n	8016c7c <__multadd+0x84>
 8016c36:	68a3      	ldr	r3, [r4, #8]
 8016c38:	42b3      	cmp	r3, r6
 8016c3a:	dc19      	bgt.n	8016c70 <__multadd+0x78>
 8016c3c:	6861      	ldr	r1, [r4, #4]
 8016c3e:	4638      	mov	r0, r7
 8016c40:	3101      	adds	r1, #1
 8016c42:	f7ff ff77 	bl	8016b34 <_Balloc>
 8016c46:	4605      	mov	r5, r0
 8016c48:	b928      	cbnz	r0, 8016c56 <__multadd+0x5e>
 8016c4a:	4602      	mov	r2, r0
 8016c4c:	4b0d      	ldr	r3, [pc, #52]	; (8016c84 <__multadd+0x8c>)
 8016c4e:	480e      	ldr	r0, [pc, #56]	; (8016c88 <__multadd+0x90>)
 8016c50:	21b5      	movs	r1, #181	; 0xb5
 8016c52:	f000 fe79 	bl	8017948 <__assert_func>
 8016c56:	6922      	ldr	r2, [r4, #16]
 8016c58:	3202      	adds	r2, #2
 8016c5a:	f104 010c 	add.w	r1, r4, #12
 8016c5e:	0092      	lsls	r2, r2, #2
 8016c60:	300c      	adds	r0, #12
 8016c62:	f7ff ff59 	bl	8016b18 <memcpy>
 8016c66:	4621      	mov	r1, r4
 8016c68:	4638      	mov	r0, r7
 8016c6a:	f7ff ffa3 	bl	8016bb4 <_Bfree>
 8016c6e:	462c      	mov	r4, r5
 8016c70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016c74:	3601      	adds	r6, #1
 8016c76:	f8c3 8014 	str.w	r8, [r3, #20]
 8016c7a:	6126      	str	r6, [r4, #16]
 8016c7c:	4620      	mov	r0, r4
 8016c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c82:	bf00      	nop
 8016c84:	080194f1 	.word	0x080194f1
 8016c88:	08019580 	.word	0x08019580

08016c8c <__s2b>:
 8016c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c90:	460c      	mov	r4, r1
 8016c92:	4615      	mov	r5, r2
 8016c94:	461f      	mov	r7, r3
 8016c96:	2209      	movs	r2, #9
 8016c98:	3308      	adds	r3, #8
 8016c9a:	4606      	mov	r6, r0
 8016c9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016ca0:	2100      	movs	r1, #0
 8016ca2:	2201      	movs	r2, #1
 8016ca4:	429a      	cmp	r2, r3
 8016ca6:	db09      	blt.n	8016cbc <__s2b+0x30>
 8016ca8:	4630      	mov	r0, r6
 8016caa:	f7ff ff43 	bl	8016b34 <_Balloc>
 8016cae:	b940      	cbnz	r0, 8016cc2 <__s2b+0x36>
 8016cb0:	4602      	mov	r2, r0
 8016cb2:	4b19      	ldr	r3, [pc, #100]	; (8016d18 <__s2b+0x8c>)
 8016cb4:	4819      	ldr	r0, [pc, #100]	; (8016d1c <__s2b+0x90>)
 8016cb6:	21ce      	movs	r1, #206	; 0xce
 8016cb8:	f000 fe46 	bl	8017948 <__assert_func>
 8016cbc:	0052      	lsls	r2, r2, #1
 8016cbe:	3101      	adds	r1, #1
 8016cc0:	e7f0      	b.n	8016ca4 <__s2b+0x18>
 8016cc2:	9b08      	ldr	r3, [sp, #32]
 8016cc4:	6143      	str	r3, [r0, #20]
 8016cc6:	2d09      	cmp	r5, #9
 8016cc8:	f04f 0301 	mov.w	r3, #1
 8016ccc:	6103      	str	r3, [r0, #16]
 8016cce:	dd16      	ble.n	8016cfe <__s2b+0x72>
 8016cd0:	f104 0909 	add.w	r9, r4, #9
 8016cd4:	46c8      	mov	r8, r9
 8016cd6:	442c      	add	r4, r5
 8016cd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016cdc:	4601      	mov	r1, r0
 8016cde:	3b30      	subs	r3, #48	; 0x30
 8016ce0:	220a      	movs	r2, #10
 8016ce2:	4630      	mov	r0, r6
 8016ce4:	f7ff ff88 	bl	8016bf8 <__multadd>
 8016ce8:	45a0      	cmp	r8, r4
 8016cea:	d1f5      	bne.n	8016cd8 <__s2b+0x4c>
 8016cec:	f1a5 0408 	sub.w	r4, r5, #8
 8016cf0:	444c      	add	r4, r9
 8016cf2:	1b2d      	subs	r5, r5, r4
 8016cf4:	1963      	adds	r3, r4, r5
 8016cf6:	42bb      	cmp	r3, r7
 8016cf8:	db04      	blt.n	8016d04 <__s2b+0x78>
 8016cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cfe:	340a      	adds	r4, #10
 8016d00:	2509      	movs	r5, #9
 8016d02:	e7f6      	b.n	8016cf2 <__s2b+0x66>
 8016d04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016d08:	4601      	mov	r1, r0
 8016d0a:	3b30      	subs	r3, #48	; 0x30
 8016d0c:	220a      	movs	r2, #10
 8016d0e:	4630      	mov	r0, r6
 8016d10:	f7ff ff72 	bl	8016bf8 <__multadd>
 8016d14:	e7ee      	b.n	8016cf4 <__s2b+0x68>
 8016d16:	bf00      	nop
 8016d18:	080194f1 	.word	0x080194f1
 8016d1c:	08019580 	.word	0x08019580

08016d20 <__hi0bits>:
 8016d20:	0c03      	lsrs	r3, r0, #16
 8016d22:	041b      	lsls	r3, r3, #16
 8016d24:	b9d3      	cbnz	r3, 8016d5c <__hi0bits+0x3c>
 8016d26:	0400      	lsls	r0, r0, #16
 8016d28:	2310      	movs	r3, #16
 8016d2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016d2e:	bf04      	itt	eq
 8016d30:	0200      	lsleq	r0, r0, #8
 8016d32:	3308      	addeq	r3, #8
 8016d34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016d38:	bf04      	itt	eq
 8016d3a:	0100      	lsleq	r0, r0, #4
 8016d3c:	3304      	addeq	r3, #4
 8016d3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016d42:	bf04      	itt	eq
 8016d44:	0080      	lsleq	r0, r0, #2
 8016d46:	3302      	addeq	r3, #2
 8016d48:	2800      	cmp	r0, #0
 8016d4a:	db05      	blt.n	8016d58 <__hi0bits+0x38>
 8016d4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016d50:	f103 0301 	add.w	r3, r3, #1
 8016d54:	bf08      	it	eq
 8016d56:	2320      	moveq	r3, #32
 8016d58:	4618      	mov	r0, r3
 8016d5a:	4770      	bx	lr
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	e7e4      	b.n	8016d2a <__hi0bits+0xa>

08016d60 <__lo0bits>:
 8016d60:	6803      	ldr	r3, [r0, #0]
 8016d62:	f013 0207 	ands.w	r2, r3, #7
 8016d66:	4601      	mov	r1, r0
 8016d68:	d00b      	beq.n	8016d82 <__lo0bits+0x22>
 8016d6a:	07da      	lsls	r2, r3, #31
 8016d6c:	d424      	bmi.n	8016db8 <__lo0bits+0x58>
 8016d6e:	0798      	lsls	r0, r3, #30
 8016d70:	bf49      	itett	mi
 8016d72:	085b      	lsrmi	r3, r3, #1
 8016d74:	089b      	lsrpl	r3, r3, #2
 8016d76:	2001      	movmi	r0, #1
 8016d78:	600b      	strmi	r3, [r1, #0]
 8016d7a:	bf5c      	itt	pl
 8016d7c:	600b      	strpl	r3, [r1, #0]
 8016d7e:	2002      	movpl	r0, #2
 8016d80:	4770      	bx	lr
 8016d82:	b298      	uxth	r0, r3
 8016d84:	b9b0      	cbnz	r0, 8016db4 <__lo0bits+0x54>
 8016d86:	0c1b      	lsrs	r3, r3, #16
 8016d88:	2010      	movs	r0, #16
 8016d8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016d8e:	bf04      	itt	eq
 8016d90:	0a1b      	lsreq	r3, r3, #8
 8016d92:	3008      	addeq	r0, #8
 8016d94:	071a      	lsls	r2, r3, #28
 8016d96:	bf04      	itt	eq
 8016d98:	091b      	lsreq	r3, r3, #4
 8016d9a:	3004      	addeq	r0, #4
 8016d9c:	079a      	lsls	r2, r3, #30
 8016d9e:	bf04      	itt	eq
 8016da0:	089b      	lsreq	r3, r3, #2
 8016da2:	3002      	addeq	r0, #2
 8016da4:	07da      	lsls	r2, r3, #31
 8016da6:	d403      	bmi.n	8016db0 <__lo0bits+0x50>
 8016da8:	085b      	lsrs	r3, r3, #1
 8016daa:	f100 0001 	add.w	r0, r0, #1
 8016dae:	d005      	beq.n	8016dbc <__lo0bits+0x5c>
 8016db0:	600b      	str	r3, [r1, #0]
 8016db2:	4770      	bx	lr
 8016db4:	4610      	mov	r0, r2
 8016db6:	e7e8      	b.n	8016d8a <__lo0bits+0x2a>
 8016db8:	2000      	movs	r0, #0
 8016dba:	4770      	bx	lr
 8016dbc:	2020      	movs	r0, #32
 8016dbe:	4770      	bx	lr

08016dc0 <__i2b>:
 8016dc0:	b510      	push	{r4, lr}
 8016dc2:	460c      	mov	r4, r1
 8016dc4:	2101      	movs	r1, #1
 8016dc6:	f7ff feb5 	bl	8016b34 <_Balloc>
 8016dca:	4602      	mov	r2, r0
 8016dcc:	b928      	cbnz	r0, 8016dda <__i2b+0x1a>
 8016dce:	4b05      	ldr	r3, [pc, #20]	; (8016de4 <__i2b+0x24>)
 8016dd0:	4805      	ldr	r0, [pc, #20]	; (8016de8 <__i2b+0x28>)
 8016dd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016dd6:	f000 fdb7 	bl	8017948 <__assert_func>
 8016dda:	2301      	movs	r3, #1
 8016ddc:	6144      	str	r4, [r0, #20]
 8016dde:	6103      	str	r3, [r0, #16]
 8016de0:	bd10      	pop	{r4, pc}
 8016de2:	bf00      	nop
 8016de4:	080194f1 	.word	0x080194f1
 8016de8:	08019580 	.word	0x08019580

08016dec <__multiply>:
 8016dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016df0:	4614      	mov	r4, r2
 8016df2:	690a      	ldr	r2, [r1, #16]
 8016df4:	6923      	ldr	r3, [r4, #16]
 8016df6:	429a      	cmp	r2, r3
 8016df8:	bfb8      	it	lt
 8016dfa:	460b      	movlt	r3, r1
 8016dfc:	460d      	mov	r5, r1
 8016dfe:	bfbc      	itt	lt
 8016e00:	4625      	movlt	r5, r4
 8016e02:	461c      	movlt	r4, r3
 8016e04:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016e08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016e0c:	68ab      	ldr	r3, [r5, #8]
 8016e0e:	6869      	ldr	r1, [r5, #4]
 8016e10:	eb0a 0709 	add.w	r7, sl, r9
 8016e14:	42bb      	cmp	r3, r7
 8016e16:	b085      	sub	sp, #20
 8016e18:	bfb8      	it	lt
 8016e1a:	3101      	addlt	r1, #1
 8016e1c:	f7ff fe8a 	bl	8016b34 <_Balloc>
 8016e20:	b930      	cbnz	r0, 8016e30 <__multiply+0x44>
 8016e22:	4602      	mov	r2, r0
 8016e24:	4b42      	ldr	r3, [pc, #264]	; (8016f30 <__multiply+0x144>)
 8016e26:	4843      	ldr	r0, [pc, #268]	; (8016f34 <__multiply+0x148>)
 8016e28:	f240 115d 	movw	r1, #349	; 0x15d
 8016e2c:	f000 fd8c 	bl	8017948 <__assert_func>
 8016e30:	f100 0614 	add.w	r6, r0, #20
 8016e34:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016e38:	4633      	mov	r3, r6
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	4543      	cmp	r3, r8
 8016e3e:	d31e      	bcc.n	8016e7e <__multiply+0x92>
 8016e40:	f105 0c14 	add.w	ip, r5, #20
 8016e44:	f104 0314 	add.w	r3, r4, #20
 8016e48:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016e4c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016e50:	9202      	str	r2, [sp, #8]
 8016e52:	ebac 0205 	sub.w	r2, ip, r5
 8016e56:	3a15      	subs	r2, #21
 8016e58:	f022 0203 	bic.w	r2, r2, #3
 8016e5c:	3204      	adds	r2, #4
 8016e5e:	f105 0115 	add.w	r1, r5, #21
 8016e62:	458c      	cmp	ip, r1
 8016e64:	bf38      	it	cc
 8016e66:	2204      	movcc	r2, #4
 8016e68:	9201      	str	r2, [sp, #4]
 8016e6a:	9a02      	ldr	r2, [sp, #8]
 8016e6c:	9303      	str	r3, [sp, #12]
 8016e6e:	429a      	cmp	r2, r3
 8016e70:	d808      	bhi.n	8016e84 <__multiply+0x98>
 8016e72:	2f00      	cmp	r7, #0
 8016e74:	dc55      	bgt.n	8016f22 <__multiply+0x136>
 8016e76:	6107      	str	r7, [r0, #16]
 8016e78:	b005      	add	sp, #20
 8016e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e7e:	f843 2b04 	str.w	r2, [r3], #4
 8016e82:	e7db      	b.n	8016e3c <__multiply+0x50>
 8016e84:	f8b3 a000 	ldrh.w	sl, [r3]
 8016e88:	f1ba 0f00 	cmp.w	sl, #0
 8016e8c:	d020      	beq.n	8016ed0 <__multiply+0xe4>
 8016e8e:	f105 0e14 	add.w	lr, r5, #20
 8016e92:	46b1      	mov	r9, r6
 8016e94:	2200      	movs	r2, #0
 8016e96:	f85e 4b04 	ldr.w	r4, [lr], #4
 8016e9a:	f8d9 b000 	ldr.w	fp, [r9]
 8016e9e:	b2a1      	uxth	r1, r4
 8016ea0:	fa1f fb8b 	uxth.w	fp, fp
 8016ea4:	fb0a b101 	mla	r1, sl, r1, fp
 8016ea8:	4411      	add	r1, r2
 8016eaa:	f8d9 2000 	ldr.w	r2, [r9]
 8016eae:	0c24      	lsrs	r4, r4, #16
 8016eb0:	0c12      	lsrs	r2, r2, #16
 8016eb2:	fb0a 2404 	mla	r4, sl, r4, r2
 8016eb6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8016eba:	b289      	uxth	r1, r1
 8016ebc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016ec0:	45f4      	cmp	ip, lr
 8016ec2:	f849 1b04 	str.w	r1, [r9], #4
 8016ec6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8016eca:	d8e4      	bhi.n	8016e96 <__multiply+0xaa>
 8016ecc:	9901      	ldr	r1, [sp, #4]
 8016ece:	5072      	str	r2, [r6, r1]
 8016ed0:	9a03      	ldr	r2, [sp, #12]
 8016ed2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016ed6:	3304      	adds	r3, #4
 8016ed8:	f1b9 0f00 	cmp.w	r9, #0
 8016edc:	d01f      	beq.n	8016f1e <__multiply+0x132>
 8016ede:	6834      	ldr	r4, [r6, #0]
 8016ee0:	f105 0114 	add.w	r1, r5, #20
 8016ee4:	46b6      	mov	lr, r6
 8016ee6:	f04f 0a00 	mov.w	sl, #0
 8016eea:	880a      	ldrh	r2, [r1, #0]
 8016eec:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016ef0:	fb09 b202 	mla	r2, r9, r2, fp
 8016ef4:	4492      	add	sl, r2
 8016ef6:	b2a4      	uxth	r4, r4
 8016ef8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8016efc:	f84e 4b04 	str.w	r4, [lr], #4
 8016f00:	f851 4b04 	ldr.w	r4, [r1], #4
 8016f04:	f8be 2000 	ldrh.w	r2, [lr]
 8016f08:	0c24      	lsrs	r4, r4, #16
 8016f0a:	fb09 2404 	mla	r4, r9, r4, r2
 8016f0e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016f12:	458c      	cmp	ip, r1
 8016f14:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016f18:	d8e7      	bhi.n	8016eea <__multiply+0xfe>
 8016f1a:	9a01      	ldr	r2, [sp, #4]
 8016f1c:	50b4      	str	r4, [r6, r2]
 8016f1e:	3604      	adds	r6, #4
 8016f20:	e7a3      	b.n	8016e6a <__multiply+0x7e>
 8016f22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d1a5      	bne.n	8016e76 <__multiply+0x8a>
 8016f2a:	3f01      	subs	r7, #1
 8016f2c:	e7a1      	b.n	8016e72 <__multiply+0x86>
 8016f2e:	bf00      	nop
 8016f30:	080194f1 	.word	0x080194f1
 8016f34:	08019580 	.word	0x08019580

08016f38 <__pow5mult>:
 8016f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f3c:	4615      	mov	r5, r2
 8016f3e:	f012 0203 	ands.w	r2, r2, #3
 8016f42:	4606      	mov	r6, r0
 8016f44:	460f      	mov	r7, r1
 8016f46:	d007      	beq.n	8016f58 <__pow5mult+0x20>
 8016f48:	4c25      	ldr	r4, [pc, #148]	; (8016fe0 <__pow5mult+0xa8>)
 8016f4a:	3a01      	subs	r2, #1
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016f52:	f7ff fe51 	bl	8016bf8 <__multadd>
 8016f56:	4607      	mov	r7, r0
 8016f58:	10ad      	asrs	r5, r5, #2
 8016f5a:	d03d      	beq.n	8016fd8 <__pow5mult+0xa0>
 8016f5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016f5e:	b97c      	cbnz	r4, 8016f80 <__pow5mult+0x48>
 8016f60:	2010      	movs	r0, #16
 8016f62:	f7ff fdbf 	bl	8016ae4 <malloc>
 8016f66:	4602      	mov	r2, r0
 8016f68:	6270      	str	r0, [r6, #36]	; 0x24
 8016f6a:	b928      	cbnz	r0, 8016f78 <__pow5mult+0x40>
 8016f6c:	4b1d      	ldr	r3, [pc, #116]	; (8016fe4 <__pow5mult+0xac>)
 8016f6e:	481e      	ldr	r0, [pc, #120]	; (8016fe8 <__pow5mult+0xb0>)
 8016f70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016f74:	f000 fce8 	bl	8017948 <__assert_func>
 8016f78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016f7c:	6004      	str	r4, [r0, #0]
 8016f7e:	60c4      	str	r4, [r0, #12]
 8016f80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016f88:	b94c      	cbnz	r4, 8016f9e <__pow5mult+0x66>
 8016f8a:	f240 2171 	movw	r1, #625	; 0x271
 8016f8e:	4630      	mov	r0, r6
 8016f90:	f7ff ff16 	bl	8016dc0 <__i2b>
 8016f94:	2300      	movs	r3, #0
 8016f96:	f8c8 0008 	str.w	r0, [r8, #8]
 8016f9a:	4604      	mov	r4, r0
 8016f9c:	6003      	str	r3, [r0, #0]
 8016f9e:	f04f 0900 	mov.w	r9, #0
 8016fa2:	07eb      	lsls	r3, r5, #31
 8016fa4:	d50a      	bpl.n	8016fbc <__pow5mult+0x84>
 8016fa6:	4639      	mov	r1, r7
 8016fa8:	4622      	mov	r2, r4
 8016faa:	4630      	mov	r0, r6
 8016fac:	f7ff ff1e 	bl	8016dec <__multiply>
 8016fb0:	4639      	mov	r1, r7
 8016fb2:	4680      	mov	r8, r0
 8016fb4:	4630      	mov	r0, r6
 8016fb6:	f7ff fdfd 	bl	8016bb4 <_Bfree>
 8016fba:	4647      	mov	r7, r8
 8016fbc:	106d      	asrs	r5, r5, #1
 8016fbe:	d00b      	beq.n	8016fd8 <__pow5mult+0xa0>
 8016fc0:	6820      	ldr	r0, [r4, #0]
 8016fc2:	b938      	cbnz	r0, 8016fd4 <__pow5mult+0x9c>
 8016fc4:	4622      	mov	r2, r4
 8016fc6:	4621      	mov	r1, r4
 8016fc8:	4630      	mov	r0, r6
 8016fca:	f7ff ff0f 	bl	8016dec <__multiply>
 8016fce:	6020      	str	r0, [r4, #0]
 8016fd0:	f8c0 9000 	str.w	r9, [r0]
 8016fd4:	4604      	mov	r4, r0
 8016fd6:	e7e4      	b.n	8016fa2 <__pow5mult+0x6a>
 8016fd8:	4638      	mov	r0, r7
 8016fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fde:	bf00      	nop
 8016fe0:	080196d0 	.word	0x080196d0
 8016fe4:	0801947b 	.word	0x0801947b
 8016fe8:	08019580 	.word	0x08019580

08016fec <__lshift>:
 8016fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ff0:	460c      	mov	r4, r1
 8016ff2:	6849      	ldr	r1, [r1, #4]
 8016ff4:	6923      	ldr	r3, [r4, #16]
 8016ff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016ffa:	68a3      	ldr	r3, [r4, #8]
 8016ffc:	4607      	mov	r7, r0
 8016ffe:	4691      	mov	r9, r2
 8017000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017004:	f108 0601 	add.w	r6, r8, #1
 8017008:	42b3      	cmp	r3, r6
 801700a:	db0b      	blt.n	8017024 <__lshift+0x38>
 801700c:	4638      	mov	r0, r7
 801700e:	f7ff fd91 	bl	8016b34 <_Balloc>
 8017012:	4605      	mov	r5, r0
 8017014:	b948      	cbnz	r0, 801702a <__lshift+0x3e>
 8017016:	4602      	mov	r2, r0
 8017018:	4b28      	ldr	r3, [pc, #160]	; (80170bc <__lshift+0xd0>)
 801701a:	4829      	ldr	r0, [pc, #164]	; (80170c0 <__lshift+0xd4>)
 801701c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017020:	f000 fc92 	bl	8017948 <__assert_func>
 8017024:	3101      	adds	r1, #1
 8017026:	005b      	lsls	r3, r3, #1
 8017028:	e7ee      	b.n	8017008 <__lshift+0x1c>
 801702a:	2300      	movs	r3, #0
 801702c:	f100 0114 	add.w	r1, r0, #20
 8017030:	f100 0210 	add.w	r2, r0, #16
 8017034:	4618      	mov	r0, r3
 8017036:	4553      	cmp	r3, sl
 8017038:	db33      	blt.n	80170a2 <__lshift+0xb6>
 801703a:	6920      	ldr	r0, [r4, #16]
 801703c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017040:	f104 0314 	add.w	r3, r4, #20
 8017044:	f019 091f 	ands.w	r9, r9, #31
 8017048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801704c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017050:	d02b      	beq.n	80170aa <__lshift+0xbe>
 8017052:	f1c9 0e20 	rsb	lr, r9, #32
 8017056:	468a      	mov	sl, r1
 8017058:	2200      	movs	r2, #0
 801705a:	6818      	ldr	r0, [r3, #0]
 801705c:	fa00 f009 	lsl.w	r0, r0, r9
 8017060:	4302      	orrs	r2, r0
 8017062:	f84a 2b04 	str.w	r2, [sl], #4
 8017066:	f853 2b04 	ldr.w	r2, [r3], #4
 801706a:	459c      	cmp	ip, r3
 801706c:	fa22 f20e 	lsr.w	r2, r2, lr
 8017070:	d8f3      	bhi.n	801705a <__lshift+0x6e>
 8017072:	ebac 0304 	sub.w	r3, ip, r4
 8017076:	3b15      	subs	r3, #21
 8017078:	f023 0303 	bic.w	r3, r3, #3
 801707c:	3304      	adds	r3, #4
 801707e:	f104 0015 	add.w	r0, r4, #21
 8017082:	4584      	cmp	ip, r0
 8017084:	bf38      	it	cc
 8017086:	2304      	movcc	r3, #4
 8017088:	50ca      	str	r2, [r1, r3]
 801708a:	b10a      	cbz	r2, 8017090 <__lshift+0xa4>
 801708c:	f108 0602 	add.w	r6, r8, #2
 8017090:	3e01      	subs	r6, #1
 8017092:	4638      	mov	r0, r7
 8017094:	612e      	str	r6, [r5, #16]
 8017096:	4621      	mov	r1, r4
 8017098:	f7ff fd8c 	bl	8016bb4 <_Bfree>
 801709c:	4628      	mov	r0, r5
 801709e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80170a6:	3301      	adds	r3, #1
 80170a8:	e7c5      	b.n	8017036 <__lshift+0x4a>
 80170aa:	3904      	subs	r1, #4
 80170ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80170b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80170b4:	459c      	cmp	ip, r3
 80170b6:	d8f9      	bhi.n	80170ac <__lshift+0xc0>
 80170b8:	e7ea      	b.n	8017090 <__lshift+0xa4>
 80170ba:	bf00      	nop
 80170bc:	080194f1 	.word	0x080194f1
 80170c0:	08019580 	.word	0x08019580

080170c4 <__mcmp>:
 80170c4:	b530      	push	{r4, r5, lr}
 80170c6:	6902      	ldr	r2, [r0, #16]
 80170c8:	690c      	ldr	r4, [r1, #16]
 80170ca:	1b12      	subs	r2, r2, r4
 80170cc:	d10e      	bne.n	80170ec <__mcmp+0x28>
 80170ce:	f100 0314 	add.w	r3, r0, #20
 80170d2:	3114      	adds	r1, #20
 80170d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80170d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80170dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80170e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80170e4:	42a5      	cmp	r5, r4
 80170e6:	d003      	beq.n	80170f0 <__mcmp+0x2c>
 80170e8:	d305      	bcc.n	80170f6 <__mcmp+0x32>
 80170ea:	2201      	movs	r2, #1
 80170ec:	4610      	mov	r0, r2
 80170ee:	bd30      	pop	{r4, r5, pc}
 80170f0:	4283      	cmp	r3, r0
 80170f2:	d3f3      	bcc.n	80170dc <__mcmp+0x18>
 80170f4:	e7fa      	b.n	80170ec <__mcmp+0x28>
 80170f6:	f04f 32ff 	mov.w	r2, #4294967295
 80170fa:	e7f7      	b.n	80170ec <__mcmp+0x28>

080170fc <__mdiff>:
 80170fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017100:	460c      	mov	r4, r1
 8017102:	4606      	mov	r6, r0
 8017104:	4611      	mov	r1, r2
 8017106:	4620      	mov	r0, r4
 8017108:	4617      	mov	r7, r2
 801710a:	f7ff ffdb 	bl	80170c4 <__mcmp>
 801710e:	1e05      	subs	r5, r0, #0
 8017110:	d110      	bne.n	8017134 <__mdiff+0x38>
 8017112:	4629      	mov	r1, r5
 8017114:	4630      	mov	r0, r6
 8017116:	f7ff fd0d 	bl	8016b34 <_Balloc>
 801711a:	b930      	cbnz	r0, 801712a <__mdiff+0x2e>
 801711c:	4b39      	ldr	r3, [pc, #228]	; (8017204 <__mdiff+0x108>)
 801711e:	4602      	mov	r2, r0
 8017120:	f240 2132 	movw	r1, #562	; 0x232
 8017124:	4838      	ldr	r0, [pc, #224]	; (8017208 <__mdiff+0x10c>)
 8017126:	f000 fc0f 	bl	8017948 <__assert_func>
 801712a:	2301      	movs	r3, #1
 801712c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017134:	bfa4      	itt	ge
 8017136:	463b      	movge	r3, r7
 8017138:	4627      	movge	r7, r4
 801713a:	4630      	mov	r0, r6
 801713c:	6879      	ldr	r1, [r7, #4]
 801713e:	bfa6      	itte	ge
 8017140:	461c      	movge	r4, r3
 8017142:	2500      	movge	r5, #0
 8017144:	2501      	movlt	r5, #1
 8017146:	f7ff fcf5 	bl	8016b34 <_Balloc>
 801714a:	b920      	cbnz	r0, 8017156 <__mdiff+0x5a>
 801714c:	4b2d      	ldr	r3, [pc, #180]	; (8017204 <__mdiff+0x108>)
 801714e:	4602      	mov	r2, r0
 8017150:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017154:	e7e6      	b.n	8017124 <__mdiff+0x28>
 8017156:	693e      	ldr	r6, [r7, #16]
 8017158:	60c5      	str	r5, [r0, #12]
 801715a:	6925      	ldr	r5, [r4, #16]
 801715c:	f107 0114 	add.w	r1, r7, #20
 8017160:	f104 0914 	add.w	r9, r4, #20
 8017164:	f100 0e14 	add.w	lr, r0, #20
 8017168:	f107 0210 	add.w	r2, r7, #16
 801716c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8017170:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8017174:	46f2      	mov	sl, lr
 8017176:	2700      	movs	r7, #0
 8017178:	f859 3b04 	ldr.w	r3, [r9], #4
 801717c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017180:	fa1f f883 	uxth.w	r8, r3
 8017184:	fa17 f78b 	uxtah	r7, r7, fp
 8017188:	0c1b      	lsrs	r3, r3, #16
 801718a:	eba7 0808 	sub.w	r8, r7, r8
 801718e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017192:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017196:	fa1f f888 	uxth.w	r8, r8
 801719a:	141f      	asrs	r7, r3, #16
 801719c:	454d      	cmp	r5, r9
 801719e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80171a2:	f84a 3b04 	str.w	r3, [sl], #4
 80171a6:	d8e7      	bhi.n	8017178 <__mdiff+0x7c>
 80171a8:	1b2b      	subs	r3, r5, r4
 80171aa:	3b15      	subs	r3, #21
 80171ac:	f023 0303 	bic.w	r3, r3, #3
 80171b0:	3304      	adds	r3, #4
 80171b2:	3415      	adds	r4, #21
 80171b4:	42a5      	cmp	r5, r4
 80171b6:	bf38      	it	cc
 80171b8:	2304      	movcc	r3, #4
 80171ba:	4419      	add	r1, r3
 80171bc:	4473      	add	r3, lr
 80171be:	469e      	mov	lr, r3
 80171c0:	460d      	mov	r5, r1
 80171c2:	4565      	cmp	r5, ip
 80171c4:	d30e      	bcc.n	80171e4 <__mdiff+0xe8>
 80171c6:	f10c 0203 	add.w	r2, ip, #3
 80171ca:	1a52      	subs	r2, r2, r1
 80171cc:	f022 0203 	bic.w	r2, r2, #3
 80171d0:	3903      	subs	r1, #3
 80171d2:	458c      	cmp	ip, r1
 80171d4:	bf38      	it	cc
 80171d6:	2200      	movcc	r2, #0
 80171d8:	441a      	add	r2, r3
 80171da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80171de:	b17b      	cbz	r3, 8017200 <__mdiff+0x104>
 80171e0:	6106      	str	r6, [r0, #16]
 80171e2:	e7a5      	b.n	8017130 <__mdiff+0x34>
 80171e4:	f855 8b04 	ldr.w	r8, [r5], #4
 80171e8:	fa17 f488 	uxtah	r4, r7, r8
 80171ec:	1422      	asrs	r2, r4, #16
 80171ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80171f2:	b2a4      	uxth	r4, r4
 80171f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80171f8:	f84e 4b04 	str.w	r4, [lr], #4
 80171fc:	1417      	asrs	r7, r2, #16
 80171fe:	e7e0      	b.n	80171c2 <__mdiff+0xc6>
 8017200:	3e01      	subs	r6, #1
 8017202:	e7ea      	b.n	80171da <__mdiff+0xde>
 8017204:	080194f1 	.word	0x080194f1
 8017208:	08019580 	.word	0x08019580

0801720c <__ulp>:
 801720c:	b082      	sub	sp, #8
 801720e:	ed8d 0b00 	vstr	d0, [sp]
 8017212:	9b01      	ldr	r3, [sp, #4]
 8017214:	4912      	ldr	r1, [pc, #72]	; (8017260 <__ulp+0x54>)
 8017216:	4019      	ands	r1, r3
 8017218:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801721c:	2900      	cmp	r1, #0
 801721e:	dd05      	ble.n	801722c <__ulp+0x20>
 8017220:	2200      	movs	r2, #0
 8017222:	460b      	mov	r3, r1
 8017224:	ec43 2b10 	vmov	d0, r2, r3
 8017228:	b002      	add	sp, #8
 801722a:	4770      	bx	lr
 801722c:	4249      	negs	r1, r1
 801722e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8017232:	ea4f 5021 	mov.w	r0, r1, asr #20
 8017236:	f04f 0200 	mov.w	r2, #0
 801723a:	f04f 0300 	mov.w	r3, #0
 801723e:	da04      	bge.n	801724a <__ulp+0x3e>
 8017240:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8017244:	fa41 f300 	asr.w	r3, r1, r0
 8017248:	e7ec      	b.n	8017224 <__ulp+0x18>
 801724a:	f1a0 0114 	sub.w	r1, r0, #20
 801724e:	291e      	cmp	r1, #30
 8017250:	bfda      	itte	le
 8017252:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8017256:	fa20 f101 	lsrle.w	r1, r0, r1
 801725a:	2101      	movgt	r1, #1
 801725c:	460a      	mov	r2, r1
 801725e:	e7e1      	b.n	8017224 <__ulp+0x18>
 8017260:	7ff00000 	.word	0x7ff00000

08017264 <__b2d>:
 8017264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017266:	6905      	ldr	r5, [r0, #16]
 8017268:	f100 0714 	add.w	r7, r0, #20
 801726c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017270:	1f2e      	subs	r6, r5, #4
 8017272:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017276:	4620      	mov	r0, r4
 8017278:	f7ff fd52 	bl	8016d20 <__hi0bits>
 801727c:	f1c0 0320 	rsb	r3, r0, #32
 8017280:	280a      	cmp	r0, #10
 8017282:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017300 <__b2d+0x9c>
 8017286:	600b      	str	r3, [r1, #0]
 8017288:	dc14      	bgt.n	80172b4 <__b2d+0x50>
 801728a:	f1c0 0e0b 	rsb	lr, r0, #11
 801728e:	fa24 f10e 	lsr.w	r1, r4, lr
 8017292:	42b7      	cmp	r7, r6
 8017294:	ea41 030c 	orr.w	r3, r1, ip
 8017298:	bf34      	ite	cc
 801729a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801729e:	2100      	movcs	r1, #0
 80172a0:	3015      	adds	r0, #21
 80172a2:	fa04 f000 	lsl.w	r0, r4, r0
 80172a6:	fa21 f10e 	lsr.w	r1, r1, lr
 80172aa:	ea40 0201 	orr.w	r2, r0, r1
 80172ae:	ec43 2b10 	vmov	d0, r2, r3
 80172b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172b4:	42b7      	cmp	r7, r6
 80172b6:	bf3a      	itte	cc
 80172b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80172bc:	f1a5 0608 	subcc.w	r6, r5, #8
 80172c0:	2100      	movcs	r1, #0
 80172c2:	380b      	subs	r0, #11
 80172c4:	d017      	beq.n	80172f6 <__b2d+0x92>
 80172c6:	f1c0 0c20 	rsb	ip, r0, #32
 80172ca:	fa04 f500 	lsl.w	r5, r4, r0
 80172ce:	42be      	cmp	r6, r7
 80172d0:	fa21 f40c 	lsr.w	r4, r1, ip
 80172d4:	ea45 0504 	orr.w	r5, r5, r4
 80172d8:	bf8c      	ite	hi
 80172da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80172de:	2400      	movls	r4, #0
 80172e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80172e4:	fa01 f000 	lsl.w	r0, r1, r0
 80172e8:	fa24 f40c 	lsr.w	r4, r4, ip
 80172ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80172f0:	ea40 0204 	orr.w	r2, r0, r4
 80172f4:	e7db      	b.n	80172ae <__b2d+0x4a>
 80172f6:	ea44 030c 	orr.w	r3, r4, ip
 80172fa:	460a      	mov	r2, r1
 80172fc:	e7d7      	b.n	80172ae <__b2d+0x4a>
 80172fe:	bf00      	nop
 8017300:	3ff00000 	.word	0x3ff00000

08017304 <__d2b>:
 8017304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017308:	4689      	mov	r9, r1
 801730a:	2101      	movs	r1, #1
 801730c:	ec57 6b10 	vmov	r6, r7, d0
 8017310:	4690      	mov	r8, r2
 8017312:	f7ff fc0f 	bl	8016b34 <_Balloc>
 8017316:	4604      	mov	r4, r0
 8017318:	b930      	cbnz	r0, 8017328 <__d2b+0x24>
 801731a:	4602      	mov	r2, r0
 801731c:	4b25      	ldr	r3, [pc, #148]	; (80173b4 <__d2b+0xb0>)
 801731e:	4826      	ldr	r0, [pc, #152]	; (80173b8 <__d2b+0xb4>)
 8017320:	f240 310a 	movw	r1, #778	; 0x30a
 8017324:	f000 fb10 	bl	8017948 <__assert_func>
 8017328:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801732c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017330:	bb35      	cbnz	r5, 8017380 <__d2b+0x7c>
 8017332:	2e00      	cmp	r6, #0
 8017334:	9301      	str	r3, [sp, #4]
 8017336:	d028      	beq.n	801738a <__d2b+0x86>
 8017338:	4668      	mov	r0, sp
 801733a:	9600      	str	r6, [sp, #0]
 801733c:	f7ff fd10 	bl	8016d60 <__lo0bits>
 8017340:	9900      	ldr	r1, [sp, #0]
 8017342:	b300      	cbz	r0, 8017386 <__d2b+0x82>
 8017344:	9a01      	ldr	r2, [sp, #4]
 8017346:	f1c0 0320 	rsb	r3, r0, #32
 801734a:	fa02 f303 	lsl.w	r3, r2, r3
 801734e:	430b      	orrs	r3, r1
 8017350:	40c2      	lsrs	r2, r0
 8017352:	6163      	str	r3, [r4, #20]
 8017354:	9201      	str	r2, [sp, #4]
 8017356:	9b01      	ldr	r3, [sp, #4]
 8017358:	61a3      	str	r3, [r4, #24]
 801735a:	2b00      	cmp	r3, #0
 801735c:	bf14      	ite	ne
 801735e:	2202      	movne	r2, #2
 8017360:	2201      	moveq	r2, #1
 8017362:	6122      	str	r2, [r4, #16]
 8017364:	b1d5      	cbz	r5, 801739c <__d2b+0x98>
 8017366:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801736a:	4405      	add	r5, r0
 801736c:	f8c9 5000 	str.w	r5, [r9]
 8017370:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017374:	f8c8 0000 	str.w	r0, [r8]
 8017378:	4620      	mov	r0, r4
 801737a:	b003      	add	sp, #12
 801737c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017384:	e7d5      	b.n	8017332 <__d2b+0x2e>
 8017386:	6161      	str	r1, [r4, #20]
 8017388:	e7e5      	b.n	8017356 <__d2b+0x52>
 801738a:	a801      	add	r0, sp, #4
 801738c:	f7ff fce8 	bl	8016d60 <__lo0bits>
 8017390:	9b01      	ldr	r3, [sp, #4]
 8017392:	6163      	str	r3, [r4, #20]
 8017394:	2201      	movs	r2, #1
 8017396:	6122      	str	r2, [r4, #16]
 8017398:	3020      	adds	r0, #32
 801739a:	e7e3      	b.n	8017364 <__d2b+0x60>
 801739c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80173a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80173a4:	f8c9 0000 	str.w	r0, [r9]
 80173a8:	6918      	ldr	r0, [r3, #16]
 80173aa:	f7ff fcb9 	bl	8016d20 <__hi0bits>
 80173ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80173b2:	e7df      	b.n	8017374 <__d2b+0x70>
 80173b4:	080194f1 	.word	0x080194f1
 80173b8:	08019580 	.word	0x08019580

080173bc <__ratio>:
 80173bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173c0:	468a      	mov	sl, r1
 80173c2:	4669      	mov	r1, sp
 80173c4:	4683      	mov	fp, r0
 80173c6:	f7ff ff4d 	bl	8017264 <__b2d>
 80173ca:	a901      	add	r1, sp, #4
 80173cc:	4650      	mov	r0, sl
 80173ce:	ec59 8b10 	vmov	r8, r9, d0
 80173d2:	ee10 6a10 	vmov	r6, s0
 80173d6:	f7ff ff45 	bl	8017264 <__b2d>
 80173da:	f8db 3010 	ldr.w	r3, [fp, #16]
 80173de:	f8da 2010 	ldr.w	r2, [sl, #16]
 80173e2:	eba3 0c02 	sub.w	ip, r3, r2
 80173e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80173ea:	1a9b      	subs	r3, r3, r2
 80173ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80173f0:	ec55 4b10 	vmov	r4, r5, d0
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	ee10 0a10 	vmov	r0, s0
 80173fa:	bfce      	itee	gt
 80173fc:	464a      	movgt	r2, r9
 80173fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017402:	462a      	movle	r2, r5
 8017404:	464f      	mov	r7, r9
 8017406:	4629      	mov	r1, r5
 8017408:	bfcc      	ite	gt
 801740a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801740e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017412:	ec47 6b17 	vmov	d7, r6, r7
 8017416:	ec41 0b16 	vmov	d6, r0, r1
 801741a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801741e:	b003      	add	sp, #12
 8017420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017424 <__copybits>:
 8017424:	3901      	subs	r1, #1
 8017426:	b570      	push	{r4, r5, r6, lr}
 8017428:	1149      	asrs	r1, r1, #5
 801742a:	6914      	ldr	r4, [r2, #16]
 801742c:	3101      	adds	r1, #1
 801742e:	f102 0314 	add.w	r3, r2, #20
 8017432:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017436:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801743a:	1f05      	subs	r5, r0, #4
 801743c:	42a3      	cmp	r3, r4
 801743e:	d30c      	bcc.n	801745a <__copybits+0x36>
 8017440:	1aa3      	subs	r3, r4, r2
 8017442:	3b11      	subs	r3, #17
 8017444:	f023 0303 	bic.w	r3, r3, #3
 8017448:	3211      	adds	r2, #17
 801744a:	42a2      	cmp	r2, r4
 801744c:	bf88      	it	hi
 801744e:	2300      	movhi	r3, #0
 8017450:	4418      	add	r0, r3
 8017452:	2300      	movs	r3, #0
 8017454:	4288      	cmp	r0, r1
 8017456:	d305      	bcc.n	8017464 <__copybits+0x40>
 8017458:	bd70      	pop	{r4, r5, r6, pc}
 801745a:	f853 6b04 	ldr.w	r6, [r3], #4
 801745e:	f845 6f04 	str.w	r6, [r5, #4]!
 8017462:	e7eb      	b.n	801743c <__copybits+0x18>
 8017464:	f840 3b04 	str.w	r3, [r0], #4
 8017468:	e7f4      	b.n	8017454 <__copybits+0x30>

0801746a <__any_on>:
 801746a:	f100 0214 	add.w	r2, r0, #20
 801746e:	6900      	ldr	r0, [r0, #16]
 8017470:	114b      	asrs	r3, r1, #5
 8017472:	4298      	cmp	r0, r3
 8017474:	b510      	push	{r4, lr}
 8017476:	db11      	blt.n	801749c <__any_on+0x32>
 8017478:	dd0a      	ble.n	8017490 <__any_on+0x26>
 801747a:	f011 011f 	ands.w	r1, r1, #31
 801747e:	d007      	beq.n	8017490 <__any_on+0x26>
 8017480:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017484:	fa24 f001 	lsr.w	r0, r4, r1
 8017488:	fa00 f101 	lsl.w	r1, r0, r1
 801748c:	428c      	cmp	r4, r1
 801748e:	d10b      	bne.n	80174a8 <__any_on+0x3e>
 8017490:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017494:	4293      	cmp	r3, r2
 8017496:	d803      	bhi.n	80174a0 <__any_on+0x36>
 8017498:	2000      	movs	r0, #0
 801749a:	bd10      	pop	{r4, pc}
 801749c:	4603      	mov	r3, r0
 801749e:	e7f7      	b.n	8017490 <__any_on+0x26>
 80174a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80174a4:	2900      	cmp	r1, #0
 80174a6:	d0f5      	beq.n	8017494 <__any_on+0x2a>
 80174a8:	2001      	movs	r0, #1
 80174aa:	e7f6      	b.n	801749a <__any_on+0x30>

080174ac <_calloc_r>:
 80174ac:	b513      	push	{r0, r1, r4, lr}
 80174ae:	434a      	muls	r2, r1
 80174b0:	4611      	mov	r1, r2
 80174b2:	9201      	str	r2, [sp, #4]
 80174b4:	f000 f85a 	bl	801756c <_malloc_r>
 80174b8:	4604      	mov	r4, r0
 80174ba:	b118      	cbz	r0, 80174c4 <_calloc_r+0x18>
 80174bc:	9a01      	ldr	r2, [sp, #4]
 80174be:	2100      	movs	r1, #0
 80174c0:	f7fc fc30 	bl	8013d24 <memset>
 80174c4:	4620      	mov	r0, r4
 80174c6:	b002      	add	sp, #8
 80174c8:	bd10      	pop	{r4, pc}
	...

080174cc <_free_r>:
 80174cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174ce:	2900      	cmp	r1, #0
 80174d0:	d048      	beq.n	8017564 <_free_r+0x98>
 80174d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174d6:	9001      	str	r0, [sp, #4]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	f1a1 0404 	sub.w	r4, r1, #4
 80174de:	bfb8      	it	lt
 80174e0:	18e4      	addlt	r4, r4, r3
 80174e2:	f000 fa7b 	bl	80179dc <__malloc_lock>
 80174e6:	4a20      	ldr	r2, [pc, #128]	; (8017568 <_free_r+0x9c>)
 80174e8:	9801      	ldr	r0, [sp, #4]
 80174ea:	6813      	ldr	r3, [r2, #0]
 80174ec:	4615      	mov	r5, r2
 80174ee:	b933      	cbnz	r3, 80174fe <_free_r+0x32>
 80174f0:	6063      	str	r3, [r4, #4]
 80174f2:	6014      	str	r4, [r2, #0]
 80174f4:	b003      	add	sp, #12
 80174f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80174fa:	f000 ba75 	b.w	80179e8 <__malloc_unlock>
 80174fe:	42a3      	cmp	r3, r4
 8017500:	d90b      	bls.n	801751a <_free_r+0x4e>
 8017502:	6821      	ldr	r1, [r4, #0]
 8017504:	1862      	adds	r2, r4, r1
 8017506:	4293      	cmp	r3, r2
 8017508:	bf04      	itt	eq
 801750a:	681a      	ldreq	r2, [r3, #0]
 801750c:	685b      	ldreq	r3, [r3, #4]
 801750e:	6063      	str	r3, [r4, #4]
 8017510:	bf04      	itt	eq
 8017512:	1852      	addeq	r2, r2, r1
 8017514:	6022      	streq	r2, [r4, #0]
 8017516:	602c      	str	r4, [r5, #0]
 8017518:	e7ec      	b.n	80174f4 <_free_r+0x28>
 801751a:	461a      	mov	r2, r3
 801751c:	685b      	ldr	r3, [r3, #4]
 801751e:	b10b      	cbz	r3, 8017524 <_free_r+0x58>
 8017520:	42a3      	cmp	r3, r4
 8017522:	d9fa      	bls.n	801751a <_free_r+0x4e>
 8017524:	6811      	ldr	r1, [r2, #0]
 8017526:	1855      	adds	r5, r2, r1
 8017528:	42a5      	cmp	r5, r4
 801752a:	d10b      	bne.n	8017544 <_free_r+0x78>
 801752c:	6824      	ldr	r4, [r4, #0]
 801752e:	4421      	add	r1, r4
 8017530:	1854      	adds	r4, r2, r1
 8017532:	42a3      	cmp	r3, r4
 8017534:	6011      	str	r1, [r2, #0]
 8017536:	d1dd      	bne.n	80174f4 <_free_r+0x28>
 8017538:	681c      	ldr	r4, [r3, #0]
 801753a:	685b      	ldr	r3, [r3, #4]
 801753c:	6053      	str	r3, [r2, #4]
 801753e:	4421      	add	r1, r4
 8017540:	6011      	str	r1, [r2, #0]
 8017542:	e7d7      	b.n	80174f4 <_free_r+0x28>
 8017544:	d902      	bls.n	801754c <_free_r+0x80>
 8017546:	230c      	movs	r3, #12
 8017548:	6003      	str	r3, [r0, #0]
 801754a:	e7d3      	b.n	80174f4 <_free_r+0x28>
 801754c:	6825      	ldr	r5, [r4, #0]
 801754e:	1961      	adds	r1, r4, r5
 8017550:	428b      	cmp	r3, r1
 8017552:	bf04      	itt	eq
 8017554:	6819      	ldreq	r1, [r3, #0]
 8017556:	685b      	ldreq	r3, [r3, #4]
 8017558:	6063      	str	r3, [r4, #4]
 801755a:	bf04      	itt	eq
 801755c:	1949      	addeq	r1, r1, r5
 801755e:	6021      	streq	r1, [r4, #0]
 8017560:	6054      	str	r4, [r2, #4]
 8017562:	e7c7      	b.n	80174f4 <_free_r+0x28>
 8017564:	b003      	add	sp, #12
 8017566:	bd30      	pop	{r4, r5, pc}
 8017568:	24000304 	.word	0x24000304

0801756c <_malloc_r>:
 801756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801756e:	1ccd      	adds	r5, r1, #3
 8017570:	f025 0503 	bic.w	r5, r5, #3
 8017574:	3508      	adds	r5, #8
 8017576:	2d0c      	cmp	r5, #12
 8017578:	bf38      	it	cc
 801757a:	250c      	movcc	r5, #12
 801757c:	2d00      	cmp	r5, #0
 801757e:	4606      	mov	r6, r0
 8017580:	db01      	blt.n	8017586 <_malloc_r+0x1a>
 8017582:	42a9      	cmp	r1, r5
 8017584:	d903      	bls.n	801758e <_malloc_r+0x22>
 8017586:	230c      	movs	r3, #12
 8017588:	6033      	str	r3, [r6, #0]
 801758a:	2000      	movs	r0, #0
 801758c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801758e:	f000 fa25 	bl	80179dc <__malloc_lock>
 8017592:	4921      	ldr	r1, [pc, #132]	; (8017618 <_malloc_r+0xac>)
 8017594:	680a      	ldr	r2, [r1, #0]
 8017596:	4614      	mov	r4, r2
 8017598:	b99c      	cbnz	r4, 80175c2 <_malloc_r+0x56>
 801759a:	4f20      	ldr	r7, [pc, #128]	; (801761c <_malloc_r+0xb0>)
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	b923      	cbnz	r3, 80175aa <_malloc_r+0x3e>
 80175a0:	4621      	mov	r1, r4
 80175a2:	4630      	mov	r0, r6
 80175a4:	f000 f9a0 	bl	80178e8 <_sbrk_r>
 80175a8:	6038      	str	r0, [r7, #0]
 80175aa:	4629      	mov	r1, r5
 80175ac:	4630      	mov	r0, r6
 80175ae:	f000 f99b 	bl	80178e8 <_sbrk_r>
 80175b2:	1c43      	adds	r3, r0, #1
 80175b4:	d123      	bne.n	80175fe <_malloc_r+0x92>
 80175b6:	230c      	movs	r3, #12
 80175b8:	6033      	str	r3, [r6, #0]
 80175ba:	4630      	mov	r0, r6
 80175bc:	f000 fa14 	bl	80179e8 <__malloc_unlock>
 80175c0:	e7e3      	b.n	801758a <_malloc_r+0x1e>
 80175c2:	6823      	ldr	r3, [r4, #0]
 80175c4:	1b5b      	subs	r3, r3, r5
 80175c6:	d417      	bmi.n	80175f8 <_malloc_r+0x8c>
 80175c8:	2b0b      	cmp	r3, #11
 80175ca:	d903      	bls.n	80175d4 <_malloc_r+0x68>
 80175cc:	6023      	str	r3, [r4, #0]
 80175ce:	441c      	add	r4, r3
 80175d0:	6025      	str	r5, [r4, #0]
 80175d2:	e004      	b.n	80175de <_malloc_r+0x72>
 80175d4:	6863      	ldr	r3, [r4, #4]
 80175d6:	42a2      	cmp	r2, r4
 80175d8:	bf0c      	ite	eq
 80175da:	600b      	streq	r3, [r1, #0]
 80175dc:	6053      	strne	r3, [r2, #4]
 80175de:	4630      	mov	r0, r6
 80175e0:	f000 fa02 	bl	80179e8 <__malloc_unlock>
 80175e4:	f104 000b 	add.w	r0, r4, #11
 80175e8:	1d23      	adds	r3, r4, #4
 80175ea:	f020 0007 	bic.w	r0, r0, #7
 80175ee:	1ac2      	subs	r2, r0, r3
 80175f0:	d0cc      	beq.n	801758c <_malloc_r+0x20>
 80175f2:	1a1b      	subs	r3, r3, r0
 80175f4:	50a3      	str	r3, [r4, r2]
 80175f6:	e7c9      	b.n	801758c <_malloc_r+0x20>
 80175f8:	4622      	mov	r2, r4
 80175fa:	6864      	ldr	r4, [r4, #4]
 80175fc:	e7cc      	b.n	8017598 <_malloc_r+0x2c>
 80175fe:	1cc4      	adds	r4, r0, #3
 8017600:	f024 0403 	bic.w	r4, r4, #3
 8017604:	42a0      	cmp	r0, r4
 8017606:	d0e3      	beq.n	80175d0 <_malloc_r+0x64>
 8017608:	1a21      	subs	r1, r4, r0
 801760a:	4630      	mov	r0, r6
 801760c:	f000 f96c 	bl	80178e8 <_sbrk_r>
 8017610:	3001      	adds	r0, #1
 8017612:	d1dd      	bne.n	80175d0 <_malloc_r+0x64>
 8017614:	e7cf      	b.n	80175b6 <_malloc_r+0x4a>
 8017616:	bf00      	nop
 8017618:	24000304 	.word	0x24000304
 801761c:	24000308 	.word	0x24000308

08017620 <__ssputs_r>:
 8017620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017624:	688e      	ldr	r6, [r1, #8]
 8017626:	429e      	cmp	r6, r3
 8017628:	4682      	mov	sl, r0
 801762a:	460c      	mov	r4, r1
 801762c:	4690      	mov	r8, r2
 801762e:	461f      	mov	r7, r3
 8017630:	d838      	bhi.n	80176a4 <__ssputs_r+0x84>
 8017632:	898a      	ldrh	r2, [r1, #12]
 8017634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017638:	d032      	beq.n	80176a0 <__ssputs_r+0x80>
 801763a:	6825      	ldr	r5, [r4, #0]
 801763c:	6909      	ldr	r1, [r1, #16]
 801763e:	eba5 0901 	sub.w	r9, r5, r1
 8017642:	6965      	ldr	r5, [r4, #20]
 8017644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801764c:	3301      	adds	r3, #1
 801764e:	444b      	add	r3, r9
 8017650:	106d      	asrs	r5, r5, #1
 8017652:	429d      	cmp	r5, r3
 8017654:	bf38      	it	cc
 8017656:	461d      	movcc	r5, r3
 8017658:	0553      	lsls	r3, r2, #21
 801765a:	d531      	bpl.n	80176c0 <__ssputs_r+0xa0>
 801765c:	4629      	mov	r1, r5
 801765e:	f7ff ff85 	bl	801756c <_malloc_r>
 8017662:	4606      	mov	r6, r0
 8017664:	b950      	cbnz	r0, 801767c <__ssputs_r+0x5c>
 8017666:	230c      	movs	r3, #12
 8017668:	f8ca 3000 	str.w	r3, [sl]
 801766c:	89a3      	ldrh	r3, [r4, #12]
 801766e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017672:	81a3      	strh	r3, [r4, #12]
 8017674:	f04f 30ff 	mov.w	r0, #4294967295
 8017678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801767c:	6921      	ldr	r1, [r4, #16]
 801767e:	464a      	mov	r2, r9
 8017680:	f7ff fa4a 	bl	8016b18 <memcpy>
 8017684:	89a3      	ldrh	r3, [r4, #12]
 8017686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801768a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801768e:	81a3      	strh	r3, [r4, #12]
 8017690:	6126      	str	r6, [r4, #16]
 8017692:	6165      	str	r5, [r4, #20]
 8017694:	444e      	add	r6, r9
 8017696:	eba5 0509 	sub.w	r5, r5, r9
 801769a:	6026      	str	r6, [r4, #0]
 801769c:	60a5      	str	r5, [r4, #8]
 801769e:	463e      	mov	r6, r7
 80176a0:	42be      	cmp	r6, r7
 80176a2:	d900      	bls.n	80176a6 <__ssputs_r+0x86>
 80176a4:	463e      	mov	r6, r7
 80176a6:	4632      	mov	r2, r6
 80176a8:	6820      	ldr	r0, [r4, #0]
 80176aa:	4641      	mov	r1, r8
 80176ac:	f000 f97c 	bl	80179a8 <memmove>
 80176b0:	68a3      	ldr	r3, [r4, #8]
 80176b2:	6822      	ldr	r2, [r4, #0]
 80176b4:	1b9b      	subs	r3, r3, r6
 80176b6:	4432      	add	r2, r6
 80176b8:	60a3      	str	r3, [r4, #8]
 80176ba:	6022      	str	r2, [r4, #0]
 80176bc:	2000      	movs	r0, #0
 80176be:	e7db      	b.n	8017678 <__ssputs_r+0x58>
 80176c0:	462a      	mov	r2, r5
 80176c2:	f000 f997 	bl	80179f4 <_realloc_r>
 80176c6:	4606      	mov	r6, r0
 80176c8:	2800      	cmp	r0, #0
 80176ca:	d1e1      	bne.n	8017690 <__ssputs_r+0x70>
 80176cc:	6921      	ldr	r1, [r4, #16]
 80176ce:	4650      	mov	r0, sl
 80176d0:	f7ff fefc 	bl	80174cc <_free_r>
 80176d4:	e7c7      	b.n	8017666 <__ssputs_r+0x46>
	...

080176d8 <_svfiprintf_r>:
 80176d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176dc:	4698      	mov	r8, r3
 80176de:	898b      	ldrh	r3, [r1, #12]
 80176e0:	061b      	lsls	r3, r3, #24
 80176e2:	b09d      	sub	sp, #116	; 0x74
 80176e4:	4607      	mov	r7, r0
 80176e6:	460d      	mov	r5, r1
 80176e8:	4614      	mov	r4, r2
 80176ea:	d50e      	bpl.n	801770a <_svfiprintf_r+0x32>
 80176ec:	690b      	ldr	r3, [r1, #16]
 80176ee:	b963      	cbnz	r3, 801770a <_svfiprintf_r+0x32>
 80176f0:	2140      	movs	r1, #64	; 0x40
 80176f2:	f7ff ff3b 	bl	801756c <_malloc_r>
 80176f6:	6028      	str	r0, [r5, #0]
 80176f8:	6128      	str	r0, [r5, #16]
 80176fa:	b920      	cbnz	r0, 8017706 <_svfiprintf_r+0x2e>
 80176fc:	230c      	movs	r3, #12
 80176fe:	603b      	str	r3, [r7, #0]
 8017700:	f04f 30ff 	mov.w	r0, #4294967295
 8017704:	e0d1      	b.n	80178aa <_svfiprintf_r+0x1d2>
 8017706:	2340      	movs	r3, #64	; 0x40
 8017708:	616b      	str	r3, [r5, #20]
 801770a:	2300      	movs	r3, #0
 801770c:	9309      	str	r3, [sp, #36]	; 0x24
 801770e:	2320      	movs	r3, #32
 8017710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017714:	f8cd 800c 	str.w	r8, [sp, #12]
 8017718:	2330      	movs	r3, #48	; 0x30
 801771a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80178c4 <_svfiprintf_r+0x1ec>
 801771e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017722:	f04f 0901 	mov.w	r9, #1
 8017726:	4623      	mov	r3, r4
 8017728:	469a      	mov	sl, r3
 801772a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801772e:	b10a      	cbz	r2, 8017734 <_svfiprintf_r+0x5c>
 8017730:	2a25      	cmp	r2, #37	; 0x25
 8017732:	d1f9      	bne.n	8017728 <_svfiprintf_r+0x50>
 8017734:	ebba 0b04 	subs.w	fp, sl, r4
 8017738:	d00b      	beq.n	8017752 <_svfiprintf_r+0x7a>
 801773a:	465b      	mov	r3, fp
 801773c:	4622      	mov	r2, r4
 801773e:	4629      	mov	r1, r5
 8017740:	4638      	mov	r0, r7
 8017742:	f7ff ff6d 	bl	8017620 <__ssputs_r>
 8017746:	3001      	adds	r0, #1
 8017748:	f000 80aa 	beq.w	80178a0 <_svfiprintf_r+0x1c8>
 801774c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801774e:	445a      	add	r2, fp
 8017750:	9209      	str	r2, [sp, #36]	; 0x24
 8017752:	f89a 3000 	ldrb.w	r3, [sl]
 8017756:	2b00      	cmp	r3, #0
 8017758:	f000 80a2 	beq.w	80178a0 <_svfiprintf_r+0x1c8>
 801775c:	2300      	movs	r3, #0
 801775e:	f04f 32ff 	mov.w	r2, #4294967295
 8017762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017766:	f10a 0a01 	add.w	sl, sl, #1
 801776a:	9304      	str	r3, [sp, #16]
 801776c:	9307      	str	r3, [sp, #28]
 801776e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017772:	931a      	str	r3, [sp, #104]	; 0x68
 8017774:	4654      	mov	r4, sl
 8017776:	2205      	movs	r2, #5
 8017778:	f814 1b01 	ldrb.w	r1, [r4], #1
 801777c:	4851      	ldr	r0, [pc, #324]	; (80178c4 <_svfiprintf_r+0x1ec>)
 801777e:	f7e8 fdb7 	bl	80002f0 <memchr>
 8017782:	9a04      	ldr	r2, [sp, #16]
 8017784:	b9d8      	cbnz	r0, 80177be <_svfiprintf_r+0xe6>
 8017786:	06d0      	lsls	r0, r2, #27
 8017788:	bf44      	itt	mi
 801778a:	2320      	movmi	r3, #32
 801778c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017790:	0711      	lsls	r1, r2, #28
 8017792:	bf44      	itt	mi
 8017794:	232b      	movmi	r3, #43	; 0x2b
 8017796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801779a:	f89a 3000 	ldrb.w	r3, [sl]
 801779e:	2b2a      	cmp	r3, #42	; 0x2a
 80177a0:	d015      	beq.n	80177ce <_svfiprintf_r+0xf6>
 80177a2:	9a07      	ldr	r2, [sp, #28]
 80177a4:	4654      	mov	r4, sl
 80177a6:	2000      	movs	r0, #0
 80177a8:	f04f 0c0a 	mov.w	ip, #10
 80177ac:	4621      	mov	r1, r4
 80177ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177b2:	3b30      	subs	r3, #48	; 0x30
 80177b4:	2b09      	cmp	r3, #9
 80177b6:	d94e      	bls.n	8017856 <_svfiprintf_r+0x17e>
 80177b8:	b1b0      	cbz	r0, 80177e8 <_svfiprintf_r+0x110>
 80177ba:	9207      	str	r2, [sp, #28]
 80177bc:	e014      	b.n	80177e8 <_svfiprintf_r+0x110>
 80177be:	eba0 0308 	sub.w	r3, r0, r8
 80177c2:	fa09 f303 	lsl.w	r3, r9, r3
 80177c6:	4313      	orrs	r3, r2
 80177c8:	9304      	str	r3, [sp, #16]
 80177ca:	46a2      	mov	sl, r4
 80177cc:	e7d2      	b.n	8017774 <_svfiprintf_r+0x9c>
 80177ce:	9b03      	ldr	r3, [sp, #12]
 80177d0:	1d19      	adds	r1, r3, #4
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	9103      	str	r1, [sp, #12]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	bfbb      	ittet	lt
 80177da:	425b      	neglt	r3, r3
 80177dc:	f042 0202 	orrlt.w	r2, r2, #2
 80177e0:	9307      	strge	r3, [sp, #28]
 80177e2:	9307      	strlt	r3, [sp, #28]
 80177e4:	bfb8      	it	lt
 80177e6:	9204      	strlt	r2, [sp, #16]
 80177e8:	7823      	ldrb	r3, [r4, #0]
 80177ea:	2b2e      	cmp	r3, #46	; 0x2e
 80177ec:	d10c      	bne.n	8017808 <_svfiprintf_r+0x130>
 80177ee:	7863      	ldrb	r3, [r4, #1]
 80177f0:	2b2a      	cmp	r3, #42	; 0x2a
 80177f2:	d135      	bne.n	8017860 <_svfiprintf_r+0x188>
 80177f4:	9b03      	ldr	r3, [sp, #12]
 80177f6:	1d1a      	adds	r2, r3, #4
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	9203      	str	r2, [sp, #12]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	bfb8      	it	lt
 8017800:	f04f 33ff 	movlt.w	r3, #4294967295
 8017804:	3402      	adds	r4, #2
 8017806:	9305      	str	r3, [sp, #20]
 8017808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80178d4 <_svfiprintf_r+0x1fc>
 801780c:	7821      	ldrb	r1, [r4, #0]
 801780e:	2203      	movs	r2, #3
 8017810:	4650      	mov	r0, sl
 8017812:	f7e8 fd6d 	bl	80002f0 <memchr>
 8017816:	b140      	cbz	r0, 801782a <_svfiprintf_r+0x152>
 8017818:	2340      	movs	r3, #64	; 0x40
 801781a:	eba0 000a 	sub.w	r0, r0, sl
 801781e:	fa03 f000 	lsl.w	r0, r3, r0
 8017822:	9b04      	ldr	r3, [sp, #16]
 8017824:	4303      	orrs	r3, r0
 8017826:	3401      	adds	r4, #1
 8017828:	9304      	str	r3, [sp, #16]
 801782a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801782e:	4826      	ldr	r0, [pc, #152]	; (80178c8 <_svfiprintf_r+0x1f0>)
 8017830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017834:	2206      	movs	r2, #6
 8017836:	f7e8 fd5b 	bl	80002f0 <memchr>
 801783a:	2800      	cmp	r0, #0
 801783c:	d038      	beq.n	80178b0 <_svfiprintf_r+0x1d8>
 801783e:	4b23      	ldr	r3, [pc, #140]	; (80178cc <_svfiprintf_r+0x1f4>)
 8017840:	bb1b      	cbnz	r3, 801788a <_svfiprintf_r+0x1b2>
 8017842:	9b03      	ldr	r3, [sp, #12]
 8017844:	3307      	adds	r3, #7
 8017846:	f023 0307 	bic.w	r3, r3, #7
 801784a:	3308      	adds	r3, #8
 801784c:	9303      	str	r3, [sp, #12]
 801784e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017850:	4433      	add	r3, r6
 8017852:	9309      	str	r3, [sp, #36]	; 0x24
 8017854:	e767      	b.n	8017726 <_svfiprintf_r+0x4e>
 8017856:	fb0c 3202 	mla	r2, ip, r2, r3
 801785a:	460c      	mov	r4, r1
 801785c:	2001      	movs	r0, #1
 801785e:	e7a5      	b.n	80177ac <_svfiprintf_r+0xd4>
 8017860:	2300      	movs	r3, #0
 8017862:	3401      	adds	r4, #1
 8017864:	9305      	str	r3, [sp, #20]
 8017866:	4619      	mov	r1, r3
 8017868:	f04f 0c0a 	mov.w	ip, #10
 801786c:	4620      	mov	r0, r4
 801786e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017872:	3a30      	subs	r2, #48	; 0x30
 8017874:	2a09      	cmp	r2, #9
 8017876:	d903      	bls.n	8017880 <_svfiprintf_r+0x1a8>
 8017878:	2b00      	cmp	r3, #0
 801787a:	d0c5      	beq.n	8017808 <_svfiprintf_r+0x130>
 801787c:	9105      	str	r1, [sp, #20]
 801787e:	e7c3      	b.n	8017808 <_svfiprintf_r+0x130>
 8017880:	fb0c 2101 	mla	r1, ip, r1, r2
 8017884:	4604      	mov	r4, r0
 8017886:	2301      	movs	r3, #1
 8017888:	e7f0      	b.n	801786c <_svfiprintf_r+0x194>
 801788a:	ab03      	add	r3, sp, #12
 801788c:	9300      	str	r3, [sp, #0]
 801788e:	462a      	mov	r2, r5
 8017890:	4b0f      	ldr	r3, [pc, #60]	; (80178d0 <_svfiprintf_r+0x1f8>)
 8017892:	a904      	add	r1, sp, #16
 8017894:	4638      	mov	r0, r7
 8017896:	f7fc fadf 	bl	8013e58 <_printf_float>
 801789a:	1c42      	adds	r2, r0, #1
 801789c:	4606      	mov	r6, r0
 801789e:	d1d6      	bne.n	801784e <_svfiprintf_r+0x176>
 80178a0:	89ab      	ldrh	r3, [r5, #12]
 80178a2:	065b      	lsls	r3, r3, #25
 80178a4:	f53f af2c 	bmi.w	8017700 <_svfiprintf_r+0x28>
 80178a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178aa:	b01d      	add	sp, #116	; 0x74
 80178ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178b0:	ab03      	add	r3, sp, #12
 80178b2:	9300      	str	r3, [sp, #0]
 80178b4:	462a      	mov	r2, r5
 80178b6:	4b06      	ldr	r3, [pc, #24]	; (80178d0 <_svfiprintf_r+0x1f8>)
 80178b8:	a904      	add	r1, sp, #16
 80178ba:	4638      	mov	r0, r7
 80178bc:	f7fc fd58 	bl	8014370 <_printf_i>
 80178c0:	e7eb      	b.n	801789a <_svfiprintf_r+0x1c2>
 80178c2:	bf00      	nop
 80178c4:	080196dc 	.word	0x080196dc
 80178c8:	080196e6 	.word	0x080196e6
 80178cc:	08013e59 	.word	0x08013e59
 80178d0:	08017621 	.word	0x08017621
 80178d4:	080196e2 	.word	0x080196e2

080178d8 <nan>:
 80178d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80178e0 <nan+0x8>
 80178dc:	4770      	bx	lr
 80178de:	bf00      	nop
 80178e0:	00000000 	.word	0x00000000
 80178e4:	7ff80000 	.word	0x7ff80000

080178e8 <_sbrk_r>:
 80178e8:	b538      	push	{r3, r4, r5, lr}
 80178ea:	4d06      	ldr	r5, [pc, #24]	; (8017904 <_sbrk_r+0x1c>)
 80178ec:	2300      	movs	r3, #0
 80178ee:	4604      	mov	r4, r0
 80178f0:	4608      	mov	r0, r1
 80178f2:	602b      	str	r3, [r5, #0]
 80178f4:	f7ed fdcc 	bl	8005490 <_sbrk>
 80178f8:	1c43      	adds	r3, r0, #1
 80178fa:	d102      	bne.n	8017902 <_sbrk_r+0x1a>
 80178fc:	682b      	ldr	r3, [r5, #0]
 80178fe:	b103      	cbz	r3, 8017902 <_sbrk_r+0x1a>
 8017900:	6023      	str	r3, [r4, #0]
 8017902:	bd38      	pop	{r3, r4, r5, pc}
 8017904:	24023c90 	.word	0x24023c90

08017908 <strncmp>:
 8017908:	b510      	push	{r4, lr}
 801790a:	b16a      	cbz	r2, 8017928 <strncmp+0x20>
 801790c:	3901      	subs	r1, #1
 801790e:	1884      	adds	r4, r0, r2
 8017910:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017914:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017918:	4293      	cmp	r3, r2
 801791a:	d103      	bne.n	8017924 <strncmp+0x1c>
 801791c:	42a0      	cmp	r0, r4
 801791e:	d001      	beq.n	8017924 <strncmp+0x1c>
 8017920:	2b00      	cmp	r3, #0
 8017922:	d1f5      	bne.n	8017910 <strncmp+0x8>
 8017924:	1a98      	subs	r0, r3, r2
 8017926:	bd10      	pop	{r4, pc}
 8017928:	4610      	mov	r0, r2
 801792a:	e7fc      	b.n	8017926 <strncmp+0x1e>

0801792c <__ascii_wctomb>:
 801792c:	b149      	cbz	r1, 8017942 <__ascii_wctomb+0x16>
 801792e:	2aff      	cmp	r2, #255	; 0xff
 8017930:	bf85      	ittet	hi
 8017932:	238a      	movhi	r3, #138	; 0x8a
 8017934:	6003      	strhi	r3, [r0, #0]
 8017936:	700a      	strbls	r2, [r1, #0]
 8017938:	f04f 30ff 	movhi.w	r0, #4294967295
 801793c:	bf98      	it	ls
 801793e:	2001      	movls	r0, #1
 8017940:	4770      	bx	lr
 8017942:	4608      	mov	r0, r1
 8017944:	4770      	bx	lr
	...

08017948 <__assert_func>:
 8017948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801794a:	4614      	mov	r4, r2
 801794c:	461a      	mov	r2, r3
 801794e:	4b09      	ldr	r3, [pc, #36]	; (8017974 <__assert_func+0x2c>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	4605      	mov	r5, r0
 8017954:	68d8      	ldr	r0, [r3, #12]
 8017956:	b14c      	cbz	r4, 801796c <__assert_func+0x24>
 8017958:	4b07      	ldr	r3, [pc, #28]	; (8017978 <__assert_func+0x30>)
 801795a:	9100      	str	r1, [sp, #0]
 801795c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017960:	4906      	ldr	r1, [pc, #24]	; (801797c <__assert_func+0x34>)
 8017962:	462b      	mov	r3, r5
 8017964:	f000 f80e 	bl	8017984 <fiprintf>
 8017968:	f000 fa84 	bl	8017e74 <abort>
 801796c:	4b04      	ldr	r3, [pc, #16]	; (8017980 <__assert_func+0x38>)
 801796e:	461c      	mov	r4, r3
 8017970:	e7f3      	b.n	801795a <__assert_func+0x12>
 8017972:	bf00      	nop
 8017974:	24000020 	.word	0x24000020
 8017978:	080196ed 	.word	0x080196ed
 801797c:	080196fa 	.word	0x080196fa
 8017980:	08019728 	.word	0x08019728

08017984 <fiprintf>:
 8017984:	b40e      	push	{r1, r2, r3}
 8017986:	b503      	push	{r0, r1, lr}
 8017988:	4601      	mov	r1, r0
 801798a:	ab03      	add	r3, sp, #12
 801798c:	4805      	ldr	r0, [pc, #20]	; (80179a4 <fiprintf+0x20>)
 801798e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017992:	6800      	ldr	r0, [r0, #0]
 8017994:	9301      	str	r3, [sp, #4]
 8017996:	f000 f87d 	bl	8017a94 <_vfiprintf_r>
 801799a:	b002      	add	sp, #8
 801799c:	f85d eb04 	ldr.w	lr, [sp], #4
 80179a0:	b003      	add	sp, #12
 80179a2:	4770      	bx	lr
 80179a4:	24000020 	.word	0x24000020

080179a8 <memmove>:
 80179a8:	4288      	cmp	r0, r1
 80179aa:	b510      	push	{r4, lr}
 80179ac:	eb01 0402 	add.w	r4, r1, r2
 80179b0:	d902      	bls.n	80179b8 <memmove+0x10>
 80179b2:	4284      	cmp	r4, r0
 80179b4:	4623      	mov	r3, r4
 80179b6:	d807      	bhi.n	80179c8 <memmove+0x20>
 80179b8:	1e43      	subs	r3, r0, #1
 80179ba:	42a1      	cmp	r1, r4
 80179bc:	d008      	beq.n	80179d0 <memmove+0x28>
 80179be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80179c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80179c6:	e7f8      	b.n	80179ba <memmove+0x12>
 80179c8:	4402      	add	r2, r0
 80179ca:	4601      	mov	r1, r0
 80179cc:	428a      	cmp	r2, r1
 80179ce:	d100      	bne.n	80179d2 <memmove+0x2a>
 80179d0:	bd10      	pop	{r4, pc}
 80179d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80179d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80179da:	e7f7      	b.n	80179cc <memmove+0x24>

080179dc <__malloc_lock>:
 80179dc:	4801      	ldr	r0, [pc, #4]	; (80179e4 <__malloc_lock+0x8>)
 80179de:	f000 bc09 	b.w	80181f4 <__retarget_lock_acquire_recursive>
 80179e2:	bf00      	nop
 80179e4:	24023c98 	.word	0x24023c98

080179e8 <__malloc_unlock>:
 80179e8:	4801      	ldr	r0, [pc, #4]	; (80179f0 <__malloc_unlock+0x8>)
 80179ea:	f000 bc04 	b.w	80181f6 <__retarget_lock_release_recursive>
 80179ee:	bf00      	nop
 80179f0:	24023c98 	.word	0x24023c98

080179f4 <_realloc_r>:
 80179f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179f6:	4607      	mov	r7, r0
 80179f8:	4614      	mov	r4, r2
 80179fa:	460e      	mov	r6, r1
 80179fc:	b921      	cbnz	r1, 8017a08 <_realloc_r+0x14>
 80179fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017a02:	4611      	mov	r1, r2
 8017a04:	f7ff bdb2 	b.w	801756c <_malloc_r>
 8017a08:	b922      	cbnz	r2, 8017a14 <_realloc_r+0x20>
 8017a0a:	f7ff fd5f 	bl	80174cc <_free_r>
 8017a0e:	4625      	mov	r5, r4
 8017a10:	4628      	mov	r0, r5
 8017a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a14:	f000 fc54 	bl	80182c0 <_malloc_usable_size_r>
 8017a18:	42a0      	cmp	r0, r4
 8017a1a:	d20f      	bcs.n	8017a3c <_realloc_r+0x48>
 8017a1c:	4621      	mov	r1, r4
 8017a1e:	4638      	mov	r0, r7
 8017a20:	f7ff fda4 	bl	801756c <_malloc_r>
 8017a24:	4605      	mov	r5, r0
 8017a26:	2800      	cmp	r0, #0
 8017a28:	d0f2      	beq.n	8017a10 <_realloc_r+0x1c>
 8017a2a:	4631      	mov	r1, r6
 8017a2c:	4622      	mov	r2, r4
 8017a2e:	f7ff f873 	bl	8016b18 <memcpy>
 8017a32:	4631      	mov	r1, r6
 8017a34:	4638      	mov	r0, r7
 8017a36:	f7ff fd49 	bl	80174cc <_free_r>
 8017a3a:	e7e9      	b.n	8017a10 <_realloc_r+0x1c>
 8017a3c:	4635      	mov	r5, r6
 8017a3e:	e7e7      	b.n	8017a10 <_realloc_r+0x1c>

08017a40 <__sfputc_r>:
 8017a40:	6893      	ldr	r3, [r2, #8]
 8017a42:	3b01      	subs	r3, #1
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	b410      	push	{r4}
 8017a48:	6093      	str	r3, [r2, #8]
 8017a4a:	da08      	bge.n	8017a5e <__sfputc_r+0x1e>
 8017a4c:	6994      	ldr	r4, [r2, #24]
 8017a4e:	42a3      	cmp	r3, r4
 8017a50:	db01      	blt.n	8017a56 <__sfputc_r+0x16>
 8017a52:	290a      	cmp	r1, #10
 8017a54:	d103      	bne.n	8017a5e <__sfputc_r+0x1e>
 8017a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a5a:	f000 b94b 	b.w	8017cf4 <__swbuf_r>
 8017a5e:	6813      	ldr	r3, [r2, #0]
 8017a60:	1c58      	adds	r0, r3, #1
 8017a62:	6010      	str	r0, [r2, #0]
 8017a64:	7019      	strb	r1, [r3, #0]
 8017a66:	4608      	mov	r0, r1
 8017a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a6c:	4770      	bx	lr

08017a6e <__sfputs_r>:
 8017a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a70:	4606      	mov	r6, r0
 8017a72:	460f      	mov	r7, r1
 8017a74:	4614      	mov	r4, r2
 8017a76:	18d5      	adds	r5, r2, r3
 8017a78:	42ac      	cmp	r4, r5
 8017a7a:	d101      	bne.n	8017a80 <__sfputs_r+0x12>
 8017a7c:	2000      	movs	r0, #0
 8017a7e:	e007      	b.n	8017a90 <__sfputs_r+0x22>
 8017a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a84:	463a      	mov	r2, r7
 8017a86:	4630      	mov	r0, r6
 8017a88:	f7ff ffda 	bl	8017a40 <__sfputc_r>
 8017a8c:	1c43      	adds	r3, r0, #1
 8017a8e:	d1f3      	bne.n	8017a78 <__sfputs_r+0xa>
 8017a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017a94 <_vfiprintf_r>:
 8017a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a98:	460d      	mov	r5, r1
 8017a9a:	b09d      	sub	sp, #116	; 0x74
 8017a9c:	4614      	mov	r4, r2
 8017a9e:	4698      	mov	r8, r3
 8017aa0:	4606      	mov	r6, r0
 8017aa2:	b118      	cbz	r0, 8017aac <_vfiprintf_r+0x18>
 8017aa4:	6983      	ldr	r3, [r0, #24]
 8017aa6:	b90b      	cbnz	r3, 8017aac <_vfiprintf_r+0x18>
 8017aa8:	f000 fb06 	bl	80180b8 <__sinit>
 8017aac:	4b89      	ldr	r3, [pc, #548]	; (8017cd4 <_vfiprintf_r+0x240>)
 8017aae:	429d      	cmp	r5, r3
 8017ab0:	d11b      	bne.n	8017aea <_vfiprintf_r+0x56>
 8017ab2:	6875      	ldr	r5, [r6, #4]
 8017ab4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ab6:	07d9      	lsls	r1, r3, #31
 8017ab8:	d405      	bmi.n	8017ac6 <_vfiprintf_r+0x32>
 8017aba:	89ab      	ldrh	r3, [r5, #12]
 8017abc:	059a      	lsls	r2, r3, #22
 8017abe:	d402      	bmi.n	8017ac6 <_vfiprintf_r+0x32>
 8017ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017ac2:	f000 fb97 	bl	80181f4 <__retarget_lock_acquire_recursive>
 8017ac6:	89ab      	ldrh	r3, [r5, #12]
 8017ac8:	071b      	lsls	r3, r3, #28
 8017aca:	d501      	bpl.n	8017ad0 <_vfiprintf_r+0x3c>
 8017acc:	692b      	ldr	r3, [r5, #16]
 8017ace:	b9eb      	cbnz	r3, 8017b0c <_vfiprintf_r+0x78>
 8017ad0:	4629      	mov	r1, r5
 8017ad2:	4630      	mov	r0, r6
 8017ad4:	f000 f960 	bl	8017d98 <__swsetup_r>
 8017ad8:	b1c0      	cbz	r0, 8017b0c <_vfiprintf_r+0x78>
 8017ada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017adc:	07dc      	lsls	r4, r3, #31
 8017ade:	d50e      	bpl.n	8017afe <_vfiprintf_r+0x6a>
 8017ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ae4:	b01d      	add	sp, #116	; 0x74
 8017ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aea:	4b7b      	ldr	r3, [pc, #492]	; (8017cd8 <_vfiprintf_r+0x244>)
 8017aec:	429d      	cmp	r5, r3
 8017aee:	d101      	bne.n	8017af4 <_vfiprintf_r+0x60>
 8017af0:	68b5      	ldr	r5, [r6, #8]
 8017af2:	e7df      	b.n	8017ab4 <_vfiprintf_r+0x20>
 8017af4:	4b79      	ldr	r3, [pc, #484]	; (8017cdc <_vfiprintf_r+0x248>)
 8017af6:	429d      	cmp	r5, r3
 8017af8:	bf08      	it	eq
 8017afa:	68f5      	ldreq	r5, [r6, #12]
 8017afc:	e7da      	b.n	8017ab4 <_vfiprintf_r+0x20>
 8017afe:	89ab      	ldrh	r3, [r5, #12]
 8017b00:	0598      	lsls	r0, r3, #22
 8017b02:	d4ed      	bmi.n	8017ae0 <_vfiprintf_r+0x4c>
 8017b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b06:	f000 fb76 	bl	80181f6 <__retarget_lock_release_recursive>
 8017b0a:	e7e9      	b.n	8017ae0 <_vfiprintf_r+0x4c>
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8017b10:	2320      	movs	r3, #32
 8017b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b1a:	2330      	movs	r3, #48	; 0x30
 8017b1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017ce0 <_vfiprintf_r+0x24c>
 8017b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b24:	f04f 0901 	mov.w	r9, #1
 8017b28:	4623      	mov	r3, r4
 8017b2a:	469a      	mov	sl, r3
 8017b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b30:	b10a      	cbz	r2, 8017b36 <_vfiprintf_r+0xa2>
 8017b32:	2a25      	cmp	r2, #37	; 0x25
 8017b34:	d1f9      	bne.n	8017b2a <_vfiprintf_r+0x96>
 8017b36:	ebba 0b04 	subs.w	fp, sl, r4
 8017b3a:	d00b      	beq.n	8017b54 <_vfiprintf_r+0xc0>
 8017b3c:	465b      	mov	r3, fp
 8017b3e:	4622      	mov	r2, r4
 8017b40:	4629      	mov	r1, r5
 8017b42:	4630      	mov	r0, r6
 8017b44:	f7ff ff93 	bl	8017a6e <__sfputs_r>
 8017b48:	3001      	adds	r0, #1
 8017b4a:	f000 80aa 	beq.w	8017ca2 <_vfiprintf_r+0x20e>
 8017b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b50:	445a      	add	r2, fp
 8017b52:	9209      	str	r2, [sp, #36]	; 0x24
 8017b54:	f89a 3000 	ldrb.w	r3, [sl]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	f000 80a2 	beq.w	8017ca2 <_vfiprintf_r+0x20e>
 8017b5e:	2300      	movs	r3, #0
 8017b60:	f04f 32ff 	mov.w	r2, #4294967295
 8017b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b68:	f10a 0a01 	add.w	sl, sl, #1
 8017b6c:	9304      	str	r3, [sp, #16]
 8017b6e:	9307      	str	r3, [sp, #28]
 8017b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017b74:	931a      	str	r3, [sp, #104]	; 0x68
 8017b76:	4654      	mov	r4, sl
 8017b78:	2205      	movs	r2, #5
 8017b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b7e:	4858      	ldr	r0, [pc, #352]	; (8017ce0 <_vfiprintf_r+0x24c>)
 8017b80:	f7e8 fbb6 	bl	80002f0 <memchr>
 8017b84:	9a04      	ldr	r2, [sp, #16]
 8017b86:	b9d8      	cbnz	r0, 8017bc0 <_vfiprintf_r+0x12c>
 8017b88:	06d1      	lsls	r1, r2, #27
 8017b8a:	bf44      	itt	mi
 8017b8c:	2320      	movmi	r3, #32
 8017b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b92:	0713      	lsls	r3, r2, #28
 8017b94:	bf44      	itt	mi
 8017b96:	232b      	movmi	r3, #43	; 0x2b
 8017b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8017ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8017ba2:	d015      	beq.n	8017bd0 <_vfiprintf_r+0x13c>
 8017ba4:	9a07      	ldr	r2, [sp, #28]
 8017ba6:	4654      	mov	r4, sl
 8017ba8:	2000      	movs	r0, #0
 8017baa:	f04f 0c0a 	mov.w	ip, #10
 8017bae:	4621      	mov	r1, r4
 8017bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017bb4:	3b30      	subs	r3, #48	; 0x30
 8017bb6:	2b09      	cmp	r3, #9
 8017bb8:	d94e      	bls.n	8017c58 <_vfiprintf_r+0x1c4>
 8017bba:	b1b0      	cbz	r0, 8017bea <_vfiprintf_r+0x156>
 8017bbc:	9207      	str	r2, [sp, #28]
 8017bbe:	e014      	b.n	8017bea <_vfiprintf_r+0x156>
 8017bc0:	eba0 0308 	sub.w	r3, r0, r8
 8017bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8017bc8:	4313      	orrs	r3, r2
 8017bca:	9304      	str	r3, [sp, #16]
 8017bcc:	46a2      	mov	sl, r4
 8017bce:	e7d2      	b.n	8017b76 <_vfiprintf_r+0xe2>
 8017bd0:	9b03      	ldr	r3, [sp, #12]
 8017bd2:	1d19      	adds	r1, r3, #4
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	9103      	str	r1, [sp, #12]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	bfbb      	ittet	lt
 8017bdc:	425b      	neglt	r3, r3
 8017bde:	f042 0202 	orrlt.w	r2, r2, #2
 8017be2:	9307      	strge	r3, [sp, #28]
 8017be4:	9307      	strlt	r3, [sp, #28]
 8017be6:	bfb8      	it	lt
 8017be8:	9204      	strlt	r2, [sp, #16]
 8017bea:	7823      	ldrb	r3, [r4, #0]
 8017bec:	2b2e      	cmp	r3, #46	; 0x2e
 8017bee:	d10c      	bne.n	8017c0a <_vfiprintf_r+0x176>
 8017bf0:	7863      	ldrb	r3, [r4, #1]
 8017bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8017bf4:	d135      	bne.n	8017c62 <_vfiprintf_r+0x1ce>
 8017bf6:	9b03      	ldr	r3, [sp, #12]
 8017bf8:	1d1a      	adds	r2, r3, #4
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	9203      	str	r2, [sp, #12]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	bfb8      	it	lt
 8017c02:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c06:	3402      	adds	r4, #2
 8017c08:	9305      	str	r3, [sp, #20]
 8017c0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017cf0 <_vfiprintf_r+0x25c>
 8017c0e:	7821      	ldrb	r1, [r4, #0]
 8017c10:	2203      	movs	r2, #3
 8017c12:	4650      	mov	r0, sl
 8017c14:	f7e8 fb6c 	bl	80002f0 <memchr>
 8017c18:	b140      	cbz	r0, 8017c2c <_vfiprintf_r+0x198>
 8017c1a:	2340      	movs	r3, #64	; 0x40
 8017c1c:	eba0 000a 	sub.w	r0, r0, sl
 8017c20:	fa03 f000 	lsl.w	r0, r3, r0
 8017c24:	9b04      	ldr	r3, [sp, #16]
 8017c26:	4303      	orrs	r3, r0
 8017c28:	3401      	adds	r4, #1
 8017c2a:	9304      	str	r3, [sp, #16]
 8017c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c30:	482c      	ldr	r0, [pc, #176]	; (8017ce4 <_vfiprintf_r+0x250>)
 8017c32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c36:	2206      	movs	r2, #6
 8017c38:	f7e8 fb5a 	bl	80002f0 <memchr>
 8017c3c:	2800      	cmp	r0, #0
 8017c3e:	d03f      	beq.n	8017cc0 <_vfiprintf_r+0x22c>
 8017c40:	4b29      	ldr	r3, [pc, #164]	; (8017ce8 <_vfiprintf_r+0x254>)
 8017c42:	bb1b      	cbnz	r3, 8017c8c <_vfiprintf_r+0x1f8>
 8017c44:	9b03      	ldr	r3, [sp, #12]
 8017c46:	3307      	adds	r3, #7
 8017c48:	f023 0307 	bic.w	r3, r3, #7
 8017c4c:	3308      	adds	r3, #8
 8017c4e:	9303      	str	r3, [sp, #12]
 8017c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c52:	443b      	add	r3, r7
 8017c54:	9309      	str	r3, [sp, #36]	; 0x24
 8017c56:	e767      	b.n	8017b28 <_vfiprintf_r+0x94>
 8017c58:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c5c:	460c      	mov	r4, r1
 8017c5e:	2001      	movs	r0, #1
 8017c60:	e7a5      	b.n	8017bae <_vfiprintf_r+0x11a>
 8017c62:	2300      	movs	r3, #0
 8017c64:	3401      	adds	r4, #1
 8017c66:	9305      	str	r3, [sp, #20]
 8017c68:	4619      	mov	r1, r3
 8017c6a:	f04f 0c0a 	mov.w	ip, #10
 8017c6e:	4620      	mov	r0, r4
 8017c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c74:	3a30      	subs	r2, #48	; 0x30
 8017c76:	2a09      	cmp	r2, #9
 8017c78:	d903      	bls.n	8017c82 <_vfiprintf_r+0x1ee>
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d0c5      	beq.n	8017c0a <_vfiprintf_r+0x176>
 8017c7e:	9105      	str	r1, [sp, #20]
 8017c80:	e7c3      	b.n	8017c0a <_vfiprintf_r+0x176>
 8017c82:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c86:	4604      	mov	r4, r0
 8017c88:	2301      	movs	r3, #1
 8017c8a:	e7f0      	b.n	8017c6e <_vfiprintf_r+0x1da>
 8017c8c:	ab03      	add	r3, sp, #12
 8017c8e:	9300      	str	r3, [sp, #0]
 8017c90:	462a      	mov	r2, r5
 8017c92:	4b16      	ldr	r3, [pc, #88]	; (8017cec <_vfiprintf_r+0x258>)
 8017c94:	a904      	add	r1, sp, #16
 8017c96:	4630      	mov	r0, r6
 8017c98:	f7fc f8de 	bl	8013e58 <_printf_float>
 8017c9c:	4607      	mov	r7, r0
 8017c9e:	1c78      	adds	r0, r7, #1
 8017ca0:	d1d6      	bne.n	8017c50 <_vfiprintf_r+0x1bc>
 8017ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ca4:	07d9      	lsls	r1, r3, #31
 8017ca6:	d405      	bmi.n	8017cb4 <_vfiprintf_r+0x220>
 8017ca8:	89ab      	ldrh	r3, [r5, #12]
 8017caa:	059a      	lsls	r2, r3, #22
 8017cac:	d402      	bmi.n	8017cb4 <_vfiprintf_r+0x220>
 8017cae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cb0:	f000 faa1 	bl	80181f6 <__retarget_lock_release_recursive>
 8017cb4:	89ab      	ldrh	r3, [r5, #12]
 8017cb6:	065b      	lsls	r3, r3, #25
 8017cb8:	f53f af12 	bmi.w	8017ae0 <_vfiprintf_r+0x4c>
 8017cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017cbe:	e711      	b.n	8017ae4 <_vfiprintf_r+0x50>
 8017cc0:	ab03      	add	r3, sp, #12
 8017cc2:	9300      	str	r3, [sp, #0]
 8017cc4:	462a      	mov	r2, r5
 8017cc6:	4b09      	ldr	r3, [pc, #36]	; (8017cec <_vfiprintf_r+0x258>)
 8017cc8:	a904      	add	r1, sp, #16
 8017cca:	4630      	mov	r0, r6
 8017ccc:	f7fc fb50 	bl	8014370 <_printf_i>
 8017cd0:	e7e4      	b.n	8017c9c <_vfiprintf_r+0x208>
 8017cd2:	bf00      	nop
 8017cd4:	0801974c 	.word	0x0801974c
 8017cd8:	0801976c 	.word	0x0801976c
 8017cdc:	0801972c 	.word	0x0801972c
 8017ce0:	080196dc 	.word	0x080196dc
 8017ce4:	080196e6 	.word	0x080196e6
 8017ce8:	08013e59 	.word	0x08013e59
 8017cec:	08017a6f 	.word	0x08017a6f
 8017cf0:	080196e2 	.word	0x080196e2

08017cf4 <__swbuf_r>:
 8017cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cf6:	460e      	mov	r6, r1
 8017cf8:	4614      	mov	r4, r2
 8017cfa:	4605      	mov	r5, r0
 8017cfc:	b118      	cbz	r0, 8017d06 <__swbuf_r+0x12>
 8017cfe:	6983      	ldr	r3, [r0, #24]
 8017d00:	b90b      	cbnz	r3, 8017d06 <__swbuf_r+0x12>
 8017d02:	f000 f9d9 	bl	80180b8 <__sinit>
 8017d06:	4b21      	ldr	r3, [pc, #132]	; (8017d8c <__swbuf_r+0x98>)
 8017d08:	429c      	cmp	r4, r3
 8017d0a:	d12b      	bne.n	8017d64 <__swbuf_r+0x70>
 8017d0c:	686c      	ldr	r4, [r5, #4]
 8017d0e:	69a3      	ldr	r3, [r4, #24]
 8017d10:	60a3      	str	r3, [r4, #8]
 8017d12:	89a3      	ldrh	r3, [r4, #12]
 8017d14:	071a      	lsls	r2, r3, #28
 8017d16:	d52f      	bpl.n	8017d78 <__swbuf_r+0x84>
 8017d18:	6923      	ldr	r3, [r4, #16]
 8017d1a:	b36b      	cbz	r3, 8017d78 <__swbuf_r+0x84>
 8017d1c:	6923      	ldr	r3, [r4, #16]
 8017d1e:	6820      	ldr	r0, [r4, #0]
 8017d20:	1ac0      	subs	r0, r0, r3
 8017d22:	6963      	ldr	r3, [r4, #20]
 8017d24:	b2f6      	uxtb	r6, r6
 8017d26:	4283      	cmp	r3, r0
 8017d28:	4637      	mov	r7, r6
 8017d2a:	dc04      	bgt.n	8017d36 <__swbuf_r+0x42>
 8017d2c:	4621      	mov	r1, r4
 8017d2e:	4628      	mov	r0, r5
 8017d30:	f000 f92e 	bl	8017f90 <_fflush_r>
 8017d34:	bb30      	cbnz	r0, 8017d84 <__swbuf_r+0x90>
 8017d36:	68a3      	ldr	r3, [r4, #8]
 8017d38:	3b01      	subs	r3, #1
 8017d3a:	60a3      	str	r3, [r4, #8]
 8017d3c:	6823      	ldr	r3, [r4, #0]
 8017d3e:	1c5a      	adds	r2, r3, #1
 8017d40:	6022      	str	r2, [r4, #0]
 8017d42:	701e      	strb	r6, [r3, #0]
 8017d44:	6963      	ldr	r3, [r4, #20]
 8017d46:	3001      	adds	r0, #1
 8017d48:	4283      	cmp	r3, r0
 8017d4a:	d004      	beq.n	8017d56 <__swbuf_r+0x62>
 8017d4c:	89a3      	ldrh	r3, [r4, #12]
 8017d4e:	07db      	lsls	r3, r3, #31
 8017d50:	d506      	bpl.n	8017d60 <__swbuf_r+0x6c>
 8017d52:	2e0a      	cmp	r6, #10
 8017d54:	d104      	bne.n	8017d60 <__swbuf_r+0x6c>
 8017d56:	4621      	mov	r1, r4
 8017d58:	4628      	mov	r0, r5
 8017d5a:	f000 f919 	bl	8017f90 <_fflush_r>
 8017d5e:	b988      	cbnz	r0, 8017d84 <__swbuf_r+0x90>
 8017d60:	4638      	mov	r0, r7
 8017d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d64:	4b0a      	ldr	r3, [pc, #40]	; (8017d90 <__swbuf_r+0x9c>)
 8017d66:	429c      	cmp	r4, r3
 8017d68:	d101      	bne.n	8017d6e <__swbuf_r+0x7a>
 8017d6a:	68ac      	ldr	r4, [r5, #8]
 8017d6c:	e7cf      	b.n	8017d0e <__swbuf_r+0x1a>
 8017d6e:	4b09      	ldr	r3, [pc, #36]	; (8017d94 <__swbuf_r+0xa0>)
 8017d70:	429c      	cmp	r4, r3
 8017d72:	bf08      	it	eq
 8017d74:	68ec      	ldreq	r4, [r5, #12]
 8017d76:	e7ca      	b.n	8017d0e <__swbuf_r+0x1a>
 8017d78:	4621      	mov	r1, r4
 8017d7a:	4628      	mov	r0, r5
 8017d7c:	f000 f80c 	bl	8017d98 <__swsetup_r>
 8017d80:	2800      	cmp	r0, #0
 8017d82:	d0cb      	beq.n	8017d1c <__swbuf_r+0x28>
 8017d84:	f04f 37ff 	mov.w	r7, #4294967295
 8017d88:	e7ea      	b.n	8017d60 <__swbuf_r+0x6c>
 8017d8a:	bf00      	nop
 8017d8c:	0801974c 	.word	0x0801974c
 8017d90:	0801976c 	.word	0x0801976c
 8017d94:	0801972c 	.word	0x0801972c

08017d98 <__swsetup_r>:
 8017d98:	4b32      	ldr	r3, [pc, #200]	; (8017e64 <__swsetup_r+0xcc>)
 8017d9a:	b570      	push	{r4, r5, r6, lr}
 8017d9c:	681d      	ldr	r5, [r3, #0]
 8017d9e:	4606      	mov	r6, r0
 8017da0:	460c      	mov	r4, r1
 8017da2:	b125      	cbz	r5, 8017dae <__swsetup_r+0x16>
 8017da4:	69ab      	ldr	r3, [r5, #24]
 8017da6:	b913      	cbnz	r3, 8017dae <__swsetup_r+0x16>
 8017da8:	4628      	mov	r0, r5
 8017daa:	f000 f985 	bl	80180b8 <__sinit>
 8017dae:	4b2e      	ldr	r3, [pc, #184]	; (8017e68 <__swsetup_r+0xd0>)
 8017db0:	429c      	cmp	r4, r3
 8017db2:	d10f      	bne.n	8017dd4 <__swsetup_r+0x3c>
 8017db4:	686c      	ldr	r4, [r5, #4]
 8017db6:	89a3      	ldrh	r3, [r4, #12]
 8017db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017dbc:	0719      	lsls	r1, r3, #28
 8017dbe:	d42c      	bmi.n	8017e1a <__swsetup_r+0x82>
 8017dc0:	06dd      	lsls	r5, r3, #27
 8017dc2:	d411      	bmi.n	8017de8 <__swsetup_r+0x50>
 8017dc4:	2309      	movs	r3, #9
 8017dc6:	6033      	str	r3, [r6, #0]
 8017dc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017dcc:	81a3      	strh	r3, [r4, #12]
 8017dce:	f04f 30ff 	mov.w	r0, #4294967295
 8017dd2:	e03e      	b.n	8017e52 <__swsetup_r+0xba>
 8017dd4:	4b25      	ldr	r3, [pc, #148]	; (8017e6c <__swsetup_r+0xd4>)
 8017dd6:	429c      	cmp	r4, r3
 8017dd8:	d101      	bne.n	8017dde <__swsetup_r+0x46>
 8017dda:	68ac      	ldr	r4, [r5, #8]
 8017ddc:	e7eb      	b.n	8017db6 <__swsetup_r+0x1e>
 8017dde:	4b24      	ldr	r3, [pc, #144]	; (8017e70 <__swsetup_r+0xd8>)
 8017de0:	429c      	cmp	r4, r3
 8017de2:	bf08      	it	eq
 8017de4:	68ec      	ldreq	r4, [r5, #12]
 8017de6:	e7e6      	b.n	8017db6 <__swsetup_r+0x1e>
 8017de8:	0758      	lsls	r0, r3, #29
 8017dea:	d512      	bpl.n	8017e12 <__swsetup_r+0x7a>
 8017dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017dee:	b141      	cbz	r1, 8017e02 <__swsetup_r+0x6a>
 8017df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017df4:	4299      	cmp	r1, r3
 8017df6:	d002      	beq.n	8017dfe <__swsetup_r+0x66>
 8017df8:	4630      	mov	r0, r6
 8017dfa:	f7ff fb67 	bl	80174cc <_free_r>
 8017dfe:	2300      	movs	r3, #0
 8017e00:	6363      	str	r3, [r4, #52]	; 0x34
 8017e02:	89a3      	ldrh	r3, [r4, #12]
 8017e04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017e08:	81a3      	strh	r3, [r4, #12]
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	6063      	str	r3, [r4, #4]
 8017e0e:	6923      	ldr	r3, [r4, #16]
 8017e10:	6023      	str	r3, [r4, #0]
 8017e12:	89a3      	ldrh	r3, [r4, #12]
 8017e14:	f043 0308 	orr.w	r3, r3, #8
 8017e18:	81a3      	strh	r3, [r4, #12]
 8017e1a:	6923      	ldr	r3, [r4, #16]
 8017e1c:	b94b      	cbnz	r3, 8017e32 <__swsetup_r+0x9a>
 8017e1e:	89a3      	ldrh	r3, [r4, #12]
 8017e20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e28:	d003      	beq.n	8017e32 <__swsetup_r+0x9a>
 8017e2a:	4621      	mov	r1, r4
 8017e2c:	4630      	mov	r0, r6
 8017e2e:	f000 fa07 	bl	8018240 <__smakebuf_r>
 8017e32:	89a0      	ldrh	r0, [r4, #12]
 8017e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017e38:	f010 0301 	ands.w	r3, r0, #1
 8017e3c:	d00a      	beq.n	8017e54 <__swsetup_r+0xbc>
 8017e3e:	2300      	movs	r3, #0
 8017e40:	60a3      	str	r3, [r4, #8]
 8017e42:	6963      	ldr	r3, [r4, #20]
 8017e44:	425b      	negs	r3, r3
 8017e46:	61a3      	str	r3, [r4, #24]
 8017e48:	6923      	ldr	r3, [r4, #16]
 8017e4a:	b943      	cbnz	r3, 8017e5e <__swsetup_r+0xc6>
 8017e4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017e50:	d1ba      	bne.n	8017dc8 <__swsetup_r+0x30>
 8017e52:	bd70      	pop	{r4, r5, r6, pc}
 8017e54:	0781      	lsls	r1, r0, #30
 8017e56:	bf58      	it	pl
 8017e58:	6963      	ldrpl	r3, [r4, #20]
 8017e5a:	60a3      	str	r3, [r4, #8]
 8017e5c:	e7f4      	b.n	8017e48 <__swsetup_r+0xb0>
 8017e5e:	2000      	movs	r0, #0
 8017e60:	e7f7      	b.n	8017e52 <__swsetup_r+0xba>
 8017e62:	bf00      	nop
 8017e64:	24000020 	.word	0x24000020
 8017e68:	0801974c 	.word	0x0801974c
 8017e6c:	0801976c 	.word	0x0801976c
 8017e70:	0801972c 	.word	0x0801972c

08017e74 <abort>:
 8017e74:	b508      	push	{r3, lr}
 8017e76:	2006      	movs	r0, #6
 8017e78:	f000 fa52 	bl	8018320 <raise>
 8017e7c:	2001      	movs	r0, #1
 8017e7e:	f7ed fa8f 	bl	80053a0 <_exit>
	...

08017e84 <__sflush_r>:
 8017e84:	898a      	ldrh	r2, [r1, #12]
 8017e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e8a:	4605      	mov	r5, r0
 8017e8c:	0710      	lsls	r0, r2, #28
 8017e8e:	460c      	mov	r4, r1
 8017e90:	d458      	bmi.n	8017f44 <__sflush_r+0xc0>
 8017e92:	684b      	ldr	r3, [r1, #4]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	dc05      	bgt.n	8017ea4 <__sflush_r+0x20>
 8017e98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	dc02      	bgt.n	8017ea4 <__sflush_r+0x20>
 8017e9e:	2000      	movs	r0, #0
 8017ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017ea6:	2e00      	cmp	r6, #0
 8017ea8:	d0f9      	beq.n	8017e9e <__sflush_r+0x1a>
 8017eaa:	2300      	movs	r3, #0
 8017eac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017eb0:	682f      	ldr	r7, [r5, #0]
 8017eb2:	602b      	str	r3, [r5, #0]
 8017eb4:	d032      	beq.n	8017f1c <__sflush_r+0x98>
 8017eb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017eb8:	89a3      	ldrh	r3, [r4, #12]
 8017eba:	075a      	lsls	r2, r3, #29
 8017ebc:	d505      	bpl.n	8017eca <__sflush_r+0x46>
 8017ebe:	6863      	ldr	r3, [r4, #4]
 8017ec0:	1ac0      	subs	r0, r0, r3
 8017ec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ec4:	b10b      	cbz	r3, 8017eca <__sflush_r+0x46>
 8017ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017ec8:	1ac0      	subs	r0, r0, r3
 8017eca:	2300      	movs	r3, #0
 8017ecc:	4602      	mov	r2, r0
 8017ece:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017ed0:	6a21      	ldr	r1, [r4, #32]
 8017ed2:	4628      	mov	r0, r5
 8017ed4:	47b0      	blx	r6
 8017ed6:	1c43      	adds	r3, r0, #1
 8017ed8:	89a3      	ldrh	r3, [r4, #12]
 8017eda:	d106      	bne.n	8017eea <__sflush_r+0x66>
 8017edc:	6829      	ldr	r1, [r5, #0]
 8017ede:	291d      	cmp	r1, #29
 8017ee0:	d82c      	bhi.n	8017f3c <__sflush_r+0xb8>
 8017ee2:	4a2a      	ldr	r2, [pc, #168]	; (8017f8c <__sflush_r+0x108>)
 8017ee4:	40ca      	lsrs	r2, r1
 8017ee6:	07d6      	lsls	r6, r2, #31
 8017ee8:	d528      	bpl.n	8017f3c <__sflush_r+0xb8>
 8017eea:	2200      	movs	r2, #0
 8017eec:	6062      	str	r2, [r4, #4]
 8017eee:	04d9      	lsls	r1, r3, #19
 8017ef0:	6922      	ldr	r2, [r4, #16]
 8017ef2:	6022      	str	r2, [r4, #0]
 8017ef4:	d504      	bpl.n	8017f00 <__sflush_r+0x7c>
 8017ef6:	1c42      	adds	r2, r0, #1
 8017ef8:	d101      	bne.n	8017efe <__sflush_r+0x7a>
 8017efa:	682b      	ldr	r3, [r5, #0]
 8017efc:	b903      	cbnz	r3, 8017f00 <__sflush_r+0x7c>
 8017efe:	6560      	str	r0, [r4, #84]	; 0x54
 8017f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f02:	602f      	str	r7, [r5, #0]
 8017f04:	2900      	cmp	r1, #0
 8017f06:	d0ca      	beq.n	8017e9e <__sflush_r+0x1a>
 8017f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f0c:	4299      	cmp	r1, r3
 8017f0e:	d002      	beq.n	8017f16 <__sflush_r+0x92>
 8017f10:	4628      	mov	r0, r5
 8017f12:	f7ff fadb 	bl	80174cc <_free_r>
 8017f16:	2000      	movs	r0, #0
 8017f18:	6360      	str	r0, [r4, #52]	; 0x34
 8017f1a:	e7c1      	b.n	8017ea0 <__sflush_r+0x1c>
 8017f1c:	6a21      	ldr	r1, [r4, #32]
 8017f1e:	2301      	movs	r3, #1
 8017f20:	4628      	mov	r0, r5
 8017f22:	47b0      	blx	r6
 8017f24:	1c41      	adds	r1, r0, #1
 8017f26:	d1c7      	bne.n	8017eb8 <__sflush_r+0x34>
 8017f28:	682b      	ldr	r3, [r5, #0]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d0c4      	beq.n	8017eb8 <__sflush_r+0x34>
 8017f2e:	2b1d      	cmp	r3, #29
 8017f30:	d001      	beq.n	8017f36 <__sflush_r+0xb2>
 8017f32:	2b16      	cmp	r3, #22
 8017f34:	d101      	bne.n	8017f3a <__sflush_r+0xb6>
 8017f36:	602f      	str	r7, [r5, #0]
 8017f38:	e7b1      	b.n	8017e9e <__sflush_r+0x1a>
 8017f3a:	89a3      	ldrh	r3, [r4, #12]
 8017f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f40:	81a3      	strh	r3, [r4, #12]
 8017f42:	e7ad      	b.n	8017ea0 <__sflush_r+0x1c>
 8017f44:	690f      	ldr	r7, [r1, #16]
 8017f46:	2f00      	cmp	r7, #0
 8017f48:	d0a9      	beq.n	8017e9e <__sflush_r+0x1a>
 8017f4a:	0793      	lsls	r3, r2, #30
 8017f4c:	680e      	ldr	r6, [r1, #0]
 8017f4e:	bf08      	it	eq
 8017f50:	694b      	ldreq	r3, [r1, #20]
 8017f52:	600f      	str	r7, [r1, #0]
 8017f54:	bf18      	it	ne
 8017f56:	2300      	movne	r3, #0
 8017f58:	eba6 0807 	sub.w	r8, r6, r7
 8017f5c:	608b      	str	r3, [r1, #8]
 8017f5e:	f1b8 0f00 	cmp.w	r8, #0
 8017f62:	dd9c      	ble.n	8017e9e <__sflush_r+0x1a>
 8017f64:	6a21      	ldr	r1, [r4, #32]
 8017f66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017f68:	4643      	mov	r3, r8
 8017f6a:	463a      	mov	r2, r7
 8017f6c:	4628      	mov	r0, r5
 8017f6e:	47b0      	blx	r6
 8017f70:	2800      	cmp	r0, #0
 8017f72:	dc06      	bgt.n	8017f82 <__sflush_r+0xfe>
 8017f74:	89a3      	ldrh	r3, [r4, #12]
 8017f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f7a:	81a3      	strh	r3, [r4, #12]
 8017f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8017f80:	e78e      	b.n	8017ea0 <__sflush_r+0x1c>
 8017f82:	4407      	add	r7, r0
 8017f84:	eba8 0800 	sub.w	r8, r8, r0
 8017f88:	e7e9      	b.n	8017f5e <__sflush_r+0xda>
 8017f8a:	bf00      	nop
 8017f8c:	20400001 	.word	0x20400001

08017f90 <_fflush_r>:
 8017f90:	b538      	push	{r3, r4, r5, lr}
 8017f92:	690b      	ldr	r3, [r1, #16]
 8017f94:	4605      	mov	r5, r0
 8017f96:	460c      	mov	r4, r1
 8017f98:	b913      	cbnz	r3, 8017fa0 <_fflush_r+0x10>
 8017f9a:	2500      	movs	r5, #0
 8017f9c:	4628      	mov	r0, r5
 8017f9e:	bd38      	pop	{r3, r4, r5, pc}
 8017fa0:	b118      	cbz	r0, 8017faa <_fflush_r+0x1a>
 8017fa2:	6983      	ldr	r3, [r0, #24]
 8017fa4:	b90b      	cbnz	r3, 8017faa <_fflush_r+0x1a>
 8017fa6:	f000 f887 	bl	80180b8 <__sinit>
 8017faa:	4b14      	ldr	r3, [pc, #80]	; (8017ffc <_fflush_r+0x6c>)
 8017fac:	429c      	cmp	r4, r3
 8017fae:	d11b      	bne.n	8017fe8 <_fflush_r+0x58>
 8017fb0:	686c      	ldr	r4, [r5, #4]
 8017fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d0ef      	beq.n	8017f9a <_fflush_r+0xa>
 8017fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017fbc:	07d0      	lsls	r0, r2, #31
 8017fbe:	d404      	bmi.n	8017fca <_fflush_r+0x3a>
 8017fc0:	0599      	lsls	r1, r3, #22
 8017fc2:	d402      	bmi.n	8017fca <_fflush_r+0x3a>
 8017fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017fc6:	f000 f915 	bl	80181f4 <__retarget_lock_acquire_recursive>
 8017fca:	4628      	mov	r0, r5
 8017fcc:	4621      	mov	r1, r4
 8017fce:	f7ff ff59 	bl	8017e84 <__sflush_r>
 8017fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017fd4:	07da      	lsls	r2, r3, #31
 8017fd6:	4605      	mov	r5, r0
 8017fd8:	d4e0      	bmi.n	8017f9c <_fflush_r+0xc>
 8017fda:	89a3      	ldrh	r3, [r4, #12]
 8017fdc:	059b      	lsls	r3, r3, #22
 8017fde:	d4dd      	bmi.n	8017f9c <_fflush_r+0xc>
 8017fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017fe2:	f000 f908 	bl	80181f6 <__retarget_lock_release_recursive>
 8017fe6:	e7d9      	b.n	8017f9c <_fflush_r+0xc>
 8017fe8:	4b05      	ldr	r3, [pc, #20]	; (8018000 <_fflush_r+0x70>)
 8017fea:	429c      	cmp	r4, r3
 8017fec:	d101      	bne.n	8017ff2 <_fflush_r+0x62>
 8017fee:	68ac      	ldr	r4, [r5, #8]
 8017ff0:	e7df      	b.n	8017fb2 <_fflush_r+0x22>
 8017ff2:	4b04      	ldr	r3, [pc, #16]	; (8018004 <_fflush_r+0x74>)
 8017ff4:	429c      	cmp	r4, r3
 8017ff6:	bf08      	it	eq
 8017ff8:	68ec      	ldreq	r4, [r5, #12]
 8017ffa:	e7da      	b.n	8017fb2 <_fflush_r+0x22>
 8017ffc:	0801974c 	.word	0x0801974c
 8018000:	0801976c 	.word	0x0801976c
 8018004:	0801972c 	.word	0x0801972c

08018008 <std>:
 8018008:	2300      	movs	r3, #0
 801800a:	b510      	push	{r4, lr}
 801800c:	4604      	mov	r4, r0
 801800e:	e9c0 3300 	strd	r3, r3, [r0]
 8018012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018016:	6083      	str	r3, [r0, #8]
 8018018:	8181      	strh	r1, [r0, #12]
 801801a:	6643      	str	r3, [r0, #100]	; 0x64
 801801c:	81c2      	strh	r2, [r0, #14]
 801801e:	6183      	str	r3, [r0, #24]
 8018020:	4619      	mov	r1, r3
 8018022:	2208      	movs	r2, #8
 8018024:	305c      	adds	r0, #92	; 0x5c
 8018026:	f7fb fe7d 	bl	8013d24 <memset>
 801802a:	4b05      	ldr	r3, [pc, #20]	; (8018040 <std+0x38>)
 801802c:	6263      	str	r3, [r4, #36]	; 0x24
 801802e:	4b05      	ldr	r3, [pc, #20]	; (8018044 <std+0x3c>)
 8018030:	62a3      	str	r3, [r4, #40]	; 0x28
 8018032:	4b05      	ldr	r3, [pc, #20]	; (8018048 <std+0x40>)
 8018034:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018036:	4b05      	ldr	r3, [pc, #20]	; (801804c <std+0x44>)
 8018038:	6224      	str	r4, [r4, #32]
 801803a:	6323      	str	r3, [r4, #48]	; 0x30
 801803c:	bd10      	pop	{r4, pc}
 801803e:	bf00      	nop
 8018040:	08018359 	.word	0x08018359
 8018044:	0801837b 	.word	0x0801837b
 8018048:	080183b3 	.word	0x080183b3
 801804c:	080183d7 	.word	0x080183d7

08018050 <_cleanup_r>:
 8018050:	4901      	ldr	r1, [pc, #4]	; (8018058 <_cleanup_r+0x8>)
 8018052:	f000 b8af 	b.w	80181b4 <_fwalk_reent>
 8018056:	bf00      	nop
 8018058:	08017f91 	.word	0x08017f91

0801805c <__sfmoreglue>:
 801805c:	b570      	push	{r4, r5, r6, lr}
 801805e:	1e4a      	subs	r2, r1, #1
 8018060:	2568      	movs	r5, #104	; 0x68
 8018062:	4355      	muls	r5, r2
 8018064:	460e      	mov	r6, r1
 8018066:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801806a:	f7ff fa7f 	bl	801756c <_malloc_r>
 801806e:	4604      	mov	r4, r0
 8018070:	b140      	cbz	r0, 8018084 <__sfmoreglue+0x28>
 8018072:	2100      	movs	r1, #0
 8018074:	e9c0 1600 	strd	r1, r6, [r0]
 8018078:	300c      	adds	r0, #12
 801807a:	60a0      	str	r0, [r4, #8]
 801807c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018080:	f7fb fe50 	bl	8013d24 <memset>
 8018084:	4620      	mov	r0, r4
 8018086:	bd70      	pop	{r4, r5, r6, pc}

08018088 <__sfp_lock_acquire>:
 8018088:	4801      	ldr	r0, [pc, #4]	; (8018090 <__sfp_lock_acquire+0x8>)
 801808a:	f000 b8b3 	b.w	80181f4 <__retarget_lock_acquire_recursive>
 801808e:	bf00      	nop
 8018090:	24023c9c 	.word	0x24023c9c

08018094 <__sfp_lock_release>:
 8018094:	4801      	ldr	r0, [pc, #4]	; (801809c <__sfp_lock_release+0x8>)
 8018096:	f000 b8ae 	b.w	80181f6 <__retarget_lock_release_recursive>
 801809a:	bf00      	nop
 801809c:	24023c9c 	.word	0x24023c9c

080180a0 <__sinit_lock_acquire>:
 80180a0:	4801      	ldr	r0, [pc, #4]	; (80180a8 <__sinit_lock_acquire+0x8>)
 80180a2:	f000 b8a7 	b.w	80181f4 <__retarget_lock_acquire_recursive>
 80180a6:	bf00      	nop
 80180a8:	24023c97 	.word	0x24023c97

080180ac <__sinit_lock_release>:
 80180ac:	4801      	ldr	r0, [pc, #4]	; (80180b4 <__sinit_lock_release+0x8>)
 80180ae:	f000 b8a2 	b.w	80181f6 <__retarget_lock_release_recursive>
 80180b2:	bf00      	nop
 80180b4:	24023c97 	.word	0x24023c97

080180b8 <__sinit>:
 80180b8:	b510      	push	{r4, lr}
 80180ba:	4604      	mov	r4, r0
 80180bc:	f7ff fff0 	bl	80180a0 <__sinit_lock_acquire>
 80180c0:	69a3      	ldr	r3, [r4, #24]
 80180c2:	b11b      	cbz	r3, 80180cc <__sinit+0x14>
 80180c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180c8:	f7ff bff0 	b.w	80180ac <__sinit_lock_release>
 80180cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80180d0:	6523      	str	r3, [r4, #80]	; 0x50
 80180d2:	4b13      	ldr	r3, [pc, #76]	; (8018120 <__sinit+0x68>)
 80180d4:	4a13      	ldr	r2, [pc, #76]	; (8018124 <__sinit+0x6c>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80180da:	42a3      	cmp	r3, r4
 80180dc:	bf04      	itt	eq
 80180de:	2301      	moveq	r3, #1
 80180e0:	61a3      	streq	r3, [r4, #24]
 80180e2:	4620      	mov	r0, r4
 80180e4:	f000 f820 	bl	8018128 <__sfp>
 80180e8:	6060      	str	r0, [r4, #4]
 80180ea:	4620      	mov	r0, r4
 80180ec:	f000 f81c 	bl	8018128 <__sfp>
 80180f0:	60a0      	str	r0, [r4, #8]
 80180f2:	4620      	mov	r0, r4
 80180f4:	f000 f818 	bl	8018128 <__sfp>
 80180f8:	2200      	movs	r2, #0
 80180fa:	60e0      	str	r0, [r4, #12]
 80180fc:	2104      	movs	r1, #4
 80180fe:	6860      	ldr	r0, [r4, #4]
 8018100:	f7ff ff82 	bl	8018008 <std>
 8018104:	68a0      	ldr	r0, [r4, #8]
 8018106:	2201      	movs	r2, #1
 8018108:	2109      	movs	r1, #9
 801810a:	f7ff ff7d 	bl	8018008 <std>
 801810e:	68e0      	ldr	r0, [r4, #12]
 8018110:	2202      	movs	r2, #2
 8018112:	2112      	movs	r1, #18
 8018114:	f7ff ff78 	bl	8018008 <std>
 8018118:	2301      	movs	r3, #1
 801811a:	61a3      	str	r3, [r4, #24]
 801811c:	e7d2      	b.n	80180c4 <__sinit+0xc>
 801811e:	bf00      	nop
 8018120:	080192b8 	.word	0x080192b8
 8018124:	08018051 	.word	0x08018051

08018128 <__sfp>:
 8018128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801812a:	4607      	mov	r7, r0
 801812c:	f7ff ffac 	bl	8018088 <__sfp_lock_acquire>
 8018130:	4b1e      	ldr	r3, [pc, #120]	; (80181ac <__sfp+0x84>)
 8018132:	681e      	ldr	r6, [r3, #0]
 8018134:	69b3      	ldr	r3, [r6, #24]
 8018136:	b913      	cbnz	r3, 801813e <__sfp+0x16>
 8018138:	4630      	mov	r0, r6
 801813a:	f7ff ffbd 	bl	80180b8 <__sinit>
 801813e:	3648      	adds	r6, #72	; 0x48
 8018140:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018144:	3b01      	subs	r3, #1
 8018146:	d503      	bpl.n	8018150 <__sfp+0x28>
 8018148:	6833      	ldr	r3, [r6, #0]
 801814a:	b30b      	cbz	r3, 8018190 <__sfp+0x68>
 801814c:	6836      	ldr	r6, [r6, #0]
 801814e:	e7f7      	b.n	8018140 <__sfp+0x18>
 8018150:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018154:	b9d5      	cbnz	r5, 801818c <__sfp+0x64>
 8018156:	4b16      	ldr	r3, [pc, #88]	; (80181b0 <__sfp+0x88>)
 8018158:	60e3      	str	r3, [r4, #12]
 801815a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801815e:	6665      	str	r5, [r4, #100]	; 0x64
 8018160:	f000 f847 	bl	80181f2 <__retarget_lock_init_recursive>
 8018164:	f7ff ff96 	bl	8018094 <__sfp_lock_release>
 8018168:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801816c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018170:	6025      	str	r5, [r4, #0]
 8018172:	61a5      	str	r5, [r4, #24]
 8018174:	2208      	movs	r2, #8
 8018176:	4629      	mov	r1, r5
 8018178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801817c:	f7fb fdd2 	bl	8013d24 <memset>
 8018180:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018184:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018188:	4620      	mov	r0, r4
 801818a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801818c:	3468      	adds	r4, #104	; 0x68
 801818e:	e7d9      	b.n	8018144 <__sfp+0x1c>
 8018190:	2104      	movs	r1, #4
 8018192:	4638      	mov	r0, r7
 8018194:	f7ff ff62 	bl	801805c <__sfmoreglue>
 8018198:	4604      	mov	r4, r0
 801819a:	6030      	str	r0, [r6, #0]
 801819c:	2800      	cmp	r0, #0
 801819e:	d1d5      	bne.n	801814c <__sfp+0x24>
 80181a0:	f7ff ff78 	bl	8018094 <__sfp_lock_release>
 80181a4:	230c      	movs	r3, #12
 80181a6:	603b      	str	r3, [r7, #0]
 80181a8:	e7ee      	b.n	8018188 <__sfp+0x60>
 80181aa:	bf00      	nop
 80181ac:	080192b8 	.word	0x080192b8
 80181b0:	ffff0001 	.word	0xffff0001

080181b4 <_fwalk_reent>:
 80181b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181b8:	4606      	mov	r6, r0
 80181ba:	4688      	mov	r8, r1
 80181bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80181c0:	2700      	movs	r7, #0
 80181c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181c6:	f1b9 0901 	subs.w	r9, r9, #1
 80181ca:	d505      	bpl.n	80181d8 <_fwalk_reent+0x24>
 80181cc:	6824      	ldr	r4, [r4, #0]
 80181ce:	2c00      	cmp	r4, #0
 80181d0:	d1f7      	bne.n	80181c2 <_fwalk_reent+0xe>
 80181d2:	4638      	mov	r0, r7
 80181d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181d8:	89ab      	ldrh	r3, [r5, #12]
 80181da:	2b01      	cmp	r3, #1
 80181dc:	d907      	bls.n	80181ee <_fwalk_reent+0x3a>
 80181de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181e2:	3301      	adds	r3, #1
 80181e4:	d003      	beq.n	80181ee <_fwalk_reent+0x3a>
 80181e6:	4629      	mov	r1, r5
 80181e8:	4630      	mov	r0, r6
 80181ea:	47c0      	blx	r8
 80181ec:	4307      	orrs	r7, r0
 80181ee:	3568      	adds	r5, #104	; 0x68
 80181f0:	e7e9      	b.n	80181c6 <_fwalk_reent+0x12>

080181f2 <__retarget_lock_init_recursive>:
 80181f2:	4770      	bx	lr

080181f4 <__retarget_lock_acquire_recursive>:
 80181f4:	4770      	bx	lr

080181f6 <__retarget_lock_release_recursive>:
 80181f6:	4770      	bx	lr

080181f8 <__swhatbuf_r>:
 80181f8:	b570      	push	{r4, r5, r6, lr}
 80181fa:	460e      	mov	r6, r1
 80181fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018200:	2900      	cmp	r1, #0
 8018202:	b096      	sub	sp, #88	; 0x58
 8018204:	4614      	mov	r4, r2
 8018206:	461d      	mov	r5, r3
 8018208:	da07      	bge.n	801821a <__swhatbuf_r+0x22>
 801820a:	2300      	movs	r3, #0
 801820c:	602b      	str	r3, [r5, #0]
 801820e:	89b3      	ldrh	r3, [r6, #12]
 8018210:	061a      	lsls	r2, r3, #24
 8018212:	d410      	bmi.n	8018236 <__swhatbuf_r+0x3e>
 8018214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018218:	e00e      	b.n	8018238 <__swhatbuf_r+0x40>
 801821a:	466a      	mov	r2, sp
 801821c:	f000 f902 	bl	8018424 <_fstat_r>
 8018220:	2800      	cmp	r0, #0
 8018222:	dbf2      	blt.n	801820a <__swhatbuf_r+0x12>
 8018224:	9a01      	ldr	r2, [sp, #4]
 8018226:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801822a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801822e:	425a      	negs	r2, r3
 8018230:	415a      	adcs	r2, r3
 8018232:	602a      	str	r2, [r5, #0]
 8018234:	e7ee      	b.n	8018214 <__swhatbuf_r+0x1c>
 8018236:	2340      	movs	r3, #64	; 0x40
 8018238:	2000      	movs	r0, #0
 801823a:	6023      	str	r3, [r4, #0]
 801823c:	b016      	add	sp, #88	; 0x58
 801823e:	bd70      	pop	{r4, r5, r6, pc}

08018240 <__smakebuf_r>:
 8018240:	898b      	ldrh	r3, [r1, #12]
 8018242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018244:	079d      	lsls	r5, r3, #30
 8018246:	4606      	mov	r6, r0
 8018248:	460c      	mov	r4, r1
 801824a:	d507      	bpl.n	801825c <__smakebuf_r+0x1c>
 801824c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018250:	6023      	str	r3, [r4, #0]
 8018252:	6123      	str	r3, [r4, #16]
 8018254:	2301      	movs	r3, #1
 8018256:	6163      	str	r3, [r4, #20]
 8018258:	b002      	add	sp, #8
 801825a:	bd70      	pop	{r4, r5, r6, pc}
 801825c:	ab01      	add	r3, sp, #4
 801825e:	466a      	mov	r2, sp
 8018260:	f7ff ffca 	bl	80181f8 <__swhatbuf_r>
 8018264:	9900      	ldr	r1, [sp, #0]
 8018266:	4605      	mov	r5, r0
 8018268:	4630      	mov	r0, r6
 801826a:	f7ff f97f 	bl	801756c <_malloc_r>
 801826e:	b948      	cbnz	r0, 8018284 <__smakebuf_r+0x44>
 8018270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018274:	059a      	lsls	r2, r3, #22
 8018276:	d4ef      	bmi.n	8018258 <__smakebuf_r+0x18>
 8018278:	f023 0303 	bic.w	r3, r3, #3
 801827c:	f043 0302 	orr.w	r3, r3, #2
 8018280:	81a3      	strh	r3, [r4, #12]
 8018282:	e7e3      	b.n	801824c <__smakebuf_r+0xc>
 8018284:	4b0d      	ldr	r3, [pc, #52]	; (80182bc <__smakebuf_r+0x7c>)
 8018286:	62b3      	str	r3, [r6, #40]	; 0x28
 8018288:	89a3      	ldrh	r3, [r4, #12]
 801828a:	6020      	str	r0, [r4, #0]
 801828c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018290:	81a3      	strh	r3, [r4, #12]
 8018292:	9b00      	ldr	r3, [sp, #0]
 8018294:	6163      	str	r3, [r4, #20]
 8018296:	9b01      	ldr	r3, [sp, #4]
 8018298:	6120      	str	r0, [r4, #16]
 801829a:	b15b      	cbz	r3, 80182b4 <__smakebuf_r+0x74>
 801829c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182a0:	4630      	mov	r0, r6
 80182a2:	f000 f8d1 	bl	8018448 <_isatty_r>
 80182a6:	b128      	cbz	r0, 80182b4 <__smakebuf_r+0x74>
 80182a8:	89a3      	ldrh	r3, [r4, #12]
 80182aa:	f023 0303 	bic.w	r3, r3, #3
 80182ae:	f043 0301 	orr.w	r3, r3, #1
 80182b2:	81a3      	strh	r3, [r4, #12]
 80182b4:	89a0      	ldrh	r0, [r4, #12]
 80182b6:	4305      	orrs	r5, r0
 80182b8:	81a5      	strh	r5, [r4, #12]
 80182ba:	e7cd      	b.n	8018258 <__smakebuf_r+0x18>
 80182bc:	08018051 	.word	0x08018051

080182c0 <_malloc_usable_size_r>:
 80182c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182c4:	1f18      	subs	r0, r3, #4
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	bfbc      	itt	lt
 80182ca:	580b      	ldrlt	r3, [r1, r0]
 80182cc:	18c0      	addlt	r0, r0, r3
 80182ce:	4770      	bx	lr

080182d0 <_raise_r>:
 80182d0:	291f      	cmp	r1, #31
 80182d2:	b538      	push	{r3, r4, r5, lr}
 80182d4:	4604      	mov	r4, r0
 80182d6:	460d      	mov	r5, r1
 80182d8:	d904      	bls.n	80182e4 <_raise_r+0x14>
 80182da:	2316      	movs	r3, #22
 80182dc:	6003      	str	r3, [r0, #0]
 80182de:	f04f 30ff 	mov.w	r0, #4294967295
 80182e2:	bd38      	pop	{r3, r4, r5, pc}
 80182e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80182e6:	b112      	cbz	r2, 80182ee <_raise_r+0x1e>
 80182e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80182ec:	b94b      	cbnz	r3, 8018302 <_raise_r+0x32>
 80182ee:	4620      	mov	r0, r4
 80182f0:	f000 f830 	bl	8018354 <_getpid_r>
 80182f4:	462a      	mov	r2, r5
 80182f6:	4601      	mov	r1, r0
 80182f8:	4620      	mov	r0, r4
 80182fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80182fe:	f000 b817 	b.w	8018330 <_kill_r>
 8018302:	2b01      	cmp	r3, #1
 8018304:	d00a      	beq.n	801831c <_raise_r+0x4c>
 8018306:	1c59      	adds	r1, r3, #1
 8018308:	d103      	bne.n	8018312 <_raise_r+0x42>
 801830a:	2316      	movs	r3, #22
 801830c:	6003      	str	r3, [r0, #0]
 801830e:	2001      	movs	r0, #1
 8018310:	e7e7      	b.n	80182e2 <_raise_r+0x12>
 8018312:	2400      	movs	r4, #0
 8018314:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018318:	4628      	mov	r0, r5
 801831a:	4798      	blx	r3
 801831c:	2000      	movs	r0, #0
 801831e:	e7e0      	b.n	80182e2 <_raise_r+0x12>

08018320 <raise>:
 8018320:	4b02      	ldr	r3, [pc, #8]	; (801832c <raise+0xc>)
 8018322:	4601      	mov	r1, r0
 8018324:	6818      	ldr	r0, [r3, #0]
 8018326:	f7ff bfd3 	b.w	80182d0 <_raise_r>
 801832a:	bf00      	nop
 801832c:	24000020 	.word	0x24000020

08018330 <_kill_r>:
 8018330:	b538      	push	{r3, r4, r5, lr}
 8018332:	4d07      	ldr	r5, [pc, #28]	; (8018350 <_kill_r+0x20>)
 8018334:	2300      	movs	r3, #0
 8018336:	4604      	mov	r4, r0
 8018338:	4608      	mov	r0, r1
 801833a:	4611      	mov	r1, r2
 801833c:	602b      	str	r3, [r5, #0]
 801833e:	f7ed f81f 	bl	8005380 <_kill>
 8018342:	1c43      	adds	r3, r0, #1
 8018344:	d102      	bne.n	801834c <_kill_r+0x1c>
 8018346:	682b      	ldr	r3, [r5, #0]
 8018348:	b103      	cbz	r3, 801834c <_kill_r+0x1c>
 801834a:	6023      	str	r3, [r4, #0]
 801834c:	bd38      	pop	{r3, r4, r5, pc}
 801834e:	bf00      	nop
 8018350:	24023c90 	.word	0x24023c90

08018354 <_getpid_r>:
 8018354:	f7ed b80c 	b.w	8005370 <_getpid>

08018358 <__sread>:
 8018358:	b510      	push	{r4, lr}
 801835a:	460c      	mov	r4, r1
 801835c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018360:	f000 f894 	bl	801848c <_read_r>
 8018364:	2800      	cmp	r0, #0
 8018366:	bfab      	itete	ge
 8018368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801836a:	89a3      	ldrhlt	r3, [r4, #12]
 801836c:	181b      	addge	r3, r3, r0
 801836e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018372:	bfac      	ite	ge
 8018374:	6563      	strge	r3, [r4, #84]	; 0x54
 8018376:	81a3      	strhlt	r3, [r4, #12]
 8018378:	bd10      	pop	{r4, pc}

0801837a <__swrite>:
 801837a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801837e:	461f      	mov	r7, r3
 8018380:	898b      	ldrh	r3, [r1, #12]
 8018382:	05db      	lsls	r3, r3, #23
 8018384:	4605      	mov	r5, r0
 8018386:	460c      	mov	r4, r1
 8018388:	4616      	mov	r6, r2
 801838a:	d505      	bpl.n	8018398 <__swrite+0x1e>
 801838c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018390:	2302      	movs	r3, #2
 8018392:	2200      	movs	r2, #0
 8018394:	f000 f868 	bl	8018468 <_lseek_r>
 8018398:	89a3      	ldrh	r3, [r4, #12]
 801839a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801839e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80183a2:	81a3      	strh	r3, [r4, #12]
 80183a4:	4632      	mov	r2, r6
 80183a6:	463b      	mov	r3, r7
 80183a8:	4628      	mov	r0, r5
 80183aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183ae:	f000 b817 	b.w	80183e0 <_write_r>

080183b2 <__sseek>:
 80183b2:	b510      	push	{r4, lr}
 80183b4:	460c      	mov	r4, r1
 80183b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183ba:	f000 f855 	bl	8018468 <_lseek_r>
 80183be:	1c43      	adds	r3, r0, #1
 80183c0:	89a3      	ldrh	r3, [r4, #12]
 80183c2:	bf15      	itete	ne
 80183c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80183c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80183ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80183ce:	81a3      	strheq	r3, [r4, #12]
 80183d0:	bf18      	it	ne
 80183d2:	81a3      	strhne	r3, [r4, #12]
 80183d4:	bd10      	pop	{r4, pc}

080183d6 <__sclose>:
 80183d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183da:	f000 b813 	b.w	8018404 <_close_r>
	...

080183e0 <_write_r>:
 80183e0:	b538      	push	{r3, r4, r5, lr}
 80183e2:	4d07      	ldr	r5, [pc, #28]	; (8018400 <_write_r+0x20>)
 80183e4:	4604      	mov	r4, r0
 80183e6:	4608      	mov	r0, r1
 80183e8:	4611      	mov	r1, r2
 80183ea:	2200      	movs	r2, #0
 80183ec:	602a      	str	r2, [r5, #0]
 80183ee:	461a      	mov	r2, r3
 80183f0:	f7ec fffd 	bl	80053ee <_write>
 80183f4:	1c43      	adds	r3, r0, #1
 80183f6:	d102      	bne.n	80183fe <_write_r+0x1e>
 80183f8:	682b      	ldr	r3, [r5, #0]
 80183fa:	b103      	cbz	r3, 80183fe <_write_r+0x1e>
 80183fc:	6023      	str	r3, [r4, #0]
 80183fe:	bd38      	pop	{r3, r4, r5, pc}
 8018400:	24023c90 	.word	0x24023c90

08018404 <_close_r>:
 8018404:	b538      	push	{r3, r4, r5, lr}
 8018406:	4d06      	ldr	r5, [pc, #24]	; (8018420 <_close_r+0x1c>)
 8018408:	2300      	movs	r3, #0
 801840a:	4604      	mov	r4, r0
 801840c:	4608      	mov	r0, r1
 801840e:	602b      	str	r3, [r5, #0]
 8018410:	f7ed f809 	bl	8005426 <_close>
 8018414:	1c43      	adds	r3, r0, #1
 8018416:	d102      	bne.n	801841e <_close_r+0x1a>
 8018418:	682b      	ldr	r3, [r5, #0]
 801841a:	b103      	cbz	r3, 801841e <_close_r+0x1a>
 801841c:	6023      	str	r3, [r4, #0]
 801841e:	bd38      	pop	{r3, r4, r5, pc}
 8018420:	24023c90 	.word	0x24023c90

08018424 <_fstat_r>:
 8018424:	b538      	push	{r3, r4, r5, lr}
 8018426:	4d07      	ldr	r5, [pc, #28]	; (8018444 <_fstat_r+0x20>)
 8018428:	2300      	movs	r3, #0
 801842a:	4604      	mov	r4, r0
 801842c:	4608      	mov	r0, r1
 801842e:	4611      	mov	r1, r2
 8018430:	602b      	str	r3, [r5, #0]
 8018432:	f7ed f804 	bl	800543e <_fstat>
 8018436:	1c43      	adds	r3, r0, #1
 8018438:	d102      	bne.n	8018440 <_fstat_r+0x1c>
 801843a:	682b      	ldr	r3, [r5, #0]
 801843c:	b103      	cbz	r3, 8018440 <_fstat_r+0x1c>
 801843e:	6023      	str	r3, [r4, #0]
 8018440:	bd38      	pop	{r3, r4, r5, pc}
 8018442:	bf00      	nop
 8018444:	24023c90 	.word	0x24023c90

08018448 <_isatty_r>:
 8018448:	b538      	push	{r3, r4, r5, lr}
 801844a:	4d06      	ldr	r5, [pc, #24]	; (8018464 <_isatty_r+0x1c>)
 801844c:	2300      	movs	r3, #0
 801844e:	4604      	mov	r4, r0
 8018450:	4608      	mov	r0, r1
 8018452:	602b      	str	r3, [r5, #0]
 8018454:	f7ed f803 	bl	800545e <_isatty>
 8018458:	1c43      	adds	r3, r0, #1
 801845a:	d102      	bne.n	8018462 <_isatty_r+0x1a>
 801845c:	682b      	ldr	r3, [r5, #0]
 801845e:	b103      	cbz	r3, 8018462 <_isatty_r+0x1a>
 8018460:	6023      	str	r3, [r4, #0]
 8018462:	bd38      	pop	{r3, r4, r5, pc}
 8018464:	24023c90 	.word	0x24023c90

08018468 <_lseek_r>:
 8018468:	b538      	push	{r3, r4, r5, lr}
 801846a:	4d07      	ldr	r5, [pc, #28]	; (8018488 <_lseek_r+0x20>)
 801846c:	4604      	mov	r4, r0
 801846e:	4608      	mov	r0, r1
 8018470:	4611      	mov	r1, r2
 8018472:	2200      	movs	r2, #0
 8018474:	602a      	str	r2, [r5, #0]
 8018476:	461a      	mov	r2, r3
 8018478:	f7ec fffc 	bl	8005474 <_lseek>
 801847c:	1c43      	adds	r3, r0, #1
 801847e:	d102      	bne.n	8018486 <_lseek_r+0x1e>
 8018480:	682b      	ldr	r3, [r5, #0]
 8018482:	b103      	cbz	r3, 8018486 <_lseek_r+0x1e>
 8018484:	6023      	str	r3, [r4, #0]
 8018486:	bd38      	pop	{r3, r4, r5, pc}
 8018488:	24023c90 	.word	0x24023c90

0801848c <_read_r>:
 801848c:	b538      	push	{r3, r4, r5, lr}
 801848e:	4d07      	ldr	r5, [pc, #28]	; (80184ac <_read_r+0x20>)
 8018490:	4604      	mov	r4, r0
 8018492:	4608      	mov	r0, r1
 8018494:	4611      	mov	r1, r2
 8018496:	2200      	movs	r2, #0
 8018498:	602a      	str	r2, [r5, #0]
 801849a:	461a      	mov	r2, r3
 801849c:	f7ec ff8a 	bl	80053b4 <_read>
 80184a0:	1c43      	adds	r3, r0, #1
 80184a2:	d102      	bne.n	80184aa <_read_r+0x1e>
 80184a4:	682b      	ldr	r3, [r5, #0]
 80184a6:	b103      	cbz	r3, 80184aa <_read_r+0x1e>
 80184a8:	6023      	str	r3, [r4, #0]
 80184aa:	bd38      	pop	{r3, r4, r5, pc}
 80184ac:	24023c90 	.word	0x24023c90

080184b0 <cos>:
 80184b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80184b2:	eeb0 7b40 	vmov.f64	d7, d0
 80184b6:	ee17 3a90 	vmov	r3, s15
 80184ba:	4a1f      	ldr	r2, [pc, #124]	; (8018538 <cos+0x88>)
 80184bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80184c0:	4293      	cmp	r3, r2
 80184c2:	dc04      	bgt.n	80184ce <cos+0x1e>
 80184c4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8018530 <cos+0x80>
 80184c8:	f000 f9c2 	bl	8018850 <__kernel_cos>
 80184cc:	e004      	b.n	80184d8 <cos+0x28>
 80184ce:	4a1b      	ldr	r2, [pc, #108]	; (801853c <cos+0x8c>)
 80184d0:	4293      	cmp	r3, r2
 80184d2:	dd04      	ble.n	80184de <cos+0x2e>
 80184d4:	ee30 0b40 	vsub.f64	d0, d0, d0
 80184d8:	b005      	add	sp, #20
 80184da:	f85d fb04 	ldr.w	pc, [sp], #4
 80184de:	4668      	mov	r0, sp
 80184e0:	f000 f876 	bl	80185d0 <__ieee754_rem_pio2>
 80184e4:	f000 0003 	and.w	r0, r0, #3
 80184e8:	2801      	cmp	r0, #1
 80184ea:	d007      	beq.n	80184fc <cos+0x4c>
 80184ec:	2802      	cmp	r0, #2
 80184ee:	d00e      	beq.n	801850e <cos+0x5e>
 80184f0:	b9a0      	cbnz	r0, 801851c <cos+0x6c>
 80184f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80184f6:	ed9d 0b00 	vldr	d0, [sp]
 80184fa:	e7e5      	b.n	80184c8 <cos+0x18>
 80184fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018500:	ed9d 0b00 	vldr	d0, [sp]
 8018504:	f000 fc90 	bl	8018e28 <__kernel_sin>
 8018508:	eeb1 0b40 	vneg.f64	d0, d0
 801850c:	e7e4      	b.n	80184d8 <cos+0x28>
 801850e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018512:	ed9d 0b00 	vldr	d0, [sp]
 8018516:	f000 f99b 	bl	8018850 <__kernel_cos>
 801851a:	e7f5      	b.n	8018508 <cos+0x58>
 801851c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018520:	ed9d 0b00 	vldr	d0, [sp]
 8018524:	2001      	movs	r0, #1
 8018526:	f000 fc7f 	bl	8018e28 <__kernel_sin>
 801852a:	e7d5      	b.n	80184d8 <cos+0x28>
 801852c:	f3af 8000 	nop.w
	...
 8018538:	3fe921fb 	.word	0x3fe921fb
 801853c:	7fefffff 	.word	0x7fefffff

08018540 <sin>:
 8018540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018542:	eeb0 7b40 	vmov.f64	d7, d0
 8018546:	ee17 3a90 	vmov	r3, s15
 801854a:	4a1f      	ldr	r2, [pc, #124]	; (80185c8 <sin+0x88>)
 801854c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018550:	4293      	cmp	r3, r2
 8018552:	dc05      	bgt.n	8018560 <sin+0x20>
 8018554:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80185c0 <sin+0x80>
 8018558:	2000      	movs	r0, #0
 801855a:	f000 fc65 	bl	8018e28 <__kernel_sin>
 801855e:	e004      	b.n	801856a <sin+0x2a>
 8018560:	4a1a      	ldr	r2, [pc, #104]	; (80185cc <sin+0x8c>)
 8018562:	4293      	cmp	r3, r2
 8018564:	dd04      	ble.n	8018570 <sin+0x30>
 8018566:	ee30 0b40 	vsub.f64	d0, d0, d0
 801856a:	b005      	add	sp, #20
 801856c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018570:	4668      	mov	r0, sp
 8018572:	f000 f82d 	bl	80185d0 <__ieee754_rem_pio2>
 8018576:	f000 0003 	and.w	r0, r0, #3
 801857a:	2801      	cmp	r0, #1
 801857c:	d008      	beq.n	8018590 <sin+0x50>
 801857e:	2802      	cmp	r0, #2
 8018580:	d00d      	beq.n	801859e <sin+0x5e>
 8018582:	b9b0      	cbnz	r0, 80185b2 <sin+0x72>
 8018584:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018588:	ed9d 0b00 	vldr	d0, [sp]
 801858c:	2001      	movs	r0, #1
 801858e:	e7e4      	b.n	801855a <sin+0x1a>
 8018590:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018594:	ed9d 0b00 	vldr	d0, [sp]
 8018598:	f000 f95a 	bl	8018850 <__kernel_cos>
 801859c:	e7e5      	b.n	801856a <sin+0x2a>
 801859e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80185a2:	ed9d 0b00 	vldr	d0, [sp]
 80185a6:	2001      	movs	r0, #1
 80185a8:	f000 fc3e 	bl	8018e28 <__kernel_sin>
 80185ac:	eeb1 0b40 	vneg.f64	d0, d0
 80185b0:	e7db      	b.n	801856a <sin+0x2a>
 80185b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80185b6:	ed9d 0b00 	vldr	d0, [sp]
 80185ba:	f000 f949 	bl	8018850 <__kernel_cos>
 80185be:	e7f5      	b.n	80185ac <sin+0x6c>
	...
 80185c8:	3fe921fb 	.word	0x3fe921fb
 80185cc:	7fefffff 	.word	0x7fefffff

080185d0 <__ieee754_rem_pio2>:
 80185d0:	b570      	push	{r4, r5, r6, lr}
 80185d2:	eeb0 7b40 	vmov.f64	d7, d0
 80185d6:	ee17 5a90 	vmov	r5, s15
 80185da:	4b97      	ldr	r3, [pc, #604]	; (8018838 <__ieee754_rem_pio2+0x268>)
 80185dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80185e0:	429e      	cmp	r6, r3
 80185e2:	b088      	sub	sp, #32
 80185e4:	4604      	mov	r4, r0
 80185e6:	dc07      	bgt.n	80185f8 <__ieee754_rem_pio2+0x28>
 80185e8:	2200      	movs	r2, #0
 80185ea:	2300      	movs	r3, #0
 80185ec:	ed84 0b00 	vstr	d0, [r4]
 80185f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80185f4:	2000      	movs	r0, #0
 80185f6:	e01b      	b.n	8018630 <__ieee754_rem_pio2+0x60>
 80185f8:	4b90      	ldr	r3, [pc, #576]	; (801883c <__ieee754_rem_pio2+0x26c>)
 80185fa:	429e      	cmp	r6, r3
 80185fc:	dc3b      	bgt.n	8018676 <__ieee754_rem_pio2+0xa6>
 80185fe:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8018602:	2d00      	cmp	r5, #0
 8018604:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80187f8 <__ieee754_rem_pio2+0x228>
 8018608:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801860c:	dd19      	ble.n	8018642 <__ieee754_rem_pio2+0x72>
 801860e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8018612:	429e      	cmp	r6, r3
 8018614:	d00e      	beq.n	8018634 <__ieee754_rem_pio2+0x64>
 8018616:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8018800 <__ieee754_rem_pio2+0x230>
 801861a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801861e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018622:	ed84 5b00 	vstr	d5, [r4]
 8018626:	ee37 7b46 	vsub.f64	d7, d7, d6
 801862a:	ed84 7b02 	vstr	d7, [r4, #8]
 801862e:	2001      	movs	r0, #1
 8018630:	b008      	add	sp, #32
 8018632:	bd70      	pop	{r4, r5, r6, pc}
 8018634:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8018808 <__ieee754_rem_pio2+0x238>
 8018638:	ee37 7b46 	vsub.f64	d7, d7, d6
 801863c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8018810 <__ieee754_rem_pio2+0x240>
 8018640:	e7eb      	b.n	801861a <__ieee754_rem_pio2+0x4a>
 8018642:	429e      	cmp	r6, r3
 8018644:	ee30 7b06 	vadd.f64	d7, d0, d6
 8018648:	d00e      	beq.n	8018668 <__ieee754_rem_pio2+0x98>
 801864a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8018800 <__ieee754_rem_pio2+0x230>
 801864e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8018652:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018656:	ed84 5b00 	vstr	d5, [r4]
 801865a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801865e:	f04f 30ff 	mov.w	r0, #4294967295
 8018662:	ed84 7b02 	vstr	d7, [r4, #8]
 8018666:	e7e3      	b.n	8018630 <__ieee754_rem_pio2+0x60>
 8018668:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8018808 <__ieee754_rem_pio2+0x238>
 801866c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018670:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8018810 <__ieee754_rem_pio2+0x240>
 8018674:	e7eb      	b.n	801864e <__ieee754_rem_pio2+0x7e>
 8018676:	4b72      	ldr	r3, [pc, #456]	; (8018840 <__ieee754_rem_pio2+0x270>)
 8018678:	429e      	cmp	r6, r3
 801867a:	dc6e      	bgt.n	801875a <__ieee754_rem_pio2+0x18a>
 801867c:	f000 fc2c 	bl	8018ed8 <fabs>
 8018680:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8018684:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8018818 <__ieee754_rem_pio2+0x248>
 8018688:	eea0 7b06 	vfma.f64	d7, d0, d6
 801868c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8018690:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8018694:	ee17 0a90 	vmov	r0, s15
 8018698:	eeb1 4b45 	vneg.f64	d4, d5
 801869c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80187f8 <__ieee754_rem_pio2+0x228>
 80186a0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80186a4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8018800 <__ieee754_rem_pio2+0x230>
 80186a8:	281f      	cmp	r0, #31
 80186aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80186ae:	ee30 6b47 	vsub.f64	d6, d0, d7
 80186b2:	dc08      	bgt.n	80186c6 <__ieee754_rem_pio2+0xf6>
 80186b4:	4b63      	ldr	r3, [pc, #396]	; (8018844 <__ieee754_rem_pio2+0x274>)
 80186b6:	1e42      	subs	r2, r0, #1
 80186b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186bc:	42b3      	cmp	r3, r6
 80186be:	d002      	beq.n	80186c6 <__ieee754_rem_pio2+0xf6>
 80186c0:	ed84 6b00 	vstr	d6, [r4]
 80186c4:	e024      	b.n	8018710 <__ieee754_rem_pio2+0x140>
 80186c6:	ee16 3a90 	vmov	r3, s13
 80186ca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80186ce:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80186d2:	2b10      	cmp	r3, #16
 80186d4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80186d8:	ddf2      	ble.n	80186c0 <__ieee754_rem_pio2+0xf0>
 80186da:	eeb0 6b40 	vmov.f64	d6, d0
 80186de:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8018808 <__ieee754_rem_pio2+0x238>
 80186e2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80186e6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80186ea:	eea4 7b03 	vfma.f64	d7, d4, d3
 80186ee:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8018810 <__ieee754_rem_pio2+0x240>
 80186f2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80186f6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80186fa:	ee13 3a90 	vmov	r3, s7
 80186fe:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8018702:	1ad3      	subs	r3, r2, r3
 8018704:	2b31      	cmp	r3, #49	; 0x31
 8018706:	dc17      	bgt.n	8018738 <__ieee754_rem_pio2+0x168>
 8018708:	eeb0 0b46 	vmov.f64	d0, d6
 801870c:	ed84 3b00 	vstr	d3, [r4]
 8018710:	ed94 6b00 	vldr	d6, [r4]
 8018714:	2d00      	cmp	r5, #0
 8018716:	ee30 0b46 	vsub.f64	d0, d0, d6
 801871a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801871e:	ed84 7b02 	vstr	d7, [r4, #8]
 8018722:	da85      	bge.n	8018630 <__ieee754_rem_pio2+0x60>
 8018724:	eeb1 6b46 	vneg.f64	d6, d6
 8018728:	ed84 6b00 	vstr	d6, [r4]
 801872c:	eeb1 7b47 	vneg.f64	d7, d7
 8018730:	4240      	negs	r0, r0
 8018732:	ed84 7b02 	vstr	d7, [r4, #8]
 8018736:	e77b      	b.n	8018630 <__ieee754_rem_pio2+0x60>
 8018738:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8018820 <__ieee754_rem_pio2+0x250>
 801873c:	eeb0 0b46 	vmov.f64	d0, d6
 8018740:	eea4 0b03 	vfma.f64	d0, d4, d3
 8018744:	ee36 7b40 	vsub.f64	d7, d6, d0
 8018748:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8018828 <__ieee754_rem_pio2+0x258>
 801874c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8018750:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8018754:	ee30 6b47 	vsub.f64	d6, d0, d7
 8018758:	e7b2      	b.n	80186c0 <__ieee754_rem_pio2+0xf0>
 801875a:	4b3b      	ldr	r3, [pc, #236]	; (8018848 <__ieee754_rem_pio2+0x278>)
 801875c:	429e      	cmp	r6, r3
 801875e:	dd06      	ble.n	801876e <__ieee754_rem_pio2+0x19e>
 8018760:	ee30 7b40 	vsub.f64	d7, d0, d0
 8018764:	ed80 7b02 	vstr	d7, [r0, #8]
 8018768:	ed80 7b00 	vstr	d7, [r0]
 801876c:	e742      	b.n	80185f4 <__ieee754_rem_pio2+0x24>
 801876e:	1532      	asrs	r2, r6, #20
 8018770:	ee10 0a10 	vmov	r0, s0
 8018774:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8018778:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801877c:	ec41 0b17 	vmov	d7, r0, r1
 8018780:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8018784:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8018830 <__ieee754_rem_pio2+0x260>
 8018788:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801878c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018790:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018794:	ee27 7b05 	vmul.f64	d7, d7, d5
 8018798:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801879c:	a902      	add	r1, sp, #8
 801879e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80187a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80187a6:	ed8d 6b04 	vstr	d6, [sp, #16]
 80187aa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80187ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80187b2:	2603      	movs	r6, #3
 80187b4:	4608      	mov	r0, r1
 80187b6:	ed91 7b04 	vldr	d7, [r1, #16]
 80187ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80187be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187c2:	4633      	mov	r3, r6
 80187c4:	f1a1 0108 	sub.w	r1, r1, #8
 80187c8:	f106 36ff 	add.w	r6, r6, #4294967295
 80187cc:	d0f3      	beq.n	80187b6 <__ieee754_rem_pio2+0x1e6>
 80187ce:	491f      	ldr	r1, [pc, #124]	; (801884c <__ieee754_rem_pio2+0x27c>)
 80187d0:	9101      	str	r1, [sp, #4]
 80187d2:	2102      	movs	r1, #2
 80187d4:	9100      	str	r1, [sp, #0]
 80187d6:	4621      	mov	r1, r4
 80187d8:	f000 f8a6 	bl	8018928 <__kernel_rem_pio2>
 80187dc:	2d00      	cmp	r5, #0
 80187de:	f6bf af27 	bge.w	8018630 <__ieee754_rem_pio2+0x60>
 80187e2:	ed94 7b00 	vldr	d7, [r4]
 80187e6:	eeb1 7b47 	vneg.f64	d7, d7
 80187ea:	ed84 7b00 	vstr	d7, [r4]
 80187ee:	ed94 7b02 	vldr	d7, [r4, #8]
 80187f2:	e79b      	b.n	801872c <__ieee754_rem_pio2+0x15c>
 80187f4:	f3af 8000 	nop.w
 80187f8:	54400000 	.word	0x54400000
 80187fc:	3ff921fb 	.word	0x3ff921fb
 8018800:	1a626331 	.word	0x1a626331
 8018804:	3dd0b461 	.word	0x3dd0b461
 8018808:	1a600000 	.word	0x1a600000
 801880c:	3dd0b461 	.word	0x3dd0b461
 8018810:	2e037073 	.word	0x2e037073
 8018814:	3ba3198a 	.word	0x3ba3198a
 8018818:	6dc9c883 	.word	0x6dc9c883
 801881c:	3fe45f30 	.word	0x3fe45f30
 8018820:	2e000000 	.word	0x2e000000
 8018824:	3ba3198a 	.word	0x3ba3198a
 8018828:	252049c1 	.word	0x252049c1
 801882c:	397b839a 	.word	0x397b839a
 8018830:	00000000 	.word	0x00000000
 8018834:	41700000 	.word	0x41700000
 8018838:	3fe921fb 	.word	0x3fe921fb
 801883c:	4002d97b 	.word	0x4002d97b
 8018840:	413921fb 	.word	0x413921fb
 8018844:	0801978c 	.word	0x0801978c
 8018848:	7fefffff 	.word	0x7fefffff
 801884c:	0801980c 	.word	0x0801980c

08018850 <__kernel_cos>:
 8018850:	ee10 1a90 	vmov	r1, s1
 8018854:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8018858:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801885c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8018860:	da05      	bge.n	801886e <__kernel_cos+0x1e>
 8018862:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8018866:	ee17 3a90 	vmov	r3, s15
 801886a:	2b00      	cmp	r3, #0
 801886c:	d03d      	beq.n	80188ea <__kernel_cos+0x9a>
 801886e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8018872:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80188f0 <__kernel_cos+0xa0>
 8018876:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80188f8 <__kernel_cos+0xa8>
 801887a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801887e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018900 <__kernel_cos+0xb0>
 8018882:	eea6 7b03 	vfma.f64	d7, d6, d3
 8018886:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8018908 <__kernel_cos+0xb8>
 801888a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801888e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018910 <__kernel_cos+0xc0>
 8018892:	4b23      	ldr	r3, [pc, #140]	; (8018920 <__kernel_cos+0xd0>)
 8018894:	eea6 7b03 	vfma.f64	d7, d6, d3
 8018898:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8018918 <__kernel_cos+0xc8>
 801889c:	4299      	cmp	r1, r3
 801889e:	eea7 6b03 	vfma.f64	d6, d7, d3
 80188a2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80188a6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80188aa:	ee23 7b07 	vmul.f64	d7, d3, d7
 80188ae:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80188b2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80188b6:	dc04      	bgt.n	80188c2 <__kernel_cos+0x72>
 80188b8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80188bc:	ee34 0b46 	vsub.f64	d0, d4, d6
 80188c0:	4770      	bx	lr
 80188c2:	4b18      	ldr	r3, [pc, #96]	; (8018924 <__kernel_cos+0xd4>)
 80188c4:	4299      	cmp	r1, r3
 80188c6:	dc0d      	bgt.n	80188e4 <__kernel_cos+0x94>
 80188c8:	2200      	movs	r2, #0
 80188ca:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80188ce:	ec43 2b15 	vmov	d5, r2, r3
 80188d2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80188d6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80188da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80188de:	ee30 0b47 	vsub.f64	d0, d0, d7
 80188e2:	4770      	bx	lr
 80188e4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80188e8:	e7f3      	b.n	80188d2 <__kernel_cos+0x82>
 80188ea:	eeb0 0b44 	vmov.f64	d0, d4
 80188ee:	4770      	bx	lr
 80188f0:	be8838d4 	.word	0xbe8838d4
 80188f4:	bda8fae9 	.word	0xbda8fae9
 80188f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80188fc:	3e21ee9e 	.word	0x3e21ee9e
 8018900:	809c52ad 	.word	0x809c52ad
 8018904:	be927e4f 	.word	0xbe927e4f
 8018908:	19cb1590 	.word	0x19cb1590
 801890c:	3efa01a0 	.word	0x3efa01a0
 8018910:	16c15177 	.word	0x16c15177
 8018914:	bf56c16c 	.word	0xbf56c16c
 8018918:	5555554c 	.word	0x5555554c
 801891c:	3fa55555 	.word	0x3fa55555
 8018920:	3fd33332 	.word	0x3fd33332
 8018924:	3fe90000 	.word	0x3fe90000

08018928 <__kernel_rem_pio2>:
 8018928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801892c:	ed2d 8b06 	vpush	{d8-d10}
 8018930:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8018934:	469b      	mov	fp, r3
 8018936:	460f      	mov	r7, r1
 8018938:	4bcf      	ldr	r3, [pc, #828]	; (8018c78 <__kernel_rem_pio2+0x350>)
 801893a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 801893c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8018940:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8018944:	9000      	str	r0, [sp, #0]
 8018946:	f112 0f14 	cmn.w	r2, #20
 801894a:	bfa8      	it	ge
 801894c:	2318      	movge	r3, #24
 801894e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8018952:	bfb8      	it	lt
 8018954:	2300      	movlt	r3, #0
 8018956:	f06f 0417 	mvn.w	r4, #23
 801895a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8018c60 <__kernel_rem_pio2+0x338>
 801895e:	bfa4      	itt	ge
 8018960:	f1a2 0a03 	subge.w	sl, r2, #3
 8018964:	fb9a f3f3 	sdivge	r3, sl, r3
 8018968:	fb03 4404 	mla	r4, r3, r4, r4
 801896c:	1a5d      	subs	r5, r3, r1
 801896e:	4414      	add	r4, r2
 8018970:	eb09 0601 	add.w	r6, r9, r1
 8018974:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8018978:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 801897c:	2200      	movs	r2, #0
 801897e:	42b2      	cmp	r2, r6
 8018980:	dd12      	ble.n	80189a8 <__kernel_rem_pio2+0x80>
 8018982:	aa18      	add	r2, sp, #96	; 0x60
 8018984:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8018988:	460e      	mov	r6, r1
 801898a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 801898e:	f1cb 0a01 	rsb	sl, fp, #1
 8018992:	eb0a 0006 	add.w	r0, sl, r6
 8018996:	4581      	cmp	r9, r0
 8018998:	db25      	blt.n	80189e6 <__kernel_rem_pio2+0xbe>
 801899a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8018c60 <__kernel_rem_pio2+0x338>
 801899e:	f8dd e000 	ldr.w	lr, [sp]
 80189a2:	4615      	mov	r5, r2
 80189a4:	2000      	movs	r0, #0
 80189a6:	e015      	b.n	80189d4 <__kernel_rem_pio2+0xac>
 80189a8:	42d5      	cmn	r5, r2
 80189aa:	d409      	bmi.n	80189c0 <__kernel_rem_pio2+0x98>
 80189ac:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80189b0:	ee07 0a90 	vmov	s15, r0
 80189b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80189b8:	eca8 7b02 	vstmia	r8!, {d7}
 80189bc:	3201      	adds	r2, #1
 80189be:	e7de      	b.n	801897e <__kernel_rem_pio2+0x56>
 80189c0:	eeb0 7b46 	vmov.f64	d7, d6
 80189c4:	e7f8      	b.n	80189b8 <__kernel_rem_pio2+0x90>
 80189c6:	ecbe 5b02 	vldmia	lr!, {d5}
 80189ca:	ed95 6b00 	vldr	d6, [r5]
 80189ce:	3001      	adds	r0, #1
 80189d0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80189d4:	4288      	cmp	r0, r1
 80189d6:	f1a5 0508 	sub.w	r5, r5, #8
 80189da:	ddf4      	ble.n	80189c6 <__kernel_rem_pio2+0x9e>
 80189dc:	eca8 7b02 	vstmia	r8!, {d7}
 80189e0:	3208      	adds	r2, #8
 80189e2:	3601      	adds	r6, #1
 80189e4:	e7d5      	b.n	8018992 <__kernel_rem_pio2+0x6a>
 80189e6:	aa04      	add	r2, sp, #16
 80189e8:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8018c68 <__kernel_rem_pio2+0x340>
 80189ec:	ed9f aba0 	vldr	d10, [pc, #640]	; 8018c70 <__kernel_rem_pio2+0x348>
 80189f0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80189f4:	9201      	str	r2, [sp, #4]
 80189f6:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80189fa:	464e      	mov	r6, r9
 80189fc:	ab90      	add	r3, sp, #576	; 0x240
 80189fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8018a02:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8018a06:	ab04      	add	r3, sp, #16
 8018a08:	4618      	mov	r0, r3
 8018a0a:	4632      	mov	r2, r6
 8018a0c:	2a00      	cmp	r2, #0
 8018a0e:	dc4e      	bgt.n	8018aae <__kernel_rem_pio2+0x186>
 8018a10:	4620      	mov	r0, r4
 8018a12:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8018a16:	f000 fadf 	bl	8018fd8 <scalbn>
 8018a1a:	eeb0 8b40 	vmov.f64	d8, d0
 8018a1e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8018a22:	ee28 0b00 	vmul.f64	d0, d8, d0
 8018a26:	f000 fa63 	bl	8018ef0 <floor>
 8018a2a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8018a2e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8018a32:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8018a36:	2c00      	cmp	r4, #0
 8018a38:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8018a3c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8018a40:	ee38 8b40 	vsub.f64	d8, d8, d0
 8018a44:	ee17 8a90 	vmov	r8, s15
 8018a48:	dd46      	ble.n	8018ad8 <__kernel_rem_pio2+0x1b0>
 8018a4a:	1e70      	subs	r0, r6, #1
 8018a4c:	aa04      	add	r2, sp, #16
 8018a4e:	f1c4 0c18 	rsb	ip, r4, #24
 8018a52:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8018a56:	fa45 f20c 	asr.w	r2, r5, ip
 8018a5a:	4490      	add	r8, r2
 8018a5c:	fa02 f20c 	lsl.w	r2, r2, ip
 8018a60:	1aad      	subs	r5, r5, r2
 8018a62:	aa04      	add	r2, sp, #16
 8018a64:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8018a68:	f1c4 0217 	rsb	r2, r4, #23
 8018a6c:	4115      	asrs	r5, r2
 8018a6e:	2d00      	cmp	r5, #0
 8018a70:	dd41      	ble.n	8018af6 <__kernel_rem_pio2+0x1ce>
 8018a72:	f04f 0c00 	mov.w	ip, #0
 8018a76:	f108 0801 	add.w	r8, r8, #1
 8018a7a:	4660      	mov	r0, ip
 8018a7c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8018a80:	4566      	cmp	r6, ip
 8018a82:	dc69      	bgt.n	8018b58 <__kernel_rem_pio2+0x230>
 8018a84:	2c00      	cmp	r4, #0
 8018a86:	dd03      	ble.n	8018a90 <__kernel_rem_pio2+0x168>
 8018a88:	2c01      	cmp	r4, #1
 8018a8a:	d076      	beq.n	8018b7a <__kernel_rem_pio2+0x252>
 8018a8c:	2c02      	cmp	r4, #2
 8018a8e:	d07f      	beq.n	8018b90 <__kernel_rem_pio2+0x268>
 8018a90:	2d02      	cmp	r5, #2
 8018a92:	d130      	bne.n	8018af6 <__kernel_rem_pio2+0x1ce>
 8018a94:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018a98:	ee30 8b48 	vsub.f64	d8, d0, d8
 8018a9c:	b358      	cbz	r0, 8018af6 <__kernel_rem_pio2+0x1ce>
 8018a9e:	4620      	mov	r0, r4
 8018aa0:	9102      	str	r1, [sp, #8]
 8018aa2:	f000 fa99 	bl	8018fd8 <scalbn>
 8018aa6:	9902      	ldr	r1, [sp, #8]
 8018aa8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8018aac:	e023      	b.n	8018af6 <__kernel_rem_pio2+0x1ce>
 8018aae:	ee20 7b09 	vmul.f64	d7, d0, d9
 8018ab2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8018ab6:	3a01      	subs	r2, #1
 8018ab8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8018abc:	ad68      	add	r5, sp, #416	; 0x1a0
 8018abe:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8018ac2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8018ac6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8018aca:	eca0 0a01 	vstmia	r0!, {s0}
 8018ace:	ed95 0b00 	vldr	d0, [r5]
 8018ad2:	ee37 0b00 	vadd.f64	d0, d7, d0
 8018ad6:	e799      	b.n	8018a0c <__kernel_rem_pio2+0xe4>
 8018ad8:	d105      	bne.n	8018ae6 <__kernel_rem_pio2+0x1be>
 8018ada:	1e72      	subs	r2, r6, #1
 8018adc:	a804      	add	r0, sp, #16
 8018ade:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8018ae2:	15ed      	asrs	r5, r5, #23
 8018ae4:	e7c3      	b.n	8018a6e <__kernel_rem_pio2+0x146>
 8018ae6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8018aea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018af2:	da2f      	bge.n	8018b54 <__kernel_rem_pio2+0x22c>
 8018af4:	2500      	movs	r5, #0
 8018af6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018afe:	f040 8087 	bne.w	8018c10 <__kernel_rem_pio2+0x2e8>
 8018b02:	1e73      	subs	r3, r6, #1
 8018b04:	4618      	mov	r0, r3
 8018b06:	f04f 0c00 	mov.w	ip, #0
 8018b0a:	4548      	cmp	r0, r9
 8018b0c:	da47      	bge.n	8018b9e <__kernel_rem_pio2+0x276>
 8018b0e:	f1bc 0f00 	cmp.w	ip, #0
 8018b12:	d070      	beq.n	8018bf6 <__kernel_rem_pio2+0x2ce>
 8018b14:	aa04      	add	r2, sp, #16
 8018b16:	3c18      	subs	r4, #24
 8018b18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018b1c:	2a00      	cmp	r2, #0
 8018b1e:	d075      	beq.n	8018c0c <__kernel_rem_pio2+0x2e4>
 8018b20:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018b24:	4620      	mov	r0, r4
 8018b26:	9300      	str	r3, [sp, #0]
 8018b28:	f000 fa56 	bl	8018fd8 <scalbn>
 8018b2c:	9b00      	ldr	r3, [sp, #0]
 8018b2e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8018c68 <__kernel_rem_pio2+0x340>
 8018b32:	461a      	mov	r2, r3
 8018b34:	2a00      	cmp	r2, #0
 8018b36:	f280 80ac 	bge.w	8018c92 <__kernel_rem_pio2+0x36a>
 8018b3a:	4619      	mov	r1, r3
 8018b3c:	2000      	movs	r0, #0
 8018b3e:	2900      	cmp	r1, #0
 8018b40:	f2c0 80cd 	blt.w	8018cde <__kernel_rem_pio2+0x3b6>
 8018b44:	aa68      	add	r2, sp, #416	; 0x1a0
 8018b46:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8018b4a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8018c60 <__kernel_rem_pio2+0x338>
 8018b4e:	4e4b      	ldr	r6, [pc, #300]	; (8018c7c <__kernel_rem_pio2+0x354>)
 8018b50:	2200      	movs	r2, #0
 8018b52:	e0b8      	b.n	8018cc6 <__kernel_rem_pio2+0x39e>
 8018b54:	2502      	movs	r5, #2
 8018b56:	e78c      	b.n	8018a72 <__kernel_rem_pio2+0x14a>
 8018b58:	681a      	ldr	r2, [r3, #0]
 8018b5a:	b948      	cbnz	r0, 8018b70 <__kernel_rem_pio2+0x248>
 8018b5c:	b11a      	cbz	r2, 8018b66 <__kernel_rem_pio2+0x23e>
 8018b5e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8018b62:	601a      	str	r2, [r3, #0]
 8018b64:	2201      	movs	r2, #1
 8018b66:	f10c 0c01 	add.w	ip, ip, #1
 8018b6a:	3304      	adds	r3, #4
 8018b6c:	4610      	mov	r0, r2
 8018b6e:	e787      	b.n	8018a80 <__kernel_rem_pio2+0x158>
 8018b70:	ebae 0202 	sub.w	r2, lr, r2
 8018b74:	601a      	str	r2, [r3, #0]
 8018b76:	4602      	mov	r2, r0
 8018b78:	e7f5      	b.n	8018b66 <__kernel_rem_pio2+0x23e>
 8018b7a:	1e72      	subs	r2, r6, #1
 8018b7c:	ab04      	add	r3, sp, #16
 8018b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b82:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018b86:	f10d 0c10 	add.w	ip, sp, #16
 8018b8a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8018b8e:	e77f      	b.n	8018a90 <__kernel_rem_pio2+0x168>
 8018b90:	1e72      	subs	r2, r6, #1
 8018b92:	ab04      	add	r3, sp, #16
 8018b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018b9c:	e7f3      	b.n	8018b86 <__kernel_rem_pio2+0x25e>
 8018b9e:	aa04      	add	r2, sp, #16
 8018ba0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8018ba4:	3801      	subs	r0, #1
 8018ba6:	ea4c 0c02 	orr.w	ip, ip, r2
 8018baa:	e7ae      	b.n	8018b0a <__kernel_rem_pio2+0x1e2>
 8018bac:	3001      	adds	r0, #1
 8018bae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018bb2:	2a00      	cmp	r2, #0
 8018bb4:	d0fa      	beq.n	8018bac <__kernel_rem_pio2+0x284>
 8018bb6:	eb06 020b 	add.w	r2, r6, fp
 8018bba:	ad18      	add	r5, sp, #96	; 0x60
 8018bbc:	1c73      	adds	r3, r6, #1
 8018bbe:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8018bc2:	4406      	add	r6, r0
 8018bc4:	429e      	cmp	r6, r3
 8018bc6:	f6ff af19 	blt.w	80189fc <__kernel_rem_pio2+0xd4>
 8018bca:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8018bce:	9d00      	ldr	r5, [sp, #0]
 8018bd0:	ee07 0a90 	vmov	s15, r0
 8018bd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018bd8:	2000      	movs	r0, #0
 8018bda:	eca2 7b02 	vstmia	r2!, {d7}
 8018bde:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018c60 <__kernel_rem_pio2+0x338>
 8018be2:	4694      	mov	ip, r2
 8018be4:	4288      	cmp	r0, r1
 8018be6:	dd09      	ble.n	8018bfc <__kernel_rem_pio2+0x2d4>
 8018be8:	a868      	add	r0, sp, #416	; 0x1a0
 8018bea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8018bee:	ed80 7b00 	vstr	d7, [r0]
 8018bf2:	3301      	adds	r3, #1
 8018bf4:	e7e6      	b.n	8018bc4 <__kernel_rem_pio2+0x29c>
 8018bf6:	9b01      	ldr	r3, [sp, #4]
 8018bf8:	2001      	movs	r0, #1
 8018bfa:	e7d8      	b.n	8018bae <__kernel_rem_pio2+0x286>
 8018bfc:	ecb5 5b02 	vldmia	r5!, {d5}
 8018c00:	ed3c 6b02 	vldmdb	ip!, {d6}
 8018c04:	3001      	adds	r0, #1
 8018c06:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018c0a:	e7eb      	b.n	8018be4 <__kernel_rem_pio2+0x2bc>
 8018c0c:	3b01      	subs	r3, #1
 8018c0e:	e781      	b.n	8018b14 <__kernel_rem_pio2+0x1ec>
 8018c10:	4260      	negs	r0, r4
 8018c12:	eeb0 0b48 	vmov.f64	d0, d8
 8018c16:	f000 f9df 	bl	8018fd8 <scalbn>
 8018c1a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8018c70 <__kernel_rem_pio2+0x348>
 8018c1e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8018c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c26:	db2b      	blt.n	8018c80 <__kernel_rem_pio2+0x358>
 8018c28:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8018c68 <__kernel_rem_pio2+0x340>
 8018c2c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018c30:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8018c34:	aa04      	add	r2, sp, #16
 8018c36:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8018c3a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8018c3e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8018c42:	a904      	add	r1, sp, #16
 8018c44:	ee10 3a10 	vmov	r3, s0
 8018c48:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8018c4c:	ee17 2a10 	vmov	r2, s14
 8018c50:	1c73      	adds	r3, r6, #1
 8018c52:	3418      	adds	r4, #24
 8018c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018c58:	e762      	b.n	8018b20 <__kernel_rem_pio2+0x1f8>
 8018c5a:	bf00      	nop
 8018c5c:	f3af 8000 	nop.w
	...
 8018c6c:	3e700000 	.word	0x3e700000
 8018c70:	00000000 	.word	0x00000000
 8018c74:	41700000 	.word	0x41700000
 8018c78:	08019958 	.word	0x08019958
 8018c7c:	08019918 	.word	0x08019918
 8018c80:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8018c84:	aa04      	add	r2, sp, #16
 8018c86:	ee10 3a10 	vmov	r3, s0
 8018c8a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8018c8e:	4633      	mov	r3, r6
 8018c90:	e746      	b.n	8018b20 <__kernel_rem_pio2+0x1f8>
 8018c92:	a804      	add	r0, sp, #16
 8018c94:	a968      	add	r1, sp, #416	; 0x1a0
 8018c96:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8018c9a:	9000      	str	r0, [sp, #0]
 8018c9c:	ee07 0a90 	vmov	s15, r0
 8018ca0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018ca4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018ca8:	3a01      	subs	r2, #1
 8018caa:	ee27 7b00 	vmul.f64	d7, d7, d0
 8018cae:	ee20 0b06 	vmul.f64	d0, d0, d6
 8018cb2:	ed81 7b00 	vstr	d7, [r1]
 8018cb6:	e73d      	b.n	8018b34 <__kernel_rem_pio2+0x20c>
 8018cb8:	ecb6 5b02 	vldmia	r6!, {d5}
 8018cbc:	ecb4 6b02 	vldmia	r4!, {d6}
 8018cc0:	3201      	adds	r2, #1
 8018cc2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018cc6:	454a      	cmp	r2, r9
 8018cc8:	dc01      	bgt.n	8018cce <__kernel_rem_pio2+0x3a6>
 8018cca:	4290      	cmp	r0, r2
 8018ccc:	daf4      	bge.n	8018cb8 <__kernel_rem_pio2+0x390>
 8018cce:	aa40      	add	r2, sp, #256	; 0x100
 8018cd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018cd4:	ed82 7b00 	vstr	d7, [r2]
 8018cd8:	3901      	subs	r1, #1
 8018cda:	3001      	adds	r0, #1
 8018cdc:	e72f      	b.n	8018b3e <__kernel_rem_pio2+0x216>
 8018cde:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8018ce0:	2a02      	cmp	r2, #2
 8018ce2:	dc0a      	bgt.n	8018cfa <__kernel_rem_pio2+0x3d2>
 8018ce4:	2a00      	cmp	r2, #0
 8018ce6:	dc5a      	bgt.n	8018d9e <__kernel_rem_pio2+0x476>
 8018ce8:	d039      	beq.n	8018d5e <__kernel_rem_pio2+0x436>
 8018cea:	f008 0007 	and.w	r0, r8, #7
 8018cee:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8018cf2:	ecbd 8b06 	vpop	{d8-d10}
 8018cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cfa:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8018cfc:	2a03      	cmp	r2, #3
 8018cfe:	d1f4      	bne.n	8018cea <__kernel_rem_pio2+0x3c2>
 8018d00:	aa40      	add	r2, sp, #256	; 0x100
 8018d02:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018d06:	4611      	mov	r1, r2
 8018d08:	4618      	mov	r0, r3
 8018d0a:	2800      	cmp	r0, #0
 8018d0c:	f1a1 0108 	sub.w	r1, r1, #8
 8018d10:	dc52      	bgt.n	8018db8 <__kernel_rem_pio2+0x490>
 8018d12:	4619      	mov	r1, r3
 8018d14:	2901      	cmp	r1, #1
 8018d16:	f1a2 0208 	sub.w	r2, r2, #8
 8018d1a:	dc5d      	bgt.n	8018dd8 <__kernel_rem_pio2+0x4b0>
 8018d1c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8018e20 <__kernel_rem_pio2+0x4f8>
 8018d20:	2b01      	cmp	r3, #1
 8018d22:	dc69      	bgt.n	8018df8 <__kernel_rem_pio2+0x4d0>
 8018d24:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8018d28:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8018d2c:	2d00      	cmp	r5, #0
 8018d2e:	d16c      	bne.n	8018e0a <__kernel_rem_pio2+0x4e2>
 8018d30:	ed87 5b00 	vstr	d5, [r7]
 8018d34:	ed87 6b02 	vstr	d6, [r7, #8]
 8018d38:	ed87 7b04 	vstr	d7, [r7, #16]
 8018d3c:	e7d5      	b.n	8018cea <__kernel_rem_pio2+0x3c2>
 8018d3e:	aa40      	add	r2, sp, #256	; 0x100
 8018d40:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018d44:	ed92 6b00 	vldr	d6, [r2]
 8018d48:	3b01      	subs	r3, #1
 8018d4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	daf5      	bge.n	8018d3e <__kernel_rem_pio2+0x416>
 8018d52:	b10d      	cbz	r5, 8018d58 <__kernel_rem_pio2+0x430>
 8018d54:	eeb1 7b47 	vneg.f64	d7, d7
 8018d58:	ed87 7b00 	vstr	d7, [r7]
 8018d5c:	e7c5      	b.n	8018cea <__kernel_rem_pio2+0x3c2>
 8018d5e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8018e20 <__kernel_rem_pio2+0x4f8>
 8018d62:	e7f4      	b.n	8018d4e <__kernel_rem_pio2+0x426>
 8018d64:	a940      	add	r1, sp, #256	; 0x100
 8018d66:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018d6a:	ed91 7b00 	vldr	d7, [r1]
 8018d6e:	3a01      	subs	r2, #1
 8018d70:	ee36 6b07 	vadd.f64	d6, d6, d7
 8018d74:	2a00      	cmp	r2, #0
 8018d76:	daf5      	bge.n	8018d64 <__kernel_rem_pio2+0x43c>
 8018d78:	b1ad      	cbz	r5, 8018da6 <__kernel_rem_pio2+0x47e>
 8018d7a:	eeb1 7b46 	vneg.f64	d7, d6
 8018d7e:	ed87 7b00 	vstr	d7, [r7]
 8018d82:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8018d86:	a942      	add	r1, sp, #264	; 0x108
 8018d88:	2201      	movs	r2, #1
 8018d8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018d8e:	4293      	cmp	r3, r2
 8018d90:	da0c      	bge.n	8018dac <__kernel_rem_pio2+0x484>
 8018d92:	b10d      	cbz	r5, 8018d98 <__kernel_rem_pio2+0x470>
 8018d94:	eeb1 7b47 	vneg.f64	d7, d7
 8018d98:	ed87 7b02 	vstr	d7, [r7, #8]
 8018d9c:	e7a5      	b.n	8018cea <__kernel_rem_pio2+0x3c2>
 8018d9e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8018e20 <__kernel_rem_pio2+0x4f8>
 8018da2:	461a      	mov	r2, r3
 8018da4:	e7e6      	b.n	8018d74 <__kernel_rem_pio2+0x44c>
 8018da6:	eeb0 7b46 	vmov.f64	d7, d6
 8018daa:	e7e8      	b.n	8018d7e <__kernel_rem_pio2+0x456>
 8018dac:	ecb1 6b02 	vldmia	r1!, {d6}
 8018db0:	3201      	adds	r2, #1
 8018db2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018db6:	e7ea      	b.n	8018d8e <__kernel_rem_pio2+0x466>
 8018db8:	ed91 7b00 	vldr	d7, [r1]
 8018dbc:	ed91 5b02 	vldr	d5, [r1, #8]
 8018dc0:	3801      	subs	r0, #1
 8018dc2:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018dc6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018dca:	ed81 6b00 	vstr	d6, [r1]
 8018dce:	ee37 7b05 	vadd.f64	d7, d7, d5
 8018dd2:	ed81 7b02 	vstr	d7, [r1, #8]
 8018dd6:	e798      	b.n	8018d0a <__kernel_rem_pio2+0x3e2>
 8018dd8:	ed92 7b00 	vldr	d7, [r2]
 8018ddc:	ed92 5b02 	vldr	d5, [r2, #8]
 8018de0:	3901      	subs	r1, #1
 8018de2:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018de6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018dea:	ed82 6b00 	vstr	d6, [r2]
 8018dee:	ee37 7b05 	vadd.f64	d7, d7, d5
 8018df2:	ed82 7b02 	vstr	d7, [r2, #8]
 8018df6:	e78d      	b.n	8018d14 <__kernel_rem_pio2+0x3ec>
 8018df8:	aa40      	add	r2, sp, #256	; 0x100
 8018dfa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018dfe:	ed92 6b00 	vldr	d6, [r2]
 8018e02:	3b01      	subs	r3, #1
 8018e04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018e08:	e78a      	b.n	8018d20 <__kernel_rem_pio2+0x3f8>
 8018e0a:	eeb1 5b45 	vneg.f64	d5, d5
 8018e0e:	eeb1 6b46 	vneg.f64	d6, d6
 8018e12:	ed87 5b00 	vstr	d5, [r7]
 8018e16:	eeb1 7b47 	vneg.f64	d7, d7
 8018e1a:	ed87 6b02 	vstr	d6, [r7, #8]
 8018e1e:	e78b      	b.n	8018d38 <__kernel_rem_pio2+0x410>
	...

08018e28 <__kernel_sin>:
 8018e28:	ee10 3a90 	vmov	r3, s1
 8018e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018e30:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8018e34:	da04      	bge.n	8018e40 <__kernel_sin+0x18>
 8018e36:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8018e3a:	ee17 3a90 	vmov	r3, s15
 8018e3e:	b35b      	cbz	r3, 8018e98 <__kernel_sin+0x70>
 8018e40:	ee20 6b00 	vmul.f64	d6, d0, d0
 8018e44:	ee20 5b06 	vmul.f64	d5, d0, d6
 8018e48:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8018ea0 <__kernel_sin+0x78>
 8018e4c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8018ea8 <__kernel_sin+0x80>
 8018e50:	eea6 4b07 	vfma.f64	d4, d6, d7
 8018e54:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8018eb0 <__kernel_sin+0x88>
 8018e58:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018e5c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8018eb8 <__kernel_sin+0x90>
 8018e60:	eea7 4b06 	vfma.f64	d4, d7, d6
 8018e64:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8018ec0 <__kernel_sin+0x98>
 8018e68:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018e6c:	b930      	cbnz	r0, 8018e7c <__kernel_sin+0x54>
 8018e6e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8018ec8 <__kernel_sin+0xa0>
 8018e72:	eea6 4b07 	vfma.f64	d4, d6, d7
 8018e76:	eea4 0b05 	vfma.f64	d0, d4, d5
 8018e7a:	4770      	bx	lr
 8018e7c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8018e80:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8018e84:	eea1 7b04 	vfma.f64	d7, d1, d4
 8018e88:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8018e8c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8018ed0 <__kernel_sin+0xa8>
 8018e90:	eea5 1b07 	vfma.f64	d1, d5, d7
 8018e94:	ee30 0b41 	vsub.f64	d0, d0, d1
 8018e98:	4770      	bx	lr
 8018e9a:	bf00      	nop
 8018e9c:	f3af 8000 	nop.w
 8018ea0:	5acfd57c 	.word	0x5acfd57c
 8018ea4:	3de5d93a 	.word	0x3de5d93a
 8018ea8:	8a2b9ceb 	.word	0x8a2b9ceb
 8018eac:	be5ae5e6 	.word	0xbe5ae5e6
 8018eb0:	57b1fe7d 	.word	0x57b1fe7d
 8018eb4:	3ec71de3 	.word	0x3ec71de3
 8018eb8:	19c161d5 	.word	0x19c161d5
 8018ebc:	bf2a01a0 	.word	0xbf2a01a0
 8018ec0:	1110f8a6 	.word	0x1110f8a6
 8018ec4:	3f811111 	.word	0x3f811111
 8018ec8:	55555549 	.word	0x55555549
 8018ecc:	bfc55555 	.word	0xbfc55555
 8018ed0:	55555549 	.word	0x55555549
 8018ed4:	3fc55555 	.word	0x3fc55555

08018ed8 <fabs>:
 8018ed8:	ec51 0b10 	vmov	r0, r1, d0
 8018edc:	ee10 2a10 	vmov	r2, s0
 8018ee0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018ee4:	ec43 2b10 	vmov	d0, r2, r3
 8018ee8:	4770      	bx	lr
 8018eea:	0000      	movs	r0, r0
 8018eec:	0000      	movs	r0, r0
	...

08018ef0 <floor>:
 8018ef0:	ee10 1a90 	vmov	r1, s1
 8018ef4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018ef8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8018efc:	2b13      	cmp	r3, #19
 8018efe:	b530      	push	{r4, r5, lr}
 8018f00:	ee10 0a10 	vmov	r0, s0
 8018f04:	ee10 5a10 	vmov	r5, s0
 8018f08:	dc31      	bgt.n	8018f6e <floor+0x7e>
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	da15      	bge.n	8018f3a <floor+0x4a>
 8018f0e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018fc8 <floor+0xd8>
 8018f12:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018f16:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f1e:	dd07      	ble.n	8018f30 <floor+0x40>
 8018f20:	2900      	cmp	r1, #0
 8018f22:	da4e      	bge.n	8018fc2 <floor+0xd2>
 8018f24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018f28:	4318      	orrs	r0, r3
 8018f2a:	d001      	beq.n	8018f30 <floor+0x40>
 8018f2c:	4928      	ldr	r1, [pc, #160]	; (8018fd0 <floor+0xe0>)
 8018f2e:	2000      	movs	r0, #0
 8018f30:	460b      	mov	r3, r1
 8018f32:	4602      	mov	r2, r0
 8018f34:	ec43 2b10 	vmov	d0, r2, r3
 8018f38:	e020      	b.n	8018f7c <floor+0x8c>
 8018f3a:	4a26      	ldr	r2, [pc, #152]	; (8018fd4 <floor+0xe4>)
 8018f3c:	411a      	asrs	r2, r3
 8018f3e:	ea01 0402 	and.w	r4, r1, r2
 8018f42:	4304      	orrs	r4, r0
 8018f44:	d01a      	beq.n	8018f7c <floor+0x8c>
 8018f46:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018fc8 <floor+0xd8>
 8018f4a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018f4e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f56:	ddeb      	ble.n	8018f30 <floor+0x40>
 8018f58:	2900      	cmp	r1, #0
 8018f5a:	bfbe      	ittt	lt
 8018f5c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8018f60:	fa40 f303 	asrlt.w	r3, r0, r3
 8018f64:	18c9      	addlt	r1, r1, r3
 8018f66:	ea21 0102 	bic.w	r1, r1, r2
 8018f6a:	2000      	movs	r0, #0
 8018f6c:	e7e0      	b.n	8018f30 <floor+0x40>
 8018f6e:	2b33      	cmp	r3, #51	; 0x33
 8018f70:	dd05      	ble.n	8018f7e <floor+0x8e>
 8018f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018f76:	d101      	bne.n	8018f7c <floor+0x8c>
 8018f78:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018f7c:	bd30      	pop	{r4, r5, pc}
 8018f7e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8018f82:	f04f 32ff 	mov.w	r2, #4294967295
 8018f86:	40e2      	lsrs	r2, r4
 8018f88:	4202      	tst	r2, r0
 8018f8a:	d0f7      	beq.n	8018f7c <floor+0x8c>
 8018f8c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8018fc8 <floor+0xd8>
 8018f90:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018f94:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f9c:	ddc8      	ble.n	8018f30 <floor+0x40>
 8018f9e:	2900      	cmp	r1, #0
 8018fa0:	da02      	bge.n	8018fa8 <floor+0xb8>
 8018fa2:	2b14      	cmp	r3, #20
 8018fa4:	d103      	bne.n	8018fae <floor+0xbe>
 8018fa6:	3101      	adds	r1, #1
 8018fa8:	ea20 0002 	bic.w	r0, r0, r2
 8018fac:	e7c0      	b.n	8018f30 <floor+0x40>
 8018fae:	2401      	movs	r4, #1
 8018fb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018fb4:	fa04 f303 	lsl.w	r3, r4, r3
 8018fb8:	4418      	add	r0, r3
 8018fba:	42a8      	cmp	r0, r5
 8018fbc:	bf38      	it	cc
 8018fbe:	1909      	addcc	r1, r1, r4
 8018fc0:	e7f2      	b.n	8018fa8 <floor+0xb8>
 8018fc2:	2000      	movs	r0, #0
 8018fc4:	4601      	mov	r1, r0
 8018fc6:	e7b3      	b.n	8018f30 <floor+0x40>
 8018fc8:	8800759c 	.word	0x8800759c
 8018fcc:	7e37e43c 	.word	0x7e37e43c
 8018fd0:	bff00000 	.word	0xbff00000
 8018fd4:	000fffff 	.word	0x000fffff

08018fd8 <scalbn>:
 8018fd8:	b082      	sub	sp, #8
 8018fda:	ed8d 0b00 	vstr	d0, [sp]
 8018fde:	9b01      	ldr	r3, [sp, #4]
 8018fe0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018fe4:	b9a2      	cbnz	r2, 8019010 <scalbn+0x38>
 8018fe6:	9a00      	ldr	r2, [sp, #0]
 8018fe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018fec:	4313      	orrs	r3, r2
 8018fee:	d03a      	beq.n	8019066 <scalbn+0x8e>
 8018ff0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80190c8 <scalbn+0xf0>
 8018ff4:	4b40      	ldr	r3, [pc, #256]	; (80190f8 <scalbn+0x120>)
 8018ff6:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018ffa:	4298      	cmp	r0, r3
 8018ffc:	ed8d 7b00 	vstr	d7, [sp]
 8019000:	da11      	bge.n	8019026 <scalbn+0x4e>
 8019002:	ed9f 7b33 	vldr	d7, [pc, #204]	; 80190d0 <scalbn+0xf8>
 8019006:	ed9d 6b00 	vldr	d6, [sp]
 801900a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801900e:	e007      	b.n	8019020 <scalbn+0x48>
 8019010:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019014:	428a      	cmp	r2, r1
 8019016:	d10a      	bne.n	801902e <scalbn+0x56>
 8019018:	ed9d 7b00 	vldr	d7, [sp]
 801901c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019020:	ed8d 7b00 	vstr	d7, [sp]
 8019024:	e01f      	b.n	8019066 <scalbn+0x8e>
 8019026:	9b01      	ldr	r3, [sp, #4]
 8019028:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801902c:	3a36      	subs	r2, #54	; 0x36
 801902e:	4402      	add	r2, r0
 8019030:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019034:	428a      	cmp	r2, r1
 8019036:	dd0a      	ble.n	801904e <scalbn+0x76>
 8019038:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80190d8 <scalbn+0x100>
 801903c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80190e0 <scalbn+0x108>
 8019040:	eeb0 6b47 	vmov.f64	d6, d7
 8019044:	9b01      	ldr	r3, [sp, #4]
 8019046:	2b00      	cmp	r3, #0
 8019048:	fe27 7b05 	vselge.f64	d7, d7, d5
 801904c:	e7dd      	b.n	801900a <scalbn+0x32>
 801904e:	2a00      	cmp	r2, #0
 8019050:	dd0d      	ble.n	801906e <scalbn+0x96>
 8019052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019056:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801905a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801905e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019062:	e9cd 0100 	strd	r0, r1, [sp]
 8019066:	ed9d 0b00 	vldr	d0, [sp]
 801906a:	b002      	add	sp, #8
 801906c:	4770      	bx	lr
 801906e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019072:	da18      	bge.n	80190a6 <scalbn+0xce>
 8019074:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019078:	4298      	cmp	r0, r3
 801907a:	9b01      	ldr	r3, [sp, #4]
 801907c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019080:	dd09      	ble.n	8019096 <scalbn+0xbe>
 8019082:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80190d8 <scalbn+0x100>
 8019086:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80190e0 <scalbn+0x108>
 801908a:	eeb0 6b47 	vmov.f64	d6, d7
 801908e:	2b00      	cmp	r3, #0
 8019090:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8019094:	e7b9      	b.n	801900a <scalbn+0x32>
 8019096:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80190d0 <scalbn+0xf8>
 801909a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80190e8 <scalbn+0x110>
 801909e:	eeb0 6b47 	vmov.f64	d6, d7
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	e7f4      	b.n	8019090 <scalbn+0xb8>
 80190a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80190aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80190ae:	3236      	adds	r2, #54	; 0x36
 80190b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80190b4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80190b8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80190f0 <scalbn+0x118>
 80190bc:	ec41 0b17 	vmov	d7, r0, r1
 80190c0:	e7a3      	b.n	801900a <scalbn+0x32>
 80190c2:	bf00      	nop
 80190c4:	f3af 8000 	nop.w
 80190c8:	00000000 	.word	0x00000000
 80190cc:	43500000 	.word	0x43500000
 80190d0:	c2f8f359 	.word	0xc2f8f359
 80190d4:	01a56e1f 	.word	0x01a56e1f
 80190d8:	8800759c 	.word	0x8800759c
 80190dc:	7e37e43c 	.word	0x7e37e43c
 80190e0:	8800759c 	.word	0x8800759c
 80190e4:	fe37e43c 	.word	0xfe37e43c
 80190e8:	c2f8f359 	.word	0xc2f8f359
 80190ec:	81a56e1f 	.word	0x81a56e1f
 80190f0:	00000000 	.word	0x00000000
 80190f4:	3c900000 	.word	0x3c900000
 80190f8:	ffff3cb0 	.word	0xffff3cb0

080190fc <_init>:
 80190fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190fe:	bf00      	nop
 8019100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019102:	bc08      	pop	{r3}
 8019104:	469e      	mov	lr, r3
 8019106:	4770      	bx	lr

08019108 <_fini>:
 8019108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801910a:	bf00      	nop
 801910c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801910e:	bc08      	pop	{r3}
 8019110:	469e      	mov	lr, r3
 8019112:	4770      	bx	lr
